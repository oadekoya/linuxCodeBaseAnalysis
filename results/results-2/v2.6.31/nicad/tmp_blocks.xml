<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="20" endline="23">
{
    mount_initrd = 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="28" endline="39">
{
    static char *argv [] = {"linuxrc", NULL,};
    extern char *envp_init [];
    sys_close (old_fd);
    sys_close (root_fd);
    sys_close (0);
    sys_close (1);
    sys_close (2);
    sys_setsid ();
    (void) sys_open ("/dev/console", O_RDWR, 0);
    (void) sys_dup (0);
    (void) sys_dup (0);
    return kernel_execve (shell, argv, envp_init);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="42" endline="109">
{
    int error;
    int pid;
    real_root_dev = new_encode_dev (ROOT_DEV);
    create_dev ("/dev/root.old", Root_RAM0);
    mount_block_root ("/dev/root.old", root_mountflags & ~ MS_RDONLY);
    sys_mkdir ("/old", 0700);
    root_fd = sys_open ("/", 0, 0);
    old_fd = sys_open ("/old", 0, 0);
    sys_chdir ("/root");
    sys_mount (".", "/", NULL, MS_MOVE, NULL);
    sys_chroot (".");
    current->flags |= PF_FREEZER_SKIP;
    pid = kernel_thread (do_linuxrc, "/linuxrc", SIGCHLD);
    if (pid > 0)
        while (pid != sys_wait4 (-1, NULL, 0, NULL))
            yield ();
    current->flags &= ~PF_FREEZER_SKIP;
    sys_fchdir (old_fd);
    sys_mount ("/", ".", NULL, MS_MOVE, NULL);
    sys_fchdir (root_fd);
    sys_chroot (".");
    sys_close (old_fd);
    sys_close (root_fd);
    if (new_decode_dev (real_root_dev) == Root_RAM0) {
        sys_chdir ("/old");
        return;
    }
    ROOT_DEV = new_decode_dev (real_root_dev);
    mount_root ();
    printk (KERN_NOTICE "Trying to move old root to /initrd ... ");
    error = sys_mount ("/old", "/root/initrd", NULL, MS_MOVE, NULL);
    if (!error)
        printk ("okay\n");
    else {
        int fd = sys_open ("/dev/root.old", O_RDWR, 0);
        if (error == -ENOENT)
            printk ("/initrd does not exist. Ignored.\n");
        else
            printk ("failed\n");
        printk (KERN_NOTICE "Unmounting old root\n");
        sys_umount ("/old", MNT_DETACH);
        printk (KERN_NOTICE "Trying to free ramdisk memory ... ");
        if (fd < 0) {
            error = fd;
        }
        else {
            error = sys_ioctl (fd, BLKFLSBUF, 0);
            sys_close (fd);
        }
        printk (! error ? "okay\n" : "failed\n");
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="80" endline="83">
{
    sys_chdir ("/old");
    return;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="92" endline="108">
{
    int fd = sys_open ("/dev/root.old", O_RDWR, 0);
    if (error == -ENOENT)
        printk ("/initrd does not exist. Ignored.\n");
    else
        printk ("failed\n");
    printk (KERN_NOTICE "Unmounting old root\n");
    sys_umount ("/old", MNT_DETACH);
    printk (KERN_NOTICE "Trying to free ramdisk memory ... ");
    if (fd < 0) {
        error = fd;
    }
    else {
        error = sys_ioctl (fd, BLKFLSBUF, 0);
        sys_close (fd);
    }
    printk (! error ? "okay\n" : "failed\n");
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="101" endline="103">
{
    error = fd;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="103" endline="106">
{
    error = sys_ioctl (fd, BLKFLSBUF, 0);
    sys_close (fd);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="112" endline="129">
{
    if (mount_initrd) {
        create_dev ("/dev/ram", Root_RAM0);
        if (rd_load_image ("/initrd.image") && ROOT_DEV != Root_RAM0) {
            sys_unlink ("/initrd.image");
            handle_initrd ();
            return 1;
        }
    }
    sys_unlink ("/initrd.image");
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="113" endline="126">
{
    create_dev ("/dev/ram", Root_RAM0);
    if (rd_load_image ("/initrd.image") && ROOT_DEV != Root_RAM0) {
        sys_unlink ("/initrd.image");
        handle_initrd ();
        return 1;
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_initrd.c.ifdefed" startline="121" endline="125">
{
    sys_unlink ("/initrd.image");
    handle_initrd ();
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="20" endline="23">
{
    rd_prompt = simple_strtol (str, NULL, 0) & 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="29" endline="32">
{
    rd_image_start = simple_strtol (str, NULL, 0);
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="53" endline="155">
{
    const int size = 512;
    struct minix_super_block *minixsb;
    struct ext2_super_block *ext2sb;
    struct romfs_super_block *romfsb;
    struct cramfs_super *cramfsb;
    struct squashfs_super_block *squashfsb;
    int nblocks = -1;
    unsigned char *buf;
    const char *compress_name;
    buf = kmalloc (size, GFP_KERNEL);
    if (!buf)
        return -1;
    minixsb = (struct minix_super_block *) buf;
    ext2sb = (struct ext2_super_block *) buf;
    romfsb = (struct romfs_super_block *) buf;
    cramfsb = (struct cramfs_super *) buf;
    squashfsb = (struct squashfs_super_block *) buf;
    memset (buf, 0xe5, size);
    sys_lseek (fd, start_block * BLOCK_SIZE, 0);
    sys_read (fd, buf, size);
    *decompressor = decompress_method (buf, size, &compress_name);
    if (compress_name) {
        printk (KERN_NOTICE "RAMDISK: %s image found at block %d\n", compress_name, start_block);
        if (!*decompressor)
            printk (KERN_EMERG "RAMDISK: %s decompressor not configured!\n", compress_name);
        nblocks = 0;
        goto done;
    }
    if (romfsb->word0 == ROMSB_WORD0 && romfsb->word1 == ROMSB_WORD1) {
        printk (KERN_NOTICE "RAMDISK: romfs filesystem found at block %d\n", start_block);
        nblocks = (ntohl (romfsb->size) + BLOCK_SIZE - 1) >> BLOCK_SIZE_BITS;
        goto done;
    }
    if (cramfsb->magic == CRAMFS_MAGIC) {
        printk (KERN_NOTICE "RAMDISK: cramfs filesystem found at block %d\n", start_block);
        nblocks = (cramfsb->size + BLOCK_SIZE - 1) >> BLOCK_SIZE_BITS;
        goto done;
    }
    if (le32_to_cpu (squashfsb->s_magic) == SQUASHFS_MAGIC) {
        printk (KERN_NOTICE "RAMDISK: squashfs filesystem found at block %d\n", start_block);
        nblocks = (le64_to_cpu (squashfsb->bytes_used) + BLOCK_SIZE - 1) >> BLOCK_SIZE_BITS;
        goto done;
    }
    sys_lseek (fd, (start_block + 1) * BLOCK_SIZE, 0);
    sys_read (fd, buf, size);
    if (minixsb->s_magic == MINIX_SUPER_MAGIC || minixsb->s_magic == MINIX_SUPER_MAGIC2) {
        printk (KERN_NOTICE "RAMDISK: Minix filesystem found at block %d\n", start_block);
        nblocks = minixsb->s_nzones << minixsb->s_log_zone_size;
        goto done;
    }
    if (ext2sb->s_magic == cpu_to_le16 (EXT2_SUPER_MAGIC)) {
        printk (KERN_NOTICE "RAMDISK: ext2 filesystem found at block %d\n", start_block);
        nblocks = le32_to_cpu (ext2sb->s_blocks_count) << le32_to_cpu (ext2sb->s_log_block_size);
        goto done;
    }
    printk (KERN_NOTICE "RAMDISK: Couldn't find valid RAM disk image starting at %d.\n", start_block);
done :
    sys_lseek (fd, start_block *BLOCK_SIZE, 0);
    kfree (buf);
    return nblocks;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="82" endline="91">
{
    printk (KERN_NOTICE "RAMDISK: %s image found at block %d\n", compress_name, start_block);
    if (!*decompressor)
        printk (KERN_EMERG "RAMDISK: %s decompressor not configured!\n", compress_name);
    nblocks = 0;
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="95" endline="101">
{
    printk (KERN_NOTICE "RAMDISK: romfs filesystem found at block %d\n", start_block);
    nblocks = (ntohl (romfsb->size) + BLOCK_SIZE - 1) >> BLOCK_SIZE_BITS;
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="103" endline="109">
{
    printk (KERN_NOTICE "RAMDISK: cramfs filesystem found at block %d\n", start_block);
    nblocks = (cramfsb->size + BLOCK_SIZE - 1) >> BLOCK_SIZE_BITS;
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="112" endline="119">
{
    printk (KERN_NOTICE "RAMDISK: squashfs filesystem found at block %d\n", start_block);
    nblocks = (le64_to_cpu (squashfsb->bytes_used) + BLOCK_SIZE - 1) >> BLOCK_SIZE_BITS;
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="129" endline="135">
{
    printk (KERN_NOTICE "RAMDISK: Minix filesystem found at block %d\n", start_block);
    nblocks = minixsb->s_nzones << minixsb->s_log_zone_size;
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="138" endline="145">
{
    printk (KERN_NOTICE "RAMDISK: ext2 filesystem found at block %d\n", start_block);
    nblocks = le32_to_cpu (ext2sb->s_blocks_count) << le32_to_cpu (ext2sb->s_log_block_size);
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="158" endline="271">
{
    int res = 0;
    int in_fd, out_fd;
    unsigned long rd_blocks, devblocks;
    int nblocks, i, disk;
    char *buf = NULL;
    unsigned short rotate = 0;
    decompress_fn decompressor = NULL;
    out_fd = sys_open ("/dev/ram", O_RDWR, 0);
    if (out_fd < 0)
        goto out;
    in_fd = sys_open (from, O_RDONLY, 0);
    if (in_fd < 0)
        goto noclose_input;
    nblocks = identify_ramdisk_image (in_fd, rd_image_start, &decompressor);
    if (nblocks < 0)
        goto done;
    if (nblocks == 0) {
        if (crd_load (in_fd, out_fd, decompressor) == 0)
            goto successful_load;
        goto done;
    }
    if (sys_ioctl (out_fd, BLKGETSIZE, (unsigned long) &rd_blocks) < 0)
        rd_blocks = 0;
    else
        rd_blocks >>= 1;
    if (nblocks > rd_blocks) {
        printk ("RAMDISK: image too big! (%dKiB/%ldKiB)\n", nblocks, rd_blocks);
        goto done;
    }
    if (sys_ioctl (in_fd, BLKGETSIZE, (unsigned long) &devblocks) < 0)
        devblocks = 0;
    else
        devblocks >>= 1;
    if (strcmp (from, "/initrd.image") == 0)
        devblocks = nblocks;
    if (devblocks == 0) {
        printk (KERN_ERR "RAMDISK: could not determine device size\n");
        goto done;
    }
    buf = kmalloc (BLOCK_SIZE, GFP_KERNEL);
    if (!buf) {
        printk (KERN_ERR "RAMDISK: could not allocate buffer\n");
        goto done;
    }
    printk (KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into ram disk... ", nblocks, ((nblocks - 1) / devblocks) + 1, nblocks > devblocks ? "s" : "");
    for (i = 0, disk = 1; i < nblocks; i++) {
        if (i && (i % devblocks == 0)) {
            printk ("done disk #%d.\n", disk ++);
            rotate = 0;
            if (sys_close (in_fd)) {
                printk ("Error closing the disk.\n");
                goto noclose_input;
            }
            change_floppy ("disk #%d", disk);
            in_fd = sys_open (from, O_RDONLY, 0);
            if (in_fd < 0) {
                printk ("Error opening disk.\n");
                goto noclose_input;
            }
            printk ("Loading disk #%d... ", disk);
        }
        sys_read (in_fd, buf, BLOCK_SIZE);
        sys_write (out_fd, buf, BLOCK_SIZE);
    }
    printk ("done.\n");
successful_load :
    res = 1;
done :
    sys_close (in_fd);
noclose_input :
    sys_close (out_fd);
out :
    kfree (buf);
    sys_unlink ("/dev/ram");
    return res;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="182" endline="186">
{
    if (crd_load (in_fd, out_fd, decompressor) == 0)
        goto successful_load;
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="204" endline="208">
{
    printk ("RAMDISK: image too big! (%dKiB/%ldKiB)\n", nblocks, rd_blocks);
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="221" endline="224">
{
    printk (KERN_ERR "RAMDISK: could not determine device size\n");
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="227" endline="230">
{
    printk (KERN_ERR "RAMDISK: could not allocate buffer\n");
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="234" endline="258">
{
    if (i && (i % devblocks == 0)) {
        printk ("done disk #%d.\n", disk ++);
        rotate = 0;
        if (sys_close (in_fd)) {
            printk ("Error closing the disk.\n");
            goto noclose_input;
        }
        change_floppy ("disk #%d", disk);
        in_fd = sys_open (from, O_RDONLY, 0);
        if (in_fd < 0) {
            printk ("Error opening disk.\n");
            goto noclose_input;
        }
        printk ("Loading disk #%d... ", disk);
    }
    sys_read (in_fd, buf, BLOCK_SIZE);
    sys_write (out_fd, buf, BLOCK_SIZE);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="235" endline="249">
{
    printk ("done disk #%d.\n", disk ++);
    rotate = 0;
    if (sys_close (in_fd)) {
        printk ("Error closing the disk.\n");
        goto noclose_input;
    }
    change_floppy ("disk #%d", disk);
    in_fd = sys_open (from, O_RDONLY, 0);
    if (in_fd < 0) {
        printk ("Error opening disk.\n");
        goto noclose_input;
    }
    printk ("Loading disk #%d... ", disk);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="238" endline="241">
{
    printk ("Error closing the disk.\n");
    goto noclose_input;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="244" endline="247">
{
    printk ("Error opening disk.\n");
    goto noclose_input;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="274" endline="280">
{
    if (rd_prompt)
        change_floppy ("root floppy disk to be loaded into RAM disk");
    create_dev ("/dev/root", ROOT_DEV);
    create_dev ("/dev/ram", MKDEV (RAMDISK_MAJOR, n));
    return rd_load_image ("/dev/root");
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="287" endline="294">
{
    int r = sys_read (crd_infd, buf, len);
    if (r < 0)
        printk (KERN_ERR "RAMDISK: error while reading compressed data");
    else if (r == 0)
        printk (KERN_ERR "RAMDISK: EOF while reading compressed data");
    return r;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="297" endline="308">
{
    int written = sys_write (crd_outfd, window, outcnt);
    if (written != outcnt) {
        if (decompress_error == 0)
            printk (KERN_ERR "RAMDISK: incomplete write (%d != %d)\n", written, outcnt);
        decompress_error = 1;
        return -1;
    }
    return outcnt;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="299" endline="306">
{
    if (decompress_error == 0)
        printk (KERN_ERR "RAMDISK: incomplete write (%d != %d)\n", written, outcnt);
    decompress_error = 1;
    return -1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="311" endline="315">
{
    printk (KERN_ERR "%s\n", x);
    exit_code = 1;
    decompress_error = 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_rd.c.ifdefed" startline="318" endline="326">
{
    int result;
    crd_infd = in_fd;
    crd_outfd = out_fd;
    result = deco (NULL, 0, compr_fill, compr_flush, NULL, NULL, error);
    if (decompress_error)
        result = 1;
    return result;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="54" endline="114">
{
    int minor, level, factor, fault, partitioned = 0;
    char *pername = "";
    char *str1;
    int ent;
    if (*str == 'd') {
        partitioned = 1;
        str++;
    }
    if (get_option (&str, &minor) != 2) {
        printk (KERN_WARNING "md: Too few arguments supplied to md=.\n");
        return 0;
    }
    str1 = str;
    for (ent = 0; ent < md_setup_ents; ent++)
        if (md_setup_args[ent].minor == minor && md_setup_args[ent].partitioned == partitioned) {
            printk (KERN_WARNING "md: md=%s%d, Specified more than once. " "Replacing previous definition.\n", partitioned ? "d" : "", minor);
            break;
        }
    if (ent >= ARRAY_SIZE (md_setup_args)) {
        printk (KERN_WARNING "md: md=%s%d - too many md initialisations\n", partitioned ? "d" : "", minor);
        return 0;
    }
    if (ent >= md_setup_ents)
        md_setup_ents++;
    switch (get_option (&str, &level)) {
    case 2 :
        if (level == 0 || level == LEVEL_LINEAR) {
            if (get_option (&str, &factor) != 2 || get_option (&str, &fault) != 2) {
                printk (KERN_WARNING "md: Too few arguments supplied to md=.\n");
                return 0;
            }
            md_setup_args[ent].level = level;
            md_setup_args[ent].chunk = 1 << (factor + 12);
            if (level == LEVEL_LINEAR)
                pername = "linear";
            else
                pername = "raid0";
            break;
        }
    case 1 :
        str = str1;
    case 0 :
        md_setup_args[ent].level = LEVEL_NONE;
        pername = "super-block";
    }
    printk (KERN_INFO "md: Will configure md%d (%s) from %s, below.\n", minor, pername, str);
    md_setup_args[ent].device_names = str;
    md_setup_args[ent].partitioned = partitioned;
    md_setup_args[ent].minor = minor;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="60" endline="63">
{
    partitioned = 1;
    str++;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="64" endline="67">
{
    printk (KERN_WARNING "md: Too few arguments supplied to md=.\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="71" endline="75">
{
    printk (KERN_WARNING "md: md=%s%d, Specified more than once. " "Replacing previous definition.\n", partitioned ? "d" : "", minor);
    break;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="76" endline="79">
{
    printk (KERN_WARNING "md: md=%s%d - too many md initialisations\n", partitioned ? "d" : "", minor);
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="82" endline="105">
{
case 2 :
    if (level == 0 || level == LEVEL_LINEAR) {
        if (get_option (&str, &factor) != 2 || get_option (&str, &fault) != 2) {
            printk (KERN_WARNING "md: Too few arguments supplied to md=.\n");
            return 0;
        }
        md_setup_args[ent].level = level;
        md_setup_args[ent].chunk = 1 << (factor + 12);
        if (level == LEVEL_LINEAR)
            pername = "linear";
        else
            pername = "raid0";
        break;
    }
case 1 :
    str = str1;
case 0 :
    md_setup_args[ent].level = LEVEL_NONE;
    pername = "super-block";
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="84" endline="97">
{
    if (get_option (&str, &factor) != 2 || get_option (&str, &fault) != 2) {
        printk (KERN_WARNING "md: Too few arguments supplied to md=.\n");
        return 0;
    }
    md_setup_args[ent].level = level;
    md_setup_args[ent].chunk = 1 << (factor + 12);
    if (level == LEVEL_LINEAR)
        pername = "linear";
    else
        pername = "raid0";
    break;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="86" endline="89">
{
    printk (KERN_WARNING "md: Too few arguments supplied to md=.\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="117" endline="241">
{
    int minor, i, ent, partitioned;
    dev_t dev;
    dev_t devices [MD_SB_DISKS + 1];
    for (ent = 0; ent < md_setup_ents; ent++) {
        int fd;
        int err = 0;
        char *devname;
        mdu_disk_info_t dinfo;
        char name [16];
        minor = md_setup_args[ent].minor;
        partitioned = md_setup_args[ent].partitioned;
        devname = md_setup_args[ent].device_names;
        sprintf (name, "/dev/md%s%d", partitioned ? "_d" : "", minor);
        if (partitioned)
            dev = MKDEV (mdp_major, minor << MdpMinorShift);
        else
            dev = MKDEV (MD_MAJOR, minor);
        create_dev (name, dev);
        for (i = 0; i < MD_SB_DISKS && devname != NULL; i++) {
            char *p;
            char comp_name [64];
            u32 rdev;
            p = strchr (devname, ',');
            if (p)
                *p++ = 0;
            dev = name_to_dev_t (devname);
            if (strncmp (devname, "/dev/", 5) == 0)
                devname += 5;
            snprintf (comp_name, 63, "/dev/%s", devname);
            rdev = bstat (comp_name);
            if (rdev)
                dev = new_decode_dev (rdev);
            if (!dev) {
                printk (KERN_WARNING "md: Unknown device name: %s\n", devname);
                break;
            }
            devices[i] = dev;
            devname = p;
        }
        devices[i] = 0;
        if (!i)
            continue;
        printk (KERN_INFO "md: Loading md%s%d: %s\n", partitioned ? "_d" : "", minor, md_setup_args [ent].device_names);
        fd = sys_open (name, 0, 0);
        if (fd < 0) {
            printk (KERN_ERR "md: open failed - cannot start " "array %s\n", name);
            continue;
        }
        if (sys_ioctl (fd, SET_ARRAY_INFO, 0) == -EBUSY) {
            printk (KERN_WARNING "md: Ignoring md=%d, already autodetected. (Use raid=noautodetect)\n", minor);
            sys_close (fd);
            continue;
        }
        if (md_setup_args[ent].level != LEVEL_NONE) {
            mdu_array_info_t ainfo;
            ainfo.level = md_setup_args[ent].level;
            ainfo.size = 0;
            ainfo.nr_disks = 0;
            ainfo.raid_disks = 0;
            while (devices[ainfo.raid_disks])
                ainfo.raid_disks++;
            ainfo.md_minor = minor;
            ainfo.not_persistent = 1;
            ainfo.state = (1 << MD_SB_CLEAN);
            ainfo.layout = 0;
            ainfo.chunk_size = md_setup_args[ent].chunk;
            err = sys_ioctl (fd, SET_ARRAY_INFO, (long) &ainfo);
            for (i = 0; !err && i <= MD_SB_DISKS; i++) {
                dev = devices[i];
                if (!dev)
                    break;
                dinfo.number = i;
                dinfo.raid_disk = i;
                dinfo.state = (1 << MD_DISK_ACTIVE) | (1 << MD_DISK_SYNC);
                dinfo.major = MAJOR (dev);
                dinfo.minor = MINOR (dev);
                err = sys_ioctl (fd, ADD_NEW_DISK, (long) &dinfo);
            }
        }
        else {
            for (i = 0; i <= MD_SB_DISKS; i++) {
                dev = devices[i];
                if (!dev)
                    break;
                dinfo.major = MAJOR (dev);
                dinfo.minor = MINOR (dev);
                sys_ioctl (fd, ADD_NEW_DISK, (long) & dinfo);
            }
        }
        if (!err)
            err = sys_ioctl (fd, RUN_ARRAY, 0);
        if (err)
            printk (KERN_WARNING "md: starting md%d failed\n", minor);
        else {
            sys_close (fd);
            fd = sys_open (name, 0, 0);
            sys_ioctl (fd, BLKRRPART, 0);
        }
        sys_close (fd);
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="122" endline="240">
{
    int fd;
    int err = 0;
    char *devname;
    mdu_disk_info_t dinfo;
    char name [16];
    minor = md_setup_args[ent].minor;
    partitioned = md_setup_args[ent].partitioned;
    devname = md_setup_args[ent].device_names;
    sprintf (name, "/dev/md%s%d", partitioned ? "_d" : "", minor);
    if (partitioned)
        dev = MKDEV (mdp_major, minor << MdpMinorShift);
    else
        dev = MKDEV (MD_MAJOR, minor);
    create_dev (name, dev);
    for (i = 0; i < MD_SB_DISKS && devname != NULL; i++) {
        char *p;
        char comp_name [64];
        u32 rdev;
        p = strchr (devname, ',');
        if (p)
            *p++ = 0;
        dev = name_to_dev_t (devname);
        if (strncmp (devname, "/dev/", 5) == 0)
            devname += 5;
        snprintf (comp_name, 63, "/dev/%s", devname);
        rdev = bstat (comp_name);
        if (rdev)
            dev = new_decode_dev (rdev);
        if (!dev) {
            printk (KERN_WARNING "md: Unknown device name: %s\n", devname);
            break;
        }
        devices[i] = dev;
        devname = p;
    }
    devices[i] = 0;
    if (!i)
        continue;
    printk (KERN_INFO "md: Loading md%s%d: %s\n", partitioned ? "_d" : "", minor, md_setup_args [ent].device_names);
    fd = sys_open (name, 0, 0);
    if (fd < 0) {
        printk (KERN_ERR "md: open failed - cannot start " "array %s\n", name);
        continue;
    }
    if (sys_ioctl (fd, SET_ARRAY_INFO, 0) == -EBUSY) {
        printk (KERN_WARNING "md: Ignoring md=%d, already autodetected. (Use raid=noautodetect)\n", minor);
        sys_close (fd);
        continue;
    }
    if (md_setup_args[ent].level != LEVEL_NONE) {
        mdu_array_info_t ainfo;
        ainfo.level = md_setup_args[ent].level;
        ainfo.size = 0;
        ainfo.nr_disks = 0;
        ainfo.raid_disks = 0;
        while (devices[ainfo.raid_disks])
            ainfo.raid_disks++;
        ainfo.md_minor = minor;
        ainfo.not_persistent = 1;
        ainfo.state = (1 << MD_SB_CLEAN);
        ainfo.layout = 0;
        ainfo.chunk_size = md_setup_args[ent].chunk;
        err = sys_ioctl (fd, SET_ARRAY_INFO, (long) &ainfo);
        for (i = 0; !err && i <= MD_SB_DISKS; i++) {
            dev = devices[i];
            if (!dev)
                break;
            dinfo.number = i;
            dinfo.raid_disk = i;
            dinfo.state = (1 << MD_DISK_ACTIVE) | (1 << MD_DISK_SYNC);
            dinfo.major = MAJOR (dev);
            dinfo.minor = MINOR (dev);
            err = sys_ioctl (fd, ADD_NEW_DISK, (long) &dinfo);
        }
    }
    else {
        for (i = 0; i <= MD_SB_DISKS; i++) {
            dev = devices[i];
            if (!dev)
                break;
            dinfo.major = MAJOR (dev);
            dinfo.minor = MINOR (dev);
            sys_ioctl (fd, ADD_NEW_DISK, (long) & dinfo);
        }
    }
    if (!err)
        err = sys_ioctl (fd, RUN_ARRAY, 0);
    if (err)
        printk (KERN_WARNING "md: starting md%d failed\n", minor);
    else {
        sys_close (fd);
        fd = sys_open (name, 0, 0);
        sys_ioctl (fd, BLKRRPART, 0);
    }
    sys_close (fd);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="139" endline="163">
{
    char *p;
    char comp_name [64];
    u32 rdev;
    p = strchr (devname, ',');
    if (p)
        *p++ = 0;
    dev = name_to_dev_t (devname);
    if (strncmp (devname, "/dev/", 5) == 0)
        devname += 5;
    snprintf (comp_name, 63, "/dev/%s", devname);
    rdev = bstat (comp_name);
    if (rdev)
        dev = new_decode_dev (rdev);
    if (!dev) {
        printk (KERN_WARNING "md: Unknown device name: %s\n", devname);
        break;
    }
    devices[i] = dev;
    devname = p;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="155" endline="158">
{
    printk (KERN_WARNING "md: Unknown device name: %s\n", devname);
    break;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="174" endline="178">
{
    printk (KERN_ERR "md: open failed - cannot start " "array %s\n", name);
    continue;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="179" endline="185">
{
    printk (KERN_WARNING "md: Ignoring md=%d, already autodetected. (Use raid=noautodetect)\n", minor);
    sys_close (fd);
    continue;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="187" endline="214">
{
    mdu_array_info_t ainfo;
    ainfo.level = md_setup_args[ent].level;
    ainfo.size = 0;
    ainfo.nr_disks = 0;
    ainfo.raid_disks = 0;
    while (devices[ainfo.raid_disks])
        ainfo.raid_disks++;
    ainfo.md_minor = minor;
    ainfo.not_persistent = 1;
    ainfo.state = (1 << MD_SB_CLEAN);
    ainfo.layout = 0;
    ainfo.chunk_size = md_setup_args[ent].chunk;
    err = sys_ioctl (fd, SET_ARRAY_INFO, (long) &ainfo);
    for (i = 0; !err && i <= MD_SB_DISKS; i++) {
        dev = devices[i];
        if (!dev)
            break;
        dinfo.number = i;
        dinfo.raid_disk = i;
        dinfo.state = (1 << MD_DISK_ACTIVE) | (1 << MD_DISK_SYNC);
        dinfo.major = MAJOR (dev);
        dinfo.minor = MINOR (dev);
        err = sys_ioctl (fd, ADD_NEW_DISK, (long) &dinfo);
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="203" endline="213">
{
    dev = devices[i];
    if (!dev)
        break;
    dinfo.number = i;
    dinfo.raid_disk = i;
    dinfo.state = (1 << MD_DISK_ACTIVE) | (1 << MD_DISK_SYNC);
    dinfo.major = MAJOR (dev);
    dinfo.minor = MINOR (dev);
    err = sys_ioctl (fd, ADD_NEW_DISK, (long) &dinfo);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="214" endline="224">
{
    for (i = 0; i <= MD_SB_DISKS; i++) {
        dev = devices[i];
        if (!dev)
            break;
        dinfo.major = MAJOR (dev);
        dinfo.minor = MINOR (dev);
        sys_ioctl (fd, ADD_NEW_DISK, (long) & dinfo);
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="216" endline="223">
{
    dev = devices[i];
    if (!dev)
        break;
    dinfo.major = MAJOR (dev);
    dinfo.minor = MINOR (dev);
    sys_ioctl (fd, ADD_NEW_DISK, (long) & dinfo);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="229" endline="238">
{
    sys_close (fd);
    fd = sys_open (name, 0, 0);
    sys_ioctl (fd, BLKRRPART, 0);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="244" endline="268">
{
    int len, pos;
    len = strlen (str) + 1;
    pos = 0;
    while (pos < len) {
        char *comma = strchr (str +pos, ',');
        int wlen;
        if (comma)
            wlen = (comma - str) - pos;
        else
            wlen = (len - 1) - pos;
        if (!strncmp (str, "noautodetect", wlen))
            raid_noautodetect = 1;
        if (!strncmp (str, "autodetect", wlen))
            raid_noautodetect = 0;
        if (strncmp (str, "partitionable", wlen) == 0)
            raid_autopart = 1;
        if (strncmp (str, "part", wlen) == 0)
            raid_autopart = 1;
        pos += wlen + 1;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="250" endline="266">
{
    char *comma = strchr (str +pos, ',');
    int wlen;
    if (comma)
        wlen = (comma - str) - pos;
    else
        wlen = (len - 1) - pos;
    if (!strncmp (str, "noautodetect", wlen))
        raid_noautodetect = 1;
    if (!strncmp (str, "autodetect", wlen))
        raid_noautodetect = 0;
    if (strncmp (str, "partitionable", wlen) == 0)
        raid_autopart = 1;
    if (strncmp (str, "part", wlen) == 0)
        raid_autopart = 1;
    pos += wlen + 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="274" endline="291">
{
    int fd;
    printk (KERN_INFO "md: Waiting for all devices to be available before autodetect\n");
    printk (KERN_INFO "md: If you don't use raid, use raid=noautodetect\n");
    wait_for_device_probe ();
    fd = sys_open ("/dev/md0", 0, 0);
    if (fd >= 0) {
        sys_ioctl (fd, RAID_AUTORUN, raid_autopart);
        sys_close (fd);
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="287" endline="290">
{
    sys_ioctl (fd, RAID_AUTORUN, raid_autopart);
    sys_close (fd);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts_md.c.ifdefed" startline="294" endline="302">
{
    create_dev ("/dev/md0", MKDEV (MD_MAJOR, 0));
    if (raid_noautodetect)
        printk (KERN_INFO "md: Skipping autodetection of RAID arrays. (raid=autodetect will force)\n");
    else
        autodetect_raid ();
    md_setup_drive ();
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="14" endline="17">
{
    if (!message)
        message = x;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="31" endline="35">
{
    unsigned long tmp = ino + minor + (major << 3);
    tmp += tmp >> 5;
    return tmp & 31;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="39" endline="63">
{
    struct hash **p, *q;
    for (p = head + hash (major, minor, ino); *p; p = &(*p)->next) {
        if ((*p)->ino != ino)
            continue;
        if ((*p)->minor != minor)
            continue;
        if ((*p)->major != major)
            continue;
        if (((*p)->mode ^ mode) & S_IFMT)
            continue;
        return (*p)->name;
    }
    q = kmalloc (sizeof (struct hash), GFP_KERNEL);
    if (!q)
        panic ("can't allocate link hash entry");
    q->major = major;
    q->minor = minor;
    q->ino = ino;
    q->mode = mode;
    strcpy (q -> name, name);
    q->next = NULL;
    *p = q;
    return NULL;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="41" endline="51">
{
    if ((*p)->ino != ino)
        continue;
    if ((*p)->minor != minor)
        continue;
    if ((*p)->major != major)
        continue;
    if (((*p)->mode ^ mode) & S_IFMT)
        continue;
    return (*p)->name;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="66" endline="75">
{
    struct hash **p, *q;
    for (p = head; p < head + 32; p++) {
        while (*p) {
            q = *p;
            *p = q->next;
            kfree (q);
        }
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="68" endline="74">
{
    while (*p) {
        q = *p;
        *p = q->next;
        kfree (q);
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="69" endline="73">
{
    q = *p;
    *p = q->next;
    kfree (q);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="78" endline="87">
{
    struct timespec t [2];
    t[0].tv_sec = mtime;
    t[0].tv_nsec = 0;
    t[1].tv_sec = mtime;
    t[1].tv_nsec = 0;
    return do_utimes (AT_FDCWD, filename, t, AT_SYMLINK_NOFOLLOW);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="97" endline="105">
{
    struct dir_entry *de = kmalloc (sizeof (struct dir_entry), GFP_KERNEL);
    if (!de)
        panic ("can't allocate dir_entry buffer");
    INIT_LIST_HEAD (& de -> list);
    de->name = kstrdup (name, GFP_KERNEL);
    de->mtime = mtime;
    list_add (& de -> list, & dir_list);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="108" endline="116">
{
    struct dir_entry *de, *tmp;
    list_for_each_entry_safe (de, tmp, &dir_list, list) {
        list_del (& de -> list);
        do_utime (de -> name, de -> mtime);
        kfree (de -> name);
        kfree (de);
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="110" endline="115">
{
    list_del (& de -> list);
    do_utime (de -> name, de -> mtime);
    kfree (de -> name);
    kfree (de);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="130" endline="151">
{
    unsigned long parsed [12];
    char buf [9];
    int i;
    buf[8] = '\0';
    for (i = 0, s += 6; i < 12; i++, s += 8) {
        memcpy (buf, s, 8);
        parsed[i] = simple_strtoul (buf, NULL, 16);
    }
    ino = parsed[0];
    mode = parsed[1];
    uid = parsed[2];
    gid = parsed[3];
    nlink = parsed[4];
    mtime = parsed[5];
    body_len = parsed[6];
    major = parsed[7];
    minor = parsed[8];
    rdev = new_encode_dev (MKDEV (parsed[9], parsed[10]));
    name_len = parsed[11];
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="136" endline="139">
{
    memcpy (buf, s, 8);
    parsed[i] = simple_strtoul (buf, NULL, 16);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="171" endline="175">
{
    victim += n;
    this_header += n;
    count -= n;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="183" endline="194">
{
    if (count >= size) {
        collected = victim;
        eat (size);
        state = next;
    }
    else {
        collect = collected = buf;
        remains = size;
        next_state = next;
        state = Collect;
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="184" endline="188">
{
    collected = victim;
    eat (size);
    state = next;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="188" endline="193">
{
    collect = collected = buf;
    remains = size;
    next_state = next;
    state = Collect;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="199" endline="202">
{
    read_into (header_buf, 110, GotHeader);
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="205" endline="216">
{
    unsigned n = remains;
    if (count < n)
        n = count;
    memcpy (collect, victim, n);
    eat (n);
    collect += n;
    if ((remains -= n) != 0)
        return 1;
    state = next_state;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="219" endline="246">
{
    if (memcmp (collected, "070707", 6) == 0) {
        error ("incorrect cpio method used: use -H newc option");
        return 1;
    }
    if (memcmp (collected, "070701", 6)) {
        error ("no cpio magic");
        return 1;
    }
    parse_header (collected);
    next_header = this_header + N_ALIGN (name_len) + body_len;
    next_header = (next_header + 3) & ~3;
    state = SkipIt;
    if (name_len <= 0 || name_len > PATH_MAX)
        return 0;
    if (S_ISLNK (mode)) {
        if (body_len > PATH_MAX)
            return 0;
        collect = collected = symlink_buf;
        remains = N_ALIGN (name_len) + body_len;
        next_state = GotSymlink;
        state = Collect;
        return 0;
    }
    if (S_ISREG (mode) || !body_len)
        read_into (name_buf, N_ALIGN (name_len), GotName);
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="220" endline="223">
{
    error ("incorrect cpio method used: use -H newc option");
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="224" endline="227">
{
    error ("no cpio magic");
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="234" endline="242">
{
    if (body_len > PATH_MAX)
        return 0;
    collect = collected = symlink_buf;
    remains = N_ALIGN (name_len) + body_len;
    next_state = GotSymlink;
    state = Collect;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="249" endline="258">
{
    if (this_header + count < next_header) {
        eat (count);
        return 1;
    }
    else {
        eat (next_header - this_header);
        state = next_state;
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="250" endline="253">
{
    eat (count);
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="253" endline="257">
{
    eat (next_header - this_header);
    state = next_state;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="261" endline="267">
{
    while (count && *victim == '\0')
        eat (1);
    if (count && (this_header & 3))
        error ("broken padding");
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="270" endline="277">
{
    if (nlink >= 2) {
        char *old = find_link (major, minor, ino, mode, collected);
        if (old)
            return (sys_link (old, collected) < 0) ? -1 : 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="271" endline="275">
{
    char *old = find_link (major, minor, ino, mode, collected);
    if (old)
        return (sys_link (old, collected) < 0) ? -1 : 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="280" endline="289">
{
    struct stat st;
    if (!sys_newlstat (path, &st) && (st.st_mode ^ mode) & S_IFMT) {
        if (S_ISDIR (st.st_mode))
            sys_rmdir (path);
        else
            sys_unlink (path);
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="283" endline="288">
{
    if (S_ISDIR (st.st_mode))
        sys_rmdir (path);
    else
        sys_unlink (path);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="294" endline="334">
{
    state = SkipIt;
    next_state = Reset;
    if (strcmp (collected, "TRAILER!!!") == 0) {
        free_hash ();
        return 0;
    }
    clean_path (collected, mode);
    if (S_ISREG (mode)) {
        int ml = maybe_link ();
        if (ml >= 0) {
            int openflags = O_WRONLY | O_CREAT;
            if (ml != 1)
                openflags |= O_TRUNC;
            wfd = sys_open (collected, openflags, mode);
            if (wfd >= 0) {
                sys_fchown (wfd, uid, gid);
                sys_fchmod (wfd, mode);
                if (body_len)
                    sys_ftruncate (wfd, body_len);
                vcollected = kstrdup (collected, GFP_KERNEL);
                state = CopyFile;
            }
        }
    }
    else if (S_ISDIR (mode)) {
        sys_mkdir (collected, mode);
        sys_chown (collected, uid, gid);
        sys_chmod (collected, mode);
        dir_add (collected, mtime);
    }
    else if (S_ISBLK (mode) || S_ISCHR (mode) || S_ISFIFO (mode) || S_ISSOCK (mode)) {
        if (maybe_link () == 0) {
            sys_mknod (collected, mode, rdev);
            sys_chown (collected, uid, gid);
            sys_chmod (collected, mode);
            do_utime (collected, mtime);
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="297" endline="300">
{
    free_hash ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="302" endline="319">
{
    int ml = maybe_link ();
    if (ml >= 0) {
        int openflags = O_WRONLY | O_CREAT;
        if (ml != 1)
            openflags |= O_TRUNC;
        wfd = sys_open (collected, openflags, mode);
        if (wfd >= 0) {
            sys_fchown (wfd, uid, gid);
            sys_fchmod (wfd, mode);
            if (body_len)
                sys_ftruncate (wfd, body_len);
            vcollected = kstrdup (collected, GFP_KERNEL);
            state = CopyFile;
        }
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="304" endline="318">
{
    int openflags = O_WRONLY | O_CREAT;
    if (ml != 1)
        openflags |= O_TRUNC;
    wfd = sys_open (collected, openflags, mode);
    if (wfd >= 0) {
        sys_fchown (wfd, uid, gid);
        sys_fchmod (wfd, mode);
        if (body_len)
            sys_ftruncate (wfd, body_len);
        vcollected = kstrdup (collected, GFP_KERNEL);
        state = CopyFile;
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="310" endline="317">
{
    sys_fchown (wfd, uid, gid);
    sys_fchmod (wfd, mode);
    if (body_len)
        sys_ftruncate (wfd, body_len);
    vcollected = kstrdup (collected, GFP_KERNEL);
    state = CopyFile;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="319" endline="324">
{
    sys_mkdir (collected, mode);
    sys_chown (collected, uid, gid);
    sys_chmod (collected, mode);
    dir_add (collected, mtime);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="325" endline="332">
{
    if (maybe_link () == 0) {
        sys_mknod (collected, mode, rdev);
        sys_chown (collected, uid, gid);
        sys_chmod (collected, mode);
        do_utime (collected, mtime);
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="326" endline="331">
{
    sys_mknod (collected, mode, rdev);
    sys_chown (collected, uid, gid);
    sys_chmod (collected, mode);
    do_utime (collected, mtime);
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="337" endline="352">
{
    if (count >= body_len) {
        sys_write (wfd, victim, body_len);
        sys_close (wfd);
        do_utime (vcollected, mtime);
        kfree (vcollected);
        eat (body_len);
        state = SkipIt;
        return 0;
    }
    else {
        sys_write (wfd, victim, count);
        body_len -= count;
        eat (count);
        return 1;
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="338" endline="346">
{
    sys_write (wfd, victim, body_len);
    sys_close (wfd);
    do_utime (vcollected, mtime);
    kfree (vcollected);
    eat (body_len);
    state = SkipIt;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="346" endline="351">
{
    sys_write (wfd, victim, count);
    body_len -= count;
    eat (count);
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="355" endline="364">
{
    collected[N_ALIGN (name_len) + body_len] = '\0';
    clean_path (collected, 0);
    sys_symlink (collected + N_ALIGN (name_len), collected);
    sys_lchown (collected, uid, gid);
    do_utime (collected, mtime);
    state = SkipIt;
    next_state = Reset;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="378" endline="385">
{
    count = len;
    victim = buf;
    while (!actions[state] ())
        ;
    return len - count;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="388" endline="408">
{
    char *buf = (char *) bufv;
    int written;
    int origLen = len;
    if (message)
        return -1;
    while ((written = write_buffer (buf, len)) < len && !message) {
        char c = buf[written];
        if (c == '0') {
            buf += written;
            len -= written;
            state = Start;
        }
        else if (c == 0) {
            buf += written;
            len -= written;
            state = Reset;
        }
        else
            error ("junk in compressed archive");
    }
    return origLen;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="394" endline="406">
{
    char c = buf[written];
    if (c == '0') {
        buf += written;
        len -= written;
        state = Start;
    }
    else if (c == 0) {
        buf += written;
        len -= written;
        state = Reset;
    }
    else
        error ("junk in compressed archive");
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="396" endline="400">
{
    buf += written;
    len -= written;
    state = Start;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="400" endline="404">
{
    buf += written;
    len -= written;
    state = Reset;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="415" endline="470">
{
    int written;
    decompress_fn decompress;
    const char *compress_name;
    static __initdata char msg_buf [64];
    header_buf = kmalloc (110, GFP_KERNEL);
    symlink_buf = kmalloc (PATH_MAX +N_ALIGN (PATH_MAX) + 1, GFP_KERNEL);
    name_buf = kmalloc (N_ALIGN (PATH_MAX), GFP_KERNEL);
    if (!header_buf || !symlink_buf || !name_buf)
        panic ("can't allocate buffers");
    state = Start;
    this_header = 0;
    message = NULL;
    while (!message && len) {
        loff_t saved_offset = this_header;
        if (*buf == '0' && !(this_header & 3)) {
            state = Start;
            written = write_buffer (buf, len);
            buf += written;
            len -= written;
            continue;
        }
        if (!*buf) {
            buf++;
            len--;
            this_header++;
            continue;
        }
        this_header = 0;
        decompress = decompress_method (buf, len, &compress_name);
        if (decompress)
            decompress (buf, len, NULL, flush_buffer, NULL, &my_inptr, error);
        else if (compress_name) {
            if (!message) {
                snprintf (msg_buf, sizeof msg_buf, "compression method %s not configured", compress_name);
                message = msg_buf;
            }
        }
        if (state != Reset)
            error ("junk in compressed archive");
        this_header = saved_offset + my_inptr;
        buf += my_inptr;
        len -= my_inptr;
    }
    dir_utime ();
    kfree (name_buf);
    kfree (symlink_buf);
    kfree (header_buf);
    return message;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="431" endline="464">
{
    loff_t saved_offset = this_header;
    if (*buf == '0' && !(this_header & 3)) {
        state = Start;
        written = write_buffer (buf, len);
        buf += written;
        len -= written;
        continue;
    }
    if (!*buf) {
        buf++;
        len--;
        this_header++;
        continue;
    }
    this_header = 0;
    decompress = decompress_method (buf, len, &compress_name);
    if (decompress)
        decompress (buf, len, NULL, flush_buffer, NULL, &my_inptr, error);
    else if (compress_name) {
        if (!message) {
            snprintf (msg_buf, sizeof msg_buf, "compression method %s not configured", compress_name);
            message = msg_buf;
        }
    }
    if (state != Reset)
        error ("junk in compressed archive");
    this_header = saved_offset + my_inptr;
    buf += my_inptr;
    len -= my_inptr;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="433" endline="439">
{
    state = Start;
    written = write_buffer (buf, len);
    buf += written;
    len -= written;
    continue;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="440" endline="445">
{
    buf++;
    len--;
    this_header++;
    continue;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="451" endline="458">
{
    if (!message) {
        snprintf (msg_buf, sizeof msg_buf, "compression method %s not configured", compress_name);
        message = msg_buf;
    }
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="452" endline="457">
{
    snprintf (msg_buf, sizeof msg_buf, "compression method %s not configured", compress_name);
    message = msg_buf;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="475" endline="480">
{
    if (*str)
        return 0;
    do_retain_initrd = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="488" endline="517">
{
    if (do_retain_initrd)
        goto skip;
    free_initrd_mem (initrd_start, initrd_end);
skip :
    initrd_start = 0;
    initrd_end = 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="569" endline="607">
{
    char *err = unpack_to_rootfs (__initramfs_start, __initramfs_end -__initramfs_start);
    if (err)
        panic (err);
    if (initrd_start) {
        printk (KERN_INFO "Unpacking initramfs...\n");
        err = unpack_to_rootfs ((char *) initrd_start, initrd_end -initrd_start);
        if (err)
            printk (KERN_EMERG "Initramfs unpacking failed: %s\n", err);
        free_initrd ();
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/initramfs.c.ifdefed" startline="574" endline="605">
{
    printk (KERN_INFO "Unpacking initramfs...\n");
    err = unpack_to_rootfs ((char *) initrd_start, initrd_end -initrd_start);
    if (err)
        printk (KERN_EMERG "Initramfs unpacking failed: %s\n", err);
    free_initrd ();
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="35" endline="38">
{
    rd_doload = simple_strtol (str, NULL, 0) & 3;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="42" endline="47">
{
    if (*str)
        return 0;
    root_mountflags |= MS_RDONLY;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="50" endline="55">
{
    if (*str)
        return 0;
    root_mountflags &= ~MS_RDONLY;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="78" endline="145">
{
    char s [32];
    char *p;
    dev_t res = 0;
    int part;
    if (strncmp (name, "/dev/", 5) != 0) {
        unsigned maj, min;
        if (sscanf (name, "%u:%u", &maj, &min) == 2) {
            res = MKDEV (maj, min);
            if (maj != MAJOR (res) || min != MINOR (res))
                goto fail;
        }
        else {
            res = new_decode_dev (simple_strtoul (name, &p, 16));
            if (*p)
                goto fail;
        }
        goto done;
    }
    name += 5;
    res = Root_NFS;
    if (strcmp (name, "nfs") == 0)
        goto done;
    res = Root_RAM0;
    if (strcmp (name, "ram") == 0)
        goto done;
    if (strlen (name) > 31)
        goto fail;
    strcpy (s, name);
    for (p = s; *p; p++)
        if (*p == '/')
            *p = '!';
    res = blk_lookup_devt (s, 0);
    if (res)
        goto done;
    while (p > s && isdigit (p[-1]))
        p--;
    if (p == s || !*p || *p == '0')
        goto fail;
    part = simple_strtoul (p, NULL, 10);
    *p = '\0';
    res = blk_lookup_devt (s, part);
    if (res)
        goto done;
    if (p < s + 2 || !isdigit (p[-2]) || p[-1] != 'p')
        goto fail;
    p[-1] = '\0';
    res = blk_lookup_devt (s, part);
    if (res)
        goto done;
fail :
    return 0;
done :
    return res;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="84" endline="97">
{
    unsigned maj, min;
    if (sscanf (name, "%u:%u", &maj, &min) == 2) {
        res = MKDEV (maj, min);
        if (maj != MAJOR (res) || min != MINOR (res))
            goto fail;
    }
    else {
        res = new_decode_dev (simple_strtoul (name, &p, 16));
        if (*p)
            goto fail;
    }
    goto done;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="87" endline="91">
{
    res = MKDEV (maj, min);
    if (maj != MAJOR (res) || min != MINOR (res))
        goto fail;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="91" endline="95">
{
    res = new_decode_dev (simple_strtoul (name, &p, 16));
    if (*p)
        goto fail;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="148" endline="151">
{
    strlcpy (saved_root_name, line, sizeof (saved_root_name));
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="156" endline="161">
{
    if (*str)
        return 0;
    root_wait = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="167" endline="170">
{
    root_mount_data = str;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="174" endline="177">
{
    root_fs_names = str;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="181" endline="184">
{
    root_delay = simple_strtoul (str, NULL, 0);
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="191" endline="215">
{
    char *s = page;
    if (root_fs_names) {
        strcpy (page, root_fs_names);
        while (*s++) {
            if (s[-1] == ',')
                s[-1] = '\0';
        }
    }
    else {
        int len = get_filesystem_list (page);
        char *p, *next;
        page[len] = '\0';
        for (p = page - 1; p; p = next) {
            next = strchr (++p, '\n');
            if (*p++ != '\t')
                continue;
            while ((*s++ = *p++) != '\n')
                ;
            s[-1] = '\0';
        }
    }
    *s = '\0';
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="194" endline="200">
{
    strcpy (page, root_fs_names);
    while (*s++) {
        if (s[-1] == ',')
            s[-1] = '\0';
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="196" endline="199">
{
    if (s[-1] == ',')
        s[-1] = '\0';
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="200" endline="213">
{
    int len = get_filesystem_list (page);
    char *p, *next;
    page[len] = '\0';
    for (p = page - 1; p; p = next) {
        next = strchr (++p, '\n');
        if (*p++ != '\t')
            continue;
        while ((*s++ = *p++) != '\n')
            ;
        s[-1] = '\0';
    }
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="205" endline="212">
{
    next = strchr (++p, '\n');
    if (*p++ != '\t')
        continue;
    while ((*s++ = *p++) != '\n')
        ;
    s[-1] = '\0';
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="218" endline="230">
{
    int err = sys_mount (name, "/root", fs, flags, data);
    if (err)
        return err;
    sys_chdir ("/root");
    ROOT_DEV = current->fs->pwd.mnt->mnt_sb->s_dev;
    printk ("VFS: Mounted root (%s filesystem)%s on device %u:%u.\n", current -> fs -> pwd.mnt -> mnt_sb -> s_type -> name, current -> fs -> pwd.mnt -> mnt_sb -> s_flags & MS_RDONLY ? " readonly" : "", MAJOR (ROOT_DEV), MINOR (ROOT_DEV));
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="233" endline="288">
{
    char *fs_names = __getname_gfp (GFP_KERNEL | __GFP_NOTRACK_FALSE_POSITIVE);
    char *p;
    const char *b = name;
    get_fs_names (fs_names);
retry :
    for (p = fs_names; *p; p += strlen (p) + 1) {
        int err = do_mount_root (name, p, flags, root_mount_data);
        switch (err) {
        case 0 :
            goto out;
        case -EACCES :
            flags |= MS_RDONLY;
            goto retry;
        case -EINVAL :
            continue;
        }
        printk ("VFS: Cannot open root device \"%s\" or %s\n", root_device_name, b);
        printk ("Please append a correct \"root=\" boot option; here are the available partitions:\n");
        printk_all_partitions ();
        panic ("VFS: Unable to mount root fs on %s", b);
    }
    printk ("List of all partitions:\n");
    printk_all_partitions ();
    printk ("No filesystem could mount root, tried: ");
    for (p = fs_names; *p; p += strlen (p) + 1)
        printk (" %s", p);
    printk ("\n");
    panic ("VFS: Unable to mount root fs on %s", b);
out :
    putname (fs_names);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="245" endline="274">
{
    int err = do_mount_root (name, p, flags, root_mount_data);
    switch (err) {
    case 0 :
        goto out;
    case -EACCES :
        flags |= MS_RDONLY;
        goto retry;
    case -EINVAL :
        continue;
    }
    printk ("VFS: Cannot open root device \"%s\" or %s\n", root_device_name, b);
    printk ("Please append a correct \"root=\" boot option; here are the available partitions:\n");
    printk_all_partitions ();
    panic ("VFS: Unable to mount root fs on %s", b);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="247" endline="255">
{
case 0 :
    goto out;
case -EACCES :
    flags |= MS_RDONLY;
    goto retry;
case -EINVAL :
    continue;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="334" endline="360">
{
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="366" endline="420">
{
    int is_floppy;
    if (root_delay) {
        printk (KERN_INFO "Waiting %dsec before mounting root device...\n", root_delay);
        ssleep (root_delay);
    }
    wait_for_device_probe ();
    md_run_setup ();
    if (saved_root_name[0]) {
        root_device_name = saved_root_name;
        if (!strncmp (root_device_name, "mtd", 3) || !strncmp (root_device_name, "ubi", 3)) {
            mount_block_root (root_device_name, root_mountflags);
            goto out;
        }
        ROOT_DEV = name_to_dev_t (root_device_name);
        if (strncmp (root_device_name, "/dev/", 5) == 0)
            root_device_name += 5;
    }
    if (initrd_load ())
        goto out;
    if ((ROOT_DEV == 0) && root_wait) {
        printk (KERN_INFO "Waiting for root device %s...\n", saved_root_name);
        while (driver_probe_done () != 0 || (ROOT_DEV = name_to_dev_t (saved_root_name)) == 0)
            msleep (100);
        async_synchronize_full ();
    }
    is_floppy = MAJOR (ROOT_DEV) == FLOPPY_MAJOR;
    if (is_floppy && rd_doload && rd_load_disk (0))
        ROOT_DEV = Root_RAM0;
    mount_root ();
out :
    sys_mount (".", "/", NULL, MS_MOVE, NULL);
    sys_chroot (".");
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="369" endline="373">
{
    printk (KERN_INFO "Waiting %dsec before mounting root device...\n", root_delay);
    ssleep (root_delay);
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="386" endline="396">
{
    root_device_name = saved_root_name;
    if (!strncmp (root_device_name, "mtd", 3) || !strncmp (root_device_name, "ubi", 3)) {
        mount_block_root (root_device_name, root_mountflags);
        goto out;
    }
    ROOT_DEV = name_to_dev_t (root_device_name);
    if (strncmp (root_device_name, "/dev/", 5) == 0)
        root_device_name += 5;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="389" endline="392">
{
    mount_block_root (root_device_name, root_mountflags);
    goto out;
}
</source>
<source file="/cmpt816/tmp/init/do_mounts.c.ifdefed" startline="402" endline="409">
{
    printk (KERN_INFO "Waiting for root device %s...\n", saved_root_name);
    while (driver_probe_done () != 0 || (ROOT_DEV = name_to_dev_t (saved_root_name)) == 0)
        msleep (100);
    async_synchronize_full ();
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="16" endline="19">
{
    preset_lpj = simple_strtoul (str, NULL, 0);
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="108" endline="108">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="123" endline="176">
{
    unsigned long ticks, loopbit;
    int lps_precision = LPS_PREC;
    if (preset_lpj) {
        loops_per_jiffy = preset_lpj;
        printk (KERN_INFO "Calibrating delay loop (skipped) preset value.. ");
    }
    else if ((smp_processor_id () == 0) && lpj_fine) {
        loops_per_jiffy = lpj_fine;
        printk (KERN_INFO "Calibrating delay loop (skipped), " "value calculated using timer frequency.. ");
    }
    else if ((loops_per_jiffy = calibrate_delay_direct ()) != 0) {
        printk (KERN_INFO "Calibrating delay using timer specific routine.. ");
    }
    else {
        loops_per_jiffy = (1 << 12);
        printk (KERN_INFO "Calibrating delay loop... ");
        while ((loops_per_jiffy <<= 1) != 0) {
            ticks = jiffies;
            while (ticks == jiffies)
                ;
            ticks = jiffies;
            __delay (loops_per_jiffy);
            ticks = jiffies - ticks;
            if (ticks)
                break;
        }
        loops_per_jiffy >>= 1;
        loopbit = loops_per_jiffy;
        while (lps_precision-- && (loopbit >>= 1)) {
            loops_per_jiffy |= loopbit;
            ticks = jiffies;
            while (ticks == jiffies)
                ;
            ticks = jiffies;
            __delay (loops_per_jiffy);
            if (jiffies != ticks)
                loops_per_jiffy &= ~loopbit;
        }
    }
    printk (KERN_CONT "%lu.%02lu BogoMIPS (lpj=%lu)\n", loops_per_jiffy / (500000 / HZ), (loops_per_jiffy / (5000 / HZ)) % 100, loops_per_jiffy);
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="127" endline="131">
{
    loops_per_jiffy = preset_lpj;
    printk (KERN_INFO "Calibrating delay loop (skipped) preset value.. ");
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="131" endline="136">
{
    loops_per_jiffy = lpj_fine;
    printk (KERN_INFO "Calibrating delay loop (skipped), " "value calculated using timer frequency.. ");
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="136" endline="139">
{
    printk (KERN_INFO "Calibrating delay using timer specific routine.. ");
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="139" endline="172">
{
    loops_per_jiffy = (1 << 12);
    printk (KERN_INFO "Calibrating delay loop... ");
    while ((loops_per_jiffy <<= 1) != 0) {
        ticks = jiffies;
        while (ticks == jiffies)
            ;
        ticks = jiffies;
        __delay (loops_per_jiffy);
        ticks = jiffies - ticks;
        if (ticks)
            break;
    }
    loops_per_jiffy >>= 1;
    loopbit = loops_per_jiffy;
    while (lps_precision-- && (loopbit >>= 1)) {
        loops_per_jiffy |= loopbit;
        ticks = jiffies;
        while (ticks == jiffies)
            ;
        ticks = jiffies;
        __delay (loops_per_jiffy);
        if (jiffies != ticks)
            loops_per_jiffy &= ~loopbit;
    }
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="143" endline="154">
{
    ticks = jiffies;
    while (ticks == jiffies)
        ;
    ticks = jiffies;
    __delay (loops_per_jiffy);
    ticks = jiffies - ticks;
    if (ticks)
        break;
}
</source>
<source file="/cmpt816/tmp/init/calibrate.c.ifdefed" startline="162" endline="171">
{
    loops_per_jiffy |= loopbit;
    ticks = jiffies;
    while (ticks == jiffies)
        ;
    ticks = jiffies;
    __delay (loops_per_jiffy);
    if (jiffies != ticks)
        loops_per_jiffy &= ~loopbit;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="93" endline="93">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="178" endline="181">
{
    reset_devices = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="192" endline="218">
{
    struct obs_kernel_param *p;
    int had_early_param = 0;
    p = __setup_start;
    do {
        int n = strlen (p->str);
        if (!strncmp (line, p->str, n)) {
            if (p->early) {
                if (line[n] == '\0' || line[n] == '=')
                    had_early_param = 1;
            }
            else if (!p->setup_func) {
                printk (KERN_WARNING "Parameter %s is obsolete," " ignored\n", p -> str);
                return 1;
            }
            else if (p->setup_func (line +n))
                return 1;
        }
        p++;
    }
    while (p < __setup_end);
    return had_early_param;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="197" endline="215">
{
    int n = strlen (p->str);
    if (!strncmp (line, p->str, n)) {
        if (p->early) {
            if (line[n] == '\0' || line[n] == '=')
                had_early_param = 1;
        }
        else if (!p->setup_func) {
            printk (KERN_WARNING "Parameter %s is obsolete," " ignored\n", p -> str);
            return 1;
        }
        else if (p->setup_func (line +n))
            return 1;
    }
    p++;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="199" endline="213">
{
    if (p->early) {
        if (line[n] == '\0' || line[n] == '=')
            had_early_param = 1;
    }
    else if (!p->setup_func) {
        printk (KERN_WARNING "Parameter %s is obsolete," " ignored\n", p -> str);
        return 1;
    }
    else if (p->setup_func (line +n))
        return 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="200" endline="207">
{
    if (line[n] == '\0' || line[n] == '=')
        had_early_param = 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="207" endline="211">
{
    printk (KERN_WARNING "Parameter %s is obsolete," " ignored\n", p -> str);
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="229" endline="232">
{
    console_loglevel = 10;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="235" endline="238">
{
    console_loglevel = 4;
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="244" endline="247">
{
    get_option (& str, & console_loglevel);
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="256" endline="310">
{
    if (val) {
        if (val == param + strlen (param) + 1)
            val[-1] = '=';
        else if (val == param + strlen (param) + 2) {
            val[-2] = '=';
            memmove (val - 1, val, strlen (val) + 1);
            val--;
        }
        else
            BUG ();
    }
    if (obsolete_checksetup (param))
        return 0;
    if (strchr (param, '.') && (!val || strchr (param, '.') < val)) {
        printk (KERN_ERR "Unknown boot option `%s': ignoring\n", param);
        return 0;
    }
    if (panic_later)
        return 0;
    if (val) {
        unsigned int i;
        for (i = 0; envp_init[i]; i++) {
            if (i == MAX_INIT_ENVS) {
                panic_later = "Too many boot env vars at `%s'";
                panic_param = param;
            }
            if (!strncmp (param, envp_init[i], val -param))
                break;
        }
        envp_init[i] = param;
    }
    else {
        unsigned int i;
        for (i = 0; argv_init[i]; i++) {
            if (i == MAX_INIT_ARGS) {
                panic_later = "Too many boot init vars at `%s'";
                panic_param = param;
            }
        }
        argv_init[i] = param;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="258" endline="268">
{
    if (val == param + strlen (param) + 1)
        val[-1] = '=';
    else if (val == param + strlen (param) + 2) {
        val[-2] = '=';
        memmove (val - 1, val, strlen (val) + 1);
        val--;
    }
    else
        BUG ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="262" endline="266">
{
    val[-2] = '=';
    memmove (val - 1, val, strlen (val) + 1);
    val--;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="278" endline="281">
{
    printk (KERN_ERR "Unknown boot option `%s': ignoring\n", param);
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="286" endline="298">
{
    unsigned int i;
    for (i = 0; envp_init[i]; i++) {
        if (i == MAX_INIT_ENVS) {
            panic_later = "Too many boot env vars at `%s'";
            panic_param = param;
        }
        if (!strncmp (param, envp_init[i], val -param))
            break;
    }
    envp_init[i] = param;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="289" endline="296">
{
    if (i == MAX_INIT_ENVS) {
        panic_later = "Too many boot env vars at `%s'";
        panic_param = param;
    }
    if (!strncmp (param, envp_init[i], val -param))
        break;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="290" endline="293">
{
    panic_later = "Too many boot env vars at `%s'";
    panic_param = param;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="298" endline="308">
{
    unsigned int i;
    for (i = 0; argv_init[i]; i++) {
        if (i == MAX_INIT_ARGS) {
            panic_later = "Too many boot init vars at `%s'";
            panic_param = param;
        }
    }
    argv_init[i] = param;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="301" endline="306">
{
    if (i == MAX_INIT_ARGS) {
        panic_later = "Too many boot init vars at `%s'";
        panic_param = param;
    }
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="302" endline="305">
{
    panic_later = "Too many boot init vars at `%s'";
    panic_param = param;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="317" endline="330">
{
    unsigned int i;
    execute_command = str;
    for (i = 1; i < MAX_INIT_ARGS; i++)
        argv_init[i] = NULL;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="334" endline="342">
{
    unsigned int i;
    ramdisk_execute_command = str;
    for (i = 1; i < MAX_INIT_ARGS; i++)
        argv_init[i] = NULL;
    return 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="356" endline="356">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="357" endline="357">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="358" endline="358">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="433" endline="438">
{
    saved_command_line = alloc_bootmem (strlen (boot_command_line) +1);
    static_command_line = alloc_bootmem (strlen (command_line) +1);
    strcpy (saved_command_line, boot_command_line);
    strcpy (static_command_line, command_line);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="451" endline="472">
{
    int pid;
    kernel_thread (kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
    numa_default_policy ();
    pid = kernel_thread (kthreadd, NULL, CLONE_FS | CLONE_FILES);
    kthreadd_task = find_task_by_pid_ns (pid, &init_pid_ns);
    unlock_kernel ();
    init_idle_bootup_task (current);
    rcu_scheduler_starting ();
    preempt_enable_no_resched ();
    schedule ();
    preempt_disable ();
    cpu_idle ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="476" endline="491">
{
    struct obs_kernel_param *p;
    for (p = __setup_start; p < __setup_end; p++) {
        if ((p->early && strcmp (param, p->str) == 0) || (strcmp (param, "console") == 0 && strcmp (p->str, "earlycon") == 0)) {
            if (p->setup_func (val) != 0)
                printk (KERN_WARNING "Malformed early option '%s'\n", param);
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="479" endline="488">
{
    if ((p->early && strcmp (param, p->str) == 0) || (strcmp (param, "console") == 0 && strcmp (p->str, "earlycon") == 0)) {
        if (p->setup_func (val) != 0)
            printk (KERN_WARNING "Malformed early option '%s'\n", param);
    }
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="483" endline="487">
{
    if (p->setup_func (val) != 0)
        printk (KERN_WARNING "Malformed early option '%s'\n", param);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="494" endline="496">
{
    parse_args ("early options", cmdline, NULL, 0, do_early_param);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="500" endline="511">
{
    static __initdata int done = 0;
    static __initdata char tmp_cmdline [COMMAND_LINE_SIZE];
    if (done)
        return;
    strlcpy (tmp_cmdline, boot_command_line, COMMAND_LINE_SIZE);
    parse_early_options (tmp_cmdline);
    done = 1;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="518" endline="524">
{
    int cpu = smp_processor_id ();
    set_cpu_online (cpu, true);
    set_cpu_present (cpu, true);
    set_cpu_possible (cpu, true);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="527" endline="528">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="531" endline="532">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="538" endline="548">
{
    page_cgroup_init_flatmem ();
    mem_init ();
    kmem_cache_init ();
    pgtable_cache_init ();
    vmalloc_init ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="551" endline="720">
{
    char *command_line;
    extern struct kernel_param __start___param [], __stop___param [];
    smp_setup_processor_id ();
    lockdep_init ();
    debug_objects_early_init ();
    boot_init_stack_canary ();
    cgroup_init_early ();
    local_irq_disable ();
    early_boot_irqs_off ();
    early_init_irq_lock_class ();
    lock_kernel ();
    tick_init ();
    boot_cpu_init ();
    page_address_init ();
    printk (KERN_NOTICE "%s", linux_banner);
    setup_arch (& command_line);
    mm_init_owner (& init_mm, & init_task);
    setup_command_line (command_line);
    setup_nr_cpu_ids ();
    setup_per_cpu_areas ();
    smp_prepare_boot_cpu ();
    build_all_zonelists ();
    page_alloc_init ();
    printk (KERN_NOTICE "Kernel command line: %s\n", boot_command_line);
    parse_early_param ();
    parse_args ("Booting kernel", static_command_line, __start___param, __stop___param - __start___param, & unknown_bootoption);
    pidhash_init ();
    vfs_caches_init_early ();
    sort_main_extable ();
    trap_init ();
    mm_init ();
    sched_init ();
    preempt_disable ();
    if (!irqs_disabled ()) {
        printk (KERN_WARNING "start_kernel(): bug: interrupts were " "enabled *very* early, fixing it\n");
        local_irq_disable ();
    }
    rcu_init ();
    early_irq_init ();
    init_IRQ ();
    prio_tree_init ();
    init_timers ();
    hrtimers_init ();
    softirq_init ();
    timekeeping_init ();
    time_init ();
    sched_clock_init ();
    profile_init ();
    if (!irqs_disabled ())
        printk (KERN_CRIT "start_kernel(): bug: interrupts were " "enabled early\n");
    early_boot_irqs_on ();
    local_irq_enable ();
    set_gfp_allowed_mask (__GFP_BITS_MASK);
    kmem_cache_init_late ();
    console_init ();
    if (panic_later)
        panic (panic_later, panic_param);
    lockdep_info ();
    locking_selftest ();
    page_cgroup_init ();
    enable_debug_pagealloc ();
    kmemtrace_init ();
    kmemleak_init ();
    debug_objects_mem_init ();
    idr_init_cache ();
    setup_per_cpu_pageset ();
    numa_policy_init ();
    if (late_time_init)
        late_time_init ();
    calibrate_delay ();
    pidmap_init ();
    anon_vma_init ();
    thread_info_cache_init ();
    cred_init ();
    fork_init (num_physpages);
    proc_caches_init ();
    buffer_init ();
    key_init ();
    security_init ();
    vfs_caches_init (num_physpages);
    radix_tree_init ();
    signals_init ();
    page_writeback_init ();
    cgroup_init ();
    cpuset_init ();
    taskstats_init_early ();
    delayacct_init ();
    check_bugs ();
    acpi_early_init ();
    ftrace_init ();
    rest_init ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="619" endline="623">
{
    printk (KERN_WARNING "start_kernel(): bug: interrupts were " "enabled *very* early, fixing it\n");
    local_irq_disable ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="724" endline="731">
{
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="741" endline="783">
{
    int count = preempt_count ();
    ktime_t calltime, delta, rettime;
    if (initcall_debug) {
        call.caller = task_pid_nr (current);
        printk ("calling  %pF @ %i\n", fn, call.caller);
        calltime = ktime_get ();
        trace_boot_call (& call, fn);
        enable_boot_trace ();
    }
    ret.result = fn ();
    if (initcall_debug) {
        disable_boot_trace ();
        rettime = ktime_get ();
        delta = ktime_sub (rettime, calltime);
        ret.duration = (unsigned long long) ktime_to_ns (delta) >> 10;
        trace_boot_ret (& ret, fn);
        printk ("initcall %pF returned %d after %Ld usecs\n", fn, ret.result, ret.duration);
    }
    msgbuf[0] = 0;
    if (ret.result && ret.result != -ENODEV && initcall_debug)
        sprintf (msgbuf, "error code %d ", ret.result);
    if (preempt_count () != count) {
        strlcat (msgbuf, "preemption imbalance ", sizeof (msgbuf));
        preempt_count () = count;
    }
    if (irqs_disabled ()) {
        strlcat (msgbuf, "disabled interrupts ", sizeof (msgbuf));
        local_irq_enable ();
    }
    if (msgbuf[0]) {
        printk ("initcall %pF returned with %s\n", fn, msgbuf);
    }
    return ret.result;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="745" endline="751">
{
    call.caller = task_pid_nr (current);
    printk ("calling  %pF @ %i\n", fn, call.caller);
    calltime = ktime_get ();
    trace_boot_call (& call, fn);
    enable_boot_trace ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="755" endline="763">
{
    disable_boot_trace ();
    rettime = ktime_get ();
    delta = ktime_sub (rettime, calltime);
    ret.duration = (unsigned long long) ktime_to_ns (delta) >> 10;
    trace_boot_ret (& ret, fn);
    printk ("initcall %pF returned %d after %Ld usecs\n", fn, ret.result, ret.duration);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="770" endline="773">
{
    strlcat (msgbuf, "preemption imbalance ", sizeof (msgbuf));
    preempt_count () = count;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="774" endline="777">
{
    strlcat (msgbuf, "disabled interrupts ", sizeof (msgbuf));
    local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="778" endline="780">
{
    printk ("initcall %pF returned with %s\n", fn, msgbuf);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="789" endline="797">
{
    initcall_t *call;
    for (call = __early_initcall_end; call < __initcall_end; call++)
        do_one_initcall (*call);
    flush_scheduled_work ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="807" endline="816">
{
    rcu_init_sched ();
    init_workqueues ();
    cpuset_init_smp ();
    usermodehelper_init ();
    driver_init ();
    init_irq_proc ();
    do_ctors ();
    do_initcalls ();
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="819" endline="824">
{
    initcall_t *call;
    for (call = __initcall_start; call < __early_initcall_end; call++)
        do_one_initcall (*call);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="827" endline="830">
{
    argv_init[0] = init_filename;
    kernel_execve (init_filename, argv_init, envp_init);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="837" endline="877">
{
    async_synchronize_full ();
    free_initmem ();
    unlock_kernel ();
    mark_rodata_ro ();
    system_state = SYSTEM_RUNNING;
    numa_default_policy ();
    if (sys_open ((const char __user *) "/dev/console", O_RDWR, 0) < 0)
        printk (KERN_WARNING "Warning: unable to open an initial console.\n");
    (void) sys_dup (0);
    (void) sys_dup (0);
    current->signal->flags |= SIGNAL_UNKILLABLE;
    if (ramdisk_execute_command) {
        run_init_process (ramdisk_execute_command);
        printk (KERN_WARNING "Failed to execute %s\n", ramdisk_execute_command);
    }
    if (execute_command) {
        run_init_process (execute_command);
        printk (KERN_WARNING "Failed to execute %s.  Attempting " "defaults...\n", execute_command);
    }
    run_init_process ("/sbin/init");
    run_init_process ("/etc/init");
    run_init_process ("/bin/init");
    run_init_process ("/bin/sh");
    panic ("No init found.  Try passing init= option to kernel.");
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="854" endline="858">
{
    run_init_process (ramdisk_execute_command);
    printk (KERN_WARNING "Failed to execute %s\n", ramdisk_execute_command);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="866" endline="870">
{
    run_init_process (execute_command);
    printk (KERN_WARNING "Failed to execute %s.  Attempting " "defaults...\n", execute_command);
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="880" endline="934">
{
    lock_kernel ();
    set_mems_allowed (node_possible_map);
    set_cpus_allowed_ptr (current, cpu_all_mask);
    init_pid_ns.child_reaper = current;
    cad_pid = task_pid (current);
    smp_prepare_cpus (setup_max_cpus);
    do_pre_smp_initcalls ();
    start_boot_trace ();
    smp_init ();
    sched_init_smp ();
    do_basic_setup ();
    if (!ramdisk_execute_command)
        ramdisk_execute_command = "/init";
    if (sys_access ((const char __user *) ramdisk_execute_command, 0) != 0) {
        ramdisk_execute_command = NULL;
        prepare_namespace ();
    }
    init_post ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/init/main.c.ifdefed" startline="921" endline="924">
{
    ramdisk_execute_command = NULL;
    prepare_namespace ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vgetcpu.c.ifdefed" startline="18" endline="33">
{
    unsigned int p;
    if (*vdso_vgetcpu_mode == VGETCPU_RDTSCP) {
        native_read_tscp (& p);
    }
    else {
        asm ("lsl %1,%0"
            : "=r" (p)
            : "r" (__PER_CPU_SEG)
        )}
    if (cpu)
        *cpu = p & 0xfff;
    if (node)
        *node = p >> 12;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vgetcpu.c.ifdefed" startline="21" endline="24">
{
    native_read_tscp (& p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vgetcpu.c.ifdefed" startline="24" endline="27">
{
    asm ("lsl %1,%0"
        : "=r" (p)
        : "r" (__PER_CPU_SEG)
    )}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="29" endline="35">
{
    if (*(void**) p != (void *) VMAGIC) {
        printk ("VDSO: variable %s broken\n", name);
        vdso_enabled = 0;
    }
    return p;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="30" endline="33">
{
    printk ("VDSO: variable %s broken\n", name);
    vdso_enabled = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="38" endline="75">
{
    int npages = (vdso_end - vdso_start + PAGE_SIZE - 1) / PAGE_SIZE;
    int i;
    char *vbase;
    vdso_size = npages << PAGE_SHIFT;
    vdso_pages = kmalloc (sizeof (struct page *) * npages, GFP_KERNEL);
    if (!vdso_pages)
        goto oom;
    for (i = 0; i < npages; i++) {
        struct page *p;
        p = alloc_page (GFP_KERNEL);
        if (!p)
            goto oom;
        vdso_pages[i] = p;
        copy_page (page_address (p), vdso_start + i * PAGE_SIZE);
    }
    vbase = vmap (vdso_pages, npages, 0, PAGE_KERNEL);
    if (!vbase)
        goto oom;
    if (memcmp (vbase, "\177ELF", 4)) {
        printk ("VDSO: I'm broken; not ELF\n");
        vdso_enabled = 0;
    }
    return 0;
oom :
    printk ("Cannot allocate vdso\n");
    vdso_enabled = 0;
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="47" endline="54">
{
    struct page *p;
    p = alloc_page (GFP_KERNEL);
    if (!p)
        goto oom;
    vdso_pages[i] = p;
    copy_page (page_address (p), vdso_start + i * PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="60" endline="63">
{
    printk ("VDSO: I'm broken; not ELF\n");
    vdso_enabled = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="85" endline="98">
{
    unsigned long addr, end;
    unsigned offset;
    end = (start + PMD_SIZE - 1) & PMD_MASK;
    if (end >= TASK_SIZE_MAX)
        end = TASK_SIZE_MAX;
    end -= len;
    offset = get_random_int () & (PTRS_PER_PTE - 1);
    addr = start + (offset << PAGE_SHIFT);
    if (addr >= end)
        addr = end;
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="103" endline="134">
{
    struct mm_struct *mm = current->mm;
    unsigned long addr;
    int ret;
    if (!vdso_enabled)
        return 0;
    down_write (& mm -> mmap_sem);
    addr = vdso_addr (mm->start_stack, vdso_size);
    addr = get_unmapped_area (NULL, addr, vdso_size, 0, 0);
    if (IS_ERR_VALUE (addr)) {
        ret = addr;
        goto up_fail;
    }
    current->mm->context.vdso = (void *) addr;
    ret = install_special_mapping (mm, addr, vdso_size, VM_READ | VM_EXEC | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC | VM_ALWAYSDUMP, vdso_pages);
    if (ret) {
        current->mm->context.vdso = NULL;
        goto up_fail;
    }
up_fail :
    up_write (&mm->mmap_sem);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="114" endline="117">
{
    ret = addr;
    goto up_fail;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="126" endline="129">
{
    current->mm->context.vdso = NULL;
    goto up_fail;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vma.c.ifdefed" startline="137" endline="140">
{
    vdso_enabled = simple_strtoul (s, NULL, 0);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="30" endline="35">
{
    long ret;
    asm ("syscall"
        : "=a" (ret)
        : "0" (__NR_clock_gettime), "D" (clock), "S" (ts)
        : "memory"
    ) return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="38" endline="44">
{
    long v;
    cycles_t (*vread) (void);
    vread = gtod->clock.vread;
    v = (vread () - gtod->clock.cycle_last) & gtod->clock.mask;
    return (v * gtod->clock.mult) >> gtod->clock.shift;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="47" endline="57">
{
    unsigned long seq, ns;
    do {
        seq = read_seqbegin (&gtod->lock);
        ts->tv_sec = gtod->wall_time_sec;
        ts->tv_nsec = gtod->wall_time_nsec;
        ns = vgetns ();
    }
    while (unlikely (read_seqretry (&gtod->lock, seq)));
    timespec_add_ns (ts, ns);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="49" endline="54">
{
    seq = read_seqbegin (&gtod->lock);
    ts->tv_sec = gtod->wall_time_sec;
    ts->tv_nsec = gtod->wall_time_nsec;
    ns = vgetns ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="62" endline="73">
{
    while (nsec >= NSEC_PER_SEC) {
        nsec -= NSEC_PER_SEC;
        ++sec;
    }
    while (nsec < 0) {
        nsec += NSEC_PER_SEC;
        --sec;
    }
    ts->tv_sec = sec;
    ts->tv_nsec = nsec;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="63" endline="66">
{
    nsec -= NSEC_PER_SEC;
    ++sec;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="67" endline="70">
{
    nsec += NSEC_PER_SEC;
    --sec;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="76" endline="87">
{
    unsigned long seq, ns, secs;
    do {
        seq = read_seqbegin (&gtod->lock);
        secs = gtod->wall_time_sec;
        ns = gtod->wall_time_nsec + vgetns ();
        secs += gtod->wall_to_monotonic.tv_sec;
        ns += gtod->wall_to_monotonic.tv_nsec;
    }
    while (unlikely (read_seqretry (&gtod->lock, seq)));
    vset_normalized_timespec (ts, secs, ns);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="78" endline="84">
{
    seq = read_seqbegin (&gtod->lock);
    secs = gtod->wall_time_sec;
    ns = gtod->wall_time_nsec + vgetns ();
    secs += gtod->wall_to_monotonic.tv_sec;
    ns += gtod->wall_to_monotonic.tv_nsec;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="90" endline="99">
{
    if (likely (gtod->sysctl_enabled && gtod->clock.vread))
        switch (clock) {
        case CLOCK_REALTIME :
            return do_realtime (ts);
        case CLOCK_MONOTONIC :
            return do_monotonic (ts);
        }
    return vdso_fallback_gettime (clock, ts);
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="92" endline="97">
{
case CLOCK_REALTIME :
    return do_realtime (ts);
case CLOCK_MONOTONIC :
    return do_monotonic (ts);
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="104" endline="124">
{
    long ret;
    if (likely (gtod->sysctl_enabled && gtod->clock.vread)) {
        if (likely (tv != NULL)) {
            BUILD_BUG_ON (offsetof (struct timeval, tv_usec) != offsetof (struct timespec, tv_nsec) || sizeof (* tv) != sizeof (struct timespec));
            do_realtime ((struct timespec *) tv);
            tv->tv_usec /= 1000;
        }
        if (unlikely (tz != NULL)) {
            tz->tz_minuteswest = gtod->sys_tz.tz_minuteswest;
            tz->tz_dsttime = gtod->sys_tz.tz_dsttime;
        }
        return 0;
    }
    asm ("syscall"
        : "=a" (ret)
        : "0" (__NR_gettimeofday), "D" (tv), "S" (tz)
        : "memory"
    ) return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="106" endline="120">
{
    if (likely (tv != NULL)) {
        BUILD_BUG_ON (offsetof (struct timeval, tv_usec) != offsetof (struct timespec, tv_nsec) || sizeof (* tv) != sizeof (struct timespec));
        do_realtime ((struct timespec *) tv);
        tv->tv_usec /= 1000;
    }
    if (unlikely (tz != NULL)) {
        tz->tz_minuteswest = gtod->sys_tz.tz_minuteswest;
        tz->tz_dsttime = gtod->sys_tz.tz_dsttime;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="107" endline="113">
{
    BUILD_BUG_ON (offsetof (struct timeval, tv_usec) != offsetof (struct timespec, tv_nsec) || sizeof (* tv) != sizeof (struct timespec));
    do_realtime ((struct timespec *) tv);
    tv->tv_usec /= 1000;
}
</source>
<source file="/cmpt816/tmp/arch/x86/vdso/vclock_gettime.c.ifdefed" startline="114" endline="118">
{
    tz->tz_minuteswest = gtod->sys_tz.tz_minuteswest;
    tz->tz_dsttime = gtod->sys_tz.tz_dsttime;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="42" endline="63">
{
    u64 this_offset;
    if (unlikely (tsc_disabled)) {
        return (jiffies_64 - INITIAL_JIFFIES) * (1000000000 / HZ);
    }
    rdtscll (this_offset);
    return __cycles_2_ns (this_offset);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="53" endline="56">
{
    return (jiffies_64 - INITIAL_JIFFIES) * (1000000000 / HZ);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="78" endline="80">
{
    return tsc_unstable;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="97" endline="100">
{
    setup_clear_cpu_cap (X86_FEATURE_TSC);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="106" endline="110">
{
    if (!strcmp (str, "reliable"))
        tsc_clocksource_reliable = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="121" endline="136">
{
    u64 t1, t2;
    int i;
    for (i = 0; i < MAX_RETRIES; i++) {
        t1 = get_cycles ();
        if (hpet)
            *p = hpet_readl (HPET_COUNTER) & 0xFFFFFFFF;
        else
            *p = acpi_pm_read_early ();
        t2 = get_cycles ();
        if ((t2 - t1) < SMI_TRESHOLD)
            return t2;
    }
    return ULLONG_MAX;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="125" endline="134">
{
    t1 = get_cycles ();
    if (hpet)
        *p = hpet_readl (HPET_COUNTER) & 0xFFFFFFFF;
    else
        *p = acpi_pm_read_early ();
    t2 = get_cycles ();
    if ((t2 - t1) < SMI_TRESHOLD)
        return t2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="142" endline="153">
{
    u64 tmp;
    if (hpet2 < hpet1)
        hpet2 += 0x100000000ULL;
    hpet2 -= hpet1;
    tmp = ((u64) hpet2 * hpet_readl (HPET_PERIOD));
    do_div (tmp, 1000000);
    do_div (deltatsc, tmp);
    return (unsigned long) deltatsc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="159" endline="173">
{
    u64 tmp;
    if (!pm1 && !pm2)
        return ULONG_MAX;
    if (pm2 < pm1)
        pm2 += (u64) ACPI_PM_OVRRUN;
    pm2 -= pm1;
    tmp = pm2 * 1000000000LL;
    do_div (tmp, PMTMR_TICKS_PER_SEC);
    do_div (deltatsc, tmp);
    return (unsigned long) deltatsc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="192" endline="241">
{
    u64 tsc, t1, t2, delta;
    unsigned long tscmin, tscmax;
    int pitcnt;
    outb ((inb (0x61) & ~ 0x02) | 0x01, 0x61);
    outb (0xb0, 0x43);
    outb (latch & 0xff, 0x42);
    outb (latch >> 8, 0x42);
    tsc = t1 = t2 = get_cycles ();
    pitcnt = 0;
    tscmax = 0;
    tscmin = ULONG_MAX;
    while ((inb (0x61) & 0x20) == 0) {
        t2 = get_cycles ();
        delta = t2 - tsc;
        tsc = t2;
        if ((unsigned long) delta < tscmin)
            tscmin = (unsigned int) delta;
        if ((unsigned long) delta > tscmax)
            tscmax = (unsigned int) delta;
        pitcnt++;
    }
    if (pitcnt < loopmin || tscmax > 10 * tscmin)
        return ULONG_MAX;
    delta = t2 - t1;
    do_div (delta, ms);
    return delta;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="214" endline="223">
{
    t2 = get_cycles ();
    delta = t2 - tsc;
    tsc = t2;
    if ((unsigned long) delta < tscmin)
        tscmin = (unsigned int) delta;
    if ((unsigned long) delta > tscmax)
        tscmax = (unsigned int) delta;
    pitcnt++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="279" endline="283">
{
    inb (0x42);
    return inb (0x42) == val;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="286" endline="303">
{
    int count;
    u64 tsc = 0;
    for (count = 0; count < 50000; count++) {
        if (!pit_verify_msb (val))
            break;
        tsc = get_cycles ();
    }
    *deltap = get_cycles () - tsc;
    *tscp = tsc;
    return count > 5;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="290" endline="294">
{
    if (!pit_verify_msb (val))
        break;
    tsc = get_cycles ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="315" endline="394">
{
    int i;
    u64 tsc, delta;
    unsigned long d1, d2;
    outb ((inb (0x61) & ~ 0x02) | 0x01, 0x61);
    outb (0xb0, 0x43);
    outb (0xff, 0x42);
    outb (0xff, 0x42);
    pit_verify_msb (0);
    if (pit_expect_msb (0xff, &tsc, &d1)) {
        for (i = 1; i <= MAX_QUICK_PIT_ITERATIONS; i++) {
            if (!pit_expect_msb (0xff - i, &delta, &d2))
                break;
            delta -= tsc;
            if (d1 + d2 >= delta >> 11)
                continue;
            if (!pit_verify_msb (0xfe - i))
                break;
            goto success;
        }
    }
    printk ("Fast TSC calibration failed\n");
    return 0;
success :
    delta += (long) (d2 - d1) / 2;
    delta *= PIT_TICK_RATE;
    do_div (delta, i * 256 * 1000);
    printk ("Fast TSC calibration using PIT\n");
    return delta;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="346" endline="369">
{
    for (i = 1; i <= MAX_QUICK_PIT_ITERATIONS; i++) {
        if (!pit_expect_msb (0xff - i, &delta, &d2))
            break;
        delta -= tsc;
        if (d1 + d2 >= delta >> 11)
            continue;
        if (!pit_verify_msb (0xfe - i))
            break;
        goto success;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="347" endline="368">
{
    if (!pit_expect_msb (0xff - i, &delta, &d2))
        break;
    delta -= tsc;
    if (d1 + d2 >= delta >> 11)
        continue;
    if (!pit_verify_msb (0xfe - i))
        break;
    goto success;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="400" endline="561">
{
    u64 tsc1, tsc2, delta, ref1, ref2;
    unsigned long tsc_pit_min = ULONG_MAX, tsc_ref_min = ULONG_MAX;
    unsigned long flags, latch, ms, fast_calibrate, hv_tsc_khz;
    int hpet = is_hpet_enabled (), i, loopmin;
    hv_tsc_khz = get_hypervisor_tsc_freq ();
    if (hv_tsc_khz) {
        printk (KERN_INFO "TSC: Frequency read from the hypervisor\n");
        return hv_tsc_khz;
    }
    local_irq_save (flags);
    fast_calibrate = quick_pit_calibrate ();
    local_irq_restore (flags);
    if (fast_calibrate)
        return fast_calibrate;
    latch = CAL_LATCH;
    ms = CAL_MS;
    loopmin = CAL_PIT_LOOPS;
    for (i = 0; i < 3; i++) {
        unsigned long tsc_pit_khz;
        local_irq_save (flags);
        tsc1 = tsc_read_refs (&ref1, hpet);
        tsc_pit_khz = pit_calibrate_tsc (latch, ms, loopmin);
        tsc2 = tsc_read_refs (&ref2, hpet);
        local_irq_restore (flags);
        tsc_pit_min = min (tsc_pit_min, tsc_pit_khz);
        if (!hpet && !ref1 && !ref2)
            continue;
        if (tsc1 == ULLONG_MAX || tsc2 == ULLONG_MAX)
            continue;
        tsc2 = (tsc2 - tsc1) * 1000000LL;
        if (hpet)
            tsc2 = calc_hpet_ref (tsc2, ref1, ref2);
        else
            tsc2 = calc_pmtimer_ref (tsc2, ref1, ref2);
        tsc_ref_min = min (tsc_ref_min, (unsigned long) tsc2);
        delta = ((u64) tsc_pit_min) * 100;
        do_div (delta, tsc_ref_min);
        if (delta >= 90 && delta <= 110) {
            printk (KERN_INFO "TSC: PIT calibration matches %s. %d loops\n", hpet ? "HPET" : "PMTIMER", i + 1);
            return tsc_ref_min;
        }
        if (i == 1 && tsc_pit_min == ULONG_MAX) {
            latch = CAL2_LATCH;
            ms = CAL2_MS;
            loopmin = CAL2_PIT_LOOPS;
        }
    }
    if (tsc_pit_min == ULONG_MAX) {
        printk (KERN_WARNING "TSC: Unable to calibrate against PIT\n");
        if (!hpet && !ref1 && !ref2) {
            printk ("TSC: No reference (HPET/PMTIMER) available\n");
            return 0;
        }
        if (tsc_ref_min == ULONG_MAX) {
            printk (KERN_WARNING "TSC: HPET/PMTIMER calibration " "failed.\n");
            return 0;
        }
        printk (KERN_INFO "TSC: using %s reference calibration\n", hpet ? "HPET" : "PMTIMER");
        return tsc_ref_min;
    }
    if (!hpet && !ref1 && !ref2) {
        printk (KERN_INFO "TSC: Using PIT calibration value\n");
        return tsc_pit_min;
    }
    if (tsc_ref_min == ULONG_MAX) {
        printk (KERN_WARNING "TSC: HPET/PMTIMER calibration failed. " "Using PIT calibration\n");
        return tsc_pit_min;
    }
    printk (KERN_WARNING "TSC: PIT calibration deviates from %s: %lu %lu.\n", hpet ? "HPET" : "PMTIMER", tsc_pit_min, tsc_ref_min);
    printk (KERN_INFO "TSC: Using PIT calibration value\n");
    return tsc_pit_min;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="407" endline="410">
{
    printk (KERN_INFO "TSC: Frequency read from the hypervisor\n");
    return hv_tsc_khz;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="448" endline="510">
{
    unsigned long tsc_pit_khz;
    local_irq_save (flags);
    tsc1 = tsc_read_refs (&ref1, hpet);
    tsc_pit_khz = pit_calibrate_tsc (latch, ms, loopmin);
    tsc2 = tsc_read_refs (&ref2, hpet);
    local_irq_restore (flags);
    tsc_pit_min = min (tsc_pit_min, tsc_pit_khz);
    if (!hpet && !ref1 && !ref2)
        continue;
    if (tsc1 == ULLONG_MAX || tsc2 == ULLONG_MAX)
        continue;
    tsc2 = (tsc2 - tsc1) * 1000000LL;
    if (hpet)
        tsc2 = calc_hpet_ref (tsc2, ref1, ref2);
    else
        tsc2 = calc_pmtimer_ref (tsc2, ref1, ref2);
    tsc_ref_min = min (tsc_ref_min, (unsigned long) tsc2);
    delta = ((u64) tsc_pit_min) * 100;
    do_div (delta, tsc_ref_min);
    if (delta >= 90 && delta <= 110) {
        printk (KERN_INFO "TSC: PIT calibration matches %s. %d loops\n", hpet ? "HPET" : "PMTIMER", i + 1);
        return tsc_ref_min;
    }
    if (i == 1 && tsc_pit_min == ULONG_MAX) {
        latch = CAL2_LATCH;
        ms = CAL2_MS;
        loopmin = CAL2_PIT_LOOPS;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="492" endline="497">
{
    printk (KERN_INFO "TSC: PIT calibration matches %s. %d loops\n", hpet ? "HPET" : "PMTIMER", i + 1);
    return tsc_ref_min;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="505" endline="509">
{
    latch = CAL2_LATCH;
    ms = CAL2_MS;
    loopmin = CAL2_PIT_LOOPS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="515" endline="537">
{
    printk (KERN_WARNING "TSC: Unable to calibrate against PIT\n");
    if (!hpet && !ref1 && !ref2) {
        printk ("TSC: No reference (HPET/PMTIMER) available\n");
        return 0;
    }
    if (tsc_ref_min == ULONG_MAX) {
        printk (KERN_WARNING "TSC: HPET/PMTIMER calibration " "failed.\n");
        return 0;
    }
    printk (KERN_INFO "TSC: using %s reference calibration\n", hpet ? "HPET" : "PMTIMER");
    return tsc_ref_min;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="520" endline="523">
{
    printk ("TSC: No reference (HPET/PMTIMER) available\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="526" endline="530">
{
    printk (KERN_WARNING "TSC: HPET/PMTIMER calibration " "failed.\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="540" endline="543">
{
    printk (KERN_INFO "TSC: Using PIT calibration value\n");
    return tsc_pit_min;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="546" endline="550">
{
    printk (KERN_WARNING "TSC: HPET/PMTIMER calibration failed. " "Using PIT calibration\n");
    return tsc_pit_min;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="564" endline="580">
{
    unsigned long cpu_khz_old = cpu_khz;
    if (cpu_has_tsc) {
        tsc_khz = calibrate_tsc ();
        cpu_khz = tsc_khz;
        cpu_data (0).loops_per_jiffy = cpufreq_scale (cpu_data (0).loops_per_jiffy, cpu_khz_old, cpu_khz);
        return 0;
    }
    else
        return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="568" endline="575">
{
    tsc_khz = calibrate_tsc ();
    cpu_khz = tsc_khz;
    cpu_data (0).loops_per_jiffy = cpufreq_scale (cpu_data (0).loops_per_jiffy, cpu_khz_old, cpu_khz);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="611" endline="631">
{
    unsigned long long tsc_now, ns_now, *offset;
    unsigned long flags, *scale;
    local_irq_save (flags);
    sched_clock_idle_sleep_event ();
    scale = &per_cpu (cyc2ns, cpu);
    offset = &per_cpu (cyc2ns_offset, cpu);
    rdtscll (tsc_now);
    ns_now = __cycles_2_ns (tsc_now);
    if (cpu_khz) {
        *scale = (NSEC_PER_MSEC << CYC2NS_SCALE_FACTOR) / cpu_khz;
        *offset = ns_now - (tsc_now * *scale >> CYC2NS_SCALE_FACTOR);
    }
    sched_clock_idle_wakeup_event (0);
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="624" endline="627">
{
    *scale = (NSEC_PER_MSEC << CYC2NS_SCALE_FACTOR) / cpu_khz;
    *offset = ns_now - (tsc_now * *scale >> CYC2NS_SCALE_FACTOR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="721" endline="726">
{
    cycle_t ret = (cycle_t) get_cycles ();
    return ret >= clocksource_tsc.cycle_last ? ret : clocksource_tsc.cycle_last;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="761" endline="771">
{
    if (!tsc_unstable) {
        tsc_unstable = 1;
        printk ("Marking TSC unstable due to %s\n", reason);
        if (clocksource_tsc.mult)
            clocksource_change_rating (&clocksource_tsc, 0);
        else
            clocksource_tsc.rating = 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="762" endline="770">
{
    tsc_unstable = 1;
    printk ("Marking TSC unstable due to %s\n", reason);
    if (clocksource_tsc.mult)
        clocksource_change_rating (&clocksource_tsc, 0);
    else
        clocksource_tsc.rating = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="776" endline="781">
{
    printk (KERN_NOTICE "%s detected: marking TSC unstable.\n", d -> ident);
    tsc_unstable = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="797" endline="810">
{
    if (boot_cpu_has (X86_FEATURE_TSC_RELIABLE))
        tsc_clocksource_reliable = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="817" endline="839">
{
    if (!cpu_has_tsc || tsc_unstable)
        return 1;
    if (boot_cpu_has (X86_FEATURE_CONSTANT_TSC))
        return 0;
    if (boot_cpu_data.x86_vendor != X86_VENDOR_INTEL) {
        if (num_possible_cpus () > 1)
            tsc_unstable = 1;
    }
    return tsc_unstable;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="832" endline="836">
{
    if (num_possible_cpus () > 1)
        tsc_unstable = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="842" endline="853">
{
    clocksource_tsc.mult = clocksource_khz2mult (tsc_khz, clocksource_tsc.shift);
    if (tsc_clocksource_reliable)
        clocksource_tsc.flags &= ~CLOCK_SOURCE_MUST_VERIFY;
    if (check_tsc_unstable ()) {
        clocksource_tsc.rating = 0;
        clocksource_tsc.flags &= ~CLOCK_SOURCE_IS_CONTINUOUS;
    }
    clocksource_register (& clocksource_tsc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="848" endline="851">
{
    clocksource_tsc.rating = 0;
    clocksource_tsc.flags &= ~CLOCK_SOURCE_IS_CONTINUOUS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="856" endline="909">
{
    u64 lpj;
    int cpu;
    if (!cpu_has_tsc)
        return;
    tsc_khz = calibrate_tsc ();
    cpu_khz = tsc_khz;
    if (!tsc_khz) {
        mark_tsc_unstable ("could not calculate TSC khz");
        return;
    }
    printk ("Detected %lu.%03lu MHz processor.\n", (unsigned long) cpu_khz / 1000, (unsigned long) cpu_khz % 1000);
    for_each_possible_cpu (cpu)
    set_cyc2ns_scale (cpu_khz, cpu);
    if (tsc_disabled > 0)
        return;
    tsc_disabled = 0;
    lpj = ((u64) tsc_khz * 1000);
    do_div (lpj, HZ);
    lpj_fine = lpj;
    use_tsc_delay ();
    dmi_check_system (bad_tsc_dmi_table);
    if (unsynchronized_tsc ())
        mark_tsc_unstable ("TSCs unsynchronized");
    check_system_tsc_reliable ();
    init_tsc_clocksource ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc.c.ifdefed" startline="866" endline="869">
{
    mark_tsc_unstable ("could not calculate TSC khz");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head.c.ifdefed" startline="20" endline="55">
{
    unsigned int lowmem, ebda_addr;
    if (paravirt_enabled ())
        return;
    lowmem = *(unsignedshort*) __va (BIOS_LOWMEM_KILOBYTES);
    lowmem <<= 10;
    ebda_addr = get_bios_ebda ();
    if ((lowmem - ebda_addr) <= 0x10000)
        lowmem = ebda_addr;
    if ((ebda_addr == 0) && (lowmem >= 0x9f000))
        lowmem = 0x9f000;
    if ((lowmem == 0) || (lowmem >= 0x100000))
        lowmem = 0x9f000;
    reserve_early_overlap_ok (lowmem, 0x100000, "BIOS reserved");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="131" endline="133">
{
    return iommu->cap & (1UL << IOMMU_CAP_NPCACHE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="142" endline="199">
{
    u32 *event = __evt;
    int type = (event[1] >> EVENT_TYPE_SHIFT) & EVENT_TYPE_MASK;
    int devid = (event[0] >> EVENT_DEVID_SHIFT) & EVENT_DEVID_MASK;
    int domid = (event[1] >> EVENT_DOMID_SHIFT) & EVENT_DOMID_MASK;
    int flags = (event[1] >> EVENT_FLAGS_SHIFT) & EVENT_FLAGS_MASK;
    u64 address = (u64) (((u64) event[3]) << 32) | event[2];
    printk (KERN_ERR "AMD IOMMU: Event logged [");
    switch (type) {
    case EVENT_TYPE_ILL_DEV :
        printk ("ILLEGAL_DEV_TABLE_ENTRY device=%02x:%02x.%x " "address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address, flags);
        break;
    case EVENT_TYPE_IO_FAULT :
        printk ("IO_PAGE_FAULT device=%02x:%02x.%x " "domain=0x%04x address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), domid, address, flags);
        break;
    case EVENT_TYPE_DEV_TAB_ERR :
        printk ("DEV_TAB_HARDWARE_ERROR device=%02x:%02x.%x " "address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address, flags);
        break;
    case EVENT_TYPE_PAGE_TAB_ERR :
        printk ("PAGE_TAB_HARDWARE_ERROR device=%02x:%02x.%x " "domain=0x%04x address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), domid, address, flags);
        break;
    case EVENT_TYPE_ILL_CMD :
        printk ("ILLEGAL_COMMAND_ERROR address=0x%016llx]\n", address);
        break;
    case EVENT_TYPE_CMD_HARD_ERR :
        printk ("COMMAND_HARDWARE_ERROR address=0x%016llx " "flags=0x%04x]\n", address, flags);
        break;
    case EVENT_TYPE_IOTLB_INV_TO :
        printk ("IOTLB_INV_TIMEOUT device=%02x:%02x.%x " "address=0x%016llx]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address);
        break;
    case EVENT_TYPE_INV_DEV_REQ :
        printk ("INVALID_DEVICE_REQUEST device=%02x:%02x.%x " "address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address, flags);
        break;
    default :
        printk (KERN_ERR "UNKNOWN type=0x%02x]\n", type);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="152" endline="198">
{
case EVENT_TYPE_ILL_DEV :
    printk ("ILLEGAL_DEV_TABLE_ENTRY device=%02x:%02x.%x " "address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address, flags);
    break;
case EVENT_TYPE_IO_FAULT :
    printk ("IO_PAGE_FAULT device=%02x:%02x.%x " "domain=0x%04x address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), domid, address, flags);
    break;
case EVENT_TYPE_DEV_TAB_ERR :
    printk ("DEV_TAB_HARDWARE_ERROR device=%02x:%02x.%x " "address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address, flags);
    break;
case EVENT_TYPE_PAGE_TAB_ERR :
    printk ("PAGE_TAB_HARDWARE_ERROR device=%02x:%02x.%x " "domain=0x%04x address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), domid, address, flags);
    break;
case EVENT_TYPE_ILL_CMD :
    printk ("ILLEGAL_COMMAND_ERROR address=0x%016llx]\n", address);
    break;
case EVENT_TYPE_CMD_HARD_ERR :
    printk ("COMMAND_HARDWARE_ERROR address=0x%016llx " "flags=0x%04x]\n", address, flags);
    break;
case EVENT_TYPE_IOTLB_INV_TO :
    printk ("IOTLB_INV_TIMEOUT device=%02x:%02x.%x " "address=0x%016llx]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address);
    break;
case EVENT_TYPE_INV_DEV_REQ :
    printk ("INVALID_DEVICE_REQUEST device=%02x:%02x.%x " "address=0x%016llx flags=0x%04x]\n", PCI_BUS (devid), PCI_SLOT (devid), PCI_FUNC (devid), address, flags);
    break;
default :
    printk (KERN_ERR "UNKNOWN type=0x%02x]\n", type);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="202" endline="219">
{
    u32 head, tail;
    unsigned long flags;
    spin_lock_irqsave (& iommu -> lock, flags);
    head = readl (iommu->mmio_base + MMIO_EVT_HEAD_OFFSET);
    tail = readl (iommu->mmio_base + MMIO_EVT_TAIL_OFFSET);
    while (head != tail) {
        iommu_print_event (iommu -> evt_buf + head);
        head = (head + EVENT_ENTRY_SIZE) % iommu->evt_buf_size;
    }
    writel (head, iommu -> mmio_base + MMIO_EVT_HEAD_OFFSET);
    spin_unlock_irqrestore (& iommu -> lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="211" endline="214">
{
    iommu_print_event (iommu -> evt_buf + head);
    head = (head + EVENT_ENTRY_SIZE) % iommu->evt_buf_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="222" endline="229">
{
    struct amd_iommu *iommu;
    for_each_iommu (iommu)
    iommu_poll_events (iommu);
    return IRQ_HANDLED;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="242" endline="256">
{
    u32 tail, head;
    u8 *target;
    tail = readl (iommu->mmio_base + MMIO_CMD_TAIL_OFFSET);
    target = iommu->cmd_buf + tail;
    memcpy_toio (target, cmd, sizeof (* cmd));
    tail = (tail + sizeof (*cmd)) % iommu->cmd_buf_size;
    head = readl (iommu->mmio_base + MMIO_CMD_HEAD_OFFSET);
    if (tail == head)
        return -ENOMEM;
    writel (tail, iommu -> mmio_base + MMIO_CMD_TAIL_OFFSET);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="263" endline="274">
{
    unsigned long flags;
    int ret;
    spin_lock_irqsave (& iommu -> lock, flags);
    ret = __iommu_queue_command (iommu, cmd);
    if (!ret)
        iommu->need_sync = true;
    spin_unlock_irqrestore (& iommu -> lock, flags);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="281" endline="301">
{
    int ready = 0;
    unsigned status = 0;
    unsigned long i = 0;
    INC_STATS_COUNTER (compl_wait);
    while (!ready && (i < EXIT_LOOP_COUNT)) {
        ++i;
        status = readl (iommu->mmio_base + MMIO_STATUS_OFFSET);
        ready = status & MMIO_STATUS_COM_WAIT_INT_MASK;
    }
    status &= ~MMIO_STATUS_COM_WAIT_INT_MASK;
    writel (status, iommu -> mmio_base + MMIO_STATUS_OFFSET);
    if (unlikely (i == EXIT_LOOP_COUNT))
        panic ("AMD IOMMU: Completion wait loop failed\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="288" endline="293">
{
    ++i;
    status = readl (iommu->mmio_base + MMIO_STATUS_OFFSET);
    ready = status & MMIO_STATUS_COM_WAIT_INT_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="308" endline="316">
{
    struct iommu_cmd cmd;
    memset (& cmd, 0, sizeof (cmd));
    cmd.data[0] = CMD_COMPL_WAIT_INT_MASK;
    CMD_SET_TYPE (& cmd, CMD_COMPL_WAIT);
    return __iommu_queue_command (iommu, &cmd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="326" endline="348">
{
    int ret = 0;
    unsigned long flags;
    spin_lock_irqsave (& iommu -> lock, flags);
    if (!iommu->need_sync)
        goto out;
    ret = __iommu_completion_wait (iommu);
    iommu->need_sync = false;
    if (ret)
        goto out;
    __iommu_wait_for_completion (iommu);
out :
    spin_unlock_irqrestore (&iommu->lock, flags);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="354" endline="367">
{
    struct iommu_cmd cmd;
    int ret;
    BUG_ON (iommu == NULL);
    memset (& cmd, 0, sizeof (cmd));
    CMD_SET_TYPE (& cmd, CMD_INV_DEV_ENTRY);
    cmd.data[0] = devid;
    ret = iommu_queue_command (iommu, &cmd);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="371" endline="382">
{
    memset (cmd, 0, sizeof (* cmd));
    address &= PAGE_MASK;
    CMD_SET_TYPE (cmd, CMD_INV_IOMMU_PAGES);
    cmd->data[1] |= domid;
    cmd->data[2] = lower_32_bits (address);
    cmd->data[3] = upper_32_bits (address);
    if (s)
        cmd->data[2] |= CMD_INV_IOMMU_PAGES_SIZE_MASK;
    if (pde)
        cmd->data[2] |= CMD_INV_IOMMU_PAGES_PDE_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="389" endline="398">
{
    struct iommu_cmd cmd;
    int ret;
    __iommu_build_inv_iommu_pages (& cmd, address, domid, pde, s);
    ret = iommu_queue_command (iommu, &cmd);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="407" endline="425">
{
    int s = 0;
    unsigned pages = iommu_num_pages (address, size, PAGE_SIZE);
    address &= PAGE_MASK;
    if (pages > 1) {
        address = CMD_INV_IOMMU_ALL_PAGES_ADDRESS;
        s = 1;
    }
    iommu_queue_inv_iommu_pages (iommu, address, domid, 0, s);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="413" endline="420">
{
    address = CMD_INV_IOMMU_ALL_PAGES_ADDRESS;
    s = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="429" endline="435">
{
    u64 address = CMD_INV_IOMMU_ALL_PAGES_ADDRESS;
    INC_STATS_COUNTER (domain_flush_single);
    iommu_queue_inv_iommu_pages (iommu, address, domid, 0, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="439" endline="445">
{
    u64 address = CMD_INV_IOMMU_ALL_PAGES_ADDRESS;
    INC_STATS_COUNTER (domain_flush_single);
    iommu_queue_inv_iommu_pages (iommu, address, domid, 1, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="452" endline="469">
{
    unsigned long flags;
    struct amd_iommu *iommu;
    struct iommu_cmd cmd;
    INC_STATS_COUNTER (domain_flush_all);
    __iommu_build_inv_iommu_pages (& cmd, CMD_INV_IOMMU_ALL_PAGES_ADDRESS, domid, 1, 1);

    for_each_iommu (iommu) {
        spin_lock_irqsave (& iommu -> lock, flags);
        __iommu_queue_command (iommu, & cmd);
        __iommu_completion_wait (iommu);
        __iommu_wait_for_completion (iommu);
        spin_unlock_irqrestore (& iommu -> lock, flags);
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="462" endline="468">
{
    spin_lock_irqsave (& iommu -> lock, flags);
    __iommu_queue_command (iommu, & cmd);
    __iommu_completion_wait (iommu);
    __iommu_wait_for_completion (iommu);
    spin_unlock_irqrestore (& iommu -> lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="472" endline="480">
{
    int i;
    for (i = 1; i < MAX_DOMAIN_ID; ++i) {
        if (!test_bit (i, amd_iommu_pd_alloc_bitmap))
            continue;
        iommu_flush_domain (i);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="475" endline="479">
{
    if (!test_bit (i, amd_iommu_pd_alloc_bitmap))
        continue;
    iommu_flush_domain (i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="483" endline="498">
{
    struct amd_iommu *iommu;
    int i;
    for (i = 0; i <= amd_iommu_last_bdf; ++i) {
        if (amd_iommu_pd_table[i] == NULL)
            continue;
        iommu = amd_iommu_rlookup_table[i];
        if (!iommu)
            continue;
        iommu_queue_inv_dev_entry (iommu, i);
        iommu_completion_wait (iommu);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="487" endline="497">
{
    if (amd_iommu_pd_table[i] == NULL)
        continue;
    iommu = amd_iommu_rlookup_table[i];
    if (!iommu)
        continue;
    iommu_queue_inv_dev_entry (iommu, i);
    iommu_completion_wait (iommu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="518" endline="542">
{
    u64 __pte, *pte;
    bus_addr = PAGE_ALIGN (bus_addr);
    phys_addr = PAGE_ALIGN (phys_addr);
    if (bus_addr > IOMMU_MAP_SIZE_L3 || !(prot & IOMMU_PROT_MASK))
        return -EINVAL;
    pte = alloc_pte (dom, bus_addr, NULL, GFP_KERNEL);
    if (IOMMU_PTE_PRESENT (*pte))
        return -EBUSY;
    __pte = phys_addr | IOMMU_PTE_P;
    if (prot & IOMMU_PROT_IR)
        __pte |= IOMMU_PTE_IR;
    if (prot & IOMMU_PROT_IW)
        __pte |= IOMMU_PTE_IW;
    *pte = __pte;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="546" endline="564">
{
    u64 *pte;
    pte = &dom->pt_root[IOMMU_PTE_L2_INDEX (bus_addr)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return;
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L1_INDEX (bus_addr)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return;
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L1_INDEX (bus_addr)];
    *pte = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="572" endline="582">
{
    u16 bdf, i;
    for (i = entry->devid_start; i <= entry->devid_end; ++i) {
        bdf = amd_iommu_alias_table[i];
        if (amd_iommu_rlookup_table[bdf] == iommu)
            return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="575" endline="579">
{
    bdf = amd_iommu_alias_table[i];
    if (amd_iommu_rlookup_table[bdf] == iommu)
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="591" endline="604">
{
    struct unity_map_entry *entry;
    int ret;
    list_for_each_entry (entry, &amd_iommu_unity_map, list) {
        if (!iommu_for_unity_map (iommu, entry))
            continue;
        ret = dma_ops_unity_map (iommu->default_dom, entry);
        if (ret)
            return ret;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="595" endline="601">
{
    if (!iommu_for_unity_map (iommu, entry))
        continue;
    ret = dma_ops_unity_map (iommu->default_dom, entry);
    if (ret)
        return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="612" endline="631">
{
    u64 addr;
    int ret;
    for (addr = e->address_start; addr < e->address_end; addr += PAGE_SIZE) {
        ret = iommu_map_page (&dma_dom->domain, addr, addr, e->prot);
        if (ret)
            return ret;
        if (addr < dma_dom->aperture_size)
            __set_bit (addr >> PAGE_SHIFT, dma_dom->aperture[0]->bitmap);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="617" endline="628">
{
    ret = iommu_map_page (&dma_dom->domain, addr, addr, e->prot);
    if (ret)
        return ret;
    if (addr < dma_dom->aperture_size)
        __set_bit (addr >> PAGE_SHIFT, dma_dom->aperture[0]->bitmap);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="638" endline="651">
{
    struct unity_map_entry *e;
    int ret;
    list_for_each_entry (e, &amd_iommu_unity_map, list) {
        if (!(devid >= e->devid_start && devid <= e->devid_end))
            continue;
        ret = dma_ops_unity_map (dma_dom, e);
        if (ret)
            return ret;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="642" endline="648">
{
    if (!(devid >= e->devid_start && devid <= e->devid_end))
        continue;
    ret = dma_ops_unity_map (dma_dom, e);
    if (ret)
        return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="675" endline="693">
{
    u64 *pte;
    pte = &domain->pt_root[IOMMU_PTE_L2_INDEX (address)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return NULL;
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L1_INDEX (address)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return NULL;
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L0_INDEX (address)];
    return pte;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="703" endline="779">
{
    int index = dma_dom->aperture_size >> APERTURE_RANGE_SHIFT;
    int i;
    if (index >= APERTURE_MAX_RANGES)
        return -ENOMEM;
    dma_dom->aperture[index] = kzalloc (sizeof (struct aperture_range), gfp);
    if (!dma_dom->aperture[index])
        return -ENOMEM;
    dma_dom->aperture[index]->bitmap = (void *) get_zeroed_page (gfp);
    if (!dma_dom->aperture[index]->bitmap)
        goto out_free;
    dma_dom->aperture[index]->offset = dma_dom->aperture_size;
    if (populate) {
        unsigned long address = dma_dom->aperture_size;
        int i, num_ptes = APERTURE_RANGE_PAGES / 512;
        u64 *pte, *pte_page;
        for (i = 0; i < num_ptes; ++i) {
            pte = alloc_pte (&dma_dom->domain, address, &pte_page, gfp);
            if (!pte)
                goto out_free;
            dma_dom->aperture[index]->pte_pages[i] = pte_page;
            address += APERTURE_RANGE_SIZE / 64;
        }
    }
    dma_dom->aperture_size += APERTURE_RANGE_SIZE;
    if (iommu->exclusion_start && iommu->exclusion_start >= dma_dom->aperture[index]->offset && iommu->exclusion_start < dma_dom->aperture_size) {
        unsigned long startpage = iommu->exclusion_start >> PAGE_SHIFT;
        int pages = iommu_num_pages (iommu->exclusion_start, iommu->exclusion_length, PAGE_SIZE);
        dma_ops_reserve_addresses (dma_dom, startpage, pages);
    }
    for (i = dma_dom->aperture[index]->offset; i < dma_dom->aperture_size; i += PAGE_SIZE) {
        u64 *pte = fetch_pte (&dma_dom->domain, i);
        if (!pte || !IOMMU_PTE_PRESENT (*pte))
            continue;
        dma_ops_reserve_addresses (dma_dom, i << PAGE_SHIFT, 1);
    }
    return 0;
out_free :
    free_page ((unsigned long) dma_dom->aperture[index]->bitmap);
    kfree (dma_dom -> aperture [index]);
    dma_dom->aperture[index] = NULL;
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="724" endline="739">
{
    unsigned long address = dma_dom->aperture_size;
    int i, num_ptes = APERTURE_RANGE_PAGES / 512;
    u64 *pte, *pte_page;
    for (i = 0; i < num_ptes; ++i) {
        pte = alloc_pte (&dma_dom->domain, address, &pte_page, gfp);
        if (!pte)
            goto out_free;
        dma_dom->aperture[index]->pte_pages[i] = pte_page;
        address += APERTURE_RANGE_SIZE / 64;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="729" endline="738">
{
    pte = alloc_pte (&dma_dom->domain, address, &pte_page, gfp);
    if (!pte)
        goto out_free;
    dma_dom->aperture[index]->pte_pages[i] = pte_page;
    address += APERTURE_RANGE_SIZE / 64;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="746" endline="752">
{
    unsigned long startpage = iommu->exclusion_start >> PAGE_SHIFT;
    int pages = iommu_num_pages (iommu->exclusion_start, iommu->exclusion_length, PAGE_SIZE);
    dma_ops_reserve_addresses (dma_dom, startpage, pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="762" endline="768">
{
    u64 *pte = fetch_pte (&dma_dom->domain, i);
    if (!pte || !IOMMU_PTE_PRESENT (*pte))
        continue;
    dma_ops_reserve_addresses (dma_dom, i << PAGE_SHIFT, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="787" endline="823">
{
    unsigned long next_bit = dom->next_address % APERTURE_RANGE_SIZE;
    int max_index = dom->aperture_size >> APERTURE_RANGE_SHIFT;
    int i = start >> APERTURE_RANGE_SHIFT;
    unsigned long boundary_size;
    unsigned long address = -1;
    unsigned long limit;
    next_bit >>= PAGE_SHIFT;
    boundary_size = ALIGN (dma_get_seg_boundary (dev) +1, PAGE_SIZE) >> PAGE_SHIFT;
    for (; i < max_index; ++i) {
        unsigned long offset = dom->aperture[i]->offset >> PAGE_SHIFT;
        if (dom->aperture[i]->offset >= dma_mask)
            break;
        limit = iommu_device_max_index (APERTURE_RANGE_PAGES, offset, dma_mask >> PAGE_SHIFT);
        address = iommu_area_alloc (dom->aperture[i]->bitmap, limit, next_bit, pages, 0, boundary_size, align_mask);
        if (address != -1) {
            address = dom->aperture[i]->offset + (address << PAGE_SHIFT);
            dom->next_address = address + (pages << PAGE_SHIFT);
            break;
        }
        next_bit = 0;
    }
    return address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="800" endline="820">
{
    unsigned long offset = dom->aperture[i]->offset >> PAGE_SHIFT;
    if (dom->aperture[i]->offset >= dma_mask)
        break;
    limit = iommu_device_max_index (APERTURE_RANGE_PAGES, offset, dma_mask >> PAGE_SHIFT);
    address = iommu_area_alloc (dom->aperture[i]->bitmap, limit, next_bit, pages, 0, boundary_size, align_mask);
    if (address != -1) {
        address = dom->aperture[i]->offset + (address << PAGE_SHIFT);
        dom->next_address = address + (pages << PAGE_SHIFT);
        break;
    }
    next_bit = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="812" endline="817">
{
    address = dom->aperture[i]->offset + (address << PAGE_SHIFT);
    dom->next_address = address + (pages << PAGE_SHIFT);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="830" endline="854">
{
    unsigned long address;
    address = dma_ops_area_alloc (dev, dom, pages, align_mask, dma_mask, dom->next_address);
    if (address == -1) {
        dom->next_address = 0;
        address = dma_ops_area_alloc (dev, dom, pages, align_mask, dma_mask, 0);
        dom->need_flush = true;
    }
    if (unlikely (address == -1))
        address = bad_dma_address;
    WARN_ON ((address + (PAGE_SIZE * pages)) > dom -> aperture_size);
    return address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="841" endline="846">
{
    dom->next_address = 0;
    address = dma_ops_area_alloc (dev, dom, pages, align_mask, dma_mask, 0);
    dom->need_flush = true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="864" endline="882">
{
    unsigned i = address >> APERTURE_RANGE_SHIFT;
    struct aperture_range *range = dom->aperture[i];
    BUG_ON (i >= APERTURE_MAX_RANGES || range == NULL);
    if (address >= dom->next_address)
        dom->need_flush = true;
    address = (address % APERTURE_RANGE_SIZE) >> PAGE_SHIFT;
    iommu_area_free (range -> bitmap, address, pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="895" endline="909">
{
    unsigned long flags;
    int id;
    write_lock_irqsave (& amd_iommu_devtable_lock, flags);
    id = find_first_zero_bit (amd_iommu_pd_alloc_bitmap, MAX_DOMAIN_ID);
    BUG_ON (id == 0);
    if (id > 0 && id < MAX_DOMAIN_ID)
        __set_bit (id, amd_iommu_pd_alloc_bitmap);
    else
        id = 0;
    write_unlock_irqrestore (& amd_iommu_devtable_lock, flags);
    return id;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="912" endline="919">
{
    unsigned long flags;
    write_lock_irqsave (& amd_iommu_devtable_lock, flags);
    if (id > 0 && id < MAX_DOMAIN_ID)
        __clear_bit (id, amd_iommu_pd_alloc_bitmap);
    write_unlock_irqrestore (& amd_iommu_devtable_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="928" endline="939">
{
    unsigned int i, last_page = dom->aperture_size >> PAGE_SHIFT;
    if (start_page + pages > last_page)
        pages = last_page - start_page;
    for (i = start_page; i < start_page + pages; ++i) {
        int index = i / APERTURE_RANGE_PAGES;
        int page = i % APERTURE_RANGE_PAGES;
        __set_bit (page, dom -> aperture [index] -> bitmap);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="934" endline="938">
{
    int index = i / APERTURE_RANGE_PAGES;
    int page = i % APERTURE_RANGE_PAGES;
    __set_bit (page, dom -> aperture [index] -> bitmap);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="942" endline="969">
{
    int i, j;
    u64 *p1, *p2, *p3;
    p1 = domain->pt_root;
    if (!p1)
        return;
    for (i = 0; i < 512; ++i) {
        if (!IOMMU_PTE_PRESENT (p1[i]))
            continue;
        p2 = IOMMU_PTE_PAGE (p1[i]);
        for (j = 0; j < 512; ++j) {
            if (!IOMMU_PTE_PRESENT (p2[j]))
                continue;
            p3 = IOMMU_PTE_PAGE (p2[j]);
            free_page ((unsigned long) p3);
        }
        free_page ((unsigned long) p2);
    }
    free_page ((unsigned long) p1);
    domain->pt_root = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="951" endline="964">
{
    if (!IOMMU_PTE_PRESENT (p1[i]))
        continue;
    p2 = IOMMU_PTE_PAGE (p1[i]);
    for (j = 0; j < 512; ++j) {
        if (!IOMMU_PTE_PRESENT (p2[j]))
            continue;
        p3 = IOMMU_PTE_PAGE (p2[j]);
        free_page ((unsigned long) p3);
    }
    free_page ((unsigned long) p2);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="956" endline="961">
{
    if (!IOMMU_PTE_PRESENT (p2[j]))
        continue;
    p3 = IOMMU_PTE_PAGE (p2[j]);
    free_page ((unsigned long) p3);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="976" endline="992">
{
    int i;
    if (!dom)
        return;
    free_pagetable (& dom -> domain);
    for (i = 0; i < APERTURE_MAX_RANGES; ++i) {
        if (!dom->aperture[i])
            continue;
        free_page ((unsigned long) dom -> aperture [i] -> bitmap);
        kfree (dom -> aperture [i]);
    }
    kfree (dom);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="984" endline="989">
{
    if (!dom->aperture[i])
        continue;
    free_page ((unsigned long) dom -> aperture [i] -> bitmap);
    kfree (dom -> aperture [i]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1000" endline="1039">
{
    struct dma_ops_domain *dma_dom;
    dma_dom = kzalloc (sizeof (struct dma_ops_domain), GFP_KERNEL);
    if (!dma_dom)
        return NULL;
    spin_lock_init (& dma_dom -> domain.lock);
    dma_dom->domain.id = domain_id_alloc ();
    if (dma_dom->domain.id == 0)
        goto free_dma_dom;
    dma_dom->domain.mode = PAGE_MODE_3_LEVEL;
    dma_dom->domain.pt_root = (void *) get_zeroed_page (GFP_KERNEL);
    dma_dom->domain.flags = PD_DMA_OPS_MASK;
    dma_dom->domain.priv = dma_dom;
    if (!dma_dom->domain.pt_root)
        goto free_dma_dom;
    dma_dom->need_flush = false;
    dma_dom->target_dev = 0xffff;
    if (alloc_new_range (iommu, dma_dom, true, GFP_KERNEL))
        goto free_dma_dom;
    dma_dom->aperture[0]->bitmap[0] = 1;
    dma_dom->next_address = 0;
    return dma_dom;
free_dma_dom :
    dma_ops_domain_free (dma_dom);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1046" endline="1048">
{
    return domain->flags & PD_DMA_OPS_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1055" endline="1064">
{
    struct protection_domain *dom;
    unsigned long flags;
    read_lock_irqsave (& amd_iommu_devtable_lock, flags);
    dom = amd_iommu_pd_table[devid];
    read_unlock_irqrestore (& amd_iommu_devtable_lock, flags);
    return dom;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1073" endline="1098">
{
    unsigned long flags;
    u64 pte_root = virt_to_phys (domain->pt_root);
    domain->dev_cnt += 1;
    pte_root |= (domain->mode & DEV_ENTRY_MODE_MASK) << DEV_ENTRY_MODE_SHIFT;
    pte_root |= IOMMU_PTE_IR | IOMMU_PTE_IW | IOMMU_PTE_P | IOMMU_PTE_TV;
    write_lock_irqsave (& amd_iommu_devtable_lock, flags);
    amd_iommu_dev_table[devid].data[0] = lower_32_bits (pte_root);
    amd_iommu_dev_table[devid].data[1] = upper_32_bits (pte_root);
    amd_iommu_dev_table[devid].data[2] = domain->id;
    amd_iommu_pd_table[devid] = domain;
    write_unlock_irqrestore (& amd_iommu_devtable_lock, flags);
    iommu_queue_inv_dev_entry (iommu, devid);
    iommu_flush_tlb_pde (iommu, domain -> id);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1104" endline="1122">
{
    spin_lock (& domain -> lock);
    amd_iommu_pd_table[devid] = NULL;
    amd_iommu_dev_table[devid].data[0] = IOMMU_PTE_P | IOMMU_PTE_TV;
    amd_iommu_dev_table[devid].data[1] = 0;
    amd_iommu_dev_table[devid].data[2] = 0;
    domain->dev_cnt -= 1;
    spin_unlock (& domain -> lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1128" endline="1135">
{
    unsigned long flags;
    write_lock_irqsave (& amd_iommu_devtable_lock, flags);
    __detach_device (domain, devid);
    write_unlock_irqrestore (& amd_iommu_devtable_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1139" endline="1193">
{
    struct device *dev = data;
    struct pci_dev *pdev = to_pci_dev (dev);
    u16 devid = calc_devid (pdev->bus->number, pdev->devfn);
    struct protection_domain *domain;
    struct dma_ops_domain *dma_domain;
    struct amd_iommu *iommu;
    unsigned long flags;
    if (devid > amd_iommu_last_bdf)
        goto out;
    devid = amd_iommu_alias_table[devid];
    iommu = amd_iommu_rlookup_table[devid];
    if (iommu == NULL)
        goto out;
    domain = domain_for_device (devid);
    if (domain && !dma_ops_domain (domain))
        WARN_ONCE (1, "AMD IOMMU WARNING: device %s already bound " "to a non-dma-ops domain\n", dev_name (dev));
    switch (action) {
    case BUS_NOTIFY_UNBOUND_DRIVER :
        if (!domain)
            goto out;
        detach_device (domain, devid);
        break;
    case BUS_NOTIFY_ADD_DEVICE :
        dma_domain = find_protection_domain (devid);
        if (dma_domain)
            goto out;
        dma_domain = dma_ops_domain_alloc (iommu);
        if (!dma_domain)
            goto out;
        dma_domain->target_dev = devid;
        spin_lock_irqsave (& iommu_pd_list_lock, flags);
        list_add_tail (& dma_domain -> list, & iommu_pd_list);
        spin_unlock_irqrestore (& iommu_pd_list_lock, flags);
        break;
    default :
        goto out;
    }
    iommu_queue_inv_dev_entry (iommu, devid);
    iommu_completion_wait (iommu);
out :
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1163" endline="1186">
{
case BUS_NOTIFY_UNBOUND_DRIVER :
    if (!domain)
        goto out;
    detach_device (domain, devid);
    break;
case BUS_NOTIFY_ADD_DEVICE :
    dma_domain = find_protection_domain (devid);
    if (dma_domain)
        goto out;
    dma_domain = dma_ops_domain_alloc (iommu);
    if (!dma_domain)
        goto out;
    dma_domain->target_dev = devid;
    spin_lock_irqsave (& iommu_pd_list_lock, flags);
    list_add_tail (& dma_domain -> list, & iommu_pd_list);
    spin_unlock_irqrestore (& iommu_pd_list_lock, flags);
    break;
default :
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1210" endline="1215">
{
    if (!dev || !dev->dma_mask)
        return false;
    return true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1222" endline="1241">
{
    struct dma_ops_domain *entry, *ret = NULL;
    unsigned long flags;
    if (list_empty (&iommu_pd_list))
        return NULL;
    spin_lock_irqsave (& iommu_pd_list_lock, flags);
    list_for_each_entry (entry, &iommu_pd_list, list) {
        if (entry->target_dev == devid) {
            ret = entry;
            break;
        }
    }
    spin_unlock_irqrestore (& iommu_pd_list_lock, flags);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1231" endline="1236">
{
    if (entry->target_dev == devid) {
        ret = entry;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1232" endline="1235">
{
    ret = entry;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1254" endline="1293">
{
    struct dma_ops_domain *dma_dom;
    struct pci_dev *pcidev;
    u16 _bdf;
    *iommu = NULL;
    *domain = NULL;
    *bdf = 0xffff;
    if (dev->bus != &pci_bus_type)
        return 0;
    pcidev = to_pci_dev (dev);
    _bdf = calc_devid (pcidev->bus->number, pcidev->devfn);
    if (_bdf > amd_iommu_last_bdf)
        return 0;
    *bdf = amd_iommu_alias_table[_bdf];
    *iommu = amd_iommu_rlookup_table[*bdf];
    if (*iommu == NULL)
        return 0;
    *domain = domain_for_device (*bdf);
    if (*domain == NULL) {
        dma_dom = find_protection_domain (*bdf);
        if (!dma_dom)
            dma_dom = (*iommu)->default_dom;
        *domain = &dma_dom->domain;
        attach_device (* iommu, * domain, * bdf);
        DUMP_printk ("Using protection domain %d for device %s\n", (* domain) -> id, dev_name (dev));
    }
    if (domain_for_device (_bdf) == NULL)
        attach_device (*iommu, *domain, _bdf);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1279" endline="1287">
{
    dma_dom = find_protection_domain (*bdf);
    if (!dma_dom)
        dma_dom = (*iommu)->default_dom;
    *domain = &dma_dom->domain;
    attach_device (* iommu, * domain, * bdf);
    DUMP_printk ("Using protection domain %d for device %s\n", (* domain) -> id, dev_name (dev));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1300" endline="1330">
{
    u64 *pte, *page;
    pte = &dom->pt_root[IOMMU_PTE_L2_INDEX (address)];
    if (!IOMMU_PTE_PRESENT (*pte)) {
        page = (u64 *) get_zeroed_page (gfp);
        if (!page)
            return NULL;
        *pte = IOMMU_L2_PDE (virt_to_phys (page));
    }
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L1_INDEX (address)];
    if (!IOMMU_PTE_PRESENT (*pte)) {
        page = (u64 *) get_zeroed_page (gfp);
        if (!page)
            return NULL;
        *pte = IOMMU_L1_PDE (virt_to_phys (page));
    }
    pte = IOMMU_PTE_PAGE (*pte);
    if (pte_page)
        *pte_page = pte;
    pte = &pte[IOMMU_PTE_L0_INDEX (address)];
    return pte;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1305" endline="1310">
{
    page = (u64 *) get_zeroed_page (gfp);
    if (!page)
        return NULL;
    *pte = IOMMU_L2_PDE (virt_to_phys (page));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1315" endline="1320">
{
    page = (u64 *) get_zeroed_page (gfp);
    if (!page)
        return NULL;
    *pte = IOMMU_L1_PDE (virt_to_phys (page));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1337" endline="1353">
{
    struct aperture_range *aperture;
    u64 *pte, *pte_page;
    aperture = dom->aperture[APERTURE_RANGE_INDEX (address)];
    if (!aperture)
        return NULL;
    pte = aperture->pte_pages[APERTURE_PAGE_INDEX (address)];
    if (!pte) {
        pte = alloc_pte (&dom->domain, address, &pte_page, GFP_ATOMIC);
        aperture->pte_pages[APERTURE_PAGE_INDEX (address)] = pte_page;
    }
    else
        pte += IOMMU_PTE_L0_INDEX (address);
    return pte;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1346" endline="1349">
{
    pte = alloc_pte (&dom->domain, address, &pte_page, GFP_ATOMIC);
    aperture->pte_pages[APERTURE_PAGE_INDEX (address)] = pte_page;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1364" endline="1389">
{
    u64 *pte, __pte;
    WARN_ON (address > dom -> aperture_size);
    paddr &= PAGE_MASK;
    pte = dma_ops_get_pte (dom, address);
    if (!pte)
        return bad_dma_address;
    __pte = paddr | IOMMU_PTE_P | IOMMU_PTE_FC;
    if (direction == DMA_TO_DEVICE)
        __pte |= IOMMU_PTE_IR;
    else if (direction == DMA_FROM_DEVICE)
        __pte |= IOMMU_PTE_IW;
    else if (direction == DMA_BIDIRECTIONAL)
        __pte |= IOMMU_PTE_IR | IOMMU_PTE_IW;
    WARN_ON (*pte);
    *pte = __pte;
    return (dma_addr_t) address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1397" endline="1417">
{
    struct aperture_range *aperture;
    u64 *pte;
    if (address >= dom->aperture_size)
        return;
    aperture = dom->aperture[APERTURE_RANGE_INDEX (address)];
    if (!aperture)
        return;
    pte = aperture->pte_pages[APERTURE_PAGE_INDEX (address)];
    if (!pte)
        return;
    pte += IOMMU_PTE_L0_INDEX (address);
    WARN_ON (! * pte);
    *pte = 0ULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1433" endline="1504">
{
    dma_addr_t offset = paddr & ~PAGE_MASK;
    dma_addr_t address, start, ret;
    unsigned int pages;
    unsigned long align_mask = 0;
    int i;
    pages = iommu_num_pages (paddr, size, PAGE_SIZE);
    paddr &= PAGE_MASK;
    INC_STATS_COUNTER (total_map_requests);
    if (pages > 1)
        INC_STATS_COUNTER (cross_page);
    if (align)
        align_mask = (1UL << get_order (size)) - 1;
retry :
    address = dma_ops_alloc_addresses (dev, dma_dom, pages, align_mask, dma_mask);
    if (unlikely (address == bad_dma_address)) {
        dma_dom->next_address = dma_dom->aperture_size;
        if (alloc_new_range (iommu, dma_dom, false, GFP_ATOMIC))
            goto out;
        goto retry;
    }
    start = address;
    for (i = 0; i < pages; ++i) {
        ret = dma_ops_domain_map (iommu, dma_dom, start, paddr, dir);
        if (ret == bad_dma_address)
            goto out_unmap;
        paddr += PAGE_SIZE;
        start += PAGE_SIZE;
    }
    address += offset;
    ADD_STATS_COUNTER (alloced_io_mem, size);
    if (unlikely (dma_dom->need_flush && !amd_iommu_unmap_flush)) {
        iommu_flush_tlb (iommu, dma_dom -> domain.id);
        dma_dom->need_flush = false;
    }
    else if (unlikely (iommu_has_npcache (iommu)))
        iommu_flush_pages (iommu, dma_dom->domain.id, address, size);
out :
    return address;
out_unmap :
    for (--i; i >= 0; --i) {
        start -= PAGE_SIZE;
        dma_ops_domain_unmap (iommu, dma_dom, start);
    }
    dma_ops_free_addresses (dma_dom, address, pages);
    return bad_dma_address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1454" endline="1470">
{
    dma_dom->next_address = dma_dom->aperture_size;
    if (alloc_new_range (iommu, dma_dom, false, GFP_ATOMIC))
        goto out;
    goto retry;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1473" endline="1480">
{
    ret = dma_ops_domain_map (iommu, dma_dom, start, paddr, dir);
    if (ret == bad_dma_address)
        goto out_unmap;
    paddr += PAGE_SIZE;
    start += PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1485" endline="1488">
{
    iommu_flush_tlb (iommu, dma_dom -> domain.id);
    dma_dom->need_flush = false;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1496" endline="1499">
{
    start -= PAGE_SIZE;
    dma_ops_domain_unmap (iommu, dma_dom, start);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1515" endline="1540">
{
    dma_addr_t i, start;
    unsigned int pages;
    if ((dma_addr == bad_dma_address) || (dma_addr + size > dma_dom->aperture_size))
        return;
    pages = iommu_num_pages (dma_addr, size, PAGE_SIZE);
    dma_addr &= PAGE_MASK;
    start = dma_addr;
    for (i = 0; i < pages; ++i) {
        dma_ops_domain_unmap (iommu, dma_dom, start);
        start += PAGE_SIZE;
    }
    SUB_STATS_COUNTER (alloced_io_mem, size);
    dma_ops_free_addresses (dma_dom, dma_addr, pages);
    if (amd_iommu_unmap_flush || dma_dom->need_flush) {
        iommu_flush_pages (iommu, dma_dom -> domain.id, dma_addr, size);
        dma_dom->need_flush = false;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1527" endline="1530">
{
    dma_ops_domain_unmap (iommu, dma_dom, start);
    start += PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1536" endline="1539">
{
    iommu_flush_pages (iommu, dma_dom -> domain.id, dma_addr, size);
    dma_dom->need_flush = false;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1549" endline="1586">
{
    unsigned long flags;
    struct amd_iommu *iommu;
    struct protection_domain *domain;
    u16 devid;
    dma_addr_t addr;
    u64 dma_mask;
    phys_addr_t paddr = page_to_phys (page) + offset;
    INC_STATS_COUNTER (cnt_map_single);
    if (!check_device (dev))
        return bad_dma_address;
    dma_mask = *dev->dma_mask;
    get_device_resources (dev, & iommu, & domain, & devid);
    if (iommu == NULL || domain == NULL)
        return (dma_addr_t) paddr;
    if (!dma_ops_domain (domain))
        return bad_dma_address;
    spin_lock_irqsave (& domain -> lock, flags);
    addr = __map_single (dev, iommu, domain->priv, paddr, size, dir, false, dma_mask);
    if (addr == bad_dma_address)
        goto out;
    iommu_completion_wait (iommu);
out :
    spin_unlock_irqrestore (&domain->lock, flags);
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1593" endline="1616">
{
    unsigned long flags;
    struct amd_iommu *iommu;
    struct protection_domain *domain;
    u16 devid;
    INC_STATS_COUNTER (cnt_unmap_single);
    if (!check_device (dev) || !get_device_resources (dev, &iommu, &domain, &devid))
        return;
    if (!dma_ops_domain (domain))
        return;
    spin_lock_irqsave (& domain -> lock, flags);
    __unmap_single (iommu, domain -> priv, dma_addr, size, dir);
    iommu_completion_wait (iommu);
    spin_unlock_irqrestore (& domain -> lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1624" endline="1634">
{
    struct scatterlist *s;
    int i;

    for_each_sg (sglist, s, nelems, i) {
        s->dma_address = (dma_addr_t) sg_phys (s);
        s->dma_length = s->length;
    }

    return nelems;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1628" endline="1631">
{
    s->dma_address = (dma_addr_t) sg_phys (s);
    s->dma_length = s->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1643" endline="1702">
{
    unsigned long flags;
    struct amd_iommu *iommu;
    struct protection_domain *domain;
    u16 devid;
    int i;
    struct scatterlist *s;
    phys_addr_t paddr;
    int mapped_elems = 0;
    u64 dma_mask;
    INC_STATS_COUNTER (cnt_map_sg);
    if (!check_device (dev))
        return 0;
    dma_mask = *dev->dma_mask;
    get_device_resources (dev, & iommu, & domain, & devid);
    if (!iommu || !domain)
        return map_sg_no_iommu (dev, sglist, nelems, dir);
    if (!dma_ops_domain (domain))
        return 0;
    spin_lock_irqsave (& domain -> lock, flags);

    for_each_sg (sglist, s, nelems, i) {
        paddr = sg_phys (s);
        s->dma_address = __map_single (dev, iommu, domain->priv, paddr, s->length, dir, false, dma_mask);
        if (s->dma_address) {
            s->dma_length = s->length;
            mapped_elems++;
        }
        else
            goto unmap;
    }

    iommu_completion_wait (iommu);
out :
    spin_unlock_irqrestore (&domain->lock, flags);
    return mapped_elems;
unmap :

    for_each_sg (sglist, s, mapped_elems, i) {
        if (s->dma_address)
            __unmap_single (iommu, domain->priv, s->dma_address, s->dma_length, dir);
        s->dma_address = s->dma_length = 0;
    }

    mapped_elems = 0;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1671" endline="1683">
{
    paddr = sg_phys (s);
    s->dma_address = __map_single (dev, iommu, domain->priv, paddr, s->length, dir, false, dma_mask);
    if (s->dma_address) {
        s->dma_length = s->length;
        mapped_elems++;
    }
    else
        goto unmap;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1678" endline="1681">
{
    s->dma_length = s->length;
    mapped_elems++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1692" endline="1697">
{
    if (s->dma_address)
        __unmap_single (iommu, domain->priv, s->dma_address, s->dma_length, dir);
    s->dma_address = s->dma_length = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1711" endline="1739">
{
    unsigned long flags;
    struct amd_iommu *iommu;
    struct protection_domain *domain;
    struct scatterlist *s;
    u16 devid;
    int i;
    INC_STATS_COUNTER (cnt_unmap_sg);
    if (!check_device (dev) || !get_device_resources (dev, &iommu, &domain, &devid))
        return;
    if (!dma_ops_domain (domain))
        return;
    spin_lock_irqsave (& domain -> lock, flags);

    for_each_sg (sglist, s, nelems, i) {
        __unmap_single (iommu, domain -> priv, s -> dma_address, s -> dma_length, dir);
        s->dma_address = s->dma_length = 0;
    }

    iommu_completion_wait (iommu);
    spin_unlock_irqrestore (& domain -> lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1730" endline="1734">
{
    __unmap_single (iommu, domain -> priv, s -> dma_address, s -> dma_length, dir);
    s->dma_address = s->dma_length = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1746" endline="1802">
{
    unsigned long flags;
    void *virt_addr;
    struct amd_iommu *iommu;
    struct protection_domain *domain;
    u16 devid;
    phys_addr_t paddr;
    u64 dma_mask = dev->coherent_dma_mask;
    INC_STATS_COUNTER (cnt_alloc_coherent);
    if (!check_device (dev))
        return NULL;
    if (!get_device_resources (dev, &iommu, &domain, &devid))
        flag &= ~(__GFP_DMA | __GFP_HIGHMEM | __GFP_DMA32);
    flag |= __GFP_ZERO;
    virt_addr = (void *) __get_free_pages (flag, get_order (size));
    if (!virt_addr)
        return NULL;
    paddr = virt_to_phys (virt_addr);
    if (!iommu || !domain) {
        *dma_addr = (dma_addr_t) paddr;
        return virt_addr;
    }
    if (!dma_ops_domain (domain))
        goto out_free;
    if (!dma_mask)
        dma_mask = *dev->dma_mask;
    spin_lock_irqsave (& domain -> lock, flags);
    *dma_addr = __map_single (dev, iommu, domain->priv, paddr, size, DMA_BIDIRECTIONAL, true, dma_mask);
    if (*dma_addr == bad_dma_address) {
        spin_unlock_irqrestore (& domain -> lock, flags);
        goto out_free;
    }
    iommu_completion_wait (iommu);
    spin_unlock_irqrestore (& domain -> lock, flags);
    return virt_addr;
out_free :
    free_pages ((unsigned long) virt_addr, get_order (size));
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1770" endline="1773">
{
    *dma_addr = (dma_addr_t) paddr;
    return virt_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1786" endline="1789">
{
    spin_unlock_irqrestore (& domain -> lock, flags);
    goto out_free;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1809" endline="1838">
{
    unsigned long flags;
    struct amd_iommu *iommu;
    struct protection_domain *domain;
    u16 devid;
    INC_STATS_COUNTER (cnt_free_coherent);
    if (!check_device (dev))
        return;
    get_device_resources (dev, & iommu, & domain, & devid);
    if (!iommu || !domain)
        goto free_mem;
    if (!dma_ops_domain (domain))
        goto free_mem;
    spin_lock_irqsave (& domain -> lock, flags);
    __unmap_single (iommu, domain -> priv, dma_addr, size, DMA_BIDIRECTIONAL);
    iommu_completion_wait (iommu);
    spin_unlock_irqrestore (& domain -> lock, flags);
free_mem :
    free_pages ((unsigned long) virt_addr, get_order (size));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1845" endline="1862">
{
    u16 bdf;
    struct pci_dev *pcidev;
    if (!dev || dev->bus != &pci_bus_type)
        return 0;
    pcidev = to_pci_dev (dev);
    bdf = calc_devid (pcidev->bus->number, pcidev->devfn);
    if (bdf > amd_iommu_last_bdf)
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1872" endline="1896">
{
    struct pci_dev *dev = NULL;
    struct dma_ops_domain *dma_dom;
    struct amd_iommu *iommu;
    u16 devid;
    while ((dev = pci_get_device (PCI_ANY_ID, PCI_ANY_ID, dev)) != NULL) {
        devid = calc_devid (dev->bus->number, dev->devfn);
        if (devid > amd_iommu_last_bdf)
            continue;
        devid = amd_iommu_alias_table[devid];
        if (domain_for_device (devid))
            continue;
        iommu = amd_iommu_rlookup_table[devid];
        if (!iommu)
            continue;
        dma_dom = dma_ops_domain_alloc (iommu);
        if (!dma_dom)
            continue;
        init_unity_mappings_for_device (dma_dom, devid);
        dma_dom->target_dev = devid;
        list_add_tail (& dma_dom -> list, & iommu_pd_list);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1878" endline="1895">
{
    devid = calc_devid (dev->bus->number, dev->devfn);
    if (devid > amd_iommu_last_bdf)
        continue;
    devid = amd_iommu_alias_table[devid];
    if (domain_for_device (devid))
        continue;
    iommu = amd_iommu_rlookup_table[devid];
    if (!iommu)
        continue;
    dma_dom = dma_ops_domain_alloc (iommu);
    if (!dma_dom)
        continue;
    init_unity_mappings_for_device (dma_dom, devid);
    dma_dom->target_dev = devid;
    list_add_tail (& dma_dom -> list, & iommu_pd_list);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1912" endline="1965">
{
    struct amd_iommu *iommu;
    int ret;

    for_each_iommu (iommu) {
        iommu->default_dom = dma_ops_domain_alloc (iommu);
        if (iommu->default_dom == NULL)
            return -ENOMEM;
        iommu->default_dom->domain.flags |= PD_DEFAULT_MASK;
        ret = iommu_init_unity_mappings (iommu);
        if (ret)
            goto free_domains;
    }

    if (amd_iommu_isolate)
        prealloc_protection_domains ();
    iommu_detected = 1;
    force_iommu = 1;
    bad_dma_address = 0;
    dma_ops = &amd_iommu_dma_ops;
    register_iommu (& amd_iommu_ops);
    bus_register_notifier (& pci_bus_type, & device_nb);
    amd_iommu_stats_init ();
    return 0;
free_domains :

    for_each_iommu (iommu) {
        if (iommu->default_dom)
            dma_ops_domain_free (iommu->default_dom);
    }

    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1921" endline="1929">
{
    iommu->default_dom = dma_ops_domain_alloc (iommu);
    if (iommu->default_dom == NULL)
        return -ENOMEM;
    iommu->default_dom->domain.flags |= PD_DEFAULT_MASK;
    ret = iommu_init_unity_mappings (iommu);
    if (ret)
        goto free_domains;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1959" endline="1962">
{
    if (iommu->default_dom)
        dma_ops_domain_free (iommu->default_dom);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1978" endline="1989">
{
    unsigned long flags;
    u16 devid;
    write_lock_irqsave (& amd_iommu_devtable_lock, flags);
    for (devid = 0; devid <= amd_iommu_last_bdf; ++devid)
        if (amd_iommu_pd_table[devid] == domain)
            __detach_device (domain, devid);
    write_unlock_irqrestore (& amd_iommu_devtable_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="1992" endline="2016">
{
    struct protection_domain *domain;
    domain = kzalloc (sizeof (*domain), GFP_KERNEL);
    if (!domain)
        return -ENOMEM;
    spin_lock_init (& domain -> lock);
    domain->mode = PAGE_MODE_3_LEVEL;
    domain->id = domain_id_alloc ();
    if (!domain->id)
        goto out_free;
    domain->pt_root = (void *) get_zeroed_page (GFP_KERNEL);
    if (!domain->pt_root)
        goto out_free;
    dom->priv = domain;
    return 0;
out_free :
    kfree (domain);
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2019" endline="2037">
{
    struct protection_domain *domain = dom->priv;
    if (!domain)
        return;
    if (domain->dev_cnt > 0)
        cleanup_domain (domain);
    BUG_ON (domain -> dev_cnt != 0);
    free_pagetable (domain);
    domain_id_free (domain -> id);
    kfree (domain);
    dom->priv = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2041" endline="2063">
{
    struct protection_domain *domain = dom->priv;
    struct amd_iommu *iommu;
    struct pci_dev *pdev;
    u16 devid;
    if (dev->bus != &pci_bus_type)
        return;
    pdev = to_pci_dev (dev);
    devid = calc_devid (pdev->bus->number, pdev->devfn);
    if (devid > 0)
        detach_device (domain, devid);
    iommu = amd_iommu_rlookup_table[devid];
    if (!iommu)
        return;
    iommu_queue_inv_dev_entry (iommu, devid);
    iommu_completion_wait (iommu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2067" endline="2098">
{
    struct protection_domain *domain = dom->priv;
    struct protection_domain *old_domain;
    struct amd_iommu *iommu;
    struct pci_dev *pdev;
    u16 devid;
    if (dev->bus != &pci_bus_type)
        return -EINVAL;
    pdev = to_pci_dev (dev);
    devid = calc_devid (pdev->bus->number, pdev->devfn);
    if (devid >= amd_iommu_last_bdf || devid != amd_iommu_alias_table[devid])
        return -EINVAL;
    iommu = amd_iommu_rlookup_table[devid];
    if (!iommu)
        return -EINVAL;
    old_domain = domain_for_device (devid);
    if (old_domain)
        detach_device (old_domain, devid);
    attach_device (iommu, domain, devid);
    iommu_completion_wait (iommu);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2103" endline="2127">
{
    struct protection_domain *domain = dom->priv;
    unsigned long i, npages = iommu_num_pages (paddr, size, PAGE_SIZE);
    int prot = 0;
    int ret;
    if (iommu_prot & IOMMU_READ)
        prot |= IOMMU_PROT_IR;
    if (iommu_prot & IOMMU_WRITE)
        prot |= IOMMU_PROT_IW;
    iova &= PAGE_MASK;
    paddr &= PAGE_MASK;
    for (i = 0; i < npages; ++i) {
        ret = iommu_map_page (domain, iova, paddr, prot);
        if (ret)
            return ret;
        iova += PAGE_SIZE;
        paddr += PAGE_SIZE;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2117" endline="2124">
{
    ret = iommu_map_page (domain, iova, paddr, prot);
    if (ret)
        return ret;
    iova += PAGE_SIZE;
    paddr += PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2131" endline="2144">
{
    struct protection_domain *domain = dom->priv;
    unsigned long i, npages = iommu_num_pages (iova, size, PAGE_SIZE);
    iova &= PAGE_MASK;
    for (i = 0; i < npages; ++i) {
        iommu_unmap_page (domain, iova);
        iova += PAGE_SIZE;
    }
    iommu_flush_domain (domain -> id);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2138" endline="2141">
{
    iommu_unmap_page (domain, iova);
    iova += PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2148" endline="2175">
{
    struct protection_domain *domain = dom->priv;
    unsigned long offset = iova & ~PAGE_MASK;
    phys_addr_t paddr;
    u64 *pte;
    pte = &domain->pt_root[IOMMU_PTE_L2_INDEX (iova)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return 0;
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L1_INDEX (iova)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return 0;
    pte = IOMMU_PTE_PAGE (*pte);
    pte = &pte[IOMMU_PTE_L0_INDEX (iova)];
    if (!IOMMU_PTE_PRESENT (*pte))
        return 0;
    paddr = *pte & IOMMU_PAGE_MASK;
    paddr |= offset;
    return paddr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu.c.ifdefed" startline="2179" endline="2181">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="89" endline="92">
{
    if (regs->flags & X86_EFLAGS_IF)
        local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="95" endline="99">
{
    inc_preempt_count ();
    if (regs->flags & X86_EFLAGS_IF)
        local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="102" endline="105">
{
    if (regs->flags & X86_EFLAGS_IF)
        local_irq_disable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="108" endline="112">
{
    if (regs->flags & X86_EFLAGS_IF)
        local_irq_disable ();
    dec_preempt_count ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="126" endline="192">
{
    struct task_struct *tsk = current;
    if (!user_mode (regs))
        goto kernel_trap;
    tsk->thread.error_code = error_code;
    tsk->thread.trap_no = trapnr;
    if (info)
        force_sig_info (signr, info, tsk);
    else
        force_sig (signr, tsk);
    return;
kernel_trap :
    if (!fixup_exception (regs)) {
        tsk->thread.error_code = error_code;
        tsk->thread.trap_no = trapnr;
        die (str, regs, error_code);
    }
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="178" endline="182">
{
    tsk->thread.error_code = error_code;
    tsk->thread.trap_no = trapnr;
    die (str, regs, error_code);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="265" endline="312">
{
    struct task_struct *tsk;
    conditional_sti (regs);
    tsk = current;
    if (!user_mode (regs))
        goto gp_in_kernel;
    tsk->thread.error_code = error_code;
    tsk->thread.trap_no = 13;
    if (show_unhandled_signals && unhandled_signal (tsk, SIGSEGV) && printk_ratelimit ()) {
        printk (KERN_INFO "%s[%d] general protection ip:%lx sp:%lx error:%lx", tsk -> comm, task_pid_nr (tsk), regs -> ip, regs -> sp, error_code);
        print_vma_addr (" in ", regs -> ip);
        printk ("\n");
    }
    force_sig (SIGSEGV, tsk);
    return;
gp_in_kernel :
    if (fixup_exception (regs))
        return;
    tsk->thread.error_code = error_code;
    tsk->thread.trap_no = 13;
    if (notify_die (DIE_GPF, "general protection fault", regs, error_code, 13, SIGSEGV) == NOTIFY_STOP)
        return;
    die ("general protection fault", regs, error_code);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="283" endline="290">
{
    printk (KERN_INFO "%s[%d] general protection ip:%lx sp:%lx error:%lx", tsk -> comm, task_pid_nr (tsk), regs -> ip, regs -> sp, error_code);
    print_vma_addr (" in ", regs -> ip);
    printk ("\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="316" endline="339">
{
    printk (KERN_EMERG "Uhhuh. NMI received for unknown reason %02x on CPU %d.\n", reason, smp_processor_id ());
    printk (KERN_EMERG "You have some hardware problem, likely on the PCI bus.\n");
    if (panic_on_unrecovered_nmi)
        panic ("NMI: Not continuing");
    printk (KERN_EMERG "Dazed and confused, but trying to continue\n");
    reason = (reason & 0xf) | 4;
    outb (reason, 0x61);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="343" endline="362">
{
    unsigned long i;
    printk (KERN_EMERG "NMI: IOCK error (debug interrupt?)\n");
    show_registers (regs);
    if (panic_on_io_nmi)
        panic ("NMI IOCK error: Not continuing");
    reason = (reason & 0xf) | 8;
    outb (reason, 0x61);
    i = 2000;
    while (--i)
        udelay (1000);
    reason &= ~8;
    outb (reason, 0x61);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="366" endline="389">
{
    if (notify_die (DIE_NMIUNKNOWN, "nmi", regs, reason, 2, SIGINT) == NOTIFY_STOP)
        return;
    printk (KERN_EMERG "Uhhuh. NMI received for unknown reason %02x on CPU %d.\n", reason, smp_processor_id ());
    printk (KERN_EMERG "Do you have a strange power saving mode enabled?\n");
    if (panic_on_unrecovered_nmi)
        panic ("NMI: Not continuing");
    printk (KERN_EMERG "Dazed and confused, but trying to continue\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="392" endline="436">
{
    unsigned char reason = 0;
    int cpu;
    cpu = smp_processor_id ();
    if (!cpu)
        reason = get_nmi_reason ();
    if (!(reason & 0xc0)) {
        if (notify_die (DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT) == NOTIFY_STOP)
            return;
        unknown_nmi_error (reason, regs);
        return;
    }
    if (notify_die (DIE_NMI, "nmi", regs, reason, 2, SIGINT) == NOTIFY_STOP)
        return;
    if (reason & 0x80)
        mem_parity_error (reason, regs);
    if (reason & 0x40)
        io_check_error (reason, regs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="402" endline="420">
{
    if (notify_die (DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT) == NOTIFY_STOP)
        return;
    unknown_nmi_error (reason, regs);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="440" endline="449">
{
    nmi_enter ();
    inc_irq_stat (__nmi_count);
    if (!ignore_nmis)
        default_do_nmi (regs);
    nmi_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="452" endline="455">
{
    acpi_nmi_disable ();
    ignore_nmis++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="458" endline="461">
{
    ignore_nmis--;
    acpi_nmi_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="465" endline="479">
{
    if (notify_die (DIE_TRAP, "int3", regs, error_code, 3, SIGTRAP) == NOTIFY_STOP)
        return;
    preempt_conditional_sti (regs);
    do_trap (3, SIGTRAP, "int3", regs, error_code, NULL);
    preempt_conditional_cli (regs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="533" endline="607">
{
    struct task_struct *tsk = current;
    unsigned long condition;
    int si_code;
    get_debugreg (condition, 6);
    if (condition & DR_STEP && kmemcheck_trap (regs))
        return;
    clear_tsk_thread_flag (tsk, TIF_DEBUGCTLMSR);
    tsk->thread.debugctlmsr = 0;
    if (notify_die (DIE_DEBUG, "debug", regs, condition, error_code, SIGTRAP) == NOTIFY_STOP)
        return;
    preempt_conditional_sti (regs);
    if (condition & (DR_TRAP0 | DR_TRAP1 | DR_TRAP2 | DR_TRAP3)) {
        if (!tsk->thread.debugreg7)
            goto clear_dr7;
    }
    tsk->thread.debugreg6 = condition;
    if (condition & DR_STEP) {
        if (!user_mode (regs))
            goto clear_TF_reenable;
    }
    si_code = get_si_code (condition);
    send_sigtrap (tsk, regs, error_code, si_code);
clear_dr7 :
    set_debugreg (0, 7);
    preempt_conditional_cli (regs);
    return;
clear_TF_reenable :
    set_tsk_thread_flag (tsk, TIF_SINGLESTEP);
    regs->flags &= ~X86_EFLAGS_TF;
    preempt_conditional_cli (regs);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="558" endline="561">
{
    if (!tsk->thread.debugreg7)
        goto clear_dr7;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="575" endline="578">
{
    if (!user_mode (regs))
        goto clear_TF_reenable;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="629" endline="682">
{
    struct task_struct *task;
    siginfo_t info;
    unsigned short cwd, swd, err;
    task = current;
    save_init_fpu (task);
    task->thread.trap_no = 16;
    task->thread.error_code = 0;
    info.si_signo = SIGFPE;
    info.si_errno = 0;
    info.si_addr = ip;
    cwd = get_fpu_cwd (task);
    swd = get_fpu_swd (task);
    err = swd & ~cwd;
    if (err & 0x001) {
        info.si_code = FPE_FLTINV;
    }
    else if (err & 0x004) {
        info.si_code = FPE_FLTDIV;
    }
    else if (err & 0x008) {
        info.si_code = FPE_FLTOVF;
    }
    else if (err & 0x012) {
        info.si_code = FPE_FLTUND;
    }
    else if (err & 0x020) {
        info.si_code = FPE_FLTRES;
    }
    else {
        return;
    }
    force_sig_info (SIGFPE, & info, task);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="659" endline="666">
{
    info.si_code = FPE_FLTINV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="666" endline="668">
{
    info.si_code = FPE_FLTDIV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="668" endline="670">
{
    info.si_code = FPE_FLTOVF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="670" endline="672">
{
    info.si_code = FPE_FLTUND;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="672" endline="674">
{
    info.si_code = FPE_FLTRES;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="674" endline="680">
{
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="685" endline="697">
{
    conditional_sti (regs);
    if (!user_mode (regs) && kernel_math_error (regs, "kernel x87 math error", 16))
        return;
    math_error ((void __user *) regs -> ip);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="700" endline="745">
{
    struct task_struct *task;
    siginfo_t info;
    unsigned short mxcsr;
    task = current;
    save_init_fpu (task);
    task->thread.trap_no = 19;
    task->thread.error_code = 0;
    info.si_signo = SIGFPE;
    info.si_errno = 0;
    info.si_code = __SI_FAULT;
    info.si_addr = ip;
    mxcsr = get_fpu_mxcsr (task);
    switch (~((mxcsr & 0x1f80) >> 7) & (mxcsr & 0x3f)) {
    case 0x000 :
    default :
        break;
    case 0x001 :
        info.si_code = FPE_FLTINV;
        break;
    case 0x002 :
    case 0x010 :
        info.si_code = FPE_FLTUND;
        break;
    case 0x004 :
        info.si_code = FPE_FLTDIV;
        break;
    case 0x008 :
        info.si_code = FPE_FLTOVF;
        break;
    case 0x020 :
        info.si_code = FPE_FLTRES;
        break;
    }
    force_sig_info (SIGFPE, & info, task);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="723" endline="743">
{
case 0x000 :
default :
    break;
case 0x001 :
    info.si_code = FPE_FLTINV;
    break;
case 0x002 :
case 0x010 :
    info.si_code = FPE_FLTUND;
    break;
case 0x004 :
    info.si_code = FPE_FLTDIV;
    break;
case 0x008 :
    info.si_code = FPE_FLTOVF;
    break;
case 0x020 :
    info.si_code = FPE_FLTRES;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="749" endline="777">
{
    conditional_sti (regs);
    if (!user_mode (regs) && kernel_math_error (regs, "kernel simd math error", 19))
        return;
    simd_math_error ((void __user *) regs -> ip);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="781" endline="787">
{
    conditional_sti (regs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="811" endline="812">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="815" endline="816">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="829" endline="860">
{
    struct thread_info *thread = current_thread_info ();
    struct task_struct *tsk = thread->task;
    if (!tsk_used_math (tsk)) {
        local_irq_enable ();
        if (init_fpu (tsk)) {
            do_group_exit (SIGKILL);
            return;
        }
        local_irq_disable ();
    }
    clts ();
    if (unlikely (restore_fpu_checking (tsk))) {
        stts ();
        force_sig (SIGSEGV, tsk);
        return;
    }
    thread->status |= TS_USEDFPU;
    tsk->fpu_counter++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="833" endline="846">
{
    local_irq_enable ();
    if (init_fpu (tsk)) {
        do_group_exit (SIGKILL);
        return;
    }
    local_irq_disable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="838" endline="844">
{
    do_group_exit (SIGKILL);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="852" endline="856">
{
    stts ();
    force_sig (SIGSEGV, tsk);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="865" endline="871">
{
    printk (KERN_EMERG "math-emulation not enabled and no coprocessor found.\n");
    printk (KERN_EMERG "killing %s.\n", current -> comm);
    force_sig (SIGFPE, current);
    schedule ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="876" endline="892">
{
    math_state_restore ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/traps.c.ifdefed" startline="912" endline="986">
{
    int i;
    set_intr_gate (0, & divide_error);
    set_intr_gate_ist (1, & debug, DEBUG_STACK);
    set_intr_gate_ist (2, & nmi, NMI_STACK);
    set_system_intr_gate_ist (3, & int3, DEBUG_STACK);
    set_system_intr_gate (4, & overflow);
    set_intr_gate (5, & bounds);
    set_intr_gate (6, & invalid_op);
    set_intr_gate (7, & device_not_available);
    set_intr_gate_ist (8, & double_fault, DOUBLEFAULT_STACK);
    set_intr_gate (9, & coprocessor_segment_overrun);
    set_intr_gate (10, & invalid_TSS);
    set_intr_gate (11, & segment_not_present);
    set_intr_gate_ist (12, & stack_segment, STACKFAULT_STACK);
    set_intr_gate (13, & general_protection);
    set_intr_gate (14, & page_fault);
    set_intr_gate (15, & spurious_interrupt_bug);
    set_intr_gate (16, & coprocessor_error);
    set_intr_gate (17, & alignment_check);
    set_intr_gate (19, & simd_coprocessor_error);
    for (i = 0; i < FIRST_EXTERNAL_VECTOR; i++)
        set_bit (i, used_vectors);
    cpu_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/crash.c.ifdefed" startline="73" endline="75">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/crash.c.ifdefed" startline="79" endline="113">
{
    local_irq_disable ();
    kdump_nmi_shootdown_cpus ();
    cpu_emergency_vmxoff ();
    cpu_emergency_svm_disable ();
    lapic_shutdown ();
    crash_save_cpu (regs, safe_smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="32" endline="86">
{
    void *oldldt, *newldt;
    int oldsize;
    if (mincount <= pc->size)
        return 0;
    oldsize = pc->size;
    mincount = (mincount + (PAGE_SIZE / LDT_ENTRY_SIZE - 1)) & (~(PAGE_SIZE / LDT_ENTRY_SIZE - 1));
    if (mincount * LDT_ENTRY_SIZE > PAGE_SIZE)
        newldt = vmalloc (mincount *LDT_ENTRY_SIZE);
    else
        newldt = (void *) __get_free_page (GFP_KERNEL);
    if (!newldt)
        return -ENOMEM;
    if (oldsize)
        memcpy (newldt, pc->ldt, oldsize *LDT_ENTRY_SIZE);
    oldldt = pc->ldt;
    memset (newldt + oldsize * LDT_ENTRY_SIZE, 0, (mincount - oldsize) * LDT_ENTRY_SIZE);
    paravirt_alloc_ldt (newldt, mincount);
    pc->ldt = newldt;
    wmb ();
    pc->size = mincount;
    wmb ();
    if (reload) {
        load_LDT (pc);
    }
    if (oldsize) {
        paravirt_free_ldt (oldldt, oldsize);
        if (oldsize * LDT_ENTRY_SIZE > PAGE_SIZE)
            vfree (oldldt);
        else
            put_page (virt_to_page (oldldt));
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="66" endline="77">
{
    load_LDT (pc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="78" endline="84">
{
    paravirt_free_ldt (oldldt, oldsize);
    if (oldsize * LDT_ENTRY_SIZE > PAGE_SIZE)
        vfree (oldldt);
    else
        put_page (virt_to_page (oldldt));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="89" endline="99">
{
    int err = alloc_ldt (new, old->size, 0);
    int i;
    if (err < 0)
        return err;
    for (i = 0; i < old->size; i++)
        write_ldt_entry (new->ldt, i, old->ldt + i * LDT_ENTRY_SIZE);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="106" endline="119">
{
    struct mm_struct *old_mm;
    int retval = 0;
    mutex_init (& mm -> context.lock);
    mm->context.size = 0;
    old_mm = current->mm;
    if (old_mm && old_mm->context.size > 0) {
        mutex_lock (& old_mm -> context.lock);
        retval = copy_ldt (&mm->context, &old_mm->context);
        mutex_unlock (& old_mm -> context.lock);
    }
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="113" endline="117">
{
    mutex_lock (& old_mm -> context.lock);
    retval = copy_ldt (&mm->context, &old_mm->context);
    mutex_unlock (& old_mm -> context.lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="127" endline="141">
{
    if (mm->context.size) {
        paravirt_free_ldt (mm -> context.ldt, mm -> context.size);
        if (mm->context.size * LDT_ENTRY_SIZE > PAGE_SIZE)
            vfree (mm->context.ldt);
        else
            put_page (virt_to_page (mm->context.ldt));
        mm->context.size = 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="128" endline="140">
{
    paravirt_free_ldt (mm -> context.ldt, mm -> context.size);
    if (mm->context.size * LDT_ENTRY_SIZE > PAGE_SIZE)
        vfree (mm->context.ldt);
    else
        put_page (virt_to_page (mm->context.ldt));
    mm->context.size = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="144" endline="175">
{
    int err;
    unsigned long size;
    struct mm_struct *mm = current->mm;
    if (!mm->context.size)
        return 0;
    if (bytecount > LDT_ENTRY_SIZE * LDT_ENTRIES)
        bytecount = LDT_ENTRY_SIZE * LDT_ENTRIES;
    mutex_lock (& mm -> context.lock);
    size = mm->context.size * LDT_ENTRY_SIZE;
    if (size > bytecount)
        size = bytecount;
    err = 0;
    if (copy_to_user (ptr, mm->context.ldt, size))
        err = -EFAULT;
    mutex_unlock (& mm -> context.lock);
    if (err < 0)
        goto error_return;
    if (size != bytecount) {
        if (clear_user (ptr +size, bytecount -size) != 0) {
            err = -EFAULT;
            goto error_return;
        }
    }
    return bytecount;
error_return :
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="165" endline="171">
{
    if (clear_user (ptr +size, bytecount -size) != 0) {
        err = -EFAULT;
        goto error_return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="167" endline="170">
{
    err = -EFAULT;
    goto error_return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="178" endline="190">
{
    unsigned long size = 128;
    if (bytecount > size)
        bytecount = size;
    if (clear_user (ptr, bytecount))
        return -EFAULT;
    return bytecount;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="193" endline="245">
{
    struct mm_struct *mm = current->mm;
    struct desc_struct ldt;
    int error;
    struct user_desc ldt_info;
    error = -EINVAL;
    if (bytecount != sizeof (ldt_info))
        goto out;
    error = -EFAULT;
    if (copy_from_user (&ldt_info, ptr, sizeof (ldt_info)))
        goto out;
    error = -EINVAL;
    if (ldt_info.entry_number >= LDT_ENTRIES)
        goto out;
    if (ldt_info.contents == 3) {
        if (oldmode)
            goto out;
        if (ldt_info.seg_not_present == 0)
            goto out;
    }
    mutex_lock (& mm -> context.lock);
    if (ldt_info.entry_number >= mm->context.size) {
        error = alloc_ldt (&current->mm->context, ldt_info.entry_number + 1, 1);
        if (error < 0)
            goto out_unlock;
    }
    if (ldt_info.base_addr == 0 && ldt_info.limit == 0) {
        if (oldmode || LDT_empty (&ldt_info)) {
            memset (& ldt, 0, sizeof (ldt));
            goto install;
        }
    }
    fill_ldt (& ldt, & ldt_info);
    if (oldmode)
        ldt.avl = 0;
install :
    write_ldt_entry (mm->context.ldt, ldt_info.entry_number, &ldt);
    error = 0;
out_unlock :
    mutex_unlock (&mm->context.lock);
out :
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="209" endline="214">
{
    if (oldmode)
        goto out;
    if (ldt_info.seg_not_present == 0)
        goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="217" endline="222">
{
    error = alloc_ldt (&current->mm->context, ldt_info.entry_number + 1, 1);
    if (error < 0)
        goto out_unlock;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="225" endline="230">
{
    if (oldmode || LDT_empty (&ldt_info)) {
        memset (& ldt, 0, sizeof (ldt));
        goto install;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="226" endline="229">
{
    memset (& ldt, 0, sizeof (ldt));
    goto install;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="249" endline="267">
{
    int ret = -ENOSYS;
    switch (func) {
    case 0 :
        ret = read_ldt (ptr, bytecount);
        break;
    case 1 :
        ret = write_ldt (ptr, bytecount, 1);
        break;
    case 2 :
        ret = read_default_ldt (ptr, bytecount);
        break;
    case 0x11 :
        ret = write_ldt (ptr, bytecount, 0);
        break;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ldt.c.ifdefed" startline="252" endline="265">
{
case 0 :
    ret = read_ldt (ptr, bytecount);
    break;
case 1 :
    ret = write_ldt (ptr, bytecount, 1);
    break;
case 2 :
    ret = read_default_ldt (ptr, bytecount);
    break;
case 0x11 :
    ret = write_ldt (ptr, bytecount, 0);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="176" endline="179">
{
    if (devid > amd_iommu_last_bdf)
        amd_iommu_last_bdf = devid;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="182" endline="187">
{
    unsigned shift = PAGE_SHIFT + get_order (((int) amd_iommu_last_bdf + 1) * entry_size);
    return 1UL << shift;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="203" endline="218">
{
    u64 start = iommu->exclusion_start & PAGE_MASK;
    u64 limit = (start + iommu->exclusion_length) & PAGE_MASK;
    u64 entry;
    if (!iommu->exclusion_start)
        return;
    entry = start | MMIO_EXCL_ENABLE_MASK;
    memcpy_toio (iommu -> mmio_base + MMIO_EXCL_BASE_OFFSET, & entry, sizeof (entry));
    entry = limit;
    memcpy_toio (iommu -> mmio_base + MMIO_EXCL_LIMIT_OFFSET, & entry, sizeof (entry));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="222" endline="231">
{
    u64 entry;
    BUG_ON (iommu -> mmio_base == NULL);
    entry = virt_to_phys (amd_iommu_dev_table);
    entry |= (dev_table_size >> 12) - 1;
    memcpy_toio (iommu -> mmio_base + MMIO_DEV_TABLE_OFFSET, & entry, sizeof (entry));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="235" endline="241">
{
    u32 ctrl;
    ctrl = readl (iommu->mmio_base + MMIO_CONTROL_OFFSET);
    ctrl |= (1 << bit);
    writel (ctrl, iommu -> mmio_base + MMIO_CONTROL_OFFSET);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="244" endline="250">
{
    u32 ctrl;
    ctrl = readl (iommu->mmio_base + MMIO_CONTROL_OFFSET);
    ctrl &= ~(1 << bit);
    writel (ctrl, iommu -> mmio_base + MMIO_CONTROL_OFFSET);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="254" endline="259">
{
    printk (KERN_INFO "AMD IOMMU: Enabling IOMMU at %s cap 0x%hx\n", dev_name (& iommu -> dev -> dev), iommu -> cap_ptr);
    iommu_feature_enable (iommu, CONTROL_IOMMU_EN);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="262" endline="272">
{
    iommu_feature_disable (iommu, CONTROL_CMDBUF_EN);
    iommu_feature_disable (iommu, CONTROL_EVT_INT_EN);
    iommu_feature_disable (iommu, CONTROL_EVT_LOG_EN);
    iommu_feature_disable (iommu, CONTROL_IOMMU_EN);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="279" endline="292">
{
    u8 *ret;
    if (!request_mem_region (address, MMIO_REGION_LENGTH, "amd_iommu"))
        return NULL;
    ret = ioremap_nocache (address, MMIO_REGION_LENGTH);
    if (ret != NULL)
        return ret;
    release_mem_region (address, MMIO_REGION_LENGTH);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="295" endline="299">
{
    if (iommu->mmio_base)
        iounmap (iommu->mmio_base);
    release_mem_region (iommu -> mmio_phys, MMIO_REGION_LENGTH);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="314" endline="316">
{
    return 0x04 << (*ivhd >> 6);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="323" endline="330">
{
    u32 cap;
    cap = read_pci_config (bus, dev, fn, cap_ptr +MMIO_RANGE_OFFSET);
    update_last_devid (calc_devid (MMIO_GET_BUS (cap), MMIO_GET_LD (cap)));
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="337" endline="368">
{
    u8 *p = (void *) h, *end = (void *) h;
    struct ivhd_entry *dev;
    p += sizeof (*h);
    end += h->length;
    find_last_devid_on_pci (PCI_BUS (h -> devid), PCI_SLOT (h -> devid), PCI_FUNC (h -> devid), h -> cap_ptr);
    while (p < end) {
        dev = (struct ivhd_entry *) p;
        switch (dev->type) {
        case IVHD_DEV_SELECT :
        case IVHD_DEV_RANGE_END :
        case IVHD_DEV_ALIAS :
        case IVHD_DEV_EXT_SELECT :
            update_last_devid (dev->devid);
            break;
        default :
            break;
        }
        p += ivhd_entry_length (p);
    }
    WARN_ON (p != end);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="349" endline="363">
{
    dev = (struct ivhd_entry *) p;
    switch (dev->type) {
    case IVHD_DEV_SELECT :
    case IVHD_DEV_RANGE_END :
    case IVHD_DEV_ALIAS :
    case IVHD_DEV_EXT_SELECT :
        update_last_devid (dev->devid);
        break;
    default :
        break;
    }
    p += ivhd_entry_length (p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="351" endline="361">
{
case IVHD_DEV_SELECT :
case IVHD_DEV_RANGE_END :
case IVHD_DEV_ALIAS :
case IVHD_DEV_EXT_SELECT :
    update_last_devid (dev->devid);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="376" endline="408">
{
    int i;
    u8 checksum = 0, *p = (u8 *) table, *end = (u8 *) table;
    struct ivhd_header *h;
    for (i = 0; i < table->length; ++i)
        checksum += p[i];
    if (checksum != 0)
        return -ENODEV;
    p += IVRS_HEADER_LENGTH;
    end += table->length;
    while (p < end) {
        h = (struct ivhd_header *) p;
        switch (h->type) {
        case ACPI_IVHD_TYPE :
            find_last_devid_from_ivhd (h);
            break;
        default :
            break;
        }
        p += h->length;
    }
    WARN_ON (p != end);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="394" endline="404">
{
    h = (struct ivhd_header *) p;
    switch (h->type) {
    case ACPI_IVHD_TYPE :
        find_last_devid_from_ivhd (h);
        break;
    default :
        break;
    }
    p += h->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="396" endline="402">
{
case ACPI_IVHD_TYPE :
    find_last_devid_from_ivhd (h);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="425" endline="435">
{
    u8 *cmd_buf = (u8 *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (CMD_BUFFER_SIZE));
    if (cmd_buf == NULL)
        return NULL;
    iommu->cmd_buf_size = CMD_BUFFER_SIZE;
    return cmd_buf;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="442" endline="458">
{
    u64 entry;
    BUG_ON (iommu -> cmd_buf == NULL);
    entry = (u64) virt_to_phys (iommu->cmd_buf);
    entry |= MMIO_CMD_SIZE_512;
    memcpy_toio (iommu -> mmio_base + MMIO_CMD_BUF_OFFSET, & entry, sizeof (entry));
    writel (0x00, iommu -> mmio_base + MMIO_CMD_HEAD_OFFSET);
    writel (0x00, iommu -> mmio_base + MMIO_CMD_TAIL_OFFSET);
    iommu_feature_enable (iommu, CONTROL_CMDBUF_EN);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="461" endline="464">
{
    free_pages ((unsigned long) iommu -> cmd_buf, get_order (iommu -> cmd_buf_size));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="468" endline="478">
{
    iommu->evt_buf = (u8 *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (EVT_BUFFER_SIZE));
    if (iommu->evt_buf == NULL)
        return NULL;
    iommu->evt_buf_size = EVT_BUFFER_SIZE;
    return iommu->evt_buf;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="481" endline="496">
{
    u64 entry;
    BUG_ON (iommu -> evt_buf == NULL);
    entry = (u64) virt_to_phys (iommu->evt_buf) | EVT_LEN_MASK;
    memcpy_toio (iommu -> mmio_base + MMIO_EVT_BUF_OFFSET, & entry, sizeof (entry));
    writel (0x00, iommu -> mmio_base + MMIO_EVT_HEAD_OFFSET);
    writel (0x00, iommu -> mmio_base + MMIO_EVT_TAIL_OFFSET);
    iommu_feature_enable (iommu, CONTROL_EVT_LOG_EN);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="499" endline="501">
{
    free_pages ((unsigned long) iommu -> evt_buf, get_order (EVT_BUFFER_SIZE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="505" endline="510">
{
    int i = (bit >> 5) & 0x07;
    int _bit = bit & 0x1f;
    amd_iommu_dev_table[devid].data[i] |= (1 << _bit);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="514" endline="516">
{
    amd_iommu_rlookup_table[devid] = iommu;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="524" endline="541">
{
    if (flags & ACPI_DEVFLAG_INITPASS)
        set_dev_entry_bit (devid, DEV_ENTRY_INIT_PASS);
    if (flags & ACPI_DEVFLAG_EXTINT)
        set_dev_entry_bit (devid, DEV_ENTRY_EINT_PASS);
    if (flags & ACPI_DEVFLAG_NMI)
        set_dev_entry_bit (devid, DEV_ENTRY_NMI_PASS);
    if (flags & ACPI_DEVFLAG_SYSMGT1)
        set_dev_entry_bit (devid, DEV_ENTRY_SYSMGT1);
    if (flags & ACPI_DEVFLAG_SYSMGT2)
        set_dev_entry_bit (devid, DEV_ENTRY_SYSMGT2);
    if (flags & ACPI_DEVFLAG_LINT0)
        set_dev_entry_bit (devid, DEV_ENTRY_LINT0_PASS);
    if (flags & ACPI_DEVFLAG_LINT1)
        set_dev_entry_bit (devid, DEV_ENTRY_LINT1_PASS);
    set_iommu_for_device (iommu, devid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="548" endline="564">
{
    struct amd_iommu *iommu = amd_iommu_rlookup_table[devid];
    if (!(m->flags & IVMD_FLAG_EXCL_RANGE))
        return;
    if (iommu) {
        set_dev_entry_bit (m -> devid, DEV_ENTRY_EX);
        iommu->exclusion_start = m->range_start;
        iommu->exclusion_length = m->range_length;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="554" endline="563">
{
    set_dev_entry_bit (m -> devid, DEV_ENTRY_EX);
    iommu->exclusion_start = m->range_start;
    iommu->exclusion_length = m->range_length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="572" endline="588">
{
    int cap_ptr = iommu->cap_ptr;
    u32 range, misc;
    pci_read_config_dword (iommu -> dev, cap_ptr + MMIO_CAP_HDR_OFFSET, & iommu -> cap);
    pci_read_config_dword (iommu -> dev, cap_ptr + MMIO_RANGE_OFFSET, & range);
    pci_read_config_dword (iommu -> dev, cap_ptr + MMIO_MISC_OFFSET, & misc);
    iommu->first_device = calc_devid (MMIO_GET_BUS (range), MMIO_GET_FD (range));
    iommu->last_device = calc_devid (MMIO_GET_BUS (range), MMIO_GET_LD (range));
    iommu->evt_msi_num = MMIO_MSI_NUM (misc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="596" endline="770">
{
    u8 *p = (u8 *) h;
    u8 *end = p, flags = 0;
    u16 dev_i, devid = 0, devid_start = 0, devid_to = 0;
    u32 ext_flags = 0;
    bool alias = false;
    struct ivhd_entry *e;
    h->flags & IVHD_FLAG_HT_TUN_EN_MASK ? iommu_feature_enable (iommu, CONTROL_HT_TUN_EN) : iommu_feature_disable (iommu, CONTROL_HT_TUN_EN);
    h->flags & IVHD_FLAG_PASSPW_EN_MASK ? iommu_feature_enable (iommu, CONTROL_PASSPW_EN) : iommu_feature_disable (iommu, CONTROL_PASSPW_EN);
    h->flags & IVHD_FLAG_RESPASSPW_EN_MASK ? iommu_feature_enable (iommu, CONTROL_RESPASSPW_EN) : iommu_feature_disable (iommu, CONTROL_RESPASSPW_EN);
    h->flags & IVHD_FLAG_ISOC_EN_MASK ? iommu_feature_enable (iommu, CONTROL_ISOC_EN) : iommu_feature_disable (iommu, CONTROL_ISOC_EN);
    iommu_feature_enable (iommu, CONTROL_COHERENT_EN);
    p += sizeof (struct ivhd_header);
    end += h->length;
    while (p < end) {
        e = (struct ivhd_entry *) p;
        switch (e->type) {
        case IVHD_DEV_ALL :
            DUMP_printk ("  DEV_ALL\t\t\t first devid: %02x:%02x.%x" " last device %02x:%02x.%x flags: %02x\n", PCI_BUS (iommu->first_device), PCI_SLOT (iommu->first_device), PCI_FUNC (iommu->first_device), PCI_BUS (iommu->last_device), PCI_SLOT (iommu->last_device), PCI_FUNC (iommu->last_device), e->flags);
            for (dev_i = iommu->first_device; dev_i <= iommu->last_device; ++dev_i)
                set_dev_entry_from_acpi (iommu, dev_i, e->flags, 0);
            break;
        case IVHD_DEV_SELECT :
            DUMP_printk ("  DEV_SELECT\t\t\t devid: %02x:%02x.%x " "flags: %02x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags);
            devid = e->devid;
            set_dev_entry_from_acpi (iommu, devid, e -> flags, 0);
            break;
        case IVHD_DEV_SELECT_RANGE_START :
            DUMP_printk ("  DEV_SELECT_RANGE_START\t " "devid: %02x:%02x.%x flags: %02x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags);
            devid_start = e->devid;
            flags = e->flags;
            ext_flags = 0;
            alias = false;
            break;
        case IVHD_DEV_ALIAS :
            DUMP_printk ("  DEV_ALIAS\t\t\t devid: %02x:%02x.%x " "flags: %02x devid_to: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, PCI_BUS (e->ext >> 8), PCI_SLOT (e->ext >> 8), PCI_FUNC (e->ext >> 8));
            devid = e->devid;
            devid_to = e->ext >> 8;
            set_dev_entry_from_acpi (iommu, devid, e -> flags, 0);
            set_dev_entry_from_acpi (iommu, devid_to, e -> flags, 0);
            amd_iommu_alias_table[devid] = devid_to;
            break;
        case IVHD_DEV_ALIAS_RANGE :
            DUMP_printk ("  DEV_ALIAS_RANGE\t\t " "devid: %02x:%02x.%x flags: %02x " "devid_to: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, PCI_BUS (e->ext >> 8), PCI_SLOT (e->ext >> 8), PCI_FUNC (e->ext >> 8));
            devid_start = e->devid;
            flags = e->flags;
            devid_to = e->ext >> 8;
            ext_flags = 0;
            alias = true;
            break;
        case IVHD_DEV_EXT_SELECT :
            DUMP_printk ("  DEV_EXT_SELECT\t\t devid: %02x:%02x.%x " "flags: %02x ext: %08x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, e->ext);
            devid = e->devid;
            set_dev_entry_from_acpi (iommu, devid, e -> flags, e -> ext);
            break;
        case IVHD_DEV_EXT_SELECT_RANGE :
            DUMP_printk ("  DEV_EXT_SELECT_RANGE\t devid: " "%02x:%02x.%x flags: %02x ext: %08x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, e->ext);
            devid_start = e->devid;
            flags = e->flags;
            ext_flags = e->ext;
            alias = false;
            break;
        case IVHD_DEV_RANGE_END :
            DUMP_printk ("  DEV_RANGE_END\t\t devid: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid));
            devid = e->devid;
            for (dev_i = devid_start; dev_i <= devid; ++dev_i) {
                if (alias) {
                    amd_iommu_alias_table[dev_i] = devid_to;
                    set_dev_entry_from_acpi (iommu, devid_to, flags, ext_flags);
                }
                set_dev_entry_from_acpi (iommu, dev_i, flags, ext_flags);
            }
            break;
        default :
            break;
        }
        p += ivhd_entry_length (p);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="636" endline="769">
{
    e = (struct ivhd_entry *) p;
    switch (e->type) {
    case IVHD_DEV_ALL :
        DUMP_printk ("  DEV_ALL\t\t\t first devid: %02x:%02x.%x" " last device %02x:%02x.%x flags: %02x\n", PCI_BUS (iommu->first_device), PCI_SLOT (iommu->first_device), PCI_FUNC (iommu->first_device), PCI_BUS (iommu->last_device), PCI_SLOT (iommu->last_device), PCI_FUNC (iommu->last_device), e->flags);
        for (dev_i = iommu->first_device; dev_i <= iommu->last_device; ++dev_i)
            set_dev_entry_from_acpi (iommu, dev_i, e->flags, 0);
        break;
    case IVHD_DEV_SELECT :
        DUMP_printk ("  DEV_SELECT\t\t\t devid: %02x:%02x.%x " "flags: %02x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags);
        devid = e->devid;
        set_dev_entry_from_acpi (iommu, devid, e -> flags, 0);
        break;
    case IVHD_DEV_SELECT_RANGE_START :
        DUMP_printk ("  DEV_SELECT_RANGE_START\t " "devid: %02x:%02x.%x flags: %02x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags);
        devid_start = e->devid;
        flags = e->flags;
        ext_flags = 0;
        alias = false;
        break;
    case IVHD_DEV_ALIAS :
        DUMP_printk ("  DEV_ALIAS\t\t\t devid: %02x:%02x.%x " "flags: %02x devid_to: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, PCI_BUS (e->ext >> 8), PCI_SLOT (e->ext >> 8), PCI_FUNC (e->ext >> 8));
        devid = e->devid;
        devid_to = e->ext >> 8;
        set_dev_entry_from_acpi (iommu, devid, e -> flags, 0);
        set_dev_entry_from_acpi (iommu, devid_to, e -> flags, 0);
        amd_iommu_alias_table[devid] = devid_to;
        break;
    case IVHD_DEV_ALIAS_RANGE :
        DUMP_printk ("  DEV_ALIAS_RANGE\t\t " "devid: %02x:%02x.%x flags: %02x " "devid_to: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, PCI_BUS (e->ext >> 8), PCI_SLOT (e->ext >> 8), PCI_FUNC (e->ext >> 8));
        devid_start = e->devid;
        flags = e->flags;
        devid_to = e->ext >> 8;
        ext_flags = 0;
        alias = true;
        break;
    case IVHD_DEV_EXT_SELECT :
        DUMP_printk ("  DEV_EXT_SELECT\t\t devid: %02x:%02x.%x " "flags: %02x ext: %08x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, e->ext);
        devid = e->devid;
        set_dev_entry_from_acpi (iommu, devid, e -> flags, e -> ext);
        break;
    case IVHD_DEV_EXT_SELECT_RANGE :
        DUMP_printk ("  DEV_EXT_SELECT_RANGE\t devid: " "%02x:%02x.%x flags: %02x ext: %08x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, e->ext);
        devid_start = e->devid;
        flags = e->flags;
        ext_flags = e->ext;
        alias = false;
        break;
    case IVHD_DEV_RANGE_END :
        DUMP_printk ("  DEV_RANGE_END\t\t devid: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid));
        devid = e->devid;
        for (dev_i = devid_start; dev_i <= devid; ++dev_i) {
            if (alias) {
                amd_iommu_alias_table[dev_i] = devid_to;
                set_dev_entry_from_acpi (iommu, devid_to, flags, ext_flags);
            }
            set_dev_entry_from_acpi (iommu, dev_i, flags, ext_flags);
        }
        break;
    default :
        break;
    }
    p += ivhd_entry_length (p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="638" endline="766">
{
case IVHD_DEV_ALL :
    DUMP_printk ("  DEV_ALL\t\t\t first devid: %02x:%02x.%x" " last device %02x:%02x.%x flags: %02x\n", PCI_BUS (iommu->first_device), PCI_SLOT (iommu->first_device), PCI_FUNC (iommu->first_device), PCI_BUS (iommu->last_device), PCI_SLOT (iommu->last_device), PCI_FUNC (iommu->last_device), e->flags);
    for (dev_i = iommu->first_device; dev_i <= iommu->last_device; ++dev_i)
        set_dev_entry_from_acpi (iommu, dev_i, e->flags, 0);
    break;
case IVHD_DEV_SELECT :
    DUMP_printk ("  DEV_SELECT\t\t\t devid: %02x:%02x.%x " "flags: %02x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags);
    devid = e->devid;
    set_dev_entry_from_acpi (iommu, devid, e -> flags, 0);
    break;
case IVHD_DEV_SELECT_RANGE_START :
    DUMP_printk ("  DEV_SELECT_RANGE_START\t " "devid: %02x:%02x.%x flags: %02x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags);
    devid_start = e->devid;
    flags = e->flags;
    ext_flags = 0;
    alias = false;
    break;
case IVHD_DEV_ALIAS :
    DUMP_printk ("  DEV_ALIAS\t\t\t devid: %02x:%02x.%x " "flags: %02x devid_to: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, PCI_BUS (e->ext >> 8), PCI_SLOT (e->ext >> 8), PCI_FUNC (e->ext >> 8));
    devid = e->devid;
    devid_to = e->ext >> 8;
    set_dev_entry_from_acpi (iommu, devid, e -> flags, 0);
    set_dev_entry_from_acpi (iommu, devid_to, e -> flags, 0);
    amd_iommu_alias_table[devid] = devid_to;
    break;
case IVHD_DEV_ALIAS_RANGE :
    DUMP_printk ("  DEV_ALIAS_RANGE\t\t " "devid: %02x:%02x.%x flags: %02x " "devid_to: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, PCI_BUS (e->ext >> 8), PCI_SLOT (e->ext >> 8), PCI_FUNC (e->ext >> 8));
    devid_start = e->devid;
    flags = e->flags;
    devid_to = e->ext >> 8;
    ext_flags = 0;
    alias = true;
    break;
case IVHD_DEV_EXT_SELECT :
    DUMP_printk ("  DEV_EXT_SELECT\t\t devid: %02x:%02x.%x " "flags: %02x ext: %08x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, e->ext);
    devid = e->devid;
    set_dev_entry_from_acpi (iommu, devid, e -> flags, e -> ext);
    break;
case IVHD_DEV_EXT_SELECT_RANGE :
    DUMP_printk ("  DEV_EXT_SELECT_RANGE\t devid: " "%02x:%02x.%x flags: %02x ext: %08x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid), e->flags, e->ext);
    devid_start = e->devid;
    flags = e->flags;
    ext_flags = e->ext;
    alias = false;
    break;
case IVHD_DEV_RANGE_END :
    DUMP_printk ("  DEV_RANGE_END\t\t devid: %02x:%02x.%x\n", PCI_BUS (e->devid), PCI_SLOT (e->devid), PCI_FUNC (e->devid));
    devid = e->devid;
    for (dev_i = devid_start; dev_i <= devid; ++dev_i) {
        if (alias) {
            amd_iommu_alias_table[dev_i] = devid_to;
            set_dev_entry_from_acpi (iommu, devid_to, flags, ext_flags);
        }
        set_dev_entry_from_acpi (iommu, dev_i, flags, ext_flags);
    }
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="754" endline="762">
{
    if (alias) {
        amd_iommu_alias_table[dev_i] = devid_to;
        set_dev_entry_from_acpi (iommu, devid_to, flags, ext_flags);
    }
    set_dev_entry_from_acpi (iommu, dev_i, flags, ext_flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="755" endline="759">
{
    amd_iommu_alias_table[dev_i] = devid_to;
    set_dev_entry_from_acpi (iommu, devid_to, flags, ext_flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="774" endline="781">
{
    u16 i;
    for (i = iommu->first_device; i <= iommu->last_device; ++i)
        set_iommu_for_device (iommu, i);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="784" endline="788">
{
    free_command_buffer (iommu);
    free_event_buffer (iommu);
    iommu_unmap_mmio_space (iommu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="791" endline="799">
{
    struct amd_iommu *iommu, *next;

    for_each_iommu_safe (iommu, next) {
        list_del (& iommu -> list);
        free_iommu_one (iommu);
        kfree (iommu);
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="794" endline="798">
{
    list_del (& iommu -> list);
    free_iommu_one (iommu);
    kfree (iommu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="807" endline="840">
{
    spin_lock_init (& iommu -> lock);
    list_add_tail (& iommu -> list, & amd_iommu_list);
    iommu->dev = pci_get_bus_and_slot (PCI_BUS (h->devid), h->devid & 0xff);
    if (!iommu->dev)
        return 1;
    iommu->cap_ptr = h->cap_ptr;
    iommu->pci_seg = h->pci_seg;
    iommu->mmio_phys = h->mmio_phys;
    iommu->mmio_base = iommu_map_mmio_space (h->mmio_phys);
    if (!iommu->mmio_base)
        return -ENOMEM;
    iommu->cmd_buf = alloc_command_buffer (iommu);
    if (!iommu->cmd_buf)
        return -ENOMEM;
    iommu->evt_buf = alloc_event_buffer (iommu);
    if (!iommu->evt_buf)
        return -ENOMEM;
    iommu->int_enabled = false;
    init_iommu_from_pci (iommu);
    init_iommu_from_acpi (iommu, h);
    init_iommu_devices (iommu);
    return pci_enable_device (iommu->dev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="847" endline="885">
{
    u8 *p = (u8 *) table, *end = (u8 *) table;
    struct ivhd_header *h;
    struct amd_iommu *iommu;
    int ret;
    end += table->length;
    p += IVRS_HEADER_LENGTH;
    while (p < end) {
        h = (struct ivhd_header *) p;
        switch (*p) {
        case ACPI_IVHD_TYPE :
            DUMP_printk ("IOMMU: device: %02x:%02x.%01x cap: %04x " "seg: %d flags: %01x info %04x\n", PCI_BUS (h->devid), PCI_SLOT (h->devid), PCI_FUNC (h->devid), h->cap_ptr, h->pci_seg, h->flags, h->info);
            DUMP_printk ("       mmio-addr: %016llx\n", h -> mmio_phys);
            iommu = kzalloc (sizeof (struct amd_iommu), GFP_KERNEL);
            if (iommu == NULL)
                return -ENOMEM;
            ret = init_iommu_one (iommu, h);
            if (ret)
                return ret;
            break;
        default :
            break;
        }
        p += h->length;
    }
    WARN_ON (p != end);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="856" endline="881">
{
    h = (struct ivhd_header *) p;
    switch (*p) {
    case ACPI_IVHD_TYPE :
        DUMP_printk ("IOMMU: device: %02x:%02x.%01x cap: %04x " "seg: %d flags: %01x info %04x\n", PCI_BUS (h->devid), PCI_SLOT (h->devid), PCI_FUNC (h->devid), h->cap_ptr, h->pci_seg, h->flags, h->info);
        DUMP_printk ("       mmio-addr: %016llx\n", h -> mmio_phys);
        iommu = kzalloc (sizeof (struct amd_iommu), GFP_KERNEL);
        if (iommu == NULL)
            return -ENOMEM;
        ret = init_iommu_one (iommu, h);
        if (ret)
            return ret;
        break;
    default :
        break;
    }
    p += h->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="858" endline="878">
{
case ACPI_IVHD_TYPE :
    DUMP_printk ("IOMMU: device: %02x:%02x.%01x cap: %04x " "seg: %d flags: %01x info %04x\n", PCI_BUS (h->devid), PCI_SLOT (h->devid), PCI_FUNC (h->devid), h->cap_ptr, h->pci_seg, h->flags, h->info);
    DUMP_printk ("       mmio-addr: %016llx\n", h -> mmio_phys);
    iommu = kzalloc (sizeof (struct amd_iommu), GFP_KERNEL);
    if (iommu == NULL)
        return -ENOMEM;
    ret = init_iommu_one (iommu, h);
    if (ret)
        return ret;
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="897" endline="917">
{
    int r;
    if (pci_enable_msi (iommu->dev))
        return 1;
    r = request_irq (iommu->dev->irq, amd_iommu_int_handler, IRQF_SAMPLE_RANDOM, "AMD IOMMU", NULL);
    if (r) {
        pci_disable_msi (iommu -> dev);
        return 1;
    }
    iommu->int_enabled = true;
    iommu_feature_enable (iommu, CONTROL_EVT_INT_EN);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="908" endline="911">
{
    pci_disable_msi (iommu -> dev);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="920" endline="928">
{
    if (iommu->int_enabled)
        return 0;
    if (pci_find_capability (iommu->dev, PCI_CAP_ID_MSI))
        return iommu_setup_msi (iommu);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="939" endline="946">
{
    struct unity_map_entry *entry, *next;
    list_for_each_entry_safe (entry, next, &amd_iommu_unity_map, list) {
        list_del (& entry -> list);
        kfree (entry);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="942" endline="945">
{
    list_del (& entry -> list);
    kfree (entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="950" endline="970">
{
    int i;
    switch (m->type) {
    case ACPI_IVMD_TYPE :
        set_device_exclusion_range (m->devid, m);
        break;
    case ACPI_IVMD_TYPE_ALL :
        for (i = 0; i <= amd_iommu_last_bdf; ++i)
            set_device_exclusion_range (i, m);
        break;
    case ACPI_IVMD_TYPE_RANGE :
        for (i = m->devid; i <= m->aux; ++i)
            set_device_exclusion_range (i, m);
        break;
    default :
        break;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="953" endline="967">
{
case ACPI_IVMD_TYPE :
    set_device_exclusion_range (m->devid, m);
    break;
case ACPI_IVMD_TYPE_ALL :
    for (i = 0; i <= amd_iommu_last_bdf; ++i)
        set_device_exclusion_range (i, m);
    break;
case ACPI_IVMD_TYPE_RANGE :
    for (i = m->devid; i <= m->aux; ++i)
        set_device_exclusion_range (i, m);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="974" endline="1015">
{
    struct unity_map_entry *e = 0;
    char *s;
    e = kzalloc (sizeof (*e), GFP_KERNEL);
    if (e == NULL)
        return -ENOMEM;
    switch (m->type) {
    default :
        kfree (e);
        return 0;
    case ACPI_IVMD_TYPE :
        s = "IVMD_TYPEi\t\t\t";
        e->devid_start = e->devid_end = m->devid;
        break;
    case ACPI_IVMD_TYPE_ALL :
        s = "IVMD_TYPE_ALL\t\t";
        e->devid_start = 0;
        e->devid_end = amd_iommu_last_bdf;
        break;
    case ACPI_IVMD_TYPE_RANGE :
        s = "IVMD_TYPE_RANGE\t\t";
        e->devid_start = m->devid;
        e->devid_end = m->aux;
        break;
    }
    e->address_start = PAGE_ALIGN (m->range_start);
    e->address_end = e->address_start + PAGE_ALIGN (m->range_length);
    e->prot = m->flags >> 1;
    DUMP_printk ("%s devid_start: %02x:%02x.%x devid_end: %02x:%02x.%x" " range_start: %016llx range_end: %016llx flags: %x\n", s, PCI_BUS (e -> devid_start), PCI_SLOT (e -> devid_start), PCI_FUNC (e -> devid_start), PCI_BUS (e -> devid_end), PCI_SLOT (e -> devid_end), PCI_FUNC (e -> devid_end), e -> address_start, e -> address_end, m -> flags);
    list_add_tail (& e -> list, & amd_iommu_unity_map);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="982" endline="1000">
{
default :
    kfree (e);
    return 0;
case ACPI_IVMD_TYPE :
    s = "IVMD_TYPEi\t\t\t";
    e->devid_start = e->devid_end = m->devid;
    break;
case ACPI_IVMD_TYPE_ALL :
    s = "IVMD_TYPE_ALL\t\t";
    e->devid_start = 0;
    e->devid_end = amd_iommu_last_bdf;
    break;
case ACPI_IVMD_TYPE_RANGE :
    s = "IVMD_TYPE_RANGE\t\t";
    e->devid_start = m->devid;
    e->devid_end = m->aux;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1019" endline="1037">
{
    u8 *p = (u8 *) table, *end = (u8 *) table;
    struct ivmd_header *m;
    end += table->length;
    p += IVRS_HEADER_LENGTH;
    while (p < end) {
        m = (struct ivmd_header *) p;
        if (m->flags & IVMD_FLAG_EXCL_RANGE)
            init_exclusion_range (m);
        else if (m->flags & IVMD_FLAG_UNITY_MAP)
            init_unity_map_range (m);
        p += m->length;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1026" endline="1034">
{
    m = (struct ivmd_header *) p;
    if (m->flags & IVMD_FLAG_EXCL_RANGE)
        init_exclusion_range (m);
    else if (m->flags & IVMD_FLAG_UNITY_MAP)
        init_unity_map_range (m);
    p += m->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1044" endline="1051">
{
    u16 devid;
    for (devid = 0; devid <= amd_iommu_last_bdf; ++devid) {
        set_dev_entry_bit (devid, DEV_ENTRY_VALID);
        set_dev_entry_bit (devid, DEV_ENTRY_TRANSLATION);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1047" endline="1050">
{
    set_dev_entry_bit (devid, DEV_ENTRY_VALID);
    set_dev_entry_bit (devid, DEV_ENTRY_TRANSLATION);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1058" endline="1070">
{
    struct amd_iommu *iommu;

    for_each_iommu (iommu) {
        iommu_disable (iommu);
        iommu_set_device_table (iommu);
        iommu_enable_command_buffer (iommu);
        iommu_enable_event_buffer (iommu);
        iommu_set_exclusion_range (iommu);
        iommu_init_msi (iommu);
        iommu_enable (iommu);
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1061" endline="1069">
{
    iommu_disable (iommu);
    iommu_set_device_table (iommu);
    iommu_enable_command_buffer (iommu);
    iommu_enable_event_buffer (iommu);
    iommu_set_exclusion_range (iommu);
    iommu_init_msi (iommu);
    iommu_enable (iommu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1073" endline="1078">
{
    struct amd_iommu *iommu;
    for_each_iommu (iommu)
    iommu_disable (iommu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1086" endline="1098">
{
    enable_iommus ();
    amd_iommu_flush_all_devices ();
    amd_iommu_flush_all_domains ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1101" endline="1106">
{
    disable_iommus ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1148" endline="1286">
{
    int i, ret = 0;
    if (no_iommu) {
        printk (KERN_INFO "AMD IOMMU disabled by kernel command line\n");
        return 0;
    }
    if (!amd_iommu_detected)
        return -ENODEV;
    if (acpi_table_parse ("IVRS", find_last_devid_acpi) != 0)
        return -ENODEV;
    dev_table_size = tbl_size (DEV_TABLE_ENTRY_SIZE);
    alias_table_size = tbl_size (ALIAS_TABLE_ENTRY_SIZE);
    rlookup_table_size = tbl_size (RLOOKUP_TABLE_ENTRY_SIZE);
    ret = -ENOMEM;
    amd_iommu_dev_table = (void *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (dev_table_size));
    if (amd_iommu_dev_table == NULL)
        goto out;
    amd_iommu_alias_table = (void *) __get_free_pages (GFP_KERNEL, get_order (alias_table_size));
    if (amd_iommu_alias_table == NULL)
        goto free;
    amd_iommu_rlookup_table = (void *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (rlookup_table_size));
    if (amd_iommu_rlookup_table == NULL)
        goto free;
    amd_iommu_pd_table = (void *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (rlookup_table_size));
    if (amd_iommu_pd_table == NULL)
        goto free;
    amd_iommu_pd_alloc_bitmap = (void *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (MAX_DOMAIN_ID / 8));
    if (amd_iommu_pd_alloc_bitmap == NULL)
        goto free;
    init_device_table ();
    for (i = 0; i <= amd_iommu_last_bdf; ++i)
        amd_iommu_alias_table[i] = i;
    amd_iommu_pd_alloc_bitmap[0] = 1;
    ret = -ENODEV;
    if (acpi_table_parse ("IVRS", init_iommu_all) != 0)
        goto free;
    if (acpi_table_parse ("IVRS", init_memory_definitions) != 0)
        goto free;
    ret = sysdev_class_register (&amd_iommu_sysdev_class);
    if (ret)
        goto free;
    ret = sysdev_register (&device_amd_iommu);
    if (ret)
        goto free;
    ret = amd_iommu_init_dma_ops ();
    if (ret)
        goto free;
    enable_iommus ();
    printk (KERN_INFO "AMD IOMMU: device isolation ");
    if (amd_iommu_isolate)
        printk ("enabled\n");
    else
        printk ("disabled\n");
    if (amd_iommu_unmap_flush)
        printk (KERN_INFO "AMD IOMMU: IO/TLB flush on unmap enabled\n");
    else
        printk (KERN_INFO "AMD IOMMU: Lazy IO/TLB flushing enabled\n");
out :
    return ret;
free :
    free_pages ((unsigned long) amd_iommu_pd_alloc_bitmap, get_order (MAX_DOMAIN_ID / 8));
    free_pages ((unsigned long) amd_iommu_pd_table, get_order (rlookup_table_size));
    free_pages ((unsigned long) amd_iommu_rlookup_table, get_order (rlookup_table_size));
    free_pages ((unsigned long) amd_iommu_alias_table, get_order (alias_table_size));
    free_pages ((unsigned long) amd_iommu_dev_table, get_order (dev_table_size));
    free_iommu_all ();
    free_unity_maps ();
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1152" endline="1155">
{
    printk (KERN_INFO "AMD IOMMU disabled by kernel command line\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1289" endline="1291">
{
    disable_iommus ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1301" endline="1303">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1306" endline="1318">
{
    if (swiotlb || no_iommu || (iommu_detected && !gart_iommu_aperture))
        return;
    if (acpi_table_parse ("IVRS", early_amd_iommu_detect) == 0) {
        iommu_detected = 1;
        amd_iommu_detected = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1310" endline="1317">
{
    iommu_detected = 1;
    amd_iommu_detected = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1328" endline="1332">
{
    amd_iommu_dump = true;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1335" endline="1346">
{
    for (; *str; ++str) {
        if (strncmp (str, "isolate", 7) == 0)
            amd_iommu_isolate = true;
        if (strncmp (str, "share", 5) == 0)
            amd_iommu_isolate = false;
        if (strncmp (str, "fullflush", 9) == 0)
            amd_iommu_unmap_flush = true;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/amd_iommu_init.c.ifdefed" startline="1336" endline="1343">
{
    if (strncmp (str, "isolate", 7) == 0)
        amd_iommu_isolate = true;
    if (strncmp (str, "share", 5) == 0)
        amd_iommu_isolate = false;
    if (strncmp (str, "fullflush", 9) == 0)
        amd_iommu_unmap_flush = true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="61" endline="64">
{
    efi_enabled = 0;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="71" endline="74">
{
    add_efi_memmap = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="79" endline="81">
{
    return efi_call_virt2 (get_time, tm, tc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="84" endline="86">
{
    return efi_call_virt1 (set_time, tm);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="91" endline="94">
{
    return efi_call_virt3 (get_wakeup_time, enabled, pending, tm);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="97" endline="100">
{
    return efi_call_virt2 (set_wakeup_time, enabled, tm);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="107" endline="111">
{
    return efi_call_virt5 (get_variable, name, vendor, attr, data_size, data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="116" endline="119">
{
    return efi_call_virt3 (get_next_variable, name_size, name, vendor);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="126" endline="130">
{
    return efi_call_virt5 (set_variable, name, vendor, attr, data_size, data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="133" endline="135">
{
    return efi_call_virt1 (get_next_high_mono_count, count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="141" endline="144">
{
    efi_call_virt4 (reset_system, reset_type, status, data_size, data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="151" endline="155">
{
    return efi_call_virt4 (set_virtual_address_map, memory_map_size, descriptor_size, descriptor_version, virtual_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="162" endline="171">
{
    efi_status_t status;
    efi_call_phys_prelog ();
    status = efi_call_phys4 (efi_phys.set_virtual_address_map, memory_map_size, descriptor_size, descriptor_version, virtual_map);
    efi_call_phys_epilog ();
    return status;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="175" endline="182">
{
    efi_status_t status;
    efi_call_phys_prelog ();
    status = efi_call_phys2 (efi_phys.get_time, tm, tc);
    efi_call_phys_epilog ();
    return status;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="185" endline="211">
{
    int real_seconds, real_minutes;
    efi_status_t status;
    efi_time_t eft;
    efi_time_cap_t cap;
    status = efi.get_time (&eft, &cap);
    if (status != EFI_SUCCESS) {
        printk (KERN_ERR "Oops: efitime: can't read time!\n");
        return -1;
    }
    real_seconds = nowtime % 60;
    real_minutes = nowtime / 60;
    if (((abs (real_minutes -eft.minute) + 15) / 30) & 1)
        real_minutes += 30;
    real_minutes %= 60;
    eft.minute = real_minutes;
    eft.second = real_seconds;
    status = efi.set_time (&eft);
    if (status != EFI_SUCCESS) {
        printk (KERN_ERR "Oops: efitime: can't write time!\n");
        return -1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="192" endline="195">
{
    printk (KERN_ERR "Oops: efitime: can't read time!\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="206" endline="209">
{
    printk (KERN_ERR "Oops: efitime: can't write time!\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="214" endline="225">
{
    efi_status_t status;
    efi_time_t eft;
    efi_time_cap_t cap;
    status = efi.get_time (&eft, &cap);
    if (status != EFI_SUCCESS)
        printk (KERN_ERR "Oops: efitime: can't read time!\n");
    return mktime (eft.year, eft.month, eft.day, eft.hour, eft.minute, eft.second);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="234" endline="275">
{
    void *p;
    for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
        efi_memory_desc_t *md = p;
        unsigned long long start = md->phys_addr;
        unsigned long long size = md->num_pages << EFI_PAGE_SHIFT;
        int e820_type;
        switch (md->type) {
        case EFI_LOADER_CODE :
        case EFI_LOADER_DATA :
        case EFI_BOOT_SERVICES_CODE :
        case EFI_BOOT_SERVICES_DATA :
        case EFI_CONVENTIONAL_MEMORY :
            if (md->attribute & EFI_MEMORY_WB)
                e820_type = E820_RAM;
            else
                e820_type = E820_RESERVED;
            break;
        case EFI_ACPI_RECLAIM_MEMORY :
            e820_type = E820_ACPI;
            break;
        case EFI_ACPI_MEMORY_NVS :
            e820_type = E820_NVS;
            break;
        case EFI_UNUSABLE_MEMORY :
            e820_type = E820_UNUSABLE;
            break;
        default :
            e820_type = E820_RESERVED;
            break;
        }
        e820_add_region (start, size, e820_type);
    }
    sanitize_e820_map (e820.map, ARRAY_SIZE (e820.map), & e820.nr_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="237" endline="273">
{
    efi_memory_desc_t *md = p;
    unsigned long long start = md->phys_addr;
    unsigned long long size = md->num_pages << EFI_PAGE_SHIFT;
    int e820_type;
    switch (md->type) {
    case EFI_LOADER_CODE :
    case EFI_LOADER_DATA :
    case EFI_BOOT_SERVICES_CODE :
    case EFI_BOOT_SERVICES_DATA :
    case EFI_CONVENTIONAL_MEMORY :
        if (md->attribute & EFI_MEMORY_WB)
            e820_type = E820_RAM;
        else
            e820_type = E820_RESERVED;
        break;
    case EFI_ACPI_RECLAIM_MEMORY :
        e820_type = E820_ACPI;
        break;
    case EFI_ACPI_MEMORY_NVS :
        e820_type = E820_NVS;
        break;
    case EFI_UNUSABLE_MEMORY :
        e820_type = E820_UNUSABLE;
        break;
    default :
        e820_type = E820_RESERVED;
        break;
    }
    e820_add_region (start, size, e820_type);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="243" endline="271">
{
case EFI_LOADER_CODE :
case EFI_LOADER_DATA :
case EFI_BOOT_SERVICES_CODE :
case EFI_BOOT_SERVICES_DATA :
case EFI_CONVENTIONAL_MEMORY :
    if (md->attribute & EFI_MEMORY_WB)
        e820_type = E820_RAM;
    else
        e820_type = E820_RESERVED;
    break;
case EFI_ACPI_RECLAIM_MEMORY :
    e820_type = E820_ACPI;
    break;
case EFI_ACPI_MEMORY_NVS :
    e820_type = E820_NVS;
    break;
case EFI_UNUSABLE_MEMORY :
    e820_type = E820_UNUSABLE;
    break;
default :
    e820_type = E820_RESERVED;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="278" endline="294">
{
    unsigned long pmap;
    pmap = (boot_params.efi_info.efi_memmap | ((__u64) boot_params.efi_info.efi_memmap_hi << 32));
    memmap.phys_map = (void *) pmap;
    memmap.nr_map = boot_params.efi_info.efi_memmap_size / boot_params.efi_info.efi_memdesc_size;
    memmap.desc_version = boot_params.efi_info.efi_memdesc_version;
    memmap.desc_size = boot_params.efi_info.efi_memdesc_size;
    reserve_early (pmap, pmap + memmap.nr_map * memmap.desc_size, "EFI memmap");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="317" endline="462">
{
    efi_config_table_t *config_tables;
    efi_runtime_services_t *runtime;
    efi_char16_t *c16;
    char vendor [100] = "unknown";
    int i = 0;
    void *tmp;
    efi_phys.systab = (efi_system_table_t *) (boot_params.efi_info.efi_systab | ((__u64) boot_params.efi_info.efi_systab_hi << 32));
    efi.systab = early_ioremap ((unsigned long) efi_phys.systab, sizeof (efi_system_table_t));
    if (efi.systab == NULL)
        printk (KERN_ERR "Couldn't map the EFI system table!\n");
    memcpy (& efi_systab, efi.systab, sizeof (efi_system_table_t));
    early_iounmap (efi.systab, sizeof (efi_system_table_t));
    efi.systab = &efi_systab;
    if (efi.systab->hdr.signature != EFI_SYSTEM_TABLE_SIGNATURE)
        printk (KERN_ERR "EFI system table signature incorrect!\n");
    if ((efi.systab->hdr.revision >> 16) == 0)
        printk (KERN_ERR "Warning: EFI system table version " "%d.%02d, expected 1.00 or greater!\n", efi.systab->hdr.revision >> 16, efi.systab->hdr.revision & 0xffff);
    c16 = tmp = early_ioremap (efi.systab->fw_vendor, 2);
    if (c16) {
        for (i = 0; i < sizeof (vendor) - 1 && *c16; ++i)
            vendor[i] = *c16++;
        vendor[i] = '\0';
    }
    else
        printk (KERN_ERR PFX "Could not map the firmware vendor!\n");
    early_iounmap (tmp, 2);
    printk (KERN_INFO "EFI v%u.%.02u by %s \n", efi.systab -> hdr.revision >> 16, efi.systab -> hdr.revision & 0xffff, vendor);
    config_tables = early_ioremap (efi.systab->tables, efi.systab->nr_tables * sizeof (efi_config_table_t));
    if (config_tables == NULL)
        printk (KERN_ERR "Could not map EFI Configuration Table!\n");
    printk (KERN_INFO);
    for (i = 0; i < efi.systab->nr_tables; i++) {
        if (!efi_guidcmp (config_tables[i].guid, MPS_TABLE_GUID)) {
            efi.mps = config_tables[i].table;
            printk (" MPS=0x%lx ", config_tables [i].table);
        }
        else if (!efi_guidcmp (config_tables[i].guid, ACPI_20_TABLE_GUID)) {
            efi.acpi20 = config_tables[i].table;
            printk (" ACPI 2.0=0x%lx ", config_tables [i].table);
        }
        else if (!efi_guidcmp (config_tables[i].guid, ACPI_TABLE_GUID)) {
            efi.acpi = config_tables[i].table;
            printk (" ACPI=0x%lx ", config_tables [i].table);
        }
        else if (!efi_guidcmp (config_tables[i].guid, SMBIOS_TABLE_GUID)) {
            efi.smbios = config_tables[i].table;
            printk (" SMBIOS=0x%lx ", config_tables [i].table);
        }
        else if (!efi_guidcmp (config_tables[i].guid, HCDP_TABLE_GUID)) {
            efi.hcdp = config_tables[i].table;
            printk (" HCDP=0x%lx ", config_tables [i].table);
        }
        else if (!efi_guidcmp (config_tables[i].guid, UGA_IO_PROTOCOL_GUID)) {
            efi.uga = config_tables[i].table;
            printk (" UGA=0x%lx ", config_tables [i].table);
        }
    }
    printk ("\n");
    early_iounmap (config_tables, efi.systab -> nr_tables * sizeof (efi_config_table_t));
    runtime = early_ioremap ((unsigned long) efi.systab->runtime, sizeof (efi_runtime_services_t));
    if (runtime != NULL) {
        efi_phys.get_time = (efi_get_time_t *) runtime->get_time;
        efi_phys.set_virtual_address_map = (efi_set_virtual_address_map_t *) runtime->set_virtual_address_map;
        efi.get_time = phys_efi_get_time;
    }
    else
        printk (KERN_ERR "Could not map the EFI runtime service " "table!\n");
    early_iounmap (runtime, sizeof (efi_runtime_services_t));
    memmap.map = early_ioremap ((unsigned long) memmap.phys_map, memmap.nr_map * memmap.desc_size);
    if (memmap.map == NULL)
        printk (KERN_ERR "Could not map the EFI memory map!\n");
    memmap.map_end = memmap.map + (memmap.nr_map * memmap.desc_size);
    if (memmap.desc_size != sizeof (efi_memory_desc_t))
        printk (KERN_WARNING "Kernel-defined memdesc doesn't match the one from EFI!\n");
    if (add_efi_memmap)
        do_add_efi_memmap ();
    reboot_type = BOOT_EFI;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="356" endline="360">
{
    for (i = 0; i < sizeof (vendor) - 1 && *c16; ++i)
        vendor[i] = *c16++;
    vendor[i] = '\0';
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="378" endline="409">
{
    if (!efi_guidcmp (config_tables[i].guid, MPS_TABLE_GUID)) {
        efi.mps = config_tables[i].table;
        printk (" MPS=0x%lx ", config_tables [i].table);
    }
    else if (!efi_guidcmp (config_tables[i].guid, ACPI_20_TABLE_GUID)) {
        efi.acpi20 = config_tables[i].table;
        printk (" ACPI 2.0=0x%lx ", config_tables [i].table);
    }
    else if (!efi_guidcmp (config_tables[i].guid, ACPI_TABLE_GUID)) {
        efi.acpi = config_tables[i].table;
        printk (" ACPI=0x%lx ", config_tables [i].table);
    }
    else if (!efi_guidcmp (config_tables[i].guid, SMBIOS_TABLE_GUID)) {
        efi.smbios = config_tables[i].table;
        printk (" SMBIOS=0x%lx ", config_tables [i].table);
    }
    else if (!efi_guidcmp (config_tables[i].guid, HCDP_TABLE_GUID)) {
        efi.hcdp = config_tables[i].table;
        printk (" HCDP=0x%lx ", config_tables [i].table);
    }
    else if (!efi_guidcmp (config_tables[i].guid, UGA_IO_PROTOCOL_GUID)) {
        efi.uga = config_tables[i].table;
        printk (" UGA=0x%lx ", config_tables [i].table);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="379" endline="382">
{
    efi.mps = config_tables[i].table;
    printk (" MPS=0x%lx ", config_tables [i].table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="383" endline="386">
{
    efi.acpi20 = config_tables[i].table;
    printk (" ACPI 2.0=0x%lx ", config_tables [i].table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="387" endline="390">
{
    efi.acpi = config_tables[i].table;
    printk (" ACPI=0x%lx ", config_tables [i].table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="391" endline="400">
{
    efi.smbios = config_tables[i].table;
    printk (" SMBIOS=0x%lx ", config_tables [i].table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="401" endline="404">
{
    efi.hcdp = config_tables[i].table;
    printk (" HCDP=0x%lx ", config_tables [i].table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="405" endline="408">
{
    efi.uga = config_tables[i].table;
    printk (" UGA=0x%lx ", config_tables [i].table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="422" endline="437">
{
    efi_phys.get_time = (efi_get_time_t *) runtime->get_time;
    efi_phys.set_virtual_address_map = (efi_set_virtual_address_map_t *) runtime->set_virtual_address_map;
    efi.get_time = phys_efi_get_time;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="465" endline="482">
{
    efi_memory_desc_t *md;
    void *p;
    u64 addr, npages;
    for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
        md = p;
        if (md->type != EFI_RUNTIME_SERVICES_CODE)
            continue;
        addr = md->virt_addr;
        npages = md->num_pages;
        memrange_efi_to_native (& addr, & npages);
        set_memory_x (addr, npages);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="471" endline="481">
{
    md = p;
    if (md->type != EFI_RUNTIME_SERVICES_CODE)
        continue;
    addr = md->virt_addr;
    npages = md->num_pages;
    memrange_efi_to_native (& addr, & npages);
    set_memory_x (addr, npages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="493" endline="573">
{
    efi_memory_desc_t *md;
    efi_status_t status;
    unsigned long size;
    u64 end, systab, addr, npages, end_pfn;
    void *p, *va;
    efi.systab = NULL;
    for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
        md = p;
        if (!(md->attribute & EFI_MEMORY_RUNTIME))
            continue;
        size = md->num_pages << EFI_PAGE_SHIFT;
        end = md->phys_addr + size;
        end_pfn = PFN_UP (end);
        if (end_pfn <= max_low_pfn_mapped || (end_pfn > (1UL << (32 - PAGE_SHIFT)) && end_pfn <= max_pfn_mapped))
            va = __va (md->phys_addr);
        else
            va = efi_ioremap (md->phys_addr, size, md->type);
        md->virt_addr = (u64) (unsigned long) va;
        if (!va) {
            printk (KERN_ERR PFX "ioremap of 0x%llX failed!\n", (unsigned long long) md -> phys_addr);
            continue;
        }
        if (!(md->attribute & EFI_MEMORY_WB)) {
            addr = md->virt_addr;
            npages = md->num_pages;
            memrange_efi_to_native (& addr, & npages);
            set_memory_uc (addr, npages);
        }
        systab = (u64) (unsigned long) efi_phys.systab;
        if (md->phys_addr <= systab && systab < end) {
            systab += md->virt_addr - md->phys_addr;
            efi.systab = (efi_system_table_t *) (unsigned long) systab;
        }
    }
    BUG_ON (! efi.systab);
    status = phys_efi_set_virtual_address_map (memmap.desc_size * memmap.nr_map, memmap.desc_size, memmap.desc_version, memmap.phys_map);
    if (status != EFI_SUCCESS) {
        printk (KERN_ALERT "Unable to switch EFI into virtual mode " "(status=%lx)!\n", status);
        panic ("EFI call to SetVirtualAddressMap() failed!");
    }
    efi.get_time = virt_efi_get_time;
    efi.set_time = virt_efi_set_time;
    efi.get_wakeup_time = virt_efi_get_wakeup_time;
    efi.set_wakeup_time = virt_efi_set_wakeup_time;
    efi.get_variable = virt_efi_get_variable;
    efi.get_next_variable = virt_efi_get_next_variable;
    efi.set_variable = virt_efi_set_variable;
    efi.get_next_high_mono_count = virt_efi_get_next_high_mono_count;
    efi.reset_system = virt_efi_reset_system;
    efi.set_virtual_address_map = virt_efi_set_virtual_address_map;
    if (__supported_pte_mask & _PAGE_NX)
        runtime_code_page_mkexec ();
    early_iounmap (memmap.map, memmap.nr_map * memmap.desc_size);
    memmap.map = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="501" endline="537">
{
    md = p;
    if (!(md->attribute & EFI_MEMORY_RUNTIME))
        continue;
    size = md->num_pages << EFI_PAGE_SHIFT;
    end = md->phys_addr + size;
    end_pfn = PFN_UP (end);
    if (end_pfn <= max_low_pfn_mapped || (end_pfn > (1UL << (32 - PAGE_SHIFT)) && end_pfn <= max_pfn_mapped))
        va = __va (md->phys_addr);
    else
        va = efi_ioremap (md->phys_addr, size, md->type);
    md->virt_addr = (u64) (unsigned long) va;
    if (!va) {
        printk (KERN_ERR PFX "ioremap of 0x%llX failed!\n", (unsigned long long) md -> phys_addr);
        continue;
    }
    if (!(md->attribute & EFI_MEMORY_WB)) {
        addr = md->virt_addr;
        npages = md->num_pages;
        memrange_efi_to_native (& addr, & npages);
        set_memory_uc (addr, npages);
    }
    systab = (u64) (unsigned long) efi_phys.systab;
    if (md->phys_addr <= systab && systab < end) {
        systab += md->virt_addr - md->phys_addr;
        efi.systab = (efi_system_table_t *) (unsigned long) systab;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="519" endline="523">
{
    printk (KERN_ERR PFX "ioremap of 0x%llX failed!\n", (unsigned long long) md -> phys_addr);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="525" endline="530">
{
    addr = md->virt_addr;
    npages = md->num_pages;
    memrange_efi_to_native (& addr, & npages);
    set_memory_uc (addr, npages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="533" endline="536">
{
    systab += md->virt_addr - md->phys_addr;
    efi.systab = (efi_system_table_t *) (unsigned long) systab;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="547" endline="551">
{
    printk (KERN_ALERT "Unable to switch EFI into virtual mode " "(status=%lx)!\n", status);
    panic ("EFI call to SetVirtualAddressMap() failed!");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="579" endline="591">
{
    efi_memory_desc_t *md;
    void *p;
    for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
        md = p;
        if ((md->phys_addr <= phys_addr) && (phys_addr < (md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT))))
            return md->type;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="583" endline="589">
{
    md = p;
    if ((md->phys_addr <= phys_addr) && (phys_addr < (md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT))))
        return md->type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="594" endline="606">
{
    efi_memory_desc_t *md;
    void *p;
    for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
        md = p;
        if ((md->phys_addr <= phys_addr) && (phys_addr < (md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT))))
            return md->attribute;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi.c.ifdefed" startline="598" endline="604">
{
    md = p;
    if ((md->phys_addr <= phys_addr) && (phys_addr < (md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT))))
        return md->attribute;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="55" endline="60">
{
    struct cpuid_regs *cmd = (struct cpuid_regs *) cmd_block;
    cpuid_count (cmd -> eax, cmd -> ecx, & cmd -> eax, & cmd -> ebx, & cmd -> ecx, & cmd -> edx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="63" endline="82">
{
    loff_t ret;
    struct inode *inode = file->f_mapping->host;
    mutex_lock (& inode -> i_mutex);
    switch (orig) {
    case 0 :
        file->f_pos = offset;
        ret = file->f_pos;
        break;
    case 1 :
        file->f_pos += offset;
        ret = file->f_pos;
        break;
    default :
        ret = -EINVAL;
    }
    mutex_unlock (& inode -> i_mutex);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="68" endline="79">
{
case 0 :
    file->f_pos = offset;
    ret = file->f_pos;
    break;
case 1 :
    file->f_pos += offset;
    ret = file->f_pos;
    break;
default :
    ret = -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="86" endline="113">
{
    char __user *tmp = buf;
    struct cpuid_regs cmd;
    int cpu = iminor (file->f_path.dentry->d_inode);
    u64 pos = *ppos;
    ssize_t bytes = 0;
    int err = 0;
    if (count % 16)
        return -EINVAL;
    for (; count; count -= 16) {
        cmd.eax = pos;
        cmd.ecx = pos >> 32;
        err = smp_call_function_single (cpu, cpuid_smp_cpuid, &cmd, 1);
        if (err)
            break;
        if (copy_to_user (tmp, &cmd, 16)) {
            err = -EFAULT;
            break;
        }
        tmp += 16;
        bytes += 16;
        *ppos = ++pos;
    }
    return bytes ? bytes : err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="97" endline="110">
{
    cmd.eax = pos;
    cmd.ecx = pos >> 32;
    err = smp_call_function_single (cpu, cpuid_smp_cpuid, &cmd, 1);
    if (err)
        break;
    if (copy_to_user (tmp, &cmd, 16)) {
        err = -EFAULT;
        break;
    }
    tmp += 16;
    bytes += 16;
    *ppos = ++pos;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="103" endline="106">
{
    err = -EFAULT;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="116" endline="134">
{
    unsigned int cpu;
    struct cpuinfo_x86 *c;
    int ret = 0;
    lock_kernel ();
    cpu = iminor (file->f_path.dentry->d_inode);
    if (cpu >= nr_cpu_ids || !cpu_online (cpu)) {
        ret = -ENXIO;
        goto out;
    }
    c = &cpu_data (cpu);
    if (c->cpuid_level < 0)
        ret = -EIO;
out :
    unlock_kernel ();
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="124" endline="127">
{
    ret = -ENXIO;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="147" endline="153">
{
    struct device *dev;
    dev = device_create (cpuid_class, NULL, MKDEV (CPUID_MAJOR, cpu), NULL, "cpu%d", cpu);
    return IS_ERR (dev) ? PTR_ERR (dev) : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="156" endline="158">
{
    device_destroy (cpuid_class, MKDEV (CPUID_MAJOR, cpu));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="163" endline="178">
{
    unsigned int cpu = (unsigned long) hcpu;
    int err = 0;
    switch (action) {
    case CPU_UP_PREPARE :
        err = cpuid_device_create (cpu);
        break;
    case CPU_UP_CANCELED :
    case CPU_UP_CANCELED_FROZEN :
    case CPU_DEAD :
        cpuid_device_destroy (cpu);
        break;
    }
    return err ? NOTIFY_BAD : NOTIFY_OK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="167" endline="176">
{
case CPU_UP_PREPARE :
    err = cpuid_device_create (cpu);
    break;
case CPU_UP_CANCELED :
case CPU_UP_CANCELED_FROZEN :
case CPU_DEAD :
    cpuid_device_destroy (cpu);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="186" endline="188">
{
    return kasprintf (GFP_KERNEL, "cpu/%u/cpuid", MINOR (dev->devt));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="191" endline="227">
{
    int i, err = 0;
    i = 0;
    if (register_chrdev (CPUID_MAJOR, "cpu/cpuid", &cpuid_fops)) {
        printk (KERN_ERR "cpuid: unable to get major %d for cpuid\n", CPUID_MAJOR);
        err = -EBUSY;
        goto out;
    }
    cpuid_class = class_create (THIS_MODULE, "cpuid");
    if (IS_ERR (cpuid_class)) {
        err = PTR_ERR (cpuid_class);
        goto out_chrdev;
    }
    cpuid_class->nodename = cpuid_nodename;

    for_each_online_cpu (i) {
        err = cpuid_device_create (i);
        if (err != 0)
            goto out_class;
    }

    register_hotcpu_notifier (& cpuid_class_cpu_notifier);
    err = 0;
    goto out;
out_class :
    i = 0;

    for_each_online_cpu (i) {
        cpuid_device_destroy (i);
    }

    class_destroy (cpuid_class);
out_chrdev :
    unregister_chrdev (CPUID_MAJOR, "cpu/cpuid");
out :
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="195" endline="200">
{
    printk (KERN_ERR "cpuid: unable to get major %d for cpuid\n", CPUID_MAJOR);
    err = -EBUSY;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="202" endline="205">
{
    err = PTR_ERR (cpuid_class);
    goto out_chrdev;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="207" endline="211">
{
    err = cpuid_device_create (i);
    if (err != 0)
        goto out_class;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="219" endline="221">
{
    cpuid_device_destroy (i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpuid.c.ifdefed" startline="230" endline="238">
{
    int cpu = 0;
    for_each_online_cpu (cpu)
    cpuid_device_destroy (cpu);
    class_destroy (cpuid_class);
    unregister_chrdev (CPUID_MAJOR, "cpu/cpuid");
    unregister_hotcpu_notifier (& cpuid_class_cpu_notifier);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="22" endline="31">
{
    unsigned int i;
    for (i = base; i < base + extent; i++) {
        if (new_value)
            __set_bit (i, bitmap);
        else
            __clear_bit (i, bitmap);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="25" endline="30">
{
    if (new_value)
        __set_bit (i, bitmap);
    else
        __clear_bit (i, bitmap);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="37" endline="94">
{
    struct thread_struct *t = &current->thread;
    struct tss_struct *tss;
    unsigned int i, max_long, bytes, bytes_updated;
    if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
        return -EINVAL;
    if (turn_on && !capable (CAP_SYS_RAWIO))
        return -EPERM;
    if (!t->io_bitmap_ptr) {
        unsigned long *bitmap = kmalloc (IO_BITMAP_BYTES, GFP_KERNEL);
        if (!bitmap)
            return -ENOMEM;
        memset (bitmap, 0xff, IO_BITMAP_BYTES);
        t->io_bitmap_ptr = bitmap;
        set_thread_flag (TIF_IO_BITMAP);
    }
    tss = &per_cpu (init_tss, get_cpu ());
    set_bitmap (t -> io_bitmap_ptr, from, num, ! turn_on);
    max_long = 0;
    for (i = 0; i < IO_BITMAP_LONGS; i++)
        if (t->io_bitmap_ptr[i] != ~0UL)
            max_long = i;
    bytes = (max_long + 1) * sizeof (unsigned long);
    bytes_updated = max (bytes, t->io_bitmap_max);
    t->io_bitmap_max = bytes;
    memcpy (tss -> io_bitmap, t -> io_bitmap_ptr, bytes_updated);
    put_cpu ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="52" endline="61">
{
    unsigned long *bitmap = kmalloc (IO_BITMAP_BYTES, GFP_KERNEL);
    if (!bitmap)
        return -ENOMEM;
    memset (bitmap, 0xff, IO_BITMAP_BYTES);
    t->io_bitmap_ptr = bitmap;
    set_thread_flag (TIF_IO_BITMAP);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="107" endline="120">
{
    unsigned int old = (regs->flags >> 12) & 3;
    if (level > 3)
        return -EINVAL;
    if (level > old) {
        if (!capable (CAP_SYS_RAWIO))
            return -EPERM;
    }
    regs->flags = (regs->flags & ~X86_EFLAGS_IOPL) | (level << 12);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="113" endline="116">
{
    if (!capable (CAP_SYS_RAWIO))
        return -EPERM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ioport.c.ifdefed" startline="140" endline="142">
{
    return do_iopl (level, regs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="39" endline="48">
{
    const struct range *r1 = x1;
    const struct range *r2 = x2;
    int start1, start2;
    start1 = r1->start >> 32;
    start2 = r2->start >> 32;
    return start1 - start2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="55" endline="175">
{
    int i;
    unsigned bus;
    unsigned slot;
    int found;
    u64 val;
    u32 address;
    u64 tom2;
    u64 base = FAM10H_PCI_MMCONF_BASE;
    int hi_mmio_num;
    struct range range [8];
    if (fam10h_pci_mmconf_base_status)
        return;
    if (!early_pci_allowed ())
        goto fail;
    found = 0;
    for (i = 0; i < ARRAY_SIZE (pci_probes); i++) {
        u32 id;
        u16 device;
        u16 vendor;
        bus = pci_probes[i].bus;
        slot = pci_probes[i].slot;
        id = read_pci_config (bus, slot, 0, PCI_VENDOR_ID);
        vendor = id & 0xffff;
        device = (id >> 16) & 0xffff;
        if (pci_probes[i].vendor == vendor && pci_probes[i].device == device) {
            found = 1;
            break;
        }
    }
    if (!found)
        goto fail;
    address = MSR_K8_SYSCFG;
    rdmsrl (address, val);
    if (!(val & (1 << 21))) {
        tom2 = 0;
    }
    else {
        address = MSR_K8_TOP_MEM2;
        rdmsrl (address, val);
        tom2 = val & (0xffffULL << 32);
    }
    if (base <= tom2)
        base = tom2 + (1ULL << 32);
    hi_mmio_num = 0;
    for (i = 0; i < 8; i++) {
        u32 reg;
        u64 start;
        u64 end;
        reg = read_pci_config (bus, slot, 1, 0x80 + (i << 3));
        if (!(reg & 3))
            continue;
        start = (((u64) reg) << 8) & (0xffULL << 32);
        reg = read_pci_config (bus, slot, 1, 0x84 + (i << 3));
        end = (((u64) reg) << 8) & (0xffULL << 32);
        if (!end)
            continue;
        range[hi_mmio_num].start = start;
        range[hi_mmio_num].end = end;
        hi_mmio_num++;
    }
    if (!hi_mmio_num)
        goto out;
    sort (range, hi_mmio_num, sizeof (struct range), cmp_range, NULL);
    if (range[hi_mmio_num - 1].end < base)
        goto out;
    if (range[0].start > base)
        goto out;
    base = range[0].start - (1ULL << 32);
    if ((base > tom2) && BASE_VALID (base))
        goto out;
    base = range[hi_mmio_num - 1].end + (1ULL << 32);
    if ((base > tom2) && BASE_VALID (base))
        goto out;
    if (hi_mmio_num > 1)
        for (i = 0; i < hi_mmio_num - 1; i++) {
            if (range[i + 1].start > (range[i].end + (1ULL << 32))) {
                base = range[i].end + (1ULL << 32);
                if ((base > tom2) && BASE_VALID (base))
                    goto out;
            }
        }
fail :
    fam10h_pci_mmconf_base_status = -1;
    return;
out :
    fam10h_pci_mmconf_base = base;
    fam10h_pci_mmconf_base_status = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="78" endline="94">
{
    u32 id;
    u16 device;
    u16 vendor;
    bus = pci_probes[i].bus;
    slot = pci_probes[i].slot;
    id = read_pci_config (bus, slot, 0, PCI_VENDOR_ID);
    vendor = id & 0xffff;
    device = (id >> 16) & 0xffff;
    if (pci_probes[i].vendor == vendor && pci_probes[i].device == device) {
        found = 1;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="90" endline="93">
{
    found = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="104" endline="106">
{
    tom2 = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="106" endline="111">
{
    address = MSR_K8_TOP_MEM2;
    rdmsrl (address, val);
    tom2 = val & (0xffffULL << 32);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="121" endline="139">
{
    u32 reg;
    u64 start;
    u64 end;
    reg = read_pci_config (bus, slot, 1, 0x80 + (i << 3));
    if (!(reg & 3))
        continue;
    start = (((u64) reg) << 8) & (0xffULL << 32);
    reg = read_pci_config (bus, slot, 1, 0x84 + (i << 3));
    end = (((u64) reg) << 8) & (0xffULL << 32);
    if (!end)
        continue;
    range[hi_mmio_num].start = start;
    range[hi_mmio_num].end = end;
    hi_mmio_num++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="161" endline="167">
{
    if (range[i + 1].start > (range[i].end + (1ULL << 32))) {
        base = range[i].end + (1ULL << 32);
        if ((base > tom2) && BASE_VALID (base))
            goto out;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="162" endline="166">
{
    base = range[i].end + (1ULL << 32);
    if ((base > tom2) && BASE_VALID (base))
        goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="178" endline="221">
{
    u64 val;
    u32 address;
    if (!(pci_probe & PCI_CHECK_ENABLE_AMD_MMCONF))
        return;
    address = MSR_FAM10H_MMIO_CONF_BASE;
    rdmsrl (address, val);
    if (val & FAM10H_MMIO_CONF_ENABLE) {
        unsigned busnbits;
        busnbits = (val >> FAM10H_MMIO_CONF_BUSRANGE_SHIFT) & FAM10H_MMIO_CONF_BUSRANGE_MASK;
        if (!acpi_pci_disabled || busnbits >= 8) {
            u64 base;
            base = val & (0xffffULL << 32);
            if (fam10h_pci_mmconf_base_status <= 0) {
                fam10h_pci_mmconf_base = base;
                fam10h_pci_mmconf_base_status = 1;
                return;
            }
            else if (fam10h_pci_mmconf_base == base)
                return;
        }
    }
    get_fam10h_pci_mmconf_base ();
    if (fam10h_pci_mmconf_base_status <= 0)
        return;
    printk (KERN_INFO "Enable MMCONFIG on AMD Family 10h\n");
    val &= ~((FAM10H_MMIO_CONF_BASE_MASK << FAM10H_MMIO_CONF_BASE_SHIFT) | (FAM10H_MMIO_CONF_BUSRANGE_MASK << FAM10H_MMIO_CONF_BUSRANGE_SHIFT));
    val |= fam10h_pci_mmconf_base | (8 << FAM10H_MMIO_CONF_BUSRANGE_SHIFT) | FAM10H_MMIO_CONF_ENABLE;
    wrmsrl (address, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="189" endline="205">
{
    unsigned busnbits;
    busnbits = (val >> FAM10H_MMIO_CONF_BUSRANGE_SHIFT) & FAM10H_MMIO_CONF_BUSRANGE_MASK;
    if (!acpi_pci_disabled || busnbits >= 8) {
        u64 base;
        base = val & (0xffffULL << 32);
        if (fam10h_pci_mmconf_base_status <= 0) {
            fam10h_pci_mmconf_base = base;
            fam10h_pci_mmconf_base_status = 1;
            return;
        }
        else if (fam10h_pci_mmconf_base == base)
            return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="195" endline="204">
{
    u64 base;
    base = val & (0xffffULL << 32);
    if (fam10h_pci_mmconf_base_status <= 0) {
        fam10h_pci_mmconf_base = base;
        fam10h_pci_mmconf_base_status = 1;
        return;
    }
    else if (fam10h_pci_mmconf_base == base)
        return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="198" endline="202">
{
    fam10h_pci_mmconf_base = base;
    fam10h_pci_mmconf_base_status = 1;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="224" endline="227">
{
    pci_probe |= PCI_CHECK_ENABLE_AMD_MMCONF;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mmconf-fam10h_64.c.ifdefed" startline="241" endline="243">
{
    dmi_check_system (mmconf_dmi_table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="38" endline="41">
{
    debug_alternative = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="47" endline="50">
{
    noreplace_smp = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="161" endline="170">
{
    if (boot_cpu_has (X86_FEATURE_K8))
        return k8_nops;
    else if (boot_cpu_has (X86_FEATURE_K7))
        return k7_nops;
    else if (boot_cpu_has (X86_FEATURE_NOPL))
        return p6_nops;
    else
        return intel_nops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="176" endline="187">
{
    const unsigned char * const *noptable = find_nop_table ();
    while (len > 0) {
        unsigned int noplen = len;
        if (noplen > ASM_NOP_MAX)
            noplen = ASM_NOP_MAX;
        memcpy (insns, noptable [noplen], noplen);
        insns += noplen;
        len -= noplen;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="179" endline="186">
{
    unsigned int noplen = len;
    if (noplen > ASM_NOP_MAX)
        noplen = ASM_NOP_MAX;
    memcpy (insns, noptable [noplen], noplen);
    insns += noplen;
    len -= noplen;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="200" endline="224">
{
    struct alt_instr *a;
    char insnbuf [MAX_PATCH_LEN];
    DPRINTK ("%s: alt table %p -> %p\n", __func__, start, end);
    for (a = start; a < end; a++) {
        u8 *instr = a->instr;
        BUG_ON (a -> replacementlen > a -> instrlen);
        BUG_ON (a -> instrlen > sizeof (insnbuf));
        if (!boot_cpu_has (a->cpuid))
            continue;
        memcpy (insnbuf, a -> replacement, a -> replacementlen);
        add_nops (insnbuf + a -> replacementlen, a -> instrlen - a -> replacementlen);
        text_poke_early (instr, insnbuf, a -> instrlen);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="205" endline="223">
{
    u8 *instr = a->instr;
    BUG_ON (a -> replacementlen > a -> instrlen);
    BUG_ON (a -> instrlen > sizeof (insnbuf));
    if (!boot_cpu_has (a->cpuid))
        continue;
    memcpy (insnbuf, a -> replacement, a -> replacementlen);
    add_nops (insnbuf + a -> replacementlen, a -> instrlen - a -> replacementlen);
    text_poke_early (instr, insnbuf, a -> instrlen);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="419" endline="474">
{
    stop_nmi ();
    apply_alternatives (__alt_instructions, __alt_instructions_end);
    apply_paravirt (__parainstructions, __parainstructions_end);
    if (smp_alt_once)
        free_init_pages ("SMP alternatives", (unsigned long) __smp_locks, (unsigned long) __smp_locks_end);
    restart_nmi ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="489" endline="498">
{
    unsigned long flags;
    local_irq_save (flags);
    memcpy (addr, opcode, len);
    local_irq_restore (flags);
    sync_core ();
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="514" endline="546">
{
    unsigned long flags;
    char *vaddr;
    struct page *pages [2];
    int i;
    if (!core_kernel_text ((unsigned long) addr)) {
        pages[0] = vmalloc_to_page (addr);
        pages[1] = vmalloc_to_page (addr +PAGE_SIZE);
    }
    else {
        pages[0] = virt_to_page (addr);
        WARN_ON (! PageReserved (pages [0]));
        pages[1] = virt_to_page (addr +PAGE_SIZE);
    }
    BUG_ON (! pages [0]);
    local_irq_save (flags);
    set_fixmap (FIX_TEXT_POKE0, page_to_phys (pages [0]));
    if (pages[1])
        set_fixmap (FIX_TEXT_POKE1, page_to_phys (pages[1]));
    vaddr = (char *) fix_to_virt (FIX_TEXT_POKE0);
    memcpy (& vaddr [(unsigned long) addr & ~ PAGE_MASK], opcode, len);
    clear_fixmap (FIX_TEXT_POKE0);
    if (pages[1])
        clear_fixmap (FIX_TEXT_POKE1);
    local_flush_tlb ();
    sync_core ();
    for (i = 0; i < len; i++)
        BUG_ON (((char *) addr)[i] != ((char *) opcode)[i]);
    local_irq_restore (flags);
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="520" endline="523">
{
    pages[0] = vmalloc_to_page (addr);
    pages[1] = vmalloc_to_page (addr +PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/alternative.c.ifdefed" startline="523" endline="527">
{
    pages[0] = virt_to_page (addr);
    WARN_ON (! PageReserved (pages [0]));
    pages[1] = virt_to_page (addr +PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="13" endline="14">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="18" endline="19">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="22" endline="24">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="27" endline="37">
{
    struct stack_trace *trace = data;
    if (!reliable)
        return;
    if (trace->skip > 0) {
        trace->skip--;
        return;
    }
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="31" endline="34">
{
    trace->skip--;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="41" endline="53">
{
    struct stack_trace *trace = (struct stack_trace *) data;
    if (!reliable)
        return;
    if (in_sched_functions (addr))
        return;
    if (trace->skip > 0) {
        trace->skip--;
        return;
    }
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="47" endline="50">
{
    trace->skip--;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="73" endline="77">
{
    dump_trace (current, NULL, NULL, 0, & save_stack_ops, trace);
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = ULONG_MAX;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="81" endline="85">
{
    dump_trace (current, NULL, NULL, bp, & save_stack_ops, trace);
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = ULONG_MAX;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="88" endline="92">
{
    dump_trace (tsk, NULL, NULL, 0, & save_stack_ops_nosched, trace);
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = ULONG_MAX;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="103" endline="116">
{
    int ret;
    if (!access_ok (VERIFY_READ, fp, sizeof (*frame)))
        return 0;
    ret = 1;
    pagefault_disable ();
    if (__copy_from_user_inatomic (frame, fp, sizeof (*frame)))
        ret = 0;
    pagefault_enable ();
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="119" endline="143">
{
    const struct pt_regs *regs = task_pt_regs (current);
    const void __user *fp = (const void __user *) regs->bp;
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = regs->ip;
    while (trace->nr_entries < trace->max_entries) {
        struct stack_frame frame;
        frame.next_fp = NULL;
        frame.ret_addr = 0;
        if (!copy_stack_frame (fp, &frame))
            break;
        if ((unsigned long) fp < regs->sp)
            break;
        if (frame.ret_addr) {
            trace->entries[trace->nr_entries++] = frame.ret_addr;
        }
        if (fp == frame.next_fp)
            break;
        fp = frame.next_fp;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="126" endline="142">
{
    struct stack_frame frame;
    frame.next_fp = NULL;
    frame.ret_addr = 0;
    if (!copy_stack_frame (fp, &frame))
        break;
    if ((unsigned long) fp < regs->sp)
        break;
    if (frame.ret_addr) {
        trace->entries[trace->nr_entries++] = frame.ret_addr;
    }
    if (fp == frame.next_fp)
        break;
    fp = frame.next_fp;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="135" endline="138">
{
    trace->entries[trace->nr_entries++] = frame.ret_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="146" endline="155">
{
    if (current->mm) {
        __save_stack_trace_user (trace);
    }
    if (trace->nr_entries < trace->max_entries)
        trace->entries[trace->nr_entries++] = ULONG_MAX;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/stacktrace.c.ifdefed" startline="150" endline="152">
{
    __save_stack_trace_user (trace);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="47" endline="57">
{
    unsigned long num_pages;
    start &= PMD_MASK;
    end = (end + PMD_SIZE - 1) & PMD_MASK;
    num_pages = (end - start) >> PAGE_SHIFT;
    if (executable)
        set_memory_x ((unsigned long) __va (start), num_pages);
    else
        set_memory_nx ((unsigned long) __va (start), num_pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="60" endline="76">
{
    efi_memory_desc_t *md;
    void *p;
    if (!(__supported_pte_mask & _PAGE_NX))
        return;
    for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
        md = p;
        if (md->type == EFI_RUNTIME_SERVICES_CODE) {
            unsigned long end;
            end = md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT);
            early_mapping_set_exec (md -> phys_addr, end, executable);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="68" endline="75">
{
    md = p;
    if (md->type == EFI_RUNTIME_SERVICES_CODE) {
        unsigned long end;
        end = md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT);
        early_mapping_set_exec (md -> phys_addr, end, executable);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="70" endline="74">
{
    unsigned long end;
    end = md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT);
    early_mapping_set_exec (md -> phys_addr, end, executable);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="79" endline="88">
{
    unsigned long vaddress;
    early_runtime_code_mapping_set_exec (1);
    local_irq_save (efi_flags);
    vaddress = (unsigned long) __va (0x0UL);
    save_pgd = *pgd_offset_k (0x0UL);
    set_pgd (pgd_offset_k (0x0UL), * pgd_offset_k (vaddress));
    __flush_tlb_all ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="91" endline="99">
{
    set_pgd (pgd_offset_k (0x0UL), save_pgd);
    __flush_tlb_all ();
    local_irq_restore (efi_flags);
    early_runtime_code_mapping_set_exec (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/efi_64.c.ifdefed" startline="103" endline="114">
{
    unsigned long last_map_pfn;
    if (type == EFI_MEMORY_MAPPED_IO)
        return ioremap (phys_addr, size);
    last_map_pfn = init_memory_mapping (phys_addr, phys_addr +size);
    if ((last_map_pfn << PAGE_SHIFT) < phys_addr + size)
        return NULL;
    return (void __iomem *) __va (phys_addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="25" endline="25">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="41" endline="74">
{
    spin_lock (& i8253_lock);
    switch (mode) {
    case CLOCK_EVT_MODE_PERIODIC :
        outb_pit (0x34, PIT_MODE);
        outb_pit (LATCH & 0xff, PIT_CH0);
        outb_pit (LATCH >> 8, PIT_CH0);
        break;
    case CLOCK_EVT_MODE_SHUTDOWN :
    case CLOCK_EVT_MODE_UNUSED :
        if (evt->mode == CLOCK_EVT_MODE_PERIODIC || evt->mode == CLOCK_EVT_MODE_ONESHOT) {
            outb_pit (0x30, PIT_MODE);
            outb_pit (0, PIT_CH0);
            outb_pit (0, PIT_CH0);
        }
        pit_disable_clocksource ();
        break;
    case CLOCK_EVT_MODE_ONESHOT :
        pit_disable_clocksource ();
        outb_pit (0x38, PIT_MODE);
        break;
    case CLOCK_EVT_MODE_RESUME :
        break;
    }
    spin_unlock (& i8253_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="44" endline="72">
{
case CLOCK_EVT_MODE_PERIODIC :
    outb_pit (0x34, PIT_MODE);
    outb_pit (LATCH & 0xff, PIT_CH0);
    outb_pit (LATCH >> 8, PIT_CH0);
    break;
case CLOCK_EVT_MODE_SHUTDOWN :
case CLOCK_EVT_MODE_UNUSED :
    if (evt->mode == CLOCK_EVT_MODE_PERIODIC || evt->mode == CLOCK_EVT_MODE_ONESHOT) {
        outb_pit (0x30, PIT_MODE);
        outb_pit (0, PIT_CH0);
        outb_pit (0, PIT_CH0);
    }
    pit_disable_clocksource ();
    break;
case CLOCK_EVT_MODE_ONESHOT :
    pit_disable_clocksource ();
    outb_pit (0x38, PIT_MODE);
    break;
case CLOCK_EVT_MODE_RESUME :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="55" endline="59">
{
    outb_pit (0x30, PIT_MODE);
    outb_pit (0, PIT_CH0);
    outb_pit (0, PIT_CH0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="82" endline="89">
{
    spin_lock (& i8253_lock);
    outb_pit (delta & 0xff, PIT_CH0);
    outb_pit (delta >> 8, PIT_CH0);
    spin_unlock (& i8253_lock);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="113" endline="125">
{
    pit_ce.cpumask = cpumask_of (smp_processor_id ());
    pit_ce.mult = div_sc (CLOCK_TICK_RATE, NSEC_PER_SEC, pit_ce.shift);
    pit_ce.max_delta_ns = clockevent_delta2ns (0x7FFF, &pit_ce);
    pit_ce.min_delta_ns = clockevent_delta2ns (0xF, &pit_ce);
    clockevents_register_device (& pit_ce);
    global_clock_event = &pit_ce;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="134" endline="192">
{
    static int old_count;
    static u32 old_jifs;
    unsigned long flags;
    int count;
    u32 jifs;
    spin_lock_irqsave (& i8253_lock, flags);
    jifs = jiffies;
    outb_pit (0x00, PIT_MODE);
    count = inb_pit (PIT_CH0);
    count |= inb_pit (PIT_CH0) << 8;
    if (count > LATCH) {
        outb_pit (0x34, PIT_MODE);
        outb_pit (LATCH & 0xff, PIT_CH0);
        outb_pit (LATCH >> 8, PIT_CH0);
        count = LATCH - 1;
    }
    if (count > old_count && jifs == old_jifs)
        count = old_count;
    old_count = count;
    old_jifs = jifs;
    spin_unlock_irqrestore (& i8253_lock, flags);
    count = (LATCH - 1) - count;
    return (cycle_t) (jifs * LATCH) +count;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="161" endline="166">
{
    outb_pit (0x34, PIT_MODE);
    outb_pit (LATCH & 0xff, PIT_CH0);
    outb_pit (LATCH >> 8, PIT_CH0);
    count = LATCH - 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="204" endline="212">
{
    if (pit_cs.mult) {
        clocksource_unregister (& pit_cs);
        pit_cs.mult = 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="208" endline="211">
{
    clocksource_unregister (& pit_cs);
    pit_cs.mult = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8253.c.ifdefed" startline="215" endline="230">
{
    if (num_possible_cpus () > 1 || is_hpet_enabled () || pit_ce.mode != CLOCK_EVT_MODE_PERIODIC)
        return 0;
    pit_cs.mult = clocksource_hz2mult (CLOCK_TICK_RATE, pit_cs.shift);
    return clocksource_register (&pit_cs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="40" endline="95">
{
    int real_seconds, real_minutes, cmos_minutes;
    unsigned char save_control, save_freq_select;
    int retval = 0;
    save_control = CMOS_READ (RTC_CONTROL);
    CMOS_WRITE ((save_control | RTC_SET), RTC_CONTROL);
    save_freq_select = CMOS_READ (RTC_FREQ_SELECT);
    CMOS_WRITE ((save_freq_select | RTC_DIV_RESET2), RTC_FREQ_SELECT);
    cmos_minutes = CMOS_READ (RTC_MINUTES);
    if (!(save_control & RTC_DM_BINARY) || RTC_ALWAYS_BCD)
        cmos_minutes = bcd2bin (cmos_minutes);
    real_seconds = nowtime % 60;
    real_minutes = nowtime / 60;
    if (((abs (real_minutes -cmos_minutes) + 15) / 30) & 1)
        real_minutes += 30;
    real_minutes %= 60;
    if (abs (real_minutes -cmos_minutes) < 30) {
        if (!(save_control & RTC_DM_BINARY) || RTC_ALWAYS_BCD) {
            real_seconds = bin2bcd (real_seconds);
            real_minutes = bin2bcd (real_minutes);
        }
        CMOS_WRITE (real_seconds, RTC_SECONDS);
        CMOS_WRITE (real_minutes, RTC_MINUTES);
    }
    else {
        printk (KERN_WARNING "set_rtc_mmss: can't update from %d to %d\n", cmos_minutes, real_minutes);
        retval = -1;
    }
    CMOS_WRITE (save_control, RTC_CONTROL);
    CMOS_WRITE (save_freq_select, RTC_FREQ_SELECT);
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="70" endline="77">
{
    if (!(save_control & RTC_DM_BINARY) || RTC_ALWAYS_BCD) {
        real_seconds = bin2bcd (real_seconds);
        real_minutes = bin2bcd (real_minutes);
    }
    CMOS_WRITE (real_seconds, RTC_SECONDS);
    CMOS_WRITE (real_minutes, RTC_MINUTES);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="71" endline="74">
{
    real_seconds = bin2bcd (real_seconds);
    real_minutes = bin2bcd (real_minutes);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="77" endline="82">
{
    printk (KERN_WARNING "set_rtc_mmss: can't update from %d to %d\n", cmos_minutes, real_minutes);
    retval = -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="98" endline="143">
{
    unsigned int status, year, mon, day, hour, min, sec, century = 0;
    while ((CMOS_READ (RTC_FREQ_SELECT) & RTC_UIP))
        cpu_relax ();
    sec = CMOS_READ (RTC_SECONDS);
    min = CMOS_READ (RTC_MINUTES);
    hour = CMOS_READ (RTC_HOURS);
    day = CMOS_READ (RTC_DAY_OF_MONTH);
    mon = CMOS_READ (RTC_MONTH);
    year = CMOS_READ (RTC_YEAR);
    status = CMOS_READ (RTC_CONTROL);
    WARN_ON_ONCE (RTC_ALWAYS_BCD && (status & RTC_DM_BINARY));
    if (RTC_ALWAYS_BCD || !(status & RTC_DM_BINARY)) {
        sec = bcd2bin (sec);
        min = bcd2bin (min);
        hour = bcd2bin (hour);
        day = bcd2bin (day);
        mon = bcd2bin (mon);
        year = bcd2bin (year);
    }
    if (century) {
        century = bcd2bin (century);
        year += century * 100;
        printk (KERN_INFO "Extended CMOS year: %d\n", century * 100);
    }
    else
        year += CMOS_YEARS_OFFS;
    return mktime (year, mon, day, hour, min, sec);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="126" endline="133">
{
    sec = bcd2bin (sec);
    min = bcd2bin (min);
    hour = bcd2bin (hour);
    day = bcd2bin (day);
    mon = bcd2bin (mon);
    year = bcd2bin (year);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="135" endline="139">
{
    century = bcd2bin (century);
    year += century * 100;
    printk (KERN_INFO "Extended CMOS year: %d\n", century * 100);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="147" endline="156">
{
    unsigned char val;
    lock_cmos_prefix (addr);
    outb (addr, RTC_PORT (0));
    val = inb (RTC_PORT (1));
    lock_cmos_suffix (addr);
    return val;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="160" endline="165">
{
    lock_cmos_prefix (addr);
    outb (addr, RTC_PORT (0));
    outb (val, RTC_PORT (1));
    lock_cmos_suffix (addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="169" endline="178">
{
    unsigned long flags;
    int retval;
    spin_lock_irqsave (& rtc_lock, flags);
    retval = set_wallclock (nowtime);
    spin_unlock_irqrestore (& rtc_lock, flags);
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="182" endline="190">
{
    unsigned long retval, flags;
    spin_lock_irqsave (& rtc_lock, flags);
    retval = get_wallclock ();
    spin_unlock_irqrestore (& rtc_lock, flags);
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="193" endline="195">
{
    return set_rtc_mmss (now.tv_sec);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="198" endline="200">
{
    return __native_read_tsc ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/rtc.c.ifdefed" startline="225" endline="248">
{
    platform_device_register (& rtc_device);
    dev_info (& rtc_device.dev, "registered platform RTC device (no PNP device found)\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="24" endline="48">
{
    long error;
    struct file *file;
    error = -EINVAL;
    if (off & ~PAGE_MASK)
        goto out;
    error = -EBADF;
    file = NULL;
    flags &= ~(MAP_EXECUTABLE | MAP_DENYWRITE);
    if (!(flags & MAP_ANONYMOUS)) {
        file = fget (fd);
        if (!file)
            goto out;
    }
    down_write (& current -> mm -> mmap_sem);
    error = do_mmap_pgoff (file, addr, len, prot, flags, off >> PAGE_SHIFT);
    up_write (& current -> mm -> mmap_sem);
    if (file)
        fput (file);
out :
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="35" endline="39">
{
    file = fget (fd);
    if (!file)
        goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="52" endline="73">
{
    if (!test_thread_flag (TIF_IA32) && (flags & MAP_32BIT)) {
        unsigned long new_begin;
        *begin = 0x40000000;
        *end = 0x80000000;
        if (current->flags & PF_RANDOMIZE) {
            new_begin = randomize_range (*begin, *begin + 0x02000000, 0);
            if (new_begin)
                *begin = new_begin;
        }
    }
    else {
        *begin = TASK_UNMAPPED_BASE;
        *end = TASK_SIZE;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="53" endline="69">
{
    unsigned long new_begin;
    *begin = 0x40000000;
    *end = 0x80000000;
    if (current->flags & PF_RANDOMIZE) {
        new_begin = randomize_range (*begin, *begin + 0x02000000, 0);
        if (new_begin)
            *begin = new_begin;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="64" endline="68">
{
    new_begin = randomize_range (*begin, *begin + 0x02000000, 0);
    if (new_begin)
        *begin = new_begin;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="69" endline="72">
{
    *begin = TASK_UNMAPPED_BASE;
    *end = TASK_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="78" endline="136">
{
    struct mm_struct *mm = current->mm;
    struct vm_area_struct *vma;
    unsigned long start_addr;
    unsigned long begin, end;
    if (flags & MAP_FIXED)
        return addr;
    find_start_end (flags, & begin, & end);
    if (len > end)
        return -ENOMEM;
    if (addr) {
        addr = PAGE_ALIGN (addr);
        vma = find_vma (mm, addr);
        if (end - len >= addr && (!vma || addr + len <= vma->vm_start))
            return addr;
    }
    if (((flags & MAP_32BIT) || test_thread_flag (TIF_IA32)) && len <= mm->cached_hole_size) {
        mm->cached_hole_size = 0;
        mm->free_area_cache = begin;
    }
    addr = mm->free_area_cache;
    if (addr < begin)
        addr = begin;
    start_addr = addr;
full_search :
    for (vma = find_vma (mm, addr);; vma = vma->vm_next) {
        if (end - len < addr) {
            if (start_addr != begin) {
                start_addr = addr = begin;
                mm->cached_hole_size = 0;
                goto full_search;
            }
            return -ENOMEM;
        }
        if (!vma || addr + len <= vma->vm_start) {
            mm->free_area_cache = addr + len;
            return addr;
        }
        if (addr + mm->cached_hole_size < vma->vm_start)
            mm->cached_hole_size = vma->vm_start - addr;
        addr = vma->vm_end;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="92" endline="98">
{
    addr = PAGE_ALIGN (addr);
    vma = find_vma (mm, addr);
    if (end - len >= addr && (!vma || addr + len <= vma->vm_start))
        return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="100" endline="103">
{
    mm->cached_hole_size = 0;
    mm->free_area_cache = begin;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="110" endline="135">
{
    if (end - len < addr) {
        if (start_addr != begin) {
            start_addr = addr = begin;
            mm->cached_hole_size = 0;
            goto full_search;
        }
        return -ENOMEM;
    }
    if (!vma || addr + len <= vma->vm_start) {
        mm->free_area_cache = addr + len;
        return addr;
    }
    if (addr + mm->cached_hole_size < vma->vm_start)
        mm->cached_hole_size = vma->vm_start - addr;
    addr = vma->vm_end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="112" endline="123">
{
    if (start_addr != begin) {
        start_addr = addr = begin;
        mm->cached_hole_size = 0;
        goto full_search;
    }
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="117" endline="121">
{
    start_addr = addr = begin;
    mm->cached_hole_size = 0;
    goto full_search;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="124" endline="130">
{
    mm->free_area_cache = addr + len;
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="143" endline="226">
{
    struct vm_area_struct *vma;
    struct mm_struct *mm = current->mm;
    unsigned long addr = addr0;
    if (len > TASK_SIZE)
        return -ENOMEM;
    if (flags & MAP_FIXED)
        return addr;
    if (!test_thread_flag (TIF_IA32) && (flags & MAP_32BIT))
        goto bottomup;
    if (addr) {
        addr = PAGE_ALIGN (addr);
        vma = find_vma (mm, addr);
        if (TASK_SIZE - len >= addr && (!vma || addr + len <= vma->vm_start))
            return addr;
    }
    if (len <= mm->cached_hole_size) {
        mm->cached_hole_size = 0;
        mm->free_area_cache = mm->mmap_base;
    }
    addr = mm->free_area_cache;
    if (addr > len) {
        vma = find_vma (mm, addr -len);
        if (!vma || addr <= vma->vm_start)
            return mm->free_area_cache = addr - len;
    }
    if (mm->mmap_base < len)
        goto bottomup;
    addr = mm->mmap_base - len;
    do {
        vma = find_vma (mm, addr);
        if (!vma || addr + len <= vma->vm_start)
            return mm->free_area_cache = addr;
        if (addr + mm->cached_hole_size < vma->vm_start)
            mm->cached_hole_size = vma->vm_start - addr;
        addr = vma->vm_start - len;
    }
    while (len < vma->vm_start);
bottomup :
    mm->cached_hole_size = ~0UL;
    mm->free_area_cache = TASK_UNMAPPED_BASE;
    addr = arch_get_unmapped_area (filp, addr0, len, pgoff, flags);
    mm->free_area_cache = mm->mmap_base;
    mm->cached_hole_size = ~0UL;
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="160" endline="166">
{
    addr = PAGE_ALIGN (addr);
    vma = find_vma (mm, addr);
    if (TASK_SIZE - len >= addr && (!vma || addr + len <= vma->vm_start))
        return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="169" endline="172">
{
    mm->cached_hole_size = 0;
    mm->free_area_cache = mm->mmap_base;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="178" endline="183">
{
    vma = find_vma (mm, addr -len);
    if (!vma || addr <= vma->vm_start)
        return mm->free_area_cache = addr - len;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="190" endline="207">
{
    vma = find_vma (mm, addr);
    if (!vma || addr + len <= vma->vm_start)
        return mm->free_area_cache = addr;
    if (addr + mm->cached_hole_size < vma->vm_start)
        mm->cached_hole_size = vma->vm_start - addr;
    addr = vma->vm_start - len;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/sys_x86_64.c.ifdefed" startline="230" endline="238">
{
    int err;
    down_read (& uts_sem);
    err = copy_to_user (name, utsname (), sizeof (*name));
    up_read (& uts_sem);
    if (personality (current->personality) == PER_LINUX32)
        err |= copy_to_user (&name->machine, "i686", 5);
    return err ? -EFAULT : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pmtimer_64.c.ifdefed" startline="30" endline="40">
{
    cycles *= 286;
    return (cycles >> 10);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pmtimer_64.c.ifdefed" startline="43" endline="50">
{
    u32 a, b;
    for (a = b = inl (pmtmr_ioport) & ACPI_PM_MASK; a == b; b = inl (pmtmr_ioport) & ACPI_PM_MASK)
        cpu_relax ();
    return b;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pmtimer_64.c.ifdefed" startline="54" endline="61">
{
    u32 a, b;
    a = pmtimer_wait_tick ();
    do {
        b = inl (pmtmr_ioport);
        cpu_relax ();
    }
    while (cyc2us (b -a) < us);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pmtimer_64.c.ifdefed" startline="57" endline="60">
{
    b = inl (pmtmr_ioport);
    cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pmtimer_64.c.ifdefed" startline="64" endline="67">
{
    pmtmr_ioport = 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="37" endline="111">
{
    struct wakeup_header *header;
    if (!acpi_realmode) {
        printk (KERN_ERR "Could not allocate memory during boot, " "S3 disabled\n");
        return -ENOMEM;
    }
    memcpy ((void *) acpi_realmode, & wakeup_code_start, WAKEUP_SIZE);
    header = (struct wakeup_header *) (acpi_realmode + HEADER_OFFSET);
    if (header->signature != 0x51ee1111) {
        printk (KERN_ERR "wakeup header does not match\n");
        return -EINVAL;
    }
    header->video_mode = saved_video_mode;
    header->wakeup_jmp_seg = acpi_wakeup_address >> 4;
    header->wakeup_gdt[0] = (u64) (sizeof (header->wakeup_gdt) - 1) + ((u64) (acpi_wakeup_address + ((char *) &header->wakeup_gdt - (char *) acpi_realmode)) << 16);
    header->wakeup_gdt[1] = GDT_ENTRY (0x809b, acpi_wakeup_address, 0xfffff);
    header->wakeup_gdt[2] = GDT_ENTRY (0x8093, acpi_wakeup_address, 0xfffff);
    store_gdt ((struct desc_ptr *) & header -> pmode_gdt);
    header->pmode_efer_low = nx_enabled;
    if (header->pmode_efer_low & 1) {
        rdmsr (MSR_EFER, header -> pmode_efer_low, header -> pmode_efer_high);
    }
    header->pmode_cr0 = read_cr0 ();
    header->pmode_cr4 = read_cr4_safe ();
    header->realmode_flags = acpi_realmode_flags;
    header->real_magic = 0x12345678;
    header->pmode_entry = (u32) &wakeup_pmode_return;
    header->pmode_cr3 = (u32) (swsusp_pg_dir - __PAGE_OFFSET);
    saved_magic = 0x12345678;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="40" endline="44">
{
    printk (KERN_ERR "Could not allocate memory during boot, " "S3 disabled\n");
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="48" endline="51">
{
    printk (KERN_ERR "wakeup header does not match\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="82" endline="86">
{
    rdmsr (MSR_EFER, header -> pmode_efer_low, header -> pmode_efer_high);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="117" endline="118">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="130" endline="145">
{
    if ((&wakeup_code_end - &wakeup_code_start) > WAKEUP_SIZE) {
        printk (KERN_ERR "ACPI: Wakeup code way too big, S3 disabled.\n");
        return;
    }
    acpi_realmode = (unsigned long) alloc_bootmem_low (WAKEUP_SIZE);
    if (!acpi_realmode) {
        printk (KERN_ERR "ACPI: Cannot allocate lowmem, S3 disabled.\n");
        return;
    }
    acpi_wakeup_address = virt_to_phys ((void *) acpi_realmode);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="131" endline="135">
{
    printk (KERN_ERR "ACPI: Wakeup code way too big, S3 disabled.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="139" endline="142">
{
    printk (KERN_ERR "ACPI: Cannot allocate lowmem, S3 disabled.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="149" endline="170">
{
    while ((str != NULL) && (*str != '\0')) {
        if (strncmp (str, "s3_bios", 7) == 0)
            acpi_realmode_flags |= 1;
        if (strncmp (str, "s3_mode", 7) == 0)
            acpi_realmode_flags |= 2;
        if (strncmp (str, "s3_beep", 7) == 0)
            acpi_realmode_flags |= 4;
        if (strncmp (str, "old_ordering", 12) == 0)
            acpi_old_suspend_ordering ();
        str = strchr (str, ',');
        if (str != NULL)
            str += strspn (str, ", \t");
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/sleep.c.ifdefed" startline="150" endline="168">
{
    if (strncmp (str, "s3_bios", 7) == 0)
        acpi_realmode_flags |= 1;
    if (strncmp (str, "s3_mode", 7) == 0)
        acpi_realmode_flags |= 2;
    if (strncmp (str, "s3_beep", 7) == 0)
        acpi_realmode_flags |= 4;
    if (strncmp (str, "old_ordering", 12) == 0)
        acpi_old_suspend_ordering ();
    str = strchr (str, ',');
    if (str != NULL)
        str += strspn (str, ", \t");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="29" endline="53">
{
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    flags->bm_check = 0;
    if (num_online_cpus () == 1)
        flags->bm_check = 1;
    else if (c->x86_vendor == X86_VENDOR_INTEL) {
        flags->bm_check = 1;
    }
    if (c->x86_vendor == X86_VENDOR_INTEL && (c->x86 > 0x6 || (c->x86 == 6 && c->x86_model >= 14)))
        flags->bm_control = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="35" endline="42">
{
    flags->bm_check = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="81" endline="121">
{
    struct acpi_processor_cx *cx = _cx;
    long retval;
    unsigned int eax, ebx, ecx, edx;
    unsigned int edx_part;
    unsigned int cstate_type;
    unsigned int num_cstate_subtype;
    cpuid (CPUID_MWAIT_LEAF, & eax, & ebx, & ecx, & edx);
    cstate_type = ((cx->address >> MWAIT_SUBSTATE_SIZE) & MWAIT_CSTATE_MASK) + 1;
    edx_part = edx >> (cstate_type * MWAIT_SUBSTATE_SIZE);
    num_cstate_subtype = edx_part & MWAIT_SUBSTATE_MASK;
    retval = 0;
    if (num_cstate_subtype < (cx->address & MWAIT_SUBSTATE_MASK)) {
        retval = -1;
        goto out;
    }
    if (!(ecx & CPUID5_ECX_EXTENSIONS_SUPPORTED) || !(ecx & CPUID5_ECX_INTERRUPT_BREAK)) {
        retval = -1;
        goto out;
    }
    if (!mwait_supported[cstate_type]) {
        mwait_supported[cstate_type] = 1;
        printk (KERN_DEBUG "Monitor-Mwait will be used to enter C-%d " "state\n", cx -> type);
    }
    snprintf (cx -> desc, ACPI_CX_DESC_LEN, "ACPI FFH INTEL MWAIT 0x%x", cx -> address);
out :
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="98" endline="101">
{
    retval = -1;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="105" endline="108">
{
    retval = -1;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="110" endline="115">
{
    mwait_supported[cstate_type] = 1;
    printk (KERN_DEBUG "Monitor-Mwait will be used to enter C-%d " "state\n", cx -> type);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="125" endline="149">
{
    struct cstate_entry *percpu_entry;
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    long retval;
    if (!cpu_cstate_entry || c->cpuid_level < CPUID_MWAIT_LEAF)
        return -1;
    if (reg->bit_offset != NATIVE_CSTATE_BEYOND_HALT)
        return -1;
    percpu_entry = per_cpu_ptr (cpu_cstate_entry, cpu);
    percpu_entry->states[cx->index].eax = 0;
    percpu_entry->states[cx->index].ecx = 0;
    retval = work_on_cpu (cpu, acpi_processor_ffh_cstate_probe_cpu, cx);
    if (retval == 0) {
        percpu_entry->states[cx->index].eax = cx->address;
        percpu_entry->states[cx->index].ecx = MWAIT_ECX_INTERRUPT_BREAK;
    }
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="143" endline="147">
{
    percpu_entry->states[cx->index].eax = cx->address;
    percpu_entry->states[cx->index].ecx = MWAIT_ECX_INTERRUPT_BREAK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="153" endline="160">
{
    unsigned int cpu = smp_processor_id ();
    struct cstate_entry *percpu_entry;
    percpu_entry = per_cpu_ptr (cpu_cstate_entry, cpu);
    mwait_idle_with_hints (percpu_entry -> states [cx -> index].eax, percpu_entry -> states [cx -> index].ecx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="164" endline="171">
{
    struct cpuinfo_x86 *c = &boot_cpu_data;
    if (c->x86_vendor != X86_VENDOR_INTEL)
        return -1;
    cpu_cstate_entry = alloc_percpu (struct cstate_entry);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/cstate.c.ifdefed" startline="174" endline="177">
{
    free_percpu (cpu_cstate_entry);
    cpu_cstate_entry = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="5" endline="8">
{
    while (loops--)
        io_delay ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="11" endline="32">
{
    u8 enable;
    if (!hz) {
        enable = 0x00;
    }
    else {
        u16 div = 1193181 / hz;
        outb (0xb6, 0x43);
        io_delay ();
        outb (div, 0x42);
        io_delay ();
        outb (div >> 8, 0x42);
        io_delay ();
        enable = 0x03;
    }
    inb (0x61);
    io_delay ();
    outb (enable, 0x61);
    io_delay ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="14" endline="16">
{
    enable = 0x00;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="16" endline="27">
{
    u16 div = 1193181 / hz;
    outb (0xb6, 0x43);
    io_delay ();
    outb (div, 0x42);
    io_delay ();
    outb (div >> 8, 0x42);
    io_delay ();
    enable = 0x03;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="40" endline="62">
{
    char s;
    while ((s = *pattern++)) {
        switch (s) {
        case '.' :
            beep (DOT_HZ);
            udelay (US_PER_DOT);
            beep (0);
            udelay (US_PER_DOT);
            break;
        case '-' :
            beep (DASH_HZ);
            udelay (US_PER_DOT * 3);
            beep (0);
            udelay (US_PER_DOT);
            break;
        default :
            udelay (US_PER_DOT *3);
            break;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="43" endline="61">
{
    switch (s) {
    case '.' :
        beep (DOT_HZ);
        udelay (US_PER_DOT);
        beep (0);
        udelay (US_PER_DOT);
        break;
    case '-' :
        beep (DASH_HZ);
        udelay (US_PER_DOT * 3);
        beep (0);
        udelay (US_PER_DOT);
        break;
    default :
        udelay (US_PER_DOT *3);
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="44" endline="60">
{
case '.' :
    beep (DOT_HZ);
    udelay (US_PER_DOT);
    beep (0);
    udelay (US_PER_DOT);
    break;
case '-' :
    beep (DASH_HZ);
    udelay (US_PER_DOT * 3);
    beep (0);
    udelay (US_PER_DOT);
    break;
default :
    udelay (US_PER_DOT *3);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="65" endline="81">
{
    if (wakeup_header.real_magic != 0x12345678)
        while (1)
            ;
    if (wakeup_header.realmode_flags & 4)
        send_morse ("...-");
    if (wakeup_header.realmode_flags & 1)
        asm volatile ("lcallw   $0xc000,$3"
        );
    if (wakeup_header.realmode_flags & 2) {
        probe_cards (0);
        set_mode (wakeup_header.video_mode);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/realmode/wakemain.c.ifdefed" startline="76" endline="80">
{
    probe_cards (0);
    set_mode (wakeup_header.video_mode);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="16" endline="73">
{
    struct acpi_object_list *obj_list;
    union acpi_object *obj;
    u32 *buf;
    obj_list = kmalloc (sizeof (struct acpi_object_list), GFP_KERNEL);
    if (!obj_list) {
        printk (KERN_ERR "Memory allocation error\n");
        return;
    }
    obj = kmalloc (sizeof (union acpi_object), GFP_KERNEL);
    if (!obj) {
        printk (KERN_ERR "Memory allocation error\n");
        kfree (obj_list);
        return;
    }
    buf = kmalloc (12, GFP_KERNEL);
    if (!buf) {
        printk (KERN_ERR "Memory allocation error\n");
        kfree (obj);
        kfree (obj_list);
        return;
    }
    buf[0] = ACPI_PDC_REVISION_ID;
    buf[1] = 1;
    buf[2] = ACPI_PDC_C_CAPABILITY_SMP;
    buf[2] |= ACPI_PDC_SMP_T_SWCOORD;
    if (cpu_has (c, X86_FEATURE_EST))
        buf[2] |= ACPI_PDC_EST_CAPABILITY_SWSMP;
    if (cpu_has (c, X86_FEATURE_ACPI))
        buf[2] |= ACPI_PDC_T_FFH;
    if (!cpu_has (c, X86_FEATURE_MWAIT))
        buf[2] &= ~(ACPI_PDC_C_C2C3_FFH);
    obj->type = ACPI_TYPE_BUFFER;
    obj->buffer.length = 12;
    obj->buffer.pointer = (u8 *) buf;
    obj_list->count = 1;
    obj_list->pointer = obj;
    pr->pdc = obj_list;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="23" endline="26">
{
    printk (KERN_ERR "Memory allocation error\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="29" endline="33">
{
    printk (KERN_ERR "Memory allocation error\n");
    kfree (obj_list);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="36" endline="41">
{
    printk (KERN_ERR "Memory allocation error\n");
    kfree (obj);
    kfree (obj_list);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="78" endline="86">
{
    struct cpuinfo_x86 *c = &cpu_data (pr->id);
    pr->pdc = NULL;
    if (c->x86_vendor == X86_VENDOR_INTEL)
        init_intel_pdc (pr, c);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="91" endline="98">
{
    if (pr->pdc) {
        kfree (pr -> pdc -> pointer -> buffer.pointer);
        kfree (pr -> pdc -> pointer);
        kfree (pr -> pdc);
        pr->pdc = NULL;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/processor.c.ifdefed" startline="92" endline="97">
{
    kfree (pr -> pdc -> pointer -> buffer.pointer);
    kfree (pr -> pdc -> pointer);
    kfree (pr -> pdc);
    pr->pdc = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="106" endline="112">
{
    if (!phys || !size)
        return NULL;
    return early_ioremap (phys, size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="114" endline="119">
{
    if (!map || !size)
        return;
    early_iounmap (map, size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="411" endline="444">
{
    unsigned int mask = 1 << irq;
    unsigned int old, new;
    old = inb (0x4d0) | (inb (0x4d1) << 8);
    new = acpi_noirq ? old : 0;
    switch (trigger) {
    case 1 :
        new &= ~mask;
        break;
    case 3 :
        new |= mask;
        break;
    }
    if (old == new)
        return;
    printk (PREFIX "setting ELCR to %04x (from %04x)\n", new, old);
    outb (new, 0x4d0);
    outb (new >> 8, 0x4d1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="429" endline="436">
{
case 1 :
    new &= ~mask;
    break;
case 3 :
    new |= mask;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="447" endline="450">
{
    *irq = gsi;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="457" endline="478">
{
    unsigned int irq;
    unsigned int plat_gsi = gsi;
    acpi_gsi_to_irq (plat_gsi, & irq);
    return irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="575" endline="578">
{
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="583" endline="586">
{
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="591" endline="603">
{
    struct acpi_table_boot *sb;
    sb = (struct acpi_table_boot *) table;
    if (!sb) {
        printk (KERN_WARNING PREFIX "Unable to map SBF\n");
        return -ENODEV;
    }
    sbf_port = sb->cmos_index;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="595" endline="598">
{
    printk (KERN_WARNING PREFIX "Unable to map SBF\n");
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="699" endline="726">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1242" endline="1244">
{
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1248" endline="1272">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1275" endline="1337">
{
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1340" endline="1347">
{
    if (!acpi_force) {
        printk (KERN_NOTICE "%s detected: force use of acpi=noirq\n", d -> ident);
        acpi_noirq_set ();
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1341" endline="1345">
{
    printk (KERN_NOTICE "%s detected: force use of acpi=noirq\n", d -> ident);
    acpi_noirq_set ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1350" endline="1357">
{
    if (!acpi_force) {
        printk (KERN_NOTICE "%s detected: force use of pci=noacpi\n", d -> ident);
        acpi_disable_pci ();
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1351" endline="1355">
{
    printk (KERN_NOTICE "%s detected: force use of pci=noacpi\n", d -> ident);
    acpi_disable_pci ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1360" endline="1369">
{
    if (!acpi_force) {
        printk (KERN_NOTICE "%s detected: acpi off\n", d -> ident);
        disable_acpi ();
    }
    else {
        printk (KERN_NOTICE "Warning: DMI blacklist says broken, but acpi forced\n");
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1361" endline="1364">
{
    printk (KERN_NOTICE "%s detected: acpi off\n", d -> ident);
    disable_acpi ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1364" endline="1367">
{
    printk (KERN_NOTICE "Warning: DMI blacklist says broken, but acpi forced\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1375" endline="1386">
{
    if (!acpi_force) {
        printk (KERN_NOTICE "%s detected: force use of acpi=ht\n", d -> ident);
        disable_acpi ();
        acpi_ht = 1;
    }
    else {
        printk (KERN_NOTICE "Warning: acpi=force overrules DMI blacklist: acpi=ht\n");
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1376" endline="1381">
{
    printk (KERN_NOTICE "%s detected: force use of acpi=ht\n", d -> ident);
    disable_acpi ();
    acpi_ht = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1381" endline="1384">
{
    printk (KERN_NOTICE "Warning: acpi=force overrules DMI blacklist: acpi=ht\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1392" endline="1404">
{
    if (!acpi_skip_timer_override) {
        WARN (1, KERN_ERR "ati_ixp4x0 quirk not complete.\n");
        pr_notice ("%s detected: Ignoring BIOS IRQ0 pin2 override\n", d -> ident);
        acpi_skip_timer_override = 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1397" endline="1402">
{
    WARN (1, KERN_ERR "ati_ixp4x0 quirk not complete.\n");
    pr_notice ("%s detected: Ignoring BIOS IRQ0 pin2 override\n", d -> ident);
    acpi_skip_timer_override = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1639" endline="1677">
{
    int error;
    dmi_check_system (acpi_dmi_table);
    if (acpi_disabled && !acpi_ht)
        return 1;
    error = acpi_table_init ();
    if (error) {
        disable_acpi ();
        return error;
    }
    acpi_table_parse (ACPI_SIG_BOOT, acpi_parse_sbf);
    error = acpi_blacklisted ();
    if (error) {
        if (acpi_force) {
            printk (KERN_WARNING PREFIX "acpi=force override\n");
        }
        else {
            printk (KERN_WARNING PREFIX "Disabling ACPI support\n");
            disable_acpi ();
            return error;
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1655" endline="1658">
{
    disable_acpi ();
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1666" endline="1674">
{
    if (acpi_force) {
        printk (KERN_WARNING PREFIX "acpi=force override\n");
    }
    else {
        printk (KERN_WARNING PREFIX "Disabling ACPI support\n");
        disable_acpi ();
        return error;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1667" endline="1669">
{
    printk (KERN_WARNING PREFIX "acpi=force override\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1669" endline="1673">
{
    printk (KERN_WARNING PREFIX "Disabling ACPI support\n");
    disable_acpi ();
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1680" endline="1694">
{
    if (acpi_disabled && !acpi_ht)
        return 1;
    early_acpi_process_madt ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1697" endline="1723">
{
    dmi_check_system (acpi_dmi_table_late);
    if (acpi_disabled && !acpi_ht)
        return 1;
    acpi_table_parse (ACPI_SIG_BOOT, acpi_parse_sbf);
    acpi_table_parse (ACPI_SIG_FADT, acpi_parse_fadt);
    acpi_process_madt ();
    acpi_table_parse (ACPI_SIG_HPET, acpi_parse_hpet);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1726" endline="1762">
{
    if (!arg)
        return -EINVAL;
    if (strcmp (arg, "off") == 0) {
        disable_acpi ();
    }
    else if (strcmp (arg, "force") == 0) {
        acpi_force = 1;
        acpi_ht = 1;
        acpi_disabled = 0;
    }
    else if (strcmp (arg, "strict") == 0) {
        acpi_strict = 1;
    }
    else if (strcmp (arg, "ht") == 0) {
        if (!acpi_force)
            disable_acpi ();
        acpi_ht = 1;
    }
    else if (strcmp (arg, "rsdt") == 0) {
        acpi_rsdt_forced = 1;
    }
    else if (strcmp (arg, "noirq") == 0) {
        acpi_noirq_set ();
    }
    else {
        return -EINVAL;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1731" endline="1733">
{
    disable_acpi ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1735" endline="1739">
{
    acpi_force = 1;
    acpi_ht = 1;
    acpi_disabled = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1741" endline="1743">
{
    acpi_strict = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1745" endline="1749">
{
    if (!acpi_force)
        disable_acpi ();
    acpi_ht = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1751" endline="1753">
{
    acpi_rsdt_forced = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1755" endline="1757">
{
    acpi_noirq_set ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1757" endline="1760">
{
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1767" endline="1771">
{
    if (arg && strcmp (arg, "noacpi") == 0)
        acpi_disable_pci ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1775" endline="1786">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1805" endline="1823">
{
    if (!s)
        return -EINVAL;
    if (!strcmp (s, "edge"))
        acpi_sci_flags = ACPI_MADT_TRIGGER_EDGE | (acpi_sci_flags & ~ACPI_MADT_TRIGGER_MASK);
    else if (!strcmp (s, "level"))
        acpi_sci_flags = ACPI_MADT_TRIGGER_LEVEL | (acpi_sci_flags & ~ACPI_MADT_TRIGGER_MASK);
    else if (!strcmp (s, "high"))
        acpi_sci_flags = ACPI_MADT_POLARITY_ACTIVE_HIGH | (acpi_sci_flags & ~ACPI_MADT_POLARITY_MASK);
    else if (!strcmp (s, "low"))
        acpi_sci_flags = ACPI_MADT_POLARITY_ACTIVE_LOW | (acpi_sci_flags & ~ACPI_MADT_POLARITY_MASK);
    else
        return -EINVAL;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1827" endline="1835">
{
    unsigned int old, new, val;
    do {
        old = *lock;
        new = (((old & ~0x3) + 2) + ((old >> 1) & 0x1));
        val = cmpxchg (lock, old, new);
    }
    while (unlikely (val != old));
    return (new < 3) ? -1 : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1829" endline="1833">
{
    old = *lock;
    new = (((old & ~0x3) + 2) + ((old >> 1) & 0x1));
    val = cmpxchg (lock, old, new);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1838" endline="1846">
{
    unsigned int old, new, val;
    do {
        old = *lock;
        new = old & ~0x3;
        val = cmpxchg (lock, old, new);
    }
    while (unlikely (val != old));
    return old & 0x1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/acpi/boot.c.ifdefed" startline="1840" endline="1844">
{
    old = *lock;
    new = old & ~0x3;
    val = cmpxchg (lock, old, new);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="17" endline="19">
{
    return alloc_bootmem_low_pages (size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="22" endline="24">
{
    return (void *) __get_free_pages (GFP_DMA | __GFP_NOWARN, order);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="27" endline="29">
{
    return paddr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="32" endline="34">
{
    return baddr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="37" endline="39">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="43" endline="51">
{
    void *vaddr;
    vaddr = dma_generic_alloc_coherent (hwdev, size, dma_handle, flags);
    if (vaddr)
        return vaddr;
    return swiotlb_alloc_coherent (hwdev, size, dma_handle, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="71" endline="85">
{
    if (swiotlb_force)
        swiotlb = 1;
    if (swiotlb) {
        printk (KERN_INFO "PCI-DMA: Using software bounce buffering for IO (SWIOTLB)\n");
        swiotlb_init ();
        dma_ops = &swiotlb_dma_ops;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-swiotlb.c.ifdefed" startline="80" endline="84">
{
    printk (KERN_INFO "PCI-DMA: Using software bounce buffering for IO (SWIOTLB)\n");
    swiotlb_init ();
    dma_ops = &swiotlb_dma_ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="190" endline="193">
{
    return (tbl != NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="197" endline="217">
{
    unsigned long index;
    unsigned long end;
    unsigned long flags;
    index = start_addr >> PAGE_SHIFT;
    if (index >= tbl->it_size)
        return;
    end = index + npages;
    if (end > tbl->it_size)
        end = tbl->it_size;
    spin_lock_irqsave (& tbl -> it_lock, flags);
    iommu_area_reserve (tbl -> it_map, index, npages);
    spin_unlock_irqrestore (& tbl -> it_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="222" endline="257">
{
    unsigned long flags;
    unsigned long offset;
    unsigned long boundary_size;
    boundary_size = ALIGN (dma_get_seg_boundary (dev) +1, PAGE_SIZE) >> PAGE_SHIFT;
    BUG_ON (npages == 0);
    spin_lock_irqsave (& tbl -> it_lock, flags);
    offset = iommu_area_alloc (tbl->it_map, tbl->it_size, tbl->it_hint, npages, 0, boundary_size, 0);
    if (offset == ~0UL) {
        tbl->chip_ops->tce_cache_blast (tbl);
        offset = iommu_area_alloc (tbl->it_map, tbl->it_size, 0, npages, 0, boundary_size, 0);
        if (offset == ~0UL) {
            printk (KERN_WARNING "Calgary: IOMMU full.\n");
            spin_unlock_irqrestore (& tbl -> it_lock, flags);
            if (panic_on_overflow)
                panic ("Calgary: fix the allocator.\n");
            else
                return bad_dma_address;
        }
    }
    tbl->it_hint = offset + npages;
    BUG_ON (tbl -> it_hint > tbl -> it_size);
    spin_unlock_irqrestore (& tbl -> it_lock, flags);
    return offset;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="236" endline="249">
{
    tbl->chip_ops->tce_cache_blast (tbl);
    offset = iommu_area_alloc (tbl->it_map, tbl->it_size, 0, npages, 0, boundary_size, 0);
    if (offset == ~0UL) {
        printk (KERN_WARNING "Calgary: IOMMU full.\n");
        spin_unlock_irqrestore (& tbl -> it_lock, flags);
        if (panic_on_overflow)
            panic ("Calgary: fix the allocator.\n");
        else
            return bad_dma_address;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="241" endline="248">
{
    printk (KERN_WARNING "Calgary: IOMMU full.\n");
    spin_unlock_irqrestore (& tbl -> it_lock, flags);
    if (panic_on_overflow)
        panic ("Calgary: fix the allocator.\n");
    else
        return bad_dma_address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="261" endline="283">
{
    unsigned long entry;
    dma_addr_t ret = bad_dma_address;
    entry = iommu_range_alloc (dev, tbl, npages);
    if (unlikely (entry == bad_dma_address))
        goto error;
    ret = (entry << PAGE_SHIFT) | ((unsigned long) vaddr & ~PAGE_MASK);
    tce_build (tbl, entry, npages, (unsigned long) vaddr & PAGE_MASK, direction);
    return ret;
error :
    printk (KERN_WARNING "Calgary: failed to allocate %u pages in " "iommu %p\n", npages, tbl);
    return bad_dma_address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="287" endline="311">
{
    unsigned long entry;
    unsigned long badend;
    unsigned long flags;
    badend = bad_dma_address + (EMERGENCY_PAGES * PAGE_SIZE);
    if (unlikely ((dma_addr >= bad_dma_address) && (dma_addr < badend))) {
        WARN (1, KERN_ERR "Calgary: driver tried unmapping bad DMA " "address 0x%Lx\n", dma_addr);
        return;
    }
    entry = dma_addr >> PAGE_SHIFT;
    BUG_ON (entry + npages > tbl -> it_size);
    tce_free (tbl, entry, npages);
    spin_lock_irqsave (& tbl -> it_lock, flags);
    iommu_area_free (tbl -> it_map, entry, npages);
    spin_unlock_irqrestore (& tbl -> it_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="294" endline="298">
{
    WARN (1, KERN_ERR "Calgary: driver tried unmapping bad DMA " "address 0x%Lx\n", dma_addr);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="314" endline="332">
{
    struct pci_dev *pdev;
    struct pci_bus *pbus;
    struct iommu_table *tbl;
    pdev = to_pci_dev (dev);
    pbus = pdev->bus;
    while (pbus->parent)
        pbus = pbus->parent;
    tbl = pci_iommu (pbus);
    BUG_ON (tbl && (tbl -> it_busno != pbus -> number));
    return tbl;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="337" endline="356">
{
    struct iommu_table *tbl = find_iommu_table (dev);
    struct scatterlist *s;
    int i;
    if (!translation_enabled (tbl))
        return;

    for_each_sg (sglist, s, nelems, i) {
        unsigned int npages;
        dma_addr_t dma = s->dma_address;
        unsigned int dmalen = s->dma_length;
        if (dmalen == 0)
            break;
        npages = iommu_num_pages (dma, dmalen, PAGE_SIZE);
        iommu_free (tbl, dma, npages);
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="345" endline="355">
{
    unsigned int npages;
    dma_addr_t dma = s->dma_address;
    unsigned int dmalen = s->dma_length;
    if (dmalen == 0)
        break;
    npages = iommu_num_pages (dma, dmalen, PAGE_SIZE);
    iommu_free (tbl, dma, npages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="361" endline="398">
{
    struct iommu_table *tbl = find_iommu_table (dev);
    struct scatterlist *s;
    unsigned long vaddr;
    unsigned int npages;
    unsigned long entry;
    int i;

    for_each_sg (sg, s, nelems, i) {
        BUG_ON (! sg_page (s));
        vaddr = (unsigned long) sg_virt (s);
        npages = iommu_num_pages (vaddr, s->length, PAGE_SIZE);
        entry = iommu_range_alloc (dev, tbl, npages);
        if (entry == bad_dma_address) {
            s->dma_length = 0;
            goto error;
        }
        s->dma_address = (entry << PAGE_SHIFT) | s->offset;
        tce_build (tbl, entry, npages, vaddr & PAGE_MASK, dir);
        s->dma_length = s->length;
    }

    return nelems;
error :
    calgary_unmap_sg (dev, sg, nelems, dir, NULL);

    for_each_sg (sg, s, nelems, i) {
        sg->dma_address = bad_dma_address;
        sg->dma_length = 0;
    }

    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="369" endline="388">
{
    BUG_ON (! sg_page (s));
    vaddr = (unsigned long) sg_virt (s);
    npages = iommu_num_pages (vaddr, s->length, PAGE_SIZE);
    entry = iommu_range_alloc (dev, tbl, npages);
    if (entry == bad_dma_address) {
        s->dma_length = 0;
        goto error;
    }
    s->dma_address = (entry << PAGE_SHIFT) | s->offset;
    tce_build (tbl, entry, npages, vaddr & PAGE_MASK, dir);
    s->dma_length = s->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="376" endline="380">
{
    s->dma_length = 0;
    goto error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="393" endline="396">
{
    sg->dma_address = bad_dma_address;
    sg->dma_length = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="404" endline="414">
{
    void *vaddr = page_address (page) + offset;
    unsigned long uaddr;
    unsigned int npages;
    struct iommu_table *tbl = find_iommu_table (dev);
    uaddr = (unsigned long) vaddr;
    npages = iommu_num_pages (uaddr, size, PAGE_SIZE);
    return iommu_alloc (dev, tbl, vaddr, npages, dir);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="419" endline="425">
{
    struct iommu_table *tbl = find_iommu_table (dev);
    unsigned int npages;
    npages = iommu_num_pages (dma_addr, size, PAGE_SIZE);
    iommu_free (tbl, dma_addr, npages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="429" endline="458">
{
    void *ret = NULL;
    dma_addr_t mapping;
    unsigned int npages, order;
    struct iommu_table *tbl = find_iommu_table (dev);
    size = PAGE_ALIGN (size);
    npages = size >> PAGE_SHIFT;
    order = get_order (size);
    flag &= ~(__GFP_DMA | __GFP_HIGHMEM | __GFP_DMA32);
    ret = (void *) __get_free_pages (flag, order);
    if (!ret)
        goto error;
    memset (ret, 0, size);
    mapping = iommu_alloc (dev, tbl, ret, npages, DMA_BIDIRECTIONAL);
    if (mapping == bad_dma_address)
        goto free;
    *dma_handle = mapping;
    return ret;
free :
    free_pages ((unsigned long) ret, get_order (size));
    ret = NULL;
error :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="462" endline="471">
{
    unsigned int npages;
    struct iommu_table *tbl = find_iommu_table (dev);
    size = PAGE_ALIGN (size);
    npages = size >> PAGE_SHIFT;
    iommu_free (tbl, dma_handle, npages);
    free_pages ((unsigned long) vaddr, get_order (size));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="483" endline="485">
{
    return bus_info[num].bbar;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="488" endline="490">
{
    return bus_info[num].phbid;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="493" endline="497">
{
    size_t idx = busno_to_phbid (num);
    return split_queue_offsets[idx];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="500" endline="504">
{
    size_t idx = busno_to_phbid (num);
    return tar_offsets[idx];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="507" endline="511">
{
    size_t idx = busno_to_phbid (num);
    return phb_offsets[idx];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="514" endline="517">
{
    unsigned long target = ((unsigned long) bar) | offset;
    return (void __iomem *) target;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="520" endline="522">
{
    return (device == PCI_DEVICE_ID_IBM_CALIOC2);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="525" endline="527">
{
    return (device == PCI_DEVICE_ID_IBM_CALGARY);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="530" endline="532">
{
    return (is_calgary (device) || is_calioc2 (device));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="535" endline="569">
{
    u64 val;
    u32 aer;
    int i = 0;
    void __iomem *bbar = tbl->bbar;
    void __iomem *target;
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_AER_OFFSET);
    aer = readl (target);
    writel (0, target);
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_PLSSR_OFFSET);
    val = readl (target);
    target = calgary_reg (bbar, split_queue_offset (tbl->it_busno));
    do {
        val = readq (target);
        i++;
    }
    while ((val & 0xff) != 0xff && i < 100);
    if (i == 100)
        printk (KERN_WARNING "Calgary: PCI bus not quiesced, " "continuing anyway\n");
    target = calgary_reg (bbar, tar_offset (tbl->it_busno));
    writeq (tbl -> tar_val, target);
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_AER_OFFSET);
    writel (aer, target);
    (void) readl (target);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="553" endline="556">
{
    val = readq (target);
    i++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="572" endline="648">
{
    void __iomem *bbar = tbl->bbar;
    void __iomem *target;
    u64 val64;
    u32 val;
    int i = 0;
    int count = 1;
    unsigned char bus = tbl->it_busno;
begin :
    printk (KERN_DEBUG "Calgary: CalIOC2 bus 0x%x entering tce cache blast " "sequence - count %d\n", bus, count);
    target = calgary_reg (bbar, phb_offset (bus) | PHB_PAGE_MIG_CTRL);
    val = be32_to_cpu (readl (target));
    printk (KERN_DEBUG "1a. read 0x%x [LE] from %p\n", val, target);
    val |= PMR_SOFTSTOP;
    printk (KERN_DEBUG "1b. writing 0x%x [LE] to %p\n", val, target);
    writel (cpu_to_be32 (val), target);
    printk (KERN_DEBUG "2a. starting to poll split queues\n");
    target = calgary_reg (bbar, split_queue_offset (bus));
    do {
        val64 = readq (target);
        i++;
    }
    while ((val64 & 0xff) != 0xff && i < 100);
    if (i == 100)
        printk (KERN_WARNING "CalIOC2: PCI bus not quiesced, " "continuing anyway\n");
    target = calgary_reg (bbar, phb_offset (bus) | PHB_PAGE_MIG_DEBUG);
    val = be32_to_cpu (readl (target));
    printk (KERN_DEBUG "3. read 0x%x [LE] from %p\n", val, target);
    if (val & PMR_SOFTSTOPFAULT) {
        if (++count < 100)
            goto begin;
        else {
            printk (KERN_WARNING "CalIOC2: too many SoftStopFaults, " "aborting TCE cache flush sequence!\n");
            return;
        }
    }
    target = calgary_reg (bbar, phb_offset (bus) | PHB_PAGE_MIG_CTRL);
    printk (KERN_DEBUG "5a. slamming into HardStop by reading %p\n", target);
    val = be32_to_cpu (readl (target));
    printk (KERN_DEBUG "5b. read 0x%x [LE] from %p\n", val, target);
    target = calgary_reg (bbar, phb_offset (bus) | PHB_PAGE_MIG_DEBUG);
    val = be32_to_cpu (readl (target));
    printk (KERN_DEBUG "5c. read 0x%x [LE] from %p (debug)\n", val, target);
    printk (KERN_DEBUG "6. invalidating TCE cache\n");
    target = calgary_reg (bbar, tar_offset (bus));
    writeq (tbl -> tar_val, target);
    printk (KERN_DEBUG "7a. Re-reading PMCR\n");
    target = calgary_reg (bbar, phb_offset (bus) | PHB_PAGE_MIG_CTRL);
    val = be32_to_cpu (readl (target));
    printk (KERN_DEBUG "7b. read 0x%x [LE] from %p\n", val, target);
    printk (KERN_DEBUG "8a. removing HardStop from PMCR\n");
    target = calgary_reg (bbar, phb_offset (bus) | PHB_PAGE_MIG_CTRL);
    val = 0;
    printk (KERN_DEBUG "8b. writing 0x%x [LE] to %p\n", val, target);
    writel (cpu_to_be32 (val), target);
    val = be32_to_cpu (readl (target));
    printk (KERN_DEBUG "8c. read 0x%x [LE] from %p\n", val, target);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="596" endline="599">
{
    val64 = readq (target);
    i++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="610" endline="618">
{
    if (++count < 100)
        goto begin;
    else {
        printk (KERN_WARNING "CalIOC2: too many SoftStopFaults, " "aborting TCE cache flush sequence!\n");
        return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="613" endline="617">
{
    printk (KERN_WARNING "CalIOC2: too many SoftStopFaults, " "aborting TCE cache flush sequence!\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="652" endline="660">
{
    unsigned int numpages;
    limit = limit | 0xfffff;
    limit++;
    numpages = ((limit - start) >> PAGE_SHIFT);
    iommu_range_reserve (pci_iommu (dev -> bus), start, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="663" endline="683">
{
    void __iomem *target;
    u64 low, high, sizelow;
    u64 start, limit;
    struct iommu_table *tbl = pci_iommu (dev->bus);
    unsigned char busnum = dev->bus->number;
    void __iomem *bbar = tbl->bbar;
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_1_LOW);
    low = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_1_HIGH);
    high = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_1_SIZE);
    sizelow = be32_to_cpu (readl (target));
    start = (high << 32) | low;
    limit = sizelow;
    calgary_reserve_mem_region (dev, start, limit);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="686" endline="714">
{
    void __iomem *target;
    u32 val32;
    u64 low, high, sizelow, sizehigh;
    u64 start, limit;
    struct iommu_table *tbl = pci_iommu (dev->bus);
    unsigned char busnum = dev->bus->number;
    void __iomem *bbar = tbl->bbar;
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_CONFIG_RW_OFFSET);
    val32 = be32_to_cpu (readl (target));
    if (!(val32 & PHB_MEM2_ENABLE))
        return;
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_2_LOW);
    low = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_2_HIGH);
    high = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_2_SIZE_LOW);
    sizelow = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_MEM_2_SIZE_HIGH);
    sizehigh = be32_to_cpu (readl (target));
    start = (high << 32) | low;
    limit = (sizehigh << 32) | sizelow;
    calgary_reserve_mem_region (dev, start, limit);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="724" endline="746">
{
    unsigned int npages;
    u64 start;
    struct iommu_table *tbl = pci_iommu (dev->bus);
    iommu_range_reserve (tbl, bad_dma_address, EMERGENCY_PAGES);
    if (is_calgary (dev->device)) {
        start = (640 * 1024);
        npages = ((1024 - 640) * 1024) >> PAGE_SHIFT;
    }
    else {
        start = 0;
        npages = (1 * 1024 * 1024) >> PAGE_SHIFT;
    }
    iommu_range_reserve (tbl, start, npages);
    calgary_reserve_peripheral_mem_1 (dev);
    calgary_reserve_peripheral_mem_2 (dev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="734" endline="737">
{
    start = (640 * 1024);
    npages = ((1024 - 640) * 1024) >> PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="737" endline="740">
{
    start = 0;
    npages = (1 * 1024 * 1024) >> PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="749" endline="797">
{
    u64 val64;
    u64 table_phys;
    void __iomem *target;
    int ret;
    struct iommu_table *tbl;
    ret = build_tce_table (dev, bbar);
    if (ret)
        return ret;
    tbl = pci_iommu (dev->bus);
    tbl->it_base = (unsigned long) bus_info[dev->bus->number].tce_space;
    if (is_kdump_kernel ())
        calgary_init_bitmap_from_tce_table (tbl);
    else
        tce_free (tbl, 0, tbl->it_size);
    if (is_calgary (dev->device))
        tbl->chip_ops = &calgary_chip_ops;
    else if (is_calioc2 (dev->device))
        tbl->chip_ops = &calioc2_chip_ops;
    else
        BUG ();
    calgary_reserve_regions (dev);
    target = calgary_reg (bbar, tar_offset (dev->bus->number));
    val64 = be64_to_cpu (readq (target));
    val64 &= ~TAR_SW_BITS;
    table_phys = (u64) __pa (tbl->it_base);
    val64 |= table_phys;
    BUG_ON (specified_table_size > TCE_TABLE_SIZE_8M);
    val64 |= (u64) specified_table_size;
    tbl->tar_val = cpu_to_be64 (val64);
    writeq (tbl -> tar_val, target);
    readq (target);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="800" endline="822">
{
    u64 val64;
    struct iommu_table *tbl = pci_iommu (dev->bus);
    void __iomem *target;
    unsigned int bitmapsz;
    target = calgary_reg (tbl->bbar, tar_offset (dev->bus->number));
    val64 = be64_to_cpu (readq (target));
    val64 &= ~TAR_SW_BITS;
    writeq (cpu_to_be64 (val64), target);
    readq (target);
    bitmapsz = tbl->it_size / BITS_PER_BYTE;
    free_pages ((unsigned long) tbl -> it_map, get_order (bitmapsz));
    tbl->it_map = NULL;
    kfree (tbl);
    set_pci_iommu (dev -> bus, NULL);
    bus_info[dev->bus->number].tce_space = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="825" endline="839">
{
    void __iomem *bbar = tbl->bbar;
    void __iomem *target;
    u32 csr, plssr;
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_CSR_OFFSET);
    csr = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_PLSSR_OFFSET);
    plssr = be32_to_cpu (readl (target));
    printk (KERN_EMERG "Calgary: DMA error on Calgary PHB 0x%x, " "0x%08x@CSR 0x%08x@PLSSR\n", tbl -> it_busno, csr, plssr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="842" endline="886">
{
    void __iomem *bbar = tbl->bbar;
    u32 csr, csmr, plssr, mck, rcstat;
    void __iomem *target;
    unsigned long phboff = phb_offset (tbl->it_busno);
    unsigned long erroff;
    u32 errregs [7];
    int i;
    target = calgary_reg (bbar, phboff | PHB_CSR_OFFSET);
    csr = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phboff | PHB_PLSSR_OFFSET);
    plssr = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phboff | 0x290);
    csmr = be32_to_cpu (readl (target));
    target = calgary_reg (bbar, phboff | 0x800);
    mck = be32_to_cpu (readl (target));
    printk (KERN_EMERG "Calgary: DMA error on CalIOC2 PHB 0x%x\n", tbl -> it_busno);
    printk (KERN_EMERG "Calgary: 0x%08x@CSR 0x%08x@PLSSR 0x%08x@CSMR 0x%08x@MCK\n", csr, plssr, csmr, mck);
    printk (KERN_EMERG "Calgary: ");
    for (i = 0; i < ARRAY_SIZE (errregs); i++) {
        erroff = (0x810 + (i * 0x10));
        target = calgary_reg (bbar, phboff | erroff);
        errregs[i] = be32_to_cpu (readl (target));
        printk ("0x%08x@0x%lx ", errregs [i], erroff);
    }
    printk ("\n");
    target = calgary_reg (bbar, phboff | PHB_ROOT_COMPLEX_STATUS);
    rcstat = be32_to_cpu (readl (target));
    printk (KERN_EMERG "Calgary: 0x%08x@0x%x\n", rcstat, PHB_ROOT_COMPLEX_STATUS);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="872" endline="878">
{
    erroff = (0x810 + (i * 0x10));
    target = calgary_reg (bbar, phboff | erroff);
    errregs[i] = be32_to_cpu (readl (target));
    printk ("0x%08x@0x%lx ", errregs [i], erroff);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="889" endline="917">
{
    struct pci_dev *dev = (struct pci_dev *) data;
    struct iommu_table *tbl = pci_iommu (dev->bus);
    void __iomem *bbar = tbl->bbar;
    u32 val32;
    void __iomem *target;
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_CSR_OFFSET);
    val32 = be32_to_cpu (readl (target));
    if (val32 & CSR_AGENT_MASK) {
        tbl->chip_ops->dump_error_regs (tbl);
        writel (0, target);
        target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_CONFIG_RW_OFFSET);
        val32 = be32_to_cpu (readl (target));
        val32 |= PHB_SLOT_DISABLE;
        writel (cpu_to_be32 (val32), target);
        readl (target);
    }
    else {
        mod_timer (& tbl -> watchdog_timer, jiffies + 2 * HZ);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="900" endline="913">
{
    tbl->chip_ops->dump_error_regs (tbl);
    writel (0, target);
    target = calgary_reg (bbar, phb_offset (tbl->it_busno) | PHB_CONFIG_RW_OFFSET);
    val32 = be32_to_cpu (readl (target));
    val32 |= PHB_SLOT_DISABLE;
    writel (cpu_to_be32 (val32), target);
    readl (target);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="913" endline="916">
{
    mod_timer (& tbl -> watchdog_timer, jiffies + 2 * HZ);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="921" endline="949">
{
    u64 val64;
    void __iomem *target;
    unsigned int phb_shift = ~0;
    u64 mask;
    switch (busno_to_phbid (busnum)) {
    case 0 :
        phb_shift = (63 - 19);
        break;
    case 1 :
        phb_shift = (63 - 23);
        break;
    case 2 :
        phb_shift = (63 - 27);
        break;
    case 3 :
        phb_shift = (63 - 35);
        break;
    default :
        BUG_ON (busno_to_phbid (busnum));
    }
    target = calgary_reg (bbar, CALGARY_CONFIG_REG);
    val64 = be64_to_cpu (readq (target));
    mask = ~(0xFUL << phb_shift);
    val64 &= mask;
    val64 |= (timeout << phb_shift);
    writeq (cpu_to_be64 (val64), target);
    readq (target);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="927" endline="938">
{
case 0 :
    phb_shift = (63 - 19);
    break;
case 1 :
    phb_shift = (63 - 23);
    break;
case 2 :
    phb_shift = (63 - 27);
    break;
case 3 :
    phb_shift = (63 - 35);
    break;
default :
    BUG_ON (busno_to_phbid (busnum));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="952" endline="965">
{
    unsigned char busnum = dev->bus->number;
    void __iomem *bbar = tbl->bbar;
    void __iomem *target;
    u32 val;
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_SAVIOR_L2);
    val = cpu_to_be32 (readl (target));
    val |= 0x00800000;
    writel (cpu_to_be32 (val), target);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="968" endline="978">
{
    unsigned char busnum = dev->bus->number;
    if (is_calgary (dev->device) && (busnum == 1))
        calgary_set_split_completion_timeout (tbl->bbar, busnum, CCR_2SEC_TIMEOUT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="981" endline="1010">
{
    u32 val32;
    unsigned char busnum;
    void __iomem *target;
    void __iomem *bbar;
    struct iommu_table *tbl;
    busnum = dev->bus->number;
    tbl = pci_iommu (dev->bus);
    bbar = tbl->bbar;
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_CONFIG_RW_OFFSET);
    val32 = be32_to_cpu (readl (target));
    val32 |= PHB_TCE_ENABLE | PHB_DAC_DISABLE | PHB_MCSR_ENABLE;
    printk (KERN_INFO "Calgary: enabling translation on %s PHB %#x\n", (dev -> device == PCI_DEVICE_ID_IBM_CALGARY) ? "Calgary" : "CalIOC2", busnum);
    printk (KERN_INFO "Calgary: errant DMAs will now be prevented on this " "bus.\n");
    writel (cpu_to_be32 (val32), target);
    readl (target);
    init_timer (& tbl -> watchdog_timer);
    tbl->watchdog_timer.function = &calgary_watchdog;
    tbl->watchdog_timer.data = (unsigned long) dev;
    mod_timer (& tbl -> watchdog_timer, jiffies);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1013" endline="1034">
{
    u32 val32;
    unsigned char busnum;
    void __iomem *target;
    void __iomem *bbar;
    struct iommu_table *tbl;
    busnum = dev->bus->number;
    tbl = pci_iommu (dev->bus);
    bbar = tbl->bbar;
    target = calgary_reg (bbar, phb_offset (busnum) | PHB_CONFIG_RW_OFFSET);
    val32 = be32_to_cpu (readl (target));
    val32 &= ~(PHB_TCE_ENABLE | PHB_DAC_DISABLE | PHB_MCSR_ENABLE);
    printk (KERN_INFO "Calgary: disabling translation on PHB %#x!\n", busnum);
    writel (cpu_to_be32 (val32), target);
    readl (target);
    del_timer_sync (& tbl -> watchdog_timer);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1037" endline="1046">
{
    pci_dev_get (dev);
    set_pci_iommu (dev -> bus, NULL);
    if (dev->bus->parent)
        dev->bus->parent->self = dev;
    else
        dev->bus->self = dev;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1049" endline="1080">
{
    void __iomem *bbar;
    struct iommu_table *tbl;
    int ret;
    BUG_ON (dev -> bus -> number >= MAX_PHB_BUS_NUM);
    bbar = busno_to_bbar (dev->bus->number);
    ret = calgary_setup_tar (dev, bbar);
    if (ret)
        goto done;
    pci_dev_get (dev);
    if (dev->bus->parent) {
        if (dev->bus->parent->self)
            printk (KERN_WARNING "Calgary: IEEEE, dev %p has " "bus->parent->self!\n", dev);
        dev->bus->parent->self = dev;
    }
    else
        dev->bus->self = dev;
    tbl = pci_iommu (dev->bus);
    tbl->chip_ops->handle_quirks (tbl, dev);
    calgary_enable_translation (dev);
    return 0;
done :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1063" endline="1068">
{
    if (dev->bus->parent->self)
        printk (KERN_WARNING "Calgary: IEEEE, dev %p has " "bus->parent->self!\n", dev);
    dev->bus->parent->self = dev;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1083" endline="1134">
{
    int ret;
    int rioidx, phb, bus;
    void __iomem *bbar;
    void __iomem *target;
    unsigned long offset;
    u8 start_bus, end_bus;
    u32 val;
    ret = -ENODATA;
    for (rioidx = 0; rioidx < rio_table_hdr->num_rio_dev; rioidx++) {
        struct rio_detail *rio = rio_devs[rioidx];
        if ((rio->type != COMPAT_CALGARY) && (rio->type != ALT_CALGARY))
            continue;
        bbar = ioremap_nocache (rio->BBAR, 1024 * 1024);
        if (!bbar)
            goto error;
        for (phb = 0; phb < PHBS_PER_CALGARY; phb++) {
            offset = phb_debug_offsets[phb] | PHB_DEBUG_STUFF_OFFSET;
            target = calgary_reg (bbar, offset);
            val = be32_to_cpu (readl (target));
            start_bus = (u8) ((val & 0x00FF0000) >> 16);
            end_bus = (u8) ((val & 0x0000FF00) >> 8);
            if (end_bus) {
                for (bus = start_bus; bus <= end_bus; bus++) {
                    bus_info[bus].bbar = bbar;
                    bus_info[bus].phbid = phb;
                }
            }
            else {
                bus_info[start_bus].bbar = bbar;
                bus_info[start_bus].phbid = phb;
            }
        }
    }
    return 0;
error :
    for (bus = 0; bus < ARRAY_SIZE (bus_info); bus++)
        if (bus_info[bus].bbar)
            iounmap (bus_info[bus].bbar);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1093" endline="1123">
{
    struct rio_detail *rio = rio_devs[rioidx];
    if ((rio->type != COMPAT_CALGARY) && (rio->type != ALT_CALGARY))
        continue;
    bbar = ioremap_nocache (rio->BBAR, 1024 * 1024);
    if (!bbar)
        goto error;
    for (phb = 0; phb < PHBS_PER_CALGARY; phb++) {
        offset = phb_debug_offsets[phb] | PHB_DEBUG_STUFF_OFFSET;
        target = calgary_reg (bbar, offset);
        val = be32_to_cpu (readl (target));
        start_bus = (u8) ((val & 0x00FF0000) >> 16);
        end_bus = (u8) ((val & 0x0000FF00) >> 8);
        if (end_bus) {
            for (bus = start_bus; bus <= end_bus; bus++) {
                bus_info[bus].bbar = bbar;
                bus_info[bus].phbid = phb;
            }
        }
        else {
            bus_info[start_bus].bbar = bbar;
            bus_info[start_bus].phbid = phb;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1104" endline="1122">
{
    offset = phb_debug_offsets[phb] | PHB_DEBUG_STUFF_OFFSET;
    target = calgary_reg (bbar, offset);
    val = be32_to_cpu (readl (target));
    start_bus = (u8) ((val & 0x00FF0000) >> 16);
    end_bus = (u8) ((val & 0x0000FF00) >> 8);
    if (end_bus) {
        for (bus = start_bus; bus <= end_bus; bus++) {
            bus_info[bus].bbar = bbar;
            bus_info[bus].phbid = phb;
        }
    }
    else {
        bus_info[start_bus].bbar = bbar;
        bus_info[start_bus].phbid = phb;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1113" endline="1118">
{
    for (bus = start_bus; bus <= end_bus; bus++) {
        bus_info[bus].bbar = bbar;
        bus_info[bus].phbid = phb;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1114" endline="1117">
{
    bus_info[bus].bbar = bbar;
    bus_info[bus].phbid = phb;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1118" endline="1121">
{
    bus_info[start_bus].bbar = bbar;
    bus_info[start_bus].phbid = phb;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1137" endline="1206">
{
    int ret;
    struct pci_dev *dev = NULL;
    struct calgary_bus_info *info;
    ret = calgary_locate_bbars ();
    if (ret)
        return ret;
    if (is_kdump_kernel ())
        get_tce_space_from_tar ();
    do {
        dev = pci_get_device (PCI_VENDOR_ID_IBM, PCI_ANY_ID, dev);
        if (!dev)
            break;
        if (!is_cal_pci_dev (dev->device))
            continue;
        info = &bus_info[dev->bus->number];
        if (info->translation_disabled) {
            calgary_init_one_nontraslated (dev);
            continue;
        }
        if (!info->tce_space && !translate_empty_slots)
            continue;
        ret = calgary_init_one (dev);
        if (ret)
            goto error;
    }
    while (1);
    dev = NULL;

    for_each_pci_dev (dev) {
        struct iommu_table *tbl;
        tbl = find_iommu_table (&dev->dev);
        if (translation_enabled (tbl))
            dev->dev.archdata.dma_ops = &calgary_dma_ops;
    }

    return ret;
error :
    do {
        dev = pci_get_device (PCI_VENDOR_ID_IBM, PCI_ANY_ID, dev);
        if (!dev)
            break;
        if (!is_cal_pci_dev (dev->device))
            continue;
        info = &bus_info[dev->bus->number];
        if (info->translation_disabled) {
            pci_dev_put (dev);
            continue;
        }
        if (!info->tce_space && !translate_empty_slots)
            continue;
        calgary_disable_translation (dev);
        calgary_free_bus (dev);
        pci_dev_put (dev);
        dev->dev.archdata.dma_ops = NULL;
    }
    while (1);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1150" endline="1169">
{
    dev = pci_get_device (PCI_VENDOR_ID_IBM, PCI_ANY_ID, dev);
    if (!dev)
        break;
    if (!is_cal_pci_dev (dev->device))
        continue;
    info = &bus_info[dev->bus->number];
    if (info->translation_disabled) {
        calgary_init_one_nontraslated (dev);
        continue;
    }
    if (!info->tce_space && !translate_empty_slots)
        continue;
    ret = calgary_init_one (dev);
    if (ret)
        goto error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1158" endline="1161">
{
    calgary_init_one_nontraslated (dev);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1172" endline="1179">
{
    struct iommu_table *tbl;
    tbl = find_iommu_table (&dev->dev);
    if (translation_enabled (tbl))
        dev->dev.archdata.dma_ops = &calgary_dma_ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1184" endline="1203">
{
    dev = pci_get_device (PCI_VENDOR_ID_IBM, PCI_ANY_ID, dev);
    if (!dev)
        break;
    if (!is_cal_pci_dev (dev->device))
        continue;
    info = &bus_info[dev->bus->number];
    if (info->translation_disabled) {
        pci_dev_put (dev);
        continue;
    }
    if (!info->tce_space && !translate_empty_slots)
        continue;
    calgary_disable_translation (dev);
    calgary_free_bus (dev);
    pci_dev_put (dev);
    dev->dev.archdata.dma_ops = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1192" endline="1195">
{
    pci_dev_put (dev);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1209" endline="1227">
{
    int ret;
    if (specified_table_size != TCE_TABLE_SIZE_UNSPECIFIED)
        return specified_table_size;
    ret = get_order (ram >> 13);
    if (ret > TCE_TABLE_SIZE_8M)
        ret = TCE_TABLE_SIZE_8M;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1230" endline="1269">
{
    unsigned long ptr;
    unsigned numnodes, i;
    int scal_detail_size, rio_detail_size;
    numnodes = rio_table_hdr->num_scal_dev;
    if (numnodes > MAX_NUMNODES) {
        printk (KERN_WARNING "Calgary: MAX_NUMNODES too low! Defined as %d, " "but system has %d nodes.\n", MAX_NUMNODES, numnodes);
        return -ENODEV;
    }
    switch (rio_table_hdr->version) {
    case 2 :
        scal_detail_size = 11;
        rio_detail_size = 13;
        break;
    case 3 :
        scal_detail_size = 12;
        rio_detail_size = 15;
        break;
    default :
        printk (KERN_WARNING "Calgary: Invalid Rio Grande Table Version: %d\n", rio_table_hdr->version);
        return -EPROTO;
    }
    ptr = ((unsigned long) rio_table_hdr) + 3;
    for (i = 0; i < numnodes; i++, ptr += scal_detail_size)
        scal_devs[i] = (struct scal_detail *) ptr;
    for (i = 0; i < rio_table_hdr->num_rio_dev; i++, ptr += rio_detail_size)
        rio_devs[i] = (struct rio_detail *) ptr;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1236" endline="1242">
{
    printk (KERN_WARNING "Calgary: MAX_NUMNODES too low! Defined as %d, " "but system has %d nodes.\n", MAX_NUMNODES, numnodes);
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1244" endline="1258">
{
case 2 :
    scal_detail_size = 11;
    rio_detail_size = 13;
    break;
case 3 :
    scal_detail_size = 12;
    rio_detail_size = 15;
    break;
default :
    printk (KERN_WARNING "Calgary: Invalid Rio Grande Table Version: %d\n", rio_table_hdr->version);
    return -EPROTO;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1272" endline="1290">
{
    int dev;
    u32 val;
    if (pci_dev == PCI_DEVICE_ID_IBM_CALIOC2) {
        return 1;
    }
    for (dev = 1; dev < 8; dev++) {
        val = read_pci_config (bus, dev, 0, 0);
        if (val != 0xffffffff)
            break;
    }
    return (val != 0xffffffff);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1276" endline="1282">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1284" endline="1288">
{
    val = read_pci_config (bus, dev, 0, 0);
    if (val != 0xffffffff)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1298" endline="1307">
{
    u64 *tp;
    unsigned int index;
    tp = ((u64 *) tbl->it_base);
    for (index = 0; index < tbl->it_size; index++) {
        if (*tp != 0x0)
            set_bit (index, tbl->it_map);
        tp++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1302" endline="1306">
{
    if (*tp != 0x0)
        set_bit (index, tbl->it_map);
    tp++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1315" endline="1345">
{
    int bus;
    void __iomem *target;
    unsigned long tce_space;
    for (bus = 0; bus < MAX_PHB_BUS_NUM; bus++) {
        struct calgary_bus_info *info = &bus_info[bus];
        unsigned short pci_device;
        u32 val;
        val = read_pci_config (bus, 0, 0, 0);
        pci_device = (val & 0xFFFF0000) >> 16;
        if (!is_cal_pci_dev (pci_device))
            continue;
        if (info->translation_disabled)
            continue;
        if (calgary_bus_has_devices (bus, pci_device) || translate_empty_slots) {
            target = calgary_reg (bus_info[bus].bbar, tar_offset (bus));
            tce_space = be64_to_cpu (readq (target));
            tce_space = tce_space & TAR_SW_BITS;
            tce_space = tce_space & (~specified_table_size);
            info->tce_space = (u64 *) __va (tce_space);
        }
    }
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1320" endline="1343">
{
    struct calgary_bus_info *info = &bus_info[bus];
    unsigned short pci_device;
    u32 val;
    val = read_pci_config (bus, 0, 0, 0);
    pci_device = (val & 0xFFFF0000) >> 16;
    if (!is_cal_pci_dev (pci_device))
        continue;
    if (info->translation_disabled)
        continue;
    if (calgary_bus_has_devices (bus, pci_device) || translate_empty_slots) {
        target = calgary_reg (bus_info[bus].bbar, tar_offset (bus));
        tce_space = be64_to_cpu (readq (target));
        tce_space = tce_space & TAR_SW_BITS;
        tce_space = tce_space & (~specified_table_size);
        info->tce_space = (u64 *) __va (tce_space);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1334" endline="1342">
{
    target = calgary_reg (bus_info[bus].bbar, tar_offset (bus));
    tce_space = be64_to_cpu (readq (target));
    tce_space = tce_space & TAR_SW_BITS;
    tce_space = tce_space & (~specified_table_size);
    info->tce_space = (u64 *) __va (tce_space);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1348" endline="1458">
{
    int bus;
    void *tbl;
    int calgary_found = 0;
    unsigned long ptr;
    unsigned int offset, prev_offset;
    int ret;
    if (swiotlb || no_iommu || iommu_detected)
        return;
    if (!use_calgary)
        return;
    if (!early_pci_allowed ())
        return;
    printk (KERN_DEBUG "Calgary: detecting Calgary via BIOS EBDA area\n");
    ptr = (unsigned long) phys_to_virt (get_bios_ebda ());
    rio_table_hdr = NULL;
    prev_offset = 0;
    offset = 0x180;
    while (offset > prev_offset) {
        if (*((unsigned short *) (ptr + offset + 2)) == 0x4752) {
            rio_table_hdr = (struct rio_table_hdr *) (ptr + offset + 4);
            break;
        }
        prev_offset = offset;
        offset = *((unsigned short *) (ptr + offset));
    }
    if (!rio_table_hdr) {
        printk (KERN_DEBUG "Calgary: Unable to locate Rio Grande table " "in EBDA - bailing!\n");
        return;
    }
    ret = build_detail_arrays ();
    if (ret) {
        printk (KERN_DEBUG "Calgary: build_detail_arrays ret %d\n", ret);
        return;
    }
    specified_table_size = determine_tce_table_size ((is_kdump_kernel () ? saved_max_pfn : max_pfn) * PAGE_SIZE);
    for (bus = 0; bus < MAX_PHB_BUS_NUM; bus++) {
        struct calgary_bus_info *info = &bus_info[bus];
        unsigned short pci_device;
        u32 val;
        val = read_pci_config (bus, 0, 0, 0);
        pci_device = (val & 0xFFFF0000) >> 16;
        if (!is_cal_pci_dev (pci_device))
            continue;
        if (info->translation_disabled)
            continue;
        if (calgary_bus_has_devices (bus, pci_device) || translate_empty_slots) {
            if (!is_kdump_kernel ()) {
                tbl = alloc_tce_table ();
                if (!tbl)
                    goto cleanup;
                info->tce_space = tbl;
            }
            calgary_found = 1;
        }
    }
    printk (KERN_DEBUG "Calgary: finished detection, Calgary %s\n", calgary_found ? "found" : "not found");
    if (calgary_found) {
        iommu_detected = 1;
        calgary_detected = 1;
        printk (KERN_INFO "PCI-DMA: Calgary IOMMU detected.\n");
        printk (KERN_INFO "PCI-DMA: Calgary TCE table spec is %d\n", specified_table_size);
        if (max_pfn > MAX_DMA32_PFN)
            swiotlb = 1;
    }
    return;
cleanup :
    for (--bus; bus >= 0; --bus) {
        struct calgary_bus_info *info = &bus_info[bus];
        if (info->tce_space)
            free_tce_table (info->tce_space);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1380" endline="1389">
{
    if (*((unsigned short *) (ptr + offset + 2)) == 0x4752) {
        rio_table_hdr = (struct rio_table_hdr *) (ptr + offset + 4);
        break;
    }
    prev_offset = offset;
    offset = *((unsigned short *) (ptr + offset));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1382" endline="1386">
{
    rio_table_hdr = (struct rio_table_hdr *) (ptr + offset + 4);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1390" endline="1394">
{
    printk (KERN_DEBUG "Calgary: Unable to locate Rio Grande table " "in EBDA - bailing!\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1397" endline="1400">
{
    printk (KERN_DEBUG "Calgary: build_detail_arrays ret %d\n", ret);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1405" endline="1433">
{
    struct calgary_bus_info *info = &bus_info[bus];
    unsigned short pci_device;
    u32 val;
    val = read_pci_config (bus, 0, 0, 0);
    pci_device = (val & 0xFFFF0000) >> 16;
    if (!is_cal_pci_dev (pci_device))
        continue;
    if (info->translation_disabled)
        continue;
    if (calgary_bus_has_devices (bus, pci_device) || translate_empty_slots) {
        if (!is_kdump_kernel ()) {
            tbl = alloc_tce_table ();
            if (!tbl)
                goto cleanup;
            info->tce_space = tbl;
        }
        calgary_found = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1420" endline="1432">
{
    if (!is_kdump_kernel ()) {
        tbl = alloc_tce_table ();
        if (!tbl)
            goto cleanup;
        info->tce_space = tbl;
    }
    calgary_found = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1425" endline="1430">
{
    tbl = alloc_tce_table ();
    if (!tbl)
        goto cleanup;
    info->tce_space = tbl;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1438" endline="1448">
{
    iommu_detected = 1;
    calgary_detected = 1;
    printk (KERN_INFO "PCI-DMA: Calgary IOMMU detected.\n");
    printk (KERN_INFO "PCI-DMA: Calgary TCE table spec is %d\n", specified_table_size);
    if (max_pfn > MAX_DMA32_PFN)
        swiotlb = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1452" endline="1457">
{
    struct calgary_bus_info *info = &bus_info[bus];
    if (info->tce_space)
        free_tce_table (info->tce_space);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1461" endline="1487">
{
    int ret;
    if (no_iommu || (swiotlb && !calgary_detected))
        return -ENODEV;
    if (!calgary_detected)
        return -ENODEV;
    printk (KERN_INFO "PCI-DMA: Using Calgary IOMMU\n");
    ret = calgary_init ();
    if (ret) {
        printk (KERN_ERR "PCI-DMA: Calgary init failed %d, " "falling back to no_iommu\n", ret);
        return ret;
    }
    force_iommu = 1;
    bad_dma_address = 0x0;
    if (!dma_ops)
        dma_ops = &nommu_dma_ops;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1474" endline="1478">
{
    printk (KERN_ERR "PCI-DMA: Calgary init failed %d, " "falling back to no_iommu\n", ret);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1490" endline="1542">
{
    unsigned int bridge;
    size_t len;
    char *endp;
    while (*p) {
        if (!strncmp (p, "64k", 3))
            specified_table_size = TCE_TABLE_SIZE_64K;
        else if (!strncmp (p, "128k", 4))
            specified_table_size = TCE_TABLE_SIZE_128K;
        else if (!strncmp (p, "256k", 4))
            specified_table_size = TCE_TABLE_SIZE_256K;
        else if (!strncmp (p, "512k", 4))
            specified_table_size = TCE_TABLE_SIZE_512K;
        else if (!strncmp (p, "1M", 2))
            specified_table_size = TCE_TABLE_SIZE_1M;
        else if (!strncmp (p, "2M", 2))
            specified_table_size = TCE_TABLE_SIZE_2M;
        else if (!strncmp (p, "4M", 2))
            specified_table_size = TCE_TABLE_SIZE_4M;
        else if (!strncmp (p, "8M", 2))
            specified_table_size = TCE_TABLE_SIZE_8M;
        len = strlen ("translate_empty_slots");
        if (!strncmp (p, "translate_empty_slots", len))
            translate_empty_slots = 1;
        len = strlen ("disable");
        if (!strncmp (p, "disable", len)) {
            p += len;
            if (*p == '=')
                ++p;
            if (*p == '\0')
                break;
            bridge = simple_strtoul (p, &endp, 0);
            if (p == endp)
                break;
            if (bridge < MAX_PHB_BUS_NUM) {
                printk (KERN_INFO "Calgary: disabling " "translation for PHB %#x\n", bridge);
                bus_info[bridge].translation_disabled = 1;
            }
        }
        p = strpbrk (p, ",");
        if (!p)
            break;
        p++;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1495" endline="1540">
{
    if (!strncmp (p, "64k", 3))
        specified_table_size = TCE_TABLE_SIZE_64K;
    else if (!strncmp (p, "128k", 4))
        specified_table_size = TCE_TABLE_SIZE_128K;
    else if (!strncmp (p, "256k", 4))
        specified_table_size = TCE_TABLE_SIZE_256K;
    else if (!strncmp (p, "512k", 4))
        specified_table_size = TCE_TABLE_SIZE_512K;
    else if (!strncmp (p, "1M", 2))
        specified_table_size = TCE_TABLE_SIZE_1M;
    else if (!strncmp (p, "2M", 2))
        specified_table_size = TCE_TABLE_SIZE_2M;
    else if (!strncmp (p, "4M", 2))
        specified_table_size = TCE_TABLE_SIZE_4M;
    else if (!strncmp (p, "8M", 2))
        specified_table_size = TCE_TABLE_SIZE_8M;
    len = strlen ("translate_empty_slots");
    if (!strncmp (p, "translate_empty_slots", len))
        translate_empty_slots = 1;
    len = strlen ("disable");
    if (!strncmp (p, "disable", len)) {
        p += len;
        if (*p == '=')
            ++p;
        if (*p == '\0')
            break;
        bridge = simple_strtoul (p, &endp, 0);
        if (p == endp)
            break;
        if (bridge < MAX_PHB_BUS_NUM) {
            printk (KERN_INFO "Calgary: disabling " "translation for PHB %#x\n", bridge);
            bus_info[bridge].translation_disabled = 1;
        }
    }
    p = strpbrk (p, ",");
    if (!p)
        break;
    p++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1518" endline="1533">
{
    p += len;
    if (*p == '=')
        ++p;
    if (*p == '\0')
        break;
    bridge = simple_strtoul (p, &endp, 0);
    if (p == endp)
        break;
    if (bridge < MAX_PHB_BUS_NUM) {
        printk (KERN_INFO "Calgary: disabling " "translation for PHB %#x\n", bridge);
        bus_info[bridge].translation_disabled = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1528" endline="1532">
{
    printk (KERN_INFO "Calgary: disabling " "translation for PHB %#x\n", bridge);
    bus_info[bridge].translation_disabled = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1546" endline="1570">
{
    struct iommu_table *tbl;
    unsigned int npages;
    int i;
    tbl = pci_iommu (dev->bus);
    for (i = 0; i < 4; i++) {
        struct resource *r = &dev->resource[PCI_BRIDGE_RESOURCES + i];
        if (!(r->flags & IORESOURCE_MEM))
            continue;
        if (!r->start)
            continue;
        npages = (r->end - r->start) >> PAGE_SHIFT;
        npages++;
        iommu_range_reserve (tbl, r -> start, npages);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1553" endline="1569">
{
    struct resource *r = &dev->resource[PCI_BRIDGE_RESOURCES + i];
    if (!(r->flags & IORESOURCE_MEM))
        continue;
    if (!r->start)
        continue;
    npages = (r->end - r->start) >> PAGE_SHIFT;
    npages++;
    iommu_range_reserve (tbl, r -> start, npages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1573" endline="1601">
{
    struct pci_dev *dev = NULL;
    struct calgary_bus_info *info;
    if (no_iommu || swiotlb || !calgary_detected)
        return -ENODEV;
    printk (KERN_DEBUG "Calgary: fixing up tce spaces\n");
    do {
        dev = pci_get_device (PCI_VENDOR_ID_IBM, PCI_ANY_ID, dev);
        if (!dev)
            break;
        if (!is_cal_pci_dev (dev->device))
            continue;
        info = &bus_info[dev->bus->number];
        if (info->translation_disabled)
            continue;
        if (!info->tce_space)
            continue;
        calgary_fixup_one_tce_space (dev);
    }
    while (1);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-calgary_64.c.ifdefed" startline="1582" endline="1598">
{
    dev = pci_get_device (PCI_VENDOR_ID_IBM, PCI_ANY_ID, dev);
    if (!dev)
        break;
    if (!is_cal_pci_dev (dev->device))
        continue;
    info = &bus_info[dev->bus->number];
    if (info->translation_disabled)
        continue;
    if (!info->tce_space)
        continue;
    calgary_fixup_one_tce_space (dev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="30" endline="34">
{
    pgd_t *pgd = pgd_offset_k (0UL);
    pgd_clear (pgd);
    __flush_tlb_all ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="39" endline="42">
{
    memset (__bss_start, 0, (unsigned long) __bss_stop - (unsigned long) __bss_start);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="45" endline="53">
{
    char *command_line;
    memcpy (& boot_params, real_mode_data, sizeof boot_params);
    if (boot_params.hdr.cmd_line_ptr) {
        command_line = __va (boot_params.hdr.cmd_line_ptr);
        memcpy (boot_command_line, command_line, COMMAND_LINE_SIZE);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="49" endline="52">
{
    command_line = __va (boot_params.hdr.cmd_line_ptr);
    memcpy (boot_command_line, command_line, COMMAND_LINE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="56" endline="95">
{
    int i;
    BUILD_BUG_ON (MODULES_VADDR < KERNEL_IMAGE_START);
    BUILD_BUG_ON (MODULES_VADDR - KERNEL_IMAGE_START < KERNEL_IMAGE_SIZE);
    BUILD_BUG_ON (MODULES_LEN + KERNEL_IMAGE_SIZE > 2 * PUD_SIZE);
    BUILD_BUG_ON ((KERNEL_IMAGE_START & ~ PMD_MASK) != 0);
    BUILD_BUG_ON ((MODULES_VADDR & ~ PMD_MASK) != 0);
    BUILD_BUG_ON (! (MODULES_VADDR > __START_KERNEL));
    BUILD_BUG_ON (! (((MODULES_END - 1) & PGDIR_MASK) == (__START_KERNEL & PGDIR_MASK)));
    BUILD_BUG_ON (__fix_to_virt (__end_of_fixed_addresses) <= MODULES_END);
    clear_bss ();
    zap_identity_mappings ();
    cleanup_highmap ();
    for (i = 0; i < NUM_EXCEPTION_VECTORS; i++) {
        set_intr_gate (i, early_idt_handler);
    }
    load_idt ((const struct desc_ptr *) & idt_descr);
    if (console_loglevel == 10)
        early_printk ("Kernel alive\n");
    x86_64_start_reservations (real_mode_data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="82" endline="88">
{
    set_intr_gate (i, early_idt_handler);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/head64.c.ifdefed" startline="98" endline="124">
{
    copy_bootdata (__va (real_mode_data));
    reserve_trampoline_memory ();
    reserve_early (__pa_symbol (& _text), __pa_symbol (& __bss_stop), "TEXT DATA BSS");
    reserve_ebda_region ();
    start_kernel ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="31" endline="34">
{
    printk (" [<%p>] %s%pS\n", (void *) address, reliable ? "" : "? ", (void *) address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="64" endline="64">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="76" endline="85">
{
    void *t = tinfo;
    if (end) {
        if (p < end && p >= (end - THREAD_SIZE))
            return 1;
        else
            return 0;
    }
    return p > t && p < t + THREAD_SIZE - size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="78" endline="83">
{
    if (p < end && p >= (end - THREAD_SIZE))
        return 1;
    else
        return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="92" endline="112">
{
    struct stack_frame *frame = (struct stack_frame *) bp;
    while (valid_stack_ptr (tinfo, stack, sizeof (*stack), end)) {
        unsigned long addr;
        addr = *stack;
        if (__kernel_text_address (addr)) {
            if ((unsigned long) stack == bp + sizeof (long)) {
                ops->address (data, addr, 1);
                frame = frame->next_frame;
                bp = (unsigned long) frame;
            }
            else {
                ops->address (data, addr, 0);
            }
            print_ftrace_graph_addr (addr, data, ops, tinfo, graph);
        }
        stack++;
    }
    return bp;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="95" endline="110">
{
    unsigned long addr;
    addr = *stack;
    if (__kernel_text_address (addr)) {
        if ((unsigned long) stack == bp + sizeof (long)) {
            ops->address (data, addr, 1);
            frame = frame->next_frame;
            bp = (unsigned long) frame;
        }
        else {
            ops->address (data, addr, 0);
        }
        print_ftrace_graph_addr (addr, data, ops, tinfo, graph);
    }
    stack++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="99" endline="108">
{
    if ((unsigned long) stack == bp + sizeof (long)) {
        ops->address (data, addr, 1);
        frame = frame->next_frame;
        bp = (unsigned long) frame;
    }
    else {
        ops->address (data, addr, 0);
    }
    print_ftrace_graph_addr (addr, data, ops, tinfo, graph);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="100" endline="104">
{
    ops->address (data, addr, 1);
    frame = frame->next_frame;
    bp = (unsigned long) frame;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="104" endline="106">
{
    ops->address (data, addr, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="117" endline="121">
{
    printk (data);
    print_symbol (msg, symbol);
    printk ("\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="124" endline="126">
{
    printk ("%s%s\n", (char *) data, msg);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="129" endline="132">
{
    printk ("%s <%s> ", (char *) data, name);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="138" endline="142">
{
    touch_nmi_watchdog ();
    printk (data);
    printk_address (addr, reliable);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="154" endline="157">
{
    printk ("%sCall Trace:\n", log_lvl);
    dump_trace (task, regs, stack, bp, & print_trace_ops, log_lvl);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="161" endline="163">
{
    show_trace_log_lvl (task, regs, stack, bp, "");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="166" endline="168">
{
    show_stack_log_lvl (task, NULL, sp, 0, "");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="174" endline="189">
{
    unsigned long bp = 0;
    unsigned long stack;
    printk ("Pid: %d, comm: %.20s %s %s %.*s\n", current -> pid, current -> comm, print_tainted (), init_utsname () -> release, (int) strcspn (init_utsname () -> version, " "), init_utsname () -> version);
    show_trace (NULL, NULL, & stack, bp);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="197" endline="222">
{
    int cpu;
    unsigned long flags;
    trace_hw_branch_oops ();
    oops_enter ();
    raw_local_irq_save (flags);
    cpu = smp_processor_id ();
    if (!__raw_spin_trylock (&die_lock)) {
        if (cpu == die_owner)
            ;
        else
            __raw_spin_lock (&die_lock);
    }
    die_nest_count++;
    die_owner = cpu;
    console_verbose ();
    bust_spinlocks (1);
    return flags;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="211" endline="216">
{
    if (cpu == die_owner)
        ;
    else
        __raw_spin_lock (&die_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="225" endline="246">
{
    if (regs && kexec_should_crash (current))
        crash_kexec (regs);
    bust_spinlocks (0);
    die_owner = -1;
    add_taint (TAINT_DIE);
    die_nest_count--;
    if (!die_nest_count)
        __raw_spin_unlock (&die_lock);
    raw_local_irq_restore (flags);
    oops_exit ();
    if (!signr)
        return;
    if (in_interrupt ())
        panic ("Fatal exception in interrupt");
    if (panic_on_oops)
        panic ("Fatal exception");
    do_exit (signr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="249" endline="288">
{
    printk (KERN_EMERG "%s: %04lx [#%d] ", str, err & 0xffff, ++ die_counter);
    printk ("\n");
    sysfs_printk_last_file ();
    if (notify_die (DIE_OOPS, str, regs, err, current->thread.trap_no, SIGSEGV) == NOTIFY_STOP)
        return 1;
    show_registers (regs);
    printk (KERN_ALERT "RIP ");
    printk_address (regs -> ip, 1);
    printk (" RSP <%016lx>\n", regs -> sp);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="295" endline="305">
{
    unsigned long flags = oops_begin ();
    int sig = SIGSEGV;
    if (!user_mode_vm (regs))
        report_bug (regs->ip, regs);
    if (__die (str, regs, err))
        sig = 0;
    oops_end (flags, regs, sig);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="309" endline="330">
{
    unsigned long flags;
    if (notify_die (DIE_NMIWATCHDOG, str, regs, 0, 2, SIGINT) == NOTIFY_STOP)
        return;
    flags = oops_begin ();
    printk (KERN_EMERG "%s", str);
    printk (" on CPU%d, ip %08lx, registers:\n", smp_processor_id (), regs -> ip);
    show_registers (regs);
    oops_end (flags, regs, 0);
    if (do_panic || panic_on_oops)
        panic ("Non maskable interrupt");
    nmi_exit ();
    local_irq_enable ();
    do_exit (SIGBUS);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="333" endline="339">
{
    if (!s)
        return -EINVAL;
    if (!strcmp (s, "panic"))
        panic_on_oops = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="343" endline="348">
{
    if (!s)
        return -EINVAL;
    kstack_depth_to_print = simple_strtoul (s, NULL, 0);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack.c.ifdefed" startline="352" endline="358">
{
    code_bytes = simple_strtoul (s, NULL, 0);
    if (code_bytes > 8192)
        code_bytes = 8192;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="24" endline="55">
{
    pud_t *pud;
    pmd_t *pmd;
    struct page *page;
    int result = -ENOMEM;
    addr &= PMD_MASK;
    pgd += pgd_index (addr);
    if (!pgd_present (*pgd)) {
        page = kimage_alloc_control_pages (image, 0);
        if (!page)
            goto out;
        pud = (pud_t *) page_address (page);
        memset (pud, 0, PAGE_SIZE);
        set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE));
    }
    pud = pud_offset (pgd, addr);
    if (!pud_present (*pud)) {
        page = kimage_alloc_control_pages (image, 0);
        if (!page)
            goto out;
        pmd = (pmd_t *) page_address (page);
        memset (pmd, 0, PAGE_SIZE);
        set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE));
    }
    pmd = pmd_offset (pud, addr);
    if (!pmd_present (*pmd))
        set_pmd (pmd, __pmd (addr | __PAGE_KERNEL_LARGE_EXEC));
    result = 0;
out :
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="32" endline="39">
{
    page = kimage_alloc_control_pages (image, 0);
    if (!page)
        goto out;
    pud = (pud_t *) page_address (page);
    memset (pud, 0, PAGE_SIZE);
    set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="41" endline="48">
{
    page = kimage_alloc_control_pages (image, 0);
    if (!page)
        goto out;
    pmd = (pmd_t *) page_address (page);
    memset (pmd, 0, PAGE_SIZE);
    set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="58" endline="67">
{
    unsigned long end_addr;
    addr &= PAGE_MASK;
    end_addr = addr + PUD_SIZE;
    while (addr < end_addr) {
        set_pmd (level2p ++, __pmd (addr | __PAGE_KERNEL_LARGE_EXEC));
        addr += PMD_SIZE;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="63" endline="66">
{
    set_pmd (level2p ++, __pmd (addr | __PAGE_KERNEL_LARGE_EXEC));
    addr += PMD_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="71" endline="99">
{
    unsigned long end_addr;
    int result;
    result = 0;
    addr &= PAGE_MASK;
    end_addr = addr + PGDIR_SIZE;
    while ((addr < last_addr) && (addr < end_addr)) {
        struct page *page;
        pmd_t *level2p;
        page = kimage_alloc_control_pages (image, 0);
        if (!page) {
            result = -ENOMEM;
            goto out;
        }
        level2p = (pmd_t *) page_address (page);
        init_level2_page (level2p, addr);
        set_pud (level3p ++, __pud (__pa (level2p) | _KERNPG_TABLE));
        addr += PUD_SIZE;
    }
    while (addr < end_addr) {
        pud_clear (level3p ++);
        addr += PUD_SIZE;
    }
out :
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="78" endline="91">
{
    struct page *page;
    pmd_t *level2p;
    page = kimage_alloc_control_pages (image, 0);
    if (!page) {
        result = -ENOMEM;
        goto out;
    }
    level2p = (pmd_t *) page_address (page);
    init_level2_page (level2p, addr);
    set_pud (level3p ++, __pud (__pa (level2p) | _KERNPG_TABLE));
    addr += PUD_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="83" endline="86">
{
    result = -ENOMEM;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="93" endline="96">
{
    pud_clear (level3p ++);
    addr += PUD_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="104" endline="134">
{
    unsigned long end_addr;
    int result;
    result = 0;
    addr &= PAGE_MASK;
    end_addr = addr + (PTRS_PER_PGD * PGDIR_SIZE);
    while ((addr < last_addr) && (addr < end_addr)) {
        struct page *page;
        pud_t *level3p;
        page = kimage_alloc_control_pages (image, 0);
        if (!page) {
            result = -ENOMEM;
            goto out;
        }
        level3p = (pud_t *) page_address (page);
        result = init_level3_page (image, level3p, addr, last_addr);
        if (result)
            goto out;
        set_pgd (level4p ++, __pgd (__pa (level3p) | _KERNPG_TABLE));
        addr += PGDIR_SIZE;
    }
    while (addr < end_addr) {
        pgd_clear (level4p ++);
        addr += PGDIR_SIZE;
    }
out :
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="111" endline="126">
{
    struct page *page;
    pud_t *level3p;
    page = kimage_alloc_control_pages (image, 0);
    if (!page) {
        result = -ENOMEM;
        goto out;
    }
    level3p = (pud_t *) page_address (page);
    result = init_level3_page (image, level3p, addr, last_addr);
    if (result)
        goto out;
    set_pgd (level4p ++, __pgd (__pa (level3p) | _KERNPG_TABLE));
    addr += PGDIR_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="116" endline="119">
{
    result = -ENOMEM;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="128" endline="131">
{
    pgd_clear (level4p ++);
    addr += PGDIR_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="137" endline="141">
{
    free_page ((unsigned long) image -> arch.pud);
    free_page ((unsigned long) image -> arch.pmd);
    free_page ((unsigned long) image -> arch.pte);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="144" endline="183">
{
    pud_t *pud;
    pmd_t *pmd;
    pte_t *pte;
    unsigned long vaddr, paddr;
    int result = -ENOMEM;
    vaddr = (unsigned long) relocate_kernel;
    paddr = __pa (page_address (image->control_code_page) + PAGE_SIZE);
    pgd += pgd_index (vaddr);
    if (!pgd_present (*pgd)) {
        pud = (pud_t *) get_zeroed_page (GFP_KERNEL);
        if (!pud)
            goto err;
        image->arch.pud = pud;
        set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE));
    }
    pud = pud_offset (pgd, vaddr);
    if (!pud_present (*pud)) {
        pmd = (pmd_t *) get_zeroed_page (GFP_KERNEL);
        if (!pmd)
            goto err;
        image->arch.pmd = pmd;
        set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE));
    }
    pmd = pmd_offset (pud, vaddr);
    if (!pmd_present (*pmd)) {
        pte = (pte_t *) get_zeroed_page (GFP_KERNEL);
        if (!pte)
            goto err;
        image->arch.pte = pte;
        set_pmd (pmd, __pmd (__pa (pte) | _KERNPG_TABLE));
    }
    pte = pte_offset_kernel (pmd, vaddr);
    set_pte (pte, pfn_pte (paddr >> PAGE_SHIFT, PAGE_KERNEL_EXEC));
    return 0;
err :
    free_transition_pgtable (image);
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="154" endline="160">
{
    pud = (pud_t *) get_zeroed_page (GFP_KERNEL);
    if (!pud)
        goto err;
    image->arch.pud = pud;
    set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="162" endline="168">
{
    pmd = (pmd_t *) get_zeroed_page (GFP_KERNEL);
    if (!pmd)
        goto err;
    image->arch.pmd = pmd;
    set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="170" endline="176">
{
    pte = (pte_t *) get_zeroed_page (GFP_KERNEL);
    if (!pte)
        goto err;
    image->arch.pte = pte;
    set_pmd (pmd, __pmd (__pa (pte) | _KERNPG_TABLE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="187" endline="202">
{
    pgd_t *level4p;
    int result;
    level4p = (pgd_t *) __va (start_pgtable);
    result = init_level4_page (image, level4p, 0, max_pfn << PAGE_SHIFT);
    if (result)
        return result;
    result = init_one_level2_page (image, level4p, image->start);
    if (result)
        return result;
    return init_transition_pgtable (image, level4p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="205" endline="216">
{
    struct desc_ptr curidt;
    curidt.size = limit;
    curidt.address = (unsigned long) newidt;
    __asm__ __volatile__ ("lidtq %0\n" : : "m" (curidt));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="220" endline="231">
{
    struct desc_ptr curgdt;
    curgdt.size = limit;
    curgdt.address = (unsigned long) newgdt;
    __asm__ __volatile__ ("lgdtq %0\n" : : "m" (curgdt));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="234" endline="243">
{
    __asm__ __volatile__ ("\tmovl %0,%%ds\n" "\tmovl %0,%%es\n" "\tmovl %0,%%ss\n" "\tmovl %0,%%fs\n" "\tmovl %0,%%gs\n" : : "a" (__KERNEL_DS) : "memory");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="246" endline="259">
{
    unsigned long start_pgtable;
    int result;
    start_pgtable = page_to_pfn (image->control_code_page) << PAGE_SHIFT;
    result = init_pgtable (image, start_pgtable);
    if (result)
        return result;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="262" endline="264">
{
    free_transition_pgtable (image);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="271" endline="341">
{
    unsigned long page_list [PAGES_NR];
    void *control_page;
    int save_ftrace_enabled;
    save_ftrace_enabled = __ftrace_enabled_save ();
    local_irq_disable ();
    if (image->preserve_context) {
    }
    control_page = page_address (image->control_code_page) + PAGE_SIZE;
    memcpy (control_page, relocate_kernel, KEXEC_CONTROL_CODE_MAX_SIZE);
    page_list[PA_CONTROL_PAGE] = virt_to_phys (control_page);
    page_list[VA_CONTROL_PAGE] = (unsigned long) control_page;
    page_list[PA_TABLE_PAGE] = (unsigned long) __pa (page_address (image->control_code_page));
    if (image->type == KEXEC_TYPE_DEFAULT)
        page_list[PA_SWAP_PAGE] = (page_to_pfn (image->swap_page) << PAGE_SHIFT);
    load_segments ();
    set_gdt (phys_to_virt (0), 0);
    set_idt (phys_to_virt (0), 0);
    image->start = relocate_kernel ((unsigned long) image->head, (unsigned long) page_list, image->start, image->preserve_context);
    __ftrace_enabled_restore (save_ftrace_enabled);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="286" endline="297">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/machine_kexec_64.c.ifdefed" startline="344" endline="352">
{
    VMCOREINFO_SYMBOL (phys_base);
    VMCOREINFO_SYMBOL (init_level4_pgt);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq_64.c.ifdefed" startline="37" endline="49">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq_64.c.ifdefed" startline="52" endline="63">
{
    struct irq_desc *desc;
    stack_overflow_check (regs);
    desc = irq_to_desc (irq);
    if (unlikely (!desc))
        return false;
    generic_handle_irq_desc (irq, desc);
    return true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq_64.c.ifdefed" startline="127" endline="142">
{
    __u32 pending;
    unsigned long flags;
    if (in_interrupt ())
        return;
    local_irq_save (flags);
    pending = local_softirq_pending ();
    if (pending) {
        call_softirq ();
        WARN_ON_ONCE (softirq_count ());
    }
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq_64.c.ifdefed" startline="137" endline="140">
{
    call_softirq ();
    WARN_ON_ONCE (softirq_count ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="64" endline="111">
{
    for (;;) {
        switch (*str) {
        case 'w' :
            reboot_mode = 0x1234;
            break;
        case 'c' :
            reboot_mode = 0;
            break;
        case 'a' :
        case 'k' :
        case 't' :
        case 'e' :
        case 'p' :
            reboot_type = *str;
            break;
        case 'f' :
            reboot_force = 1;
            break;
        }
        str = strchr (str, ',');
        if (str)
            str++;
        else
            break;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="65" endline="109">
{
    switch (*str) {
    case 'w' :
        reboot_mode = 0x1234;
        break;
    case 'c' :
        reboot_mode = 0;
        break;
    case 'a' :
    case 'k' :
    case 't' :
    case 'e' :
    case 'p' :
        reboot_type = *str;
        break;
    case 'f' :
        reboot_force = 1;
        break;
    }
    str = strchr (str, ',');
    if (str)
        str++;
    else
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="66" endline="102">
{
case 'w' :
    reboot_mode = 0x1234;
    break;
case 'c' :
    reboot_mode = 0;
    break;
case 'a' :
case 'k' :
case 't' :
case 'e' :
case 'p' :
    reboot_type = *str;
    break;
case 'f' :
    reboot_force = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="411" endline="418">
{
    if (reboot_type != BOOT_CF9) {
        reboot_type = BOOT_CF9;
        printk (KERN_INFO "%s series board detected. " "Selecting PCI-method for reboots.\n", d -> ident);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="412" endline="416">
{
    reboot_type = BOOT_CF9;
    printk (KERN_INFO "%s series board detected. " "Selecting PCI-method for reboots.\n", d -> ident);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="441" endline="444">
{
    dmi_check_system (pci_reboot_dmi_table);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="448" endline="456">
{
    int i;
    for (i = 0; i < 0x10000; i++) {
        if ((inb (0x64) & 0x02) == 0)
            break;
        udelay (2);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="451" endline="455">
{
    if ((inb (0x64) & 0x02) == 0)
        break;
    udelay (2);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="459" endline="461">
{
    cpu_emergency_vmxoff ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="466" endline="497">
{
    local_irq_disable ();
    if (cpu_has_vmx () && cpu_vmx_enabled ()) {
        cpu_vmxoff ();
        nmi_shootdown_cpus (vmxoff_nmi);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="488" endline="496">
{
    cpu_vmxoff ();
    nmi_shootdown_cpus (vmxoff_nmi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="501" endline="502">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="505" endline="572">
{
    int i;
    if (reboot_emergency)
        emergency_vmx_disable_all ();
    *((unsigned short *) __va (0x472)) = reboot_mode;
    for (;;) {
        switch (reboot_type) {
        case BOOT_KBD :
            mach_reboot_fixups ();
            for (i = 0; i < 10; i++) {
                kb_wait ();
                udelay (50);
                outb (0xfe, 0x64);
                udelay (50);
            }
        case BOOT_TRIPLE :
            load_idt (&no_idt);
            __asm__ __volatile__ ("int3");
            reboot_type = BOOT_KBD;
            break;
        case BOOT_ACPI :
            acpi_reboot ();
            reboot_type = BOOT_KBD;
            break;
        case BOOT_EFI :
            if (efi_enabled)
                efi.reset_system (reboot_mode ? EFI_RESET_WARM : EFI_RESET_COLD, EFI_SUCCESS, 0, NULL);
            reboot_type = BOOT_KBD;
            break;
        case BOOT_CF9 :
            port_cf9_safe = true;
        case BOOT_CF9_COND :
            if (port_cf9_safe) {
                u8 cf9 = inb (0xcf9) & ~6;
                outb (cf9 | 2, 0xcf9);
                udelay (50);
                outb (cf9 | 6, 0xcf9);
                udelay (50);
            }
            reboot_type = BOOT_KBD;
            break;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="514" endline="571">
{
    switch (reboot_type) {
    case BOOT_KBD :
        mach_reboot_fixups ();
        for (i = 0; i < 10; i++) {
            kb_wait ();
            udelay (50);
            outb (0xfe, 0x64);
            udelay (50);
        }
    case BOOT_TRIPLE :
        load_idt (&no_idt);
        __asm__ __volatile__ ("int3");
        reboot_type = BOOT_KBD;
        break;
    case BOOT_ACPI :
        acpi_reboot ();
        reboot_type = BOOT_KBD;
        break;
    case BOOT_EFI :
        if (efi_enabled)
            efi.reset_system (reboot_mode ? EFI_RESET_WARM : EFI_RESET_COLD, EFI_SUCCESS, 0, NULL);
        reboot_type = BOOT_KBD;
        break;
    case BOOT_CF9 :
        port_cf9_safe = true;
    case BOOT_CF9_COND :
        if (port_cf9_safe) {
            u8 cf9 = inb (0xcf9) & ~6;
            outb (cf9 | 2, 0xcf9);
            udelay (50);
            outb (cf9 | 6, 0xcf9);
            udelay (50);
        }
        reboot_type = BOOT_KBD;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="516" endline="570">
{
case BOOT_KBD :
    mach_reboot_fixups ();
    for (i = 0; i < 10; i++) {
        kb_wait ();
        udelay (50);
        outb (0xfe, 0x64);
        udelay (50);
    }
case BOOT_TRIPLE :
    load_idt (&no_idt);
    __asm__ __volatile__ ("int3");
    reboot_type = BOOT_KBD;
    break;
case BOOT_ACPI :
    acpi_reboot ();
    reboot_type = BOOT_KBD;
    break;
case BOOT_EFI :
    if (efi_enabled)
        efi.reset_system (reboot_mode ? EFI_RESET_WARM : EFI_RESET_COLD, EFI_SUCCESS, 0, NULL);
    reboot_type = BOOT_KBD;
    break;
case BOOT_CF9 :
    port_cf9_safe = true;
case BOOT_CF9_COND :
    if (port_cf9_safe) {
        u8 cf9 = inb (0xcf9) & ~6;
        outb (cf9 | 2, 0xcf9);
        udelay (50);
        outb (cf9 | 6, 0xcf9);
        udelay (50);
    }
    reboot_type = BOOT_KBD;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="520" endline="525">
{
    kb_wait ();
    udelay (50);
    outb (0xfe, 0x64);
    udelay (50);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="561" endline="567">
{
    u8 cf9 = inb (0xcf9) & ~6;
    outb (cf9 | 2, 0xcf9);
    udelay (50);
    outb (cf9 | 6, 0xcf9);
    udelay (50);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="575" endline="615">
{
    lapic_shutdown ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="618" endline="621">
{
    reboot_emergency = emergency;
    machine_ops.emergency_restart ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="624" endline="630">
{
    printk ("machine restart\n");
    if (!reboot_force)
        machine_shutdown ();
    __machine_emergency_restart (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="633" endline="639">
{
    machine_shutdown ();
    stop_this_cpu (NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="642" endline="648">
{
    if (pm_power_off) {
        if (!reboot_force)
            machine_shutdown ();
        pm_power_off ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="643" endline="647">
{
    if (!reboot_force)
        machine_shutdown ();
    pm_power_off ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="662" endline="664">
{
    machine_ops.power_off ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="667" endline="669">
{
    machine_ops.shutdown ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="672" endline="674">
{
    __machine_emergency_restart (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="677" endline="679">
{
    machine_ops.restart (cmd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="682" endline="684">
{
    machine_ops.halt ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/reboot.c.ifdefed" startline="777" endline="779">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/io_delay.c.ifdefed" startline="23" endline="44">
{
    switch (io_delay_type) {
    default :
    case CONFIG_IO_DELAY_TYPE_0X80 :
        asm volatile ("outb %al, $0x80"
        );
        break;
    case CONFIG_IO_DELAY_TYPE_0XED :
        asm volatile ("outb %al, $0xed"
        );
        break;
    case CONFIG_IO_DELAY_TYPE_UDELAY :
        udelay (2);
    case CONFIG_IO_DELAY_TYPE_NONE :
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/io_delay.c.ifdefed" startline="24" endline="43">
{
default :
case CONFIG_IO_DELAY_TYPE_0X80 :
    asm volatile ("outb %al, $0x80"
    );
    break;
case CONFIG_IO_DELAY_TYPE_0XED :
    asm volatile ("outb %al, $0xed"
    );
    break;
case CONFIG_IO_DELAY_TYPE_UDELAY :
    udelay (2);
case CONFIG_IO_DELAY_TYPE_NONE :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/io_delay.c.ifdefed" startline="48" endline="55">
{
    if (io_delay_type == CONFIG_IO_DELAY_TYPE_0X80) {
        pr_notice ("%s: using 0xed I/O delay port\n", id -> ident);
        io_delay_type = CONFIG_IO_DELAY_TYPE_0XED;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/io_delay.c.ifdefed" startline="49" endline="52">
{
    pr_notice ("%s: using 0xed I/O delay port\n", id -> ident);
    io_delay_type = CONFIG_IO_DELAY_TYPE_0XED;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/io_delay.c.ifdefed" startline="106" endline="109">
{
    if (!io_delay_override)
        dmi_check_system (io_delay_0xed_port_dmi_table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/io_delay.c.ifdefed" startline="112" endline="129">
{
    if (!s)
        return -EINVAL;
    if (!strcmp (s, "0x80"))
        io_delay_type = CONFIG_IO_DELAY_TYPE_0X80;
    else if (!strcmp (s, "0xed"))
        io_delay_type = CONFIG_IO_DELAY_TYPE_0XED;
    else if (!strcmp (s, "udelay"))
        io_delay_type = CONFIG_IO_DELAY_TYPE_UDELAY;
    else if (!strcmp (s, "none"))
        io_delay_type = CONFIG_IO_DELAY_TYPE_NONE;
    else
        return -EINVAL;
    io_delay_override = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="115" endline="121">
{
    if (unlikely (cpu_is_offline (cpu))) {
        WARN_ON (1);
        return;
    }
    apic->send_IPI_mask (cpumask_of (cpu), RESCHEDULE_VECTOR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="116" endline="119">
{
    WARN_ON (1);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="124" endline="126">
{
    apic->send_IPI_mask (cpumask_of (cpu), CALL_FUNCTION_SINGLE_VECTOR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="129" endline="147">
{
    cpumask_var_t allbutself;
    if (!alloc_cpumask_var (&allbutself, GFP_ATOMIC)) {
        apic->send_IPI_mask (mask, CALL_FUNCTION_VECTOR);
        return;
    }
    cpumask_copy (allbutself, cpu_online_mask);
    cpumask_clear_cpu (smp_processor_id (), allbutself);
    if (cpumask_equal (mask, allbutself) && cpumask_equal (cpu_online_mask, cpu_callout_mask))
        apic->send_IPI_allbutself (CALL_FUNCTION_VECTOR);
    else
        apic->send_IPI_mask (mask, CALL_FUNCTION_VECTOR);
    free_cpumask_var (allbutself);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="132" endline="135">
{
    apic->send_IPI_mask (mask, CALL_FUNCTION_VECTOR);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="154" endline="159">
{
    ack_APIC_irq ();
    irq_enter ();
    stop_this_cpu (NULL);
    irq_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="162" endline="190">
{
    unsigned long flags;
    unsigned long wait;
    if (reboot_force)
        return;
    if (num_online_cpus () > 1) {
        apic->send_IPI_allbutself (REBOOT_VECTOR);
        wait = USEC_PER_SEC;
        while (num_online_cpus () > 1 && wait--)
            udelay (1);
    }
    local_irq_save (flags);
    disable_local_APIC ();
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="178" endline="185">
{
    apic->send_IPI_allbutself (REBOOT_VECTOR);
    wait = USEC_PER_SEC;
    while (num_online_cpus () > 1 && wait--)
        udelay (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="198" endline="204">
{
    ack_APIC_irq ();
    inc_irq_stat (irq_resched_count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="207" endline="213">
{
    ack_APIC_irq ();
    irq_enter ();
    generic_smp_call_function_interrupt ();
    inc_irq_stat (irq_call_count);
    irq_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smp.c.ifdefed" startline="216" endline="222">
{
    ack_APIC_irq ();
    irq_enter ();
    generic_smp_call_function_single_interrupt ();
    inc_irq_stat (irq_call_count);
    irq_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="51" endline="53">
{
    return readl (hpet_virt_address +a);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="56" endline="58">
{
    writel (d, hpet_virt_address + a);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="65" endline="70">
{
    hpet_virt_address = ioremap_nocache (hpet_address, HPET_MMAP_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="73" endline="76">
{
    iounmap (hpet_virt_address);
    hpet_virt_address = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="86" endline="96">
{
    if (str) {
        if (!strncmp ("disable", str, 7))
            boot_hpet_disable = 1;
        if (!strncmp ("force", str, 5))
            hpet_force_user = 1;
        if (!strncmp ("verbose", str, 7))
            hpet_verbose = 1;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="87" endline="94">
{
    if (!strncmp ("disable", str, 7))
        boot_hpet_disable = 1;
    if (!strncmp ("force", str, 5))
        hpet_force_user = 1;
    if (!strncmp ("verbose", str, 7))
        hpet_verbose = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="100" endline="103">
{
    boot_hpet_disable = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="107" endline="109">
{
    return !boot_hpet_disable && hpet_address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="120" endline="122">
{
    return is_hpet_capable () && hpet_legacy_int_enabled;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="126" endline="154">
{
    u32 i, timers, l, h;
    printk (KERN_INFO "hpet: %s(%d):\n", function, line);
    l = hpet_readl (HPET_ID);
    h = hpet_readl (HPET_PERIOD);
    timers = ((l & HPET_ID_NUMBER) >> HPET_ID_NUMBER_SHIFT) + 1;
    printk (KERN_INFO "hpet: ID: 0x%x, PERIOD: 0x%x\n", l, h);
    l = hpet_readl (HPET_CFG);
    h = hpet_readl (HPET_STATUS);
    printk (KERN_INFO "hpet: CFG: 0x%x, STATUS: 0x%x\n", l, h);
    l = hpet_readl (HPET_COUNTER);
    h = hpet_readl (HPET_COUNTER +4);
    printk (KERN_INFO "hpet: COUNTER_l: 0x%x, COUNTER_h: 0x%x\n", l, h);
    for (i = 0; i < timers; i++) {
        l = hpet_readl (HPET_Tn_CFG (i));
        h = hpet_readl (HPET_Tn_CFG (i) +4);
        printk (KERN_INFO "hpet: T%d: CFG_l: 0x%x, CFG_h: 0x%x\n", i, l, h);
        l = hpet_readl (HPET_Tn_CMP (i));
        h = hpet_readl (HPET_Tn_CMP (i) +4);
        printk (KERN_INFO "hpet: T%d: CMP_l: 0x%x, CMP_h: 0x%x\n", i, l, h);
        l = hpet_readl (HPET_Tn_ROUTE (i));
        h = hpet_readl (HPET_Tn_ROUTE (i) +4);
        printk (KERN_INFO "hpet: T%d ROUTE_l: 0x%x, ROUTE_h: 0x%x\n", i, l, h);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="140" endline="153">
{
    l = hpet_readl (HPET_Tn_CFG (i));
    h = hpet_readl (HPET_Tn_CFG (i) +4);
    printk (KERN_INFO "hpet: T%d: CFG_l: 0x%x, CFG_h: 0x%x\n", i, l, h);
    l = hpet_readl (HPET_Tn_CMP (i));
    h = hpet_readl (HPET_Tn_CMP (i) +4);
    printk (KERN_INFO "hpet: T%d: CMP_l: 0x%x, CMP_h: 0x%x\n", i, l, h);
    l = hpet_readl (HPET_Tn_ROUTE (i));
    h = hpet_readl (HPET_Tn_ROUTE (i) +4);
    printk (KERN_INFO "hpet: T%d ROUTE_l: 0x%x, ROUTE_h: 0x%x\n", i, l, h);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="208" endline="208">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="235" endline="239">
{
    unsigned long cfg = hpet_readl (HPET_CFG);
    cfg &= ~HPET_CFG_ENABLE;
    hpet_writel (cfg, HPET_CFG);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="242" endline="245">
{
    hpet_writel (0, HPET_COUNTER);
    hpet_writel (0, HPET_COUNTER + 4);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="248" endline="252">
{
    unsigned long cfg = hpet_readl (HPET_CFG);
    cfg |= HPET_CFG_ENABLE;
    hpet_writel (cfg, HPET_CFG);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="255" endline="259">
{
    hpet_stop_counter ();
    hpet_reset_counter ();
    hpet_start_counter ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="262" endline="264">
{
    force_hpet_resume ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="267" endline="270">
{
    hpet_resume_device ();
    hpet_restart_counter ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="273" endline="279">
{
    unsigned long cfg = hpet_readl (HPET_CFG);
    cfg |= HPET_CFG_LEGACY;
    hpet_writel (cfg, HPET_CFG);
    hpet_legacy_int_enabled = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="282" endline="310">
{
    hpet_enable_legacy_int ();
    hpet_clockevent.mult = div_sc ((unsigned long) FSEC_PER_NSEC, hpet_period, hpet_clockevent.shift);
    hpet_clockevent.max_delta_ns = clockevent_delta2ns (0x7FFFFFFF, &hpet_clockevent);
    hpet_clockevent.min_delta_ns = 5000;
    hpet_clockevent.cpumask = cpumask_of (smp_processor_id ());
    clockevents_register_device (& hpet_clockevent);
    global_clock_event = &hpet_clockevent;
    printk (KERN_DEBUG "hpet clockevent registered\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="316" endline="374">
{
    unsigned long cfg, cmp, now;
    uint64_t delta;
    switch (mode) {
    case CLOCK_EVT_MODE_PERIODIC :
        hpet_stop_counter ();
        delta = ((uint64_t) (NSEC_PER_SEC / HZ)) * evt->mult;
        delta >>= evt->shift;
        now = hpet_readl (HPET_COUNTER);
        cmp = now + (unsigned long) delta;
        cfg = hpet_readl (HPET_Tn_CFG (timer));
        cfg &= ~HPET_TN_LEVEL;
        cfg |= HPET_TN_ENABLE | HPET_TN_PERIODIC | HPET_TN_SETVAL | HPET_TN_32BIT;
        hpet_writel (cfg, HPET_Tn_CFG (timer));
        hpet_writel (cmp, HPET_Tn_CMP (timer));
        udelay (1);
        hpet_writel ((unsigned long) delta, HPET_Tn_CMP (timer));
        hpet_start_counter ();
        hpet_print_config ();
        break;
    case CLOCK_EVT_MODE_ONESHOT :
        cfg = hpet_readl (HPET_Tn_CFG (timer));
        cfg &= ~HPET_TN_PERIODIC;
        cfg |= HPET_TN_ENABLE | HPET_TN_32BIT;
        hpet_writel (cfg, HPET_Tn_CFG (timer));
        break;
    case CLOCK_EVT_MODE_UNUSED :
    case CLOCK_EVT_MODE_SHUTDOWN :
        cfg = hpet_readl (HPET_Tn_CFG (timer));
        cfg &= ~HPET_TN_ENABLE;
        hpet_writel (cfg, HPET_Tn_CFG (timer));
        break;
    case CLOCK_EVT_MODE_RESUME :
        if (timer == 0) {
            hpet_enable_legacy_int ();
        }
        else {
            struct hpet_dev *hdev = EVT_TO_HPET_DEV (evt);
            hpet_setup_msi_irq (hdev -> irq);
            disable_irq (hdev -> irq);
            irq_set_affinity (hdev -> irq, cpumask_of (hdev -> cpu));
            enable_irq (hdev -> irq);
        }
        hpet_print_config ();
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="320" endline="373">
{
case CLOCK_EVT_MODE_PERIODIC :
    hpet_stop_counter ();
    delta = ((uint64_t) (NSEC_PER_SEC / HZ)) * evt->mult;
    delta >>= evt->shift;
    now = hpet_readl (HPET_COUNTER);
    cmp = now + (unsigned long) delta;
    cfg = hpet_readl (HPET_Tn_CFG (timer));
    cfg &= ~HPET_TN_LEVEL;
    cfg |= HPET_TN_ENABLE | HPET_TN_PERIODIC | HPET_TN_SETVAL | HPET_TN_32BIT;
    hpet_writel (cfg, HPET_Tn_CFG (timer));
    hpet_writel (cmp, HPET_Tn_CMP (timer));
    udelay (1);
    hpet_writel ((unsigned long) delta, HPET_Tn_CMP (timer));
    hpet_start_counter ();
    hpet_print_config ();
    break;
case CLOCK_EVT_MODE_ONESHOT :
    cfg = hpet_readl (HPET_Tn_CFG (timer));
    cfg &= ~HPET_TN_PERIODIC;
    cfg |= HPET_TN_ENABLE | HPET_TN_32BIT;
    hpet_writel (cfg, HPET_Tn_CFG (timer));
    break;
case CLOCK_EVT_MODE_UNUSED :
case CLOCK_EVT_MODE_SHUTDOWN :
    cfg = hpet_readl (HPET_Tn_CFG (timer));
    cfg &= ~HPET_TN_ENABLE;
    hpet_writel (cfg, HPET_Tn_CFG (timer));
    break;
case CLOCK_EVT_MODE_RESUME :
    if (timer == 0) {
        hpet_enable_legacy_int ();
    }
    else {
        struct hpet_dev *hdev = EVT_TO_HPET_DEV (evt);
        hpet_setup_msi_irq (hdev -> irq);
        disable_irq (hdev -> irq);
        irq_set_affinity (hdev -> irq, cpumask_of (hdev -> cpu));
        enable_irq (hdev -> irq);
    }
    hpet_print_config ();
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="362" endline="364">
{
    hpet_enable_legacy_int ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="364" endline="370">
{
    struct hpet_dev *hdev = EVT_TO_HPET_DEV (evt);
    hpet_setup_msi_irq (hdev -> irq);
    disable_irq (hdev -> irq);
    irq_set_affinity (hdev -> irq, cpumask_of (hdev -> cpu));
    enable_irq (hdev -> irq);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="378" endline="393">
{
    u32 cnt;
    cnt = hpet_readl (HPET_COUNTER);
    cnt += (u32) delta;
    hpet_writel (cnt, HPET_Tn_CMP (timer));
    WARN_ON_ONCE ((u32) hpet_readl (HPET_Tn_CMP (timer)) != cnt);
    return (s32) ((u32) hpet_readl (HPET_COUNTER) - cnt) >= 0 ? -ETIME : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="397" endline="399">
{
    hpet_set_mode (mode, evt, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="403" endline="405">
{
    return hpet_next_event (delta, evt, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="716" endline="718">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="720" endline="722">
{
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="733" endline="735">
{
    return NOTIFY_OK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="743" endline="745">
{
    return (cycle_t) hpet_readl (HPET_COUNTER);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="768" endline="809">
{
    u64 start, now;
    cycle_t t1;
    hpet_restart_counter ();
    t1 = hpet_readl (HPET_COUNTER);
    rdtscll (start);
    do {
        rep_nop ();
        rdtscll (now);
    }
    while ((now - start) < 200000UL);
    if (t1 == hpet_readl (HPET_COUNTER)) {
        printk (KERN_WARNING "HPET counter not counting. HPET disabled\n");
        return -ENODEV;
    }
    clocksource_hpet.mult = div_sc (hpet_period, FSEC_PER_NSEC, HPET_SHIFT);
    clocksource_register (& clocksource_hpet);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="785" endline="788">
{
    rep_nop ();
    rdtscll (now);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="790" endline="794">
{
    printk (KERN_WARNING "HPET counter not counting. HPET disabled\n");
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="815" endline="885">
{
    unsigned long id;
    int i;
    if (!is_hpet_capable ())
        return 0;
    hpet_set_mapping ();
    hpet_period = hpet_readl (HPET_PERIOD);
    for (i = 0; hpet_readl (HPET_CFG) == 0xFFFFFFFF; i++) {
        if (i == 1000) {
            printk (KERN_WARNING "HPET config register value = 0xFFFFFFFF. " "Disabling HPET\n");
            goto out_nohpet;
        }
    }
    if (hpet_period < HPET_MIN_PERIOD || hpet_period > HPET_MAX_PERIOD)
        goto out_nohpet;
    id = hpet_readl (HPET_ID);
    hpet_print_config ();
    if (hpet_clocksource_register ())
        goto out_nohpet;
    if (id & HPET_ID_LEGSUP) {
        hpet_legacy_clockevent_register ();
        hpet_msi_capability_lookup (2);
        return 1;
    }
    hpet_msi_capability_lookup (0);
    return 0;
out_nohpet :
    hpet_clear_mapping ();
    hpet_address = 0;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="842" endline="849">
{
    if (i == 1000) {
        printk (KERN_WARNING "HPET config register value = 0xFFFFFFFF. " "Disabling HPET\n");
        goto out_nohpet;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="843" endline="848">
{
    printk (KERN_WARNING "HPET config register value = 0xFFFFFFFF. " "Disabling HPET\n");
    goto out_nohpet;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="873" endline="877">
{
    hpet_legacy_clockevent_register ();
    hpet_msi_capability_lookup (2);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="894" endline="922">
{
    int cpu;
    if (boot_hpet_disable)
        return -ENODEV;
    if (!hpet_address) {
        if (!force_hpet_address)
            return -ENODEV;
        hpet_address = force_hpet_address;
        hpet_enable ();
    }
    if (!hpet_virt_address)
        return -ENODEV;
    hpet_reserve_platform_timers (hpet_readl (HPET_ID));
    hpet_print_config ();

    for_each_online_cpu (cpu) {
        hpet_cpuhp_notify (NULL, CPU_ONLINE, (void *) (long) cpu);
    }

    hotcpu_notifier (hpet_cpuhp_notify, - 20);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="900" endline="906">
{
    if (!force_hpet_address)
        return -ENODEV;
    hpet_address = force_hpet_address;
    hpet_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="914" endline="916">
{
    hpet_cpuhp_notify (NULL, CPU_ONLINE, (void *) (long) cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="926" endline="937">
{
    if (is_hpet_capable ()) {
        unsigned long cfg = hpet_readl (HPET_CFG);
        if (hpet_legacy_int_enabled) {
            cfg &= ~HPET_CFG_LEGACY;
            hpet_legacy_int_enabled = 0;
        }
        cfg &= ~HPET_CFG_ENABLE;
        hpet_writel (cfg, HPET_CFG);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="927" endline="936">
{
    unsigned long cfg = hpet_readl (HPET_CFG);
    if (hpet_legacy_int_enabled) {
        cfg &= ~HPET_CFG_LEGACY;
        hpet_legacy_int_enabled = 0;
    }
    cfg &= ~HPET_CFG_ENABLE;
    hpet_writel (cfg, HPET_CFG);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/hpet.c.ifdefed" startline="930" endline="933">
{
    cfg &= ~HPET_CFG_LEGACY;
    hpet_legacy_int_enabled = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="269" endline="270">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="274" endline="290">
{
    size_t mask = align - 1;
    void *ret;
    BUG_ON (_brk_start == 0);
    BUG_ON (align & mask);
    _brk_end = (_brk_end + mask) & ~mask;
    BUG_ON ((char *) (_brk_end + size) > __brk_limit);
    ret = (void *) _brk_end;
    _brk_end += size;
    memset (ret, 0, size);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="302" endline="303">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="307" endline="314">
{
    if (_brk_end > _brk_start)
        reserve_early (__pa (_brk_start), __pa (_brk_end), "BRK");
    _brk_start = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="422" endline="423">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="427" endline="446">
{
    struct setup_data *data;
    u64 pa_data;
    if (boot_params.hdr.version < 0x0209)
        return;
    pa_data = boot_params.hdr.setup_data;
    while (pa_data) {
        data = early_memremap (pa_data, PAGE_SIZE);
        switch (data->type) {
        case SETUP_E820_EXT :
            parse_e820_ext (data, pa_data);
            break;
        default :
            break;
        }
        pa_data = data->next;
        early_iounmap (data, PAGE_SIZE);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="434" endline="445">
{
    data = early_memremap (pa_data, PAGE_SIZE);
    switch (data->type) {
    case SETUP_E820_EXT :
        parse_e820_ext (data, pa_data);
        break;
    default :
        break;
    }
    pa_data = data->next;
    early_iounmap (data, PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="436" endline="442">
{
case SETUP_E820_EXT :
    parse_e820_ext (data, pa_data);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="449" endline="472">
{
    struct setup_data *data;
    u64 pa_data;
    int found = 0;
    if (boot_params.hdr.version < 0x0209)
        return;
    pa_data = boot_params.hdr.setup_data;
    while (pa_data) {
        data = early_memremap (pa_data, sizeof (*data));
        e820_update_range (pa_data, sizeof (* data) + data -> len, E820_RAM, E820_RESERVED_KERN);
        found = 1;
        pa_data = data->next;
        early_iounmap (data, sizeof (* data));
    }
    if (!found)
        return;
    sanitize_e820_map (e820.map, ARRAY_SIZE (e820.map), & e820.nr_map);
    memcpy (& e820_saved, & e820, sizeof (struct e820map));
    printk (KERN_INFO "extended physical RAM map:\n");
    e820_print_map ("reserve setup_data");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="457" endline="464">
{
    data = early_memremap (pa_data, sizeof (*data));
    e820_update_range (pa_data, sizeof (* data) + data -> len, E820_RAM, E820_RESERVED_KERN);
    found = 1;
    pa_data = data->next;
    early_iounmap (data, sizeof (* data));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="475" endline="490">
{
    struct setup_data *data;
    u64 pa_data;
    char buf [32];
    if (boot_params.hdr.version < 0x0209)
        return;
    pa_data = boot_params.hdr.setup_data;
    while (pa_data) {
        data = early_memremap (pa_data, sizeof (*data));
        sprintf (buf, "setup data %x", data -> type);
        reserve_early (pa_data, pa_data + sizeof (* data) + data -> len, buf);
        pa_data = data->next;
        early_iounmap (data, sizeof (* data));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="483" endline="489">
{
    data = early_memremap (pa_data, sizeof (*data));
    sprintf (buf, "setup data %x", data -> type);
    reserve_early (pa_data, pa_data + sizeof (* data) + data -> len, buf);
    pa_data = data->next;
    early_iounmap (data, sizeof (* data));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="581" endline="582">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="609" endline="616">
{
    int i;
    for (i = 0; i < ARRAY_SIZE (standard_io_resources); i++)
        request_resource (&ioport_resource, &standard_io_resources[i]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="706" endline="1033">
{
    printk (KERN_INFO "Command line: %s\n", boot_command_line);
    vmi_init ();
    early_cpu_init ();
    early_ioremap_init ();
    ROOT_DEV = old_decode_dev (boot_params.hdr.root_dev);
    screen_info = boot_params.screen_info;
    edid_info = boot_params.edid_info;
    saved_video_mode = boot_params.hdr.vid_mode;
    bootloader_type = boot_params.hdr.type_of_loader;
    if ((bootloader_type >> 4) == 0xe) {
        bootloader_type &= 0xf;
        bootloader_type |= (boot_params.hdr.ext_loader_type + 0x10) << 4;
    }
    bootloader_version = bootloader_type & 0xf;
    bootloader_version |= boot_params.hdr.ext_loader_ver << 4;
    ARCH_SETUP setup_memory_map ();
    parse_setup_data ();
    e820_reserve_setup_data ();
    copy_edd ();
    if (!boot_params.hdr.root_flags)
        root_mountflags &= ~MS_RDONLY;
    init_mm.start_code = (unsigned long) _text;
    init_mm.end_code = (unsigned long) _etext;
    init_mm.end_data = (unsigned long) _edata;
    init_mm.brk = _brk_end;
    code_resource.start = virt_to_phys (_text);
    code_resource.end = virt_to_phys (_etext) - 1;
    data_resource.start = virt_to_phys (_etext);
    data_resource.end = virt_to_phys (_edata) - 1;
    bss_resource.start = virt_to_phys (&__bss_start);
    bss_resource.end = virt_to_phys (&__bss_stop) - 1;
    strlcpy (command_line, boot_command_line, COMMAND_LINE_SIZE);
    *cmdline_p = command_line;
    parse_early_param ();
    vmi_activate ();
    reserve_early_setup_data ();
    if (acpi_mps_check ()) {
        setup_clear_cpu_cap (X86_FEATURE_APIC);
    }
    finish_e820_parsing ();
    if (efi_enabled)
        efi_init ();
    dmi_scan_machine ();
    dmi_check_system (bad_bios_dmi_table);
    init_hypervisor (& boot_cpu_data);
    insert_resource (& iomem_resource, & code_resource);
    insert_resource (& iomem_resource, & data_resource);
    insert_resource (& iomem_resource, & bss_resource);
    early_gart_iommu_check ();
    max_pfn = e820_end_of_ram_pfn ();
    early_reserve_e820_mpc_new ();
    mtrr_bp_init ();
    if (mtrr_trim_uncached_memory (max_pfn))
        max_pfn = e820_end_of_ram_pfn ();
    num_physpages = max_pfn;
    check_x2apic ();
    if (max_pfn > (1UL << (32 - PAGE_SHIFT)))
        max_low_pfn = e820_end_of_low_ram_pfn ();
    else
        max_low_pfn = max_pfn;
    high_memory = (void *) __va (max_pfn *PAGE_SIZE - 1) + 1;
    max_pfn_mapped = KERNEL_IMAGE_SIZE >> PAGE_SHIFT;
    printk (KERN_DEBUG "initial memory mapped : 0 - %08lx\n", max_pfn_mapped << PAGE_SHIFT);
    reserve_brk ();
    init_gbpages ();
    max_low_pfn_mapped = init_memory_mapping (0, max_low_pfn << PAGE_SHIFT);
    max_pfn_mapped = max_low_pfn_mapped;
    reserve_initrd ();
    vsmp_init ();
    io_delay_init ();
    acpi_boot_table_init ();
    early_acpi_boot_init ();
    initmem_init (0, max_pfn);
    find_smp_config ();
    reserve_crashkernel ();
    reserve_ibft_region ();
    paravirt_pagetable_setup_start (swapper_pg_dir);
    paging_init ();
    paravirt_pagetable_setup_done (swapper_pg_dir);
    paravirt_post_allocator_init ();
    generic_apic_probe ();
    early_quirks ();
    acpi_boot_init ();
    prefill_possible_map ();
    init_apic_mappings ();
    ioapic_init_mappings ();
    probe_nr_irqs_gsi ();
    kvm_guest_init ();
    e820_reserve_resources ();
    e820_mark_nosave_regions (max_low_pfn);
    reserve_standard_io_resources ();
    e820_setup_gap ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="735" endline="738">
{
    bootloader_type &= 0xf;
    bootloader_type |= (boot_params.hdr.ext_loader_type + 0x10) << 4;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup.c.ifdefed" startline="811" endline="816">
{
    setup_clear_cpu_cap (X86_FEATURE_APIC);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="178" endline="263">
{
    int cpuid, phys_id;
    unsigned long timeout;
    if (apic->wait_for_init_deassert)
        apic->wait_for_init_deassert (&init_deasserted);
    phys_id = read_apic_id ();
    cpuid = smp_processor_id ();
    if (cpumask_test_cpu (cpuid, cpu_callin_mask)) {
        panic ("%s: phys CPU#%d, CPU#%d already present??\n", __func__, phys_id, cpuid);
    }
    pr_debug ("CPU#%d (phys ID: %d) waiting for CALLOUT\n", cpuid, phys_id);
    timeout = jiffies + 2 * HZ;
    while (time_before (jiffies, timeout)) {
        if (cpumask_test_cpu (cpuid, cpu_callout_mask))
            break;
        cpu_relax ();
    }
    if (!time_before (jiffies, timeout)) {
        panic ("%s: CPU%d started up but did not get a callout!\n", __func__, cpuid);
    }
    pr_debug ("CALLIN, before setup_local_APIC().\n");
    if (apic->smp_callin_clear_local_apic)
        apic->smp_callin_clear_local_apic ();
    setup_local_APIC ();
    end_local_APIC_setup ();
    map_cpu_to_logical_apicid ();
    notify_cpu_starting (cpuid);
    local_irq_enable ();
    calibrate_delay ();
    local_irq_disable ();
    pr_debug ("Stack at about %p\n", & cpuid);
    smp_store_cpu_info (cpuid);
    cpumask_set_cpu (cpuid, cpu_callin_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="196" endline="199">
{
    panic ("%s: phys CPU#%d, CPU#%d already present??\n", __func__, phys_id, cpuid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="214" endline="221">
{
    if (cpumask_test_cpu (cpuid, cpu_callout_mask))
        break;
    cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="223" endline="226">
{
    panic ("%s: CPU%d started up but did not get a callout!\n", __func__, cpuid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="269" endline="330">
{
    vmi_bringup ();
    cpu_init ();
    preempt_disable ();
    smp_callin ();
    barrier ();
    check_tsc_sync_target ();
    if (nmi_watchdog == NMI_IO_APIC) {
        disable_8259A_irq (0);
        enable_NMI_through_LVT0 ();
        enable_8259A_irq (0);
    }
    set_cpu_sibling_map (raw_smp_processor_id ());
    wmb ();
    ipi_call_lock ();
    lock_vector_lock ();
    __setup_vector_irq (smp_processor_id ());
    set_cpu_online (smp_processor_id (), true);
    unlock_vector_lock ();
    ipi_call_unlock ();
    per_cpu (cpu_state, smp_processor_id ()) = CPU_ONLINE;
    local_irq_enable ();
    setup_secondary_clock ();
    wmb ();
    cpu_idle ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="287" endline="291">
{
    disable_8259A_irq (0);
    enable_NMI_through_LVT0 ();
    enable_8259A_irq (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="344" endline="346">
{
    *dst = *src;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="355" endline="362">
{
    struct cpuinfo_x86 *c = &cpu_data (id);
    copy_cpuinfo_x86 (c, & boot_cpu_data);
    c->cpu_index = id;
    if (id != 0)
        identify_secondary_cpu (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="366" endline="427">
{
    int i;
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    cpumask_set_cpu (cpu, cpu_sibling_setup_mask);
    if (smp_num_siblings > 1) {

        for_each_cpu (i, cpu_sibling_setup_mask) {
            struct cpuinfo_x86 *o = &cpu_data (i);
            if (c->phys_proc_id == o->phys_proc_id && c->cpu_core_id == o->cpu_core_id) {
                cpumask_set_cpu (i, cpu_sibling_mask (cpu));
                cpumask_set_cpu (cpu, cpu_sibling_mask (i));
                cpumask_set_cpu (i, cpu_core_mask (cpu));
                cpumask_set_cpu (cpu, cpu_core_mask (i));
                cpumask_set_cpu (i, c -> llc_shared_map);
                cpumask_set_cpu (cpu, o -> llc_shared_map);
            }
        }

    }
    else {
        cpumask_set_cpu (cpu, cpu_sibling_mask (cpu));
    }
    cpumask_set_cpu (cpu, c -> llc_shared_map);
    if (current_cpu_data.x86_max_cores == 1) {
        cpumask_copy (cpu_core_mask (cpu), cpu_sibling_mask (cpu));
        c->booted_cores = 1;
        return;
    }

    for_each_cpu (i, cpu_sibling_setup_mask) {
        if (per_cpu (cpu_llc_id, cpu) != BAD_APICID && per_cpu (cpu_llc_id, cpu) == per_cpu (cpu_llc_id, i)) {
            cpumask_set_cpu (i, c -> llc_shared_map);
            cpumask_set_cpu (cpu, cpu_data (i).llc_shared_map);
        }
        if (c->phys_proc_id == cpu_data (i).phys_proc_id) {
            cpumask_set_cpu (i, cpu_core_mask (cpu));
            cpumask_set_cpu (cpu, cpu_core_mask (i));
            if (cpumask_weight (cpu_sibling_mask (cpu)) == 1) {
                if (cpumask_first (cpu_sibling_mask (i)) == i)
                    c->booted_cores++;
                if (i != cpu)
                    cpu_data (i).booted_cores++;
            }
            else if (i != cpu && !c->booted_cores)
                c->booted_cores = cpu_data (i).booted_cores;
        }
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="372" endline="386">
{

    for_each_cpu (i, cpu_sibling_setup_mask) {
        struct cpuinfo_x86 *o = &cpu_data (i);
        if (c->phys_proc_id == o->phys_proc_id && c->cpu_core_id == o->cpu_core_id) {
            cpumask_set_cpu (i, cpu_sibling_mask (cpu));
            cpumask_set_cpu (cpu, cpu_sibling_mask (i));
            cpumask_set_cpu (i, cpu_core_mask (cpu));
            cpumask_set_cpu (cpu, cpu_core_mask (i));
            cpumask_set_cpu (i, c -> llc_shared_map);
            cpumask_set_cpu (cpu, o -> llc_shared_map);
        }
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="373" endline="385">
{
    struct cpuinfo_x86 *o = &cpu_data (i);
    if (c->phys_proc_id == o->phys_proc_id && c->cpu_core_id == o->cpu_core_id) {
        cpumask_set_cpu (i, cpu_sibling_mask (cpu));
        cpumask_set_cpu (cpu, cpu_sibling_mask (i));
        cpumask_set_cpu (i, cpu_core_mask (cpu));
        cpumask_set_cpu (cpu, cpu_core_mask (i));
        cpumask_set_cpu (i, c -> llc_shared_map);
        cpumask_set_cpu (cpu, o -> llc_shared_map);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="377" endline="384">
{
    cpumask_set_cpu (i, cpu_sibling_mask (cpu));
    cpumask_set_cpu (cpu, cpu_sibling_mask (i));
    cpumask_set_cpu (i, cpu_core_mask (cpu));
    cpumask_set_cpu (cpu, cpu_core_mask (i));
    cpumask_set_cpu (i, c -> llc_shared_map);
    cpumask_set_cpu (cpu, o -> llc_shared_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="386" endline="388">
{
    cpumask_set_cpu (cpu, cpu_sibling_mask (cpu));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="392" endline="396">
{
    cpumask_copy (cpu_core_mask (cpu), cpu_sibling_mask (cpu));
    c->booted_cores = 1;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="398" endline="426">
{
    if (per_cpu (cpu_llc_id, cpu) != BAD_APICID && per_cpu (cpu_llc_id, cpu) == per_cpu (cpu_llc_id, i)) {
        cpumask_set_cpu (i, c -> llc_shared_map);
        cpumask_set_cpu (cpu, cpu_data (i).llc_shared_map);
    }
    if (c->phys_proc_id == cpu_data (i).phys_proc_id) {
        cpumask_set_cpu (i, cpu_core_mask (cpu));
        cpumask_set_cpu (cpu, cpu_core_mask (i));
        if (cpumask_weight (cpu_sibling_mask (cpu)) == 1) {
            if (cpumask_first (cpu_sibling_mask (i)) == i)
                c->booted_cores++;
            if (i != cpu)
                cpu_data (i).booted_cores++;
        }
        else if (i != cpu && !c->booted_cores)
            c->booted_cores = cpu_data (i).booted_cores;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="400" endline="403">
{
    cpumask_set_cpu (i, c -> llc_shared_map);
    cpumask_set_cpu (cpu, cpu_data (i).llc_shared_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="404" endline="425">
{
    cpumask_set_cpu (i, cpu_core_mask (cpu));
    cpumask_set_cpu (cpu, cpu_core_mask (i));
    if (cpumask_weight (cpu_sibling_mask (cpu)) == 1) {
        if (cpumask_first (cpu_sibling_mask (i)) == i)
            c->booted_cores++;
        if (i != cpu)
            cpu_data (i).booted_cores++;
    }
    else if (i != cpu && !c->booted_cores)
        c->booted_cores = cpu_data (i).booted_cores;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="410" endline="423">
{
    if (cpumask_first (cpu_sibling_mask (i)) == i)
        c->booted_cores++;
    if (i != cpu)
        cpu_data (i).booted_cores++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="431" endline="441">
{
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    if (sched_mc_power_savings || sched_smt_power_savings)
        return cpu_core_mask (cpu);
    else
        return c->llc_shared_map;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="444" endline="461">
{
    int cpu;
    unsigned long bogosum = 0;
    pr_debug ("Before bogomips.\n");
    for_each_possible_cpu (cpu)
    if (cpumask_test_cpu (cpu, cpu_callout_mask))
        bogosum += cpu_data (cpu).loops_per_jiffy;
    printk (KERN_INFO "Total of %d processors activated (%lu.%02lu BogoMIPS).\n", num_online_cpus (), bogosum / (500000 / HZ), (bogosum / (5000 / HZ)) % 100);
    pr_debug ("Before bogocount - setting activated=1.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="464" endline="500">
{
    unsigned i, regs [] = {APIC_ID >> 4, APIC_LVR >> 4, APIC_SPIV >> 4};
    char *names [] = {"ID", "VERSION", "SPIV"};
    int timeout;
    u32 status;
    printk (KERN_INFO "Inquiring remote APIC 0x%x...\n", apicid);
    for (i = 0; i < ARRAY_SIZE (regs); i++) {
        printk (KERN_INFO "... APIC 0x%x %s: ", apicid, names [i]);
        status = safe_apic_wait_icr_idle ();
        if (status)
            printk (KERN_CONT "a previous APIC delivery may have failed\n");
        apic_icr_write (APIC_DM_REMRD | regs [i], apicid);
        timeout = 0;
        do {
            udelay (100);
            status = apic_read (APIC_ICR) & APIC_ICR_RR_MASK;
        }
        while (status == APIC_ICR_RR_INPROG && timeout++ < 1000);
        switch (status) {
        case APIC_ICR_RR_VALID :
            status = apic_read (APIC_RRR);
            printk (KERN_CONT "%08x\n", status);
            break;
        default :
            printk (KERN_CONT "failed\n");
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="472" endline="499">
{
    printk (KERN_INFO "... APIC 0x%x %s: ", apicid, names [i]);
    status = safe_apic_wait_icr_idle ();
    if (status)
        printk (KERN_CONT "a previous APIC delivery may have failed\n");
    apic_icr_write (APIC_DM_REMRD | regs [i], apicid);
    timeout = 0;
    do {
        udelay (100);
        status = apic_read (APIC_ICR) & APIC_ICR_RR_MASK;
    }
    while (status == APIC_ICR_RR_INPROG && timeout++ < 1000);
    switch (status) {
    case APIC_ICR_RR_VALID :
        status = apic_read (APIC_RRR);
        printk (KERN_CONT "%08x\n", status);
        break;
    default :
        printk (KERN_CONT "failed\n");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="486" endline="489">
{
    udelay (100);
    status = apic_read (APIC_ICR) & APIC_ICR_RR_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="491" endline="498">
{
case APIC_ICR_RR_VALID :
    status = apic_read (APIC_RRR);
    printk (KERN_CONT "%08x\n", status);
    break;
default :
    printk (KERN_CONT "failed\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="509" endline="539">
{
    unsigned long send_status, accept_status = 0;
    int maxlvt;
    apic_icr_write (APIC_DM_NMI | apic -> dest_logical, logical_apicid);
    pr_debug ("Waiting for send to finish...\n");
    send_status = safe_apic_wait_icr_idle ();
    udelay (200);
    if (APIC_INTEGRATED (apic_version[boot_cpu_physical_apicid])) {
        maxlvt = lapic_get_maxlvt ();
        if (maxlvt > 3)
            apic_write (APIC_ESR, 0);
        accept_status = (apic_read (APIC_ESR) & 0xEF);
    }
    pr_debug ("NMI sent.\n");
    if (send_status)
        printk (KERN_ERR "APIC never delivered???\n");
    if (accept_status)
        printk (KERN_ERR "APIC delivery error (%lx).\n", accept_status);
    return (send_status | accept_status);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="525" endline="530">
{
    maxlvt = lapic_get_maxlvt ();
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    accept_status = (apic_read (APIC_ESR) & 0xEF);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="543" endline="654">
{
    unsigned long send_status, accept_status = 0;
    int maxlvt, num_starts, j;
    maxlvt = lapic_get_maxlvt ();
    if (APIC_INTEGRATED (apic_version[phys_apicid])) {
        if (maxlvt > 3)
            apic_write (APIC_ESR, 0);
        apic_read (APIC_ESR);
    }
    pr_debug ("Asserting INIT.\n");
    apic_icr_write (APIC_INT_LEVELTRIG | APIC_INT_ASSERT | APIC_DM_INIT, phys_apicid);
    pr_debug ("Waiting for send to finish...\n");
    send_status = safe_apic_wait_icr_idle ();
    mdelay (10);
    pr_debug ("Deasserting INIT.\n");
    apic_icr_write (APIC_INT_LEVELTRIG | APIC_DM_INIT, phys_apicid);
    pr_debug ("Waiting for send to finish...\n");
    send_status = safe_apic_wait_icr_idle ();
    mb ();
    atomic_set (& init_deasserted, 1);
    if (APIC_INTEGRATED (apic_version[phys_apicid]))
        num_starts = 2;
    else
        num_starts = 0;
    startup_ipi_hook (phys_apicid, (unsigned long) start_secondary, (unsigned long) stack_start.sp);
    pr_debug ("#startup loops: %d.\n", num_starts);
    for (j = 1; j <= num_starts; j++) {
        pr_debug ("Sending STARTUP #%d.\n", j);
        if (maxlvt > 3)
            apic_write (APIC_ESR, 0);
        apic_read (APIC_ESR);
        pr_debug ("After apic_write.\n");
        apic_icr_write (APIC_DM_STARTUP | (start_eip >> 12), phys_apicid);
        udelay (300);
        pr_debug ("Startup point 1.\n");
        pr_debug ("Waiting for send to finish...\n");
        send_status = safe_apic_wait_icr_idle ();
        udelay (200);
        if (maxlvt > 3)
            apic_write (APIC_ESR, 0);
        accept_status = (apic_read (APIC_ESR) & 0xEF);
        if (send_status || accept_status)
            break;
    }
    pr_debug ("After Startup.\n");
    if (send_status)
        printk (KERN_ERR "APIC never delivered???\n");
    if (accept_status)
        printk (KERN_ERR "APIC delivery error (%lx).\n", accept_status);
    return (send_status | accept_status);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="552" endline="556">
{
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    apic_read (APIC_ESR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="609" endline="645">
{
    pr_debug ("Sending STARTUP #%d.\n", j);
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    apic_read (APIC_ESR);
    pr_debug ("After apic_write.\n");
    apic_icr_write (APIC_DM_STARTUP | (start_eip >> 12), phys_apicid);
    udelay (300);
    pr_debug ("Startup point 1.\n");
    pr_debug ("Waiting for send to finish...\n");
    send_status = safe_apic_wait_icr_idle ();
    udelay (200);
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    accept_status = (apic_read (APIC_ESR) & 0xEF);
    if (send_status || accept_status)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="664" endline="670">
{
    struct create_idle *c_idle = container_of (work, struct create_idle, work);
    c_idle->idle = fork_idle (c_idle->cpu);
    complete (& c_idle -> done);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="679" endline="833">
{
    unsigned long boot_error = 0;
    unsigned long start_ip;
    int timeout;
    struct create_idle c_idle = {
        .cpu = cpu,
        .done = COMPLETION_INITIALIZER_ONSTACK (c_idle.done),
    };
    INIT_WORK (& c_idle.work, do_fork_idle);
    alternatives_smp_switch (1);
    c_idle.idle = get_idle_for_cpu (cpu);
    if (c_idle.idle) {
        c_idle.idle->thread.sp = (unsigned long) (((struct pt_regs *) (THREAD_SIZE + task_stack_page (c_idle.idle))) - 1);
        init_idle (c_idle.idle, cpu);
        goto do_rest;
    }
    if (!keventd_up () || current_is_keventd ())
        c_idle.work.func (&c_idle.work);
    else {
        schedule_work (& c_idle.work);
        wait_for_completion (& c_idle.done);
    }
    if (IS_ERR (c_idle.idle)) {
        printk ("failed fork for CPU %d\n", cpu);
        return PTR_ERR (c_idle.idle);
    }
    set_idle_for_cpu (cpu, c_idle.idle);
do_rest :
    per_cpu (current_task, cpu) = c_idle.idle;
    clear_tsk_thread_flag (c_idle.idle, TIF_FORK);
    initial_gs = per_cpu_offset (cpu);
    per_cpu (kernel_stack, cpu) = (unsigned long) task_stack_page (c_idle.idle) - KERNEL_STACK_OFFSET + THREAD_SIZE;
    early_gdt_descr.address = (unsigned long) get_cpu_gdt_table (cpu);
    initial_code = (unsigned long) start_secondary;
    stack_start.sp = (void *) c_idle.idle->thread.sp;
    start_ip = setup_trampoline ();
    printk (KERN_INFO "Booting processor %d APIC 0x%x ip 0x%lx\n", cpu, apicid, start_ip);
    atomic_set (& init_deasserted, 0);
    if (get_uv_system_type () != UV_NON_UNIQUE_APIC) {
        pr_debug ("Setting warm reset code and vector.\n");
        smpboot_setup_warm_reset_vector (start_ip);
        if (APIC_INTEGRATED (apic_version[boot_cpu_physical_apicid])) {
            apic_write (APIC_ESR, 0);
            apic_read (APIC_ESR);
        }
    }
    if (apic->wakeup_secondary_cpu)
        boot_error = apic->wakeup_secondary_cpu (apicid, start_ip);
    else
        boot_error = wakeup_secondary_cpu_via_init (apicid, start_ip);
    if (!boot_error) {
        pr_debug ("Before Callout %d.\n", cpu);
        cpumask_set_cpu (cpu, cpu_callout_mask);
        pr_debug ("After Callout %d.\n", cpu);
        for (timeout = 0; timeout < 50000; timeout++) {
            if (cpumask_test_cpu (cpu, cpu_callin_mask))
                break;
            udelay (100);
        }
        if (cpumask_test_cpu (cpu, cpu_callin_mask)) {
            pr_debug ("OK.\n");
            printk (KERN_INFO "CPU%d: ", cpu);
            print_cpu_info (& cpu_data (cpu));
            pr_debug ("CPU has booted.\n");
        }
        else {
            boot_error = 1;
            if (*((volatile unsigned char *) trampoline_base) == 0xA5)
                printk (KERN_ERR "Stuck ??\n");
            else
                printk (KERN_ERR "Not responding.\n");
            if (apic->inquire_remote_apic)
                apic->inquire_remote_apic (apicid);
        }
    }
    if (boot_error) {
        numa_remove_cpu (cpu);
        cpumask_clear_cpu (cpu, cpu_callout_mask);
        cpumask_clear_cpu (cpu, cpu_initialized_mask);
        set_cpu_present (cpu, false);
        per_cpu (x86_cpu_to_apicid, cpu) = BAD_APICID;
    }
    *((volatile unsigned long *) trampoline_base) = 0;
    if (get_uv_system_type () != UV_NON_UNIQUE_APIC) {
        smpboot_restore_warm_reset_vector ();
    }
    return boot_error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="698" endline="703">
{
    c_idle.idle->thread.sp = (unsigned long) (((struct pt_regs *) (THREAD_SIZE + task_stack_page (c_idle.idle))) - 1);
    init_idle (c_idle.idle, cpu);
    goto do_rest;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="707" endline="710">
{
    schedule_work (& c_idle.work);
    wait_for_completion (& c_idle.done);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="712" endline="715">
{
    printk ("failed fork for CPU %d\n", cpu);
    return PTR_ERR (c_idle.idle);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="748" endline="760">
{
    pr_debug ("Setting warm reset code and vector.\n");
    smpboot_setup_warm_reset_vector (start_ip);
    if (APIC_INTEGRATED (apic_version[boot_cpu_physical_apicid])) {
        apic_write (APIC_ESR, 0);
        apic_read (APIC_ESR);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="756" endline="759">
{
    apic_write (APIC_ESR, 0);
    apic_read (APIC_ESR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="771" endline="806">
{
    pr_debug ("Before Callout %d.\n", cpu);
    cpumask_set_cpu (cpu, cpu_callout_mask);
    pr_debug ("After Callout %d.\n", cpu);
    for (timeout = 0; timeout < 50000; timeout++) {
        if (cpumask_test_cpu (cpu, cpu_callin_mask))
            break;
        udelay (100);
    }
    if (cpumask_test_cpu (cpu, cpu_callin_mask)) {
        pr_debug ("OK.\n");
        printk (KERN_INFO "CPU%d: ", cpu);
        print_cpu_info (& cpu_data (cpu));
        pr_debug ("CPU has booted.\n");
    }
    else {
        boot_error = 1;
        if (*((volatile unsigned char *) trampoline_base) == 0xA5)
            printk (KERN_ERR "Stuck ??\n");
        else
            printk (KERN_ERR "Not responding.\n");
        if (apic->inquire_remote_apic)
            apic->inquire_remote_apic (apicid);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="782" endline="786">
{
    if (cpumask_test_cpu (cpu, cpu_callin_mask))
        break;
    udelay (100);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="788" endline="794">
{
    pr_debug ("OK.\n");
    printk (KERN_INFO "CPU%d: ", cpu);
    print_cpu_info (& cpu_data (cpu));
    pr_debug ("CPU has booted.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="794" endline="805">
{
    boot_error = 1;
    if (*((volatile unsigned char *) trampoline_base) == 0xA5)
        printk (KERN_ERR "Stuck ??\n");
    else
        printk (KERN_ERR "Not responding.\n");
    if (apic->inquire_remote_apic)
        apic->inquire_remote_apic (apicid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="808" endline="820">
{
    numa_remove_cpu (cpu);
    cpumask_clear_cpu (cpu, cpu_callout_mask);
    cpumask_clear_cpu (cpu, cpu_initialized_mask);
    set_cpu_present (cpu, false);
    per_cpu (x86_cpu_to_apicid, cpu) = BAD_APICID;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="825" endline="830">
{
    smpboot_restore_warm_reset_vector ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="836" endline="900">
{
    int apicid = apic->cpu_present_to_apicid (cpu);
    unsigned long flags;
    int err;
    WARN_ON (irqs_disabled ());
    pr_debug ("++++++++++++++++++++=_---CPU UP  %u\n", cpu);
    if (apicid == BAD_APICID || apicid == boot_cpu_physical_apicid || !physid_isset (apicid, phys_cpu_present_map)) {
        printk (KERN_ERR "%s: bad cpu %d\n", __func__, cpu);
        return -EINVAL;
    }
    if (cpumask_test_cpu (cpu, cpu_callin_mask)) {
        pr_debug ("do_boot_cpu %d Already started\n", cpu);
        return -ENOSYS;
    }
    mtrr_save_state ();
    per_cpu (cpu_state, cpu) = CPU_UP_PREPARE;
    err = do_boot_cpu (apicid, cpu);
    if (err) {
        pr_debug ("do_boot_cpu failed %d\n", err);
        return -EIO;
    }
    local_irq_save (flags);
    check_tsc_sync_source (cpu);
    local_irq_restore (flags);
    while (!cpu_online (cpu)) {
        cpu_relax ();
        touch_nmi_watchdog ();
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="846" endline="849">
{
    printk (KERN_ERR "%s: bad cpu %d\n", __func__, cpu);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="854" endline="857">
{
    pr_debug ("do_boot_cpu %d Already started\n", cpu);
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="881" endline="884">
{
    pr_debug ("do_boot_cpu failed %d\n", err);
    return -EIO;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="894" endline="897">
{
    cpu_relax ();
    touch_nmi_watchdog ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="908" endline="920">
{
    init_cpu_present (cpumask_of (0));
    init_cpu_possible (cpumask_of (0));
    smpboot_clear_io_apic_irqs ();
    if (smp_found_config)
        physid_set_mask_of_physid (boot_cpu_physical_apicid, &phys_cpu_present_map);
    else
        physid_set_mask_of_physid (0, &phys_cpu_present_map);
    map_cpu_to_logical_apicid ();
    cpumask_set_cpu (0, cpu_sibling_mask (0));
    cpumask_set_cpu (0, cpu_core_mask (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="926" endline="1024">
{
    preempt_disable ();
    if (!physid_isset (hard_smp_processor_id (), phys_cpu_present_map)) {
        printk (KERN_WARNING "weird, boot CPU (#%d) not listed by the BIOS.\n", hard_smp_processor_id ());
        physid_set (hard_smp_processor_id (), phys_cpu_present_map);
    }
    if (!smp_found_config && !acpi_lapic) {
        preempt_enable ();
        printk (KERN_NOTICE "SMP motherboard not detected.\n");
        disable_smp ();
        if (APIC_init_uniprocessor ())
            printk (KERN_NOTICE "Local APIC not detected." " Using dummy APIC emulation.\n");
        return -1;
    }
    if (!apic->check_phys_apicid_present (boot_cpu_physical_apicid)) {
        printk (KERN_NOTICE "weird, boot CPU (#%d) not listed by the BIOS.\n", boot_cpu_physical_apicid);
        physid_set (hard_smp_processor_id (), phys_cpu_present_map);
    }
    preempt_enable ();
    if (APIC_INTEGRATED (apic_version[boot_cpu_physical_apicid]) && !cpu_has_apic) {
        if (!disable_apic) {
            pr_err ("BIOS bug, local APIC #%d not detected!...\n", boot_cpu_physical_apicid);
            pr_err ("... forcing use of dummy APIC emulation." "(tell your hw vendor)\n");
        }
        smpboot_clear_io_apic ();
        arch_disable_smp_support ();
        return -1;
    }
    verify_local_APIC ();
    if (!max_cpus) {
        printk (KERN_INFO "SMP mode deactivated.\n");
        smpboot_clear_io_apic ();
        localise_nmi_watchdog ();
        connect_bsp_APIC ();
        setup_local_APIC ();
        end_local_APIC_setup ();
        return -1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="956" endline="962">
{
    printk (KERN_WARNING "weird, boot CPU (#%d) not listed by the BIOS.\n", hard_smp_processor_id ());
    physid_set (hard_smp_processor_id (), phys_cpu_present_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="968" endline="976">
{
    preempt_enable ();
    printk (KERN_NOTICE "SMP motherboard not detected.\n");
    disable_smp ();
    if (APIC_init_uniprocessor ())
        printk (KERN_NOTICE "Local APIC not detected." " Using dummy APIC emulation.\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="982" endline="987">
{
    printk (KERN_NOTICE "weird, boot CPU (#%d) not listed by the BIOS.\n", boot_cpu_physical_apicid);
    physid_set (hard_smp_processor_id (), phys_cpu_present_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="994" endline="1004">
{
    if (!disable_apic) {
        pr_err ("BIOS bug, local APIC #%d not detected!...\n", boot_cpu_physical_apicid);
        pr_err ("... forcing use of dummy APIC emulation." "(tell your hw vendor)\n");
    }
    smpboot_clear_io_apic ();
    arch_disable_smp_support ();
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="995" endline="1000">
{
    pr_err ("BIOS bug, local APIC #%d not detected!...\n", boot_cpu_physical_apicid);
    pr_err ("... forcing use of dummy APIC emulation." "(tell your hw vendor)\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1011" endline="1021">
{
    printk (KERN_INFO "SMP mode deactivated.\n");
    smpboot_clear_io_apic ();
    localise_nmi_watchdog ();
    connect_bsp_APIC ();
    setup_local_APIC ();
    end_local_APIC_setup ();
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1027" endline="1036">
{
    int i;
    struct cpuinfo_x86 *c;

    for_each_possible_cpu (i) {
        c = &cpu_data (i);
        c->cpu_index = nr_cpu_ids;
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1031" endline="1035">
{
    c = &cpu_data (i);
    c->cpu_index = nr_cpu_ids;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1043" endline="1121">
{
    unsigned int i;
    preempt_disable ();
    smp_cpu_index_default ();
    current_cpu_data = boot_cpu_data;
    cpumask_copy (cpu_callin_mask, cpumask_of (0));
    mb ();
    smp_store_cpu_info (0);
    current_thread_info ()->cpu = 0;

    for_each_possible_cpu (i) {
        alloc_cpumask_var (& per_cpu (cpu_sibling_map, i), GFP_KERNEL);
        alloc_cpumask_var (& per_cpu (cpu_core_map, i), GFP_KERNEL);
        alloc_cpumask_var (& cpu_data (i).llc_shared_map, GFP_KERNEL);
        cpumask_clear (per_cpu (cpu_core_map, i));
        cpumask_clear (per_cpu (cpu_sibling_map, i));
        cpumask_clear (cpu_data (i).llc_shared_map);
    }

    set_cpu_sibling_map (0);
    enable_IR_x2apic ();
    if (smp_sanity_check (max_cpus) < 0) {
        printk (KERN_INFO "SMP disabled\n");
        disable_smp ();
        goto out;
    }
    preempt_disable ();
    if (read_apic_id () != boot_cpu_physical_apicid) {
        panic ("Boot APIC ID in local APIC unexpected (%d vs %d)", read_apic_id (), boot_cpu_physical_apicid);
    }
    preempt_enable ();
    connect_bsp_APIC ();
    setup_local_APIC ();
    if (!skip_ioapic_setup && nr_ioapics)
        enable_IO_APIC ();
    end_local_APIC_setup ();
    map_cpu_to_logical_apicid ();
    if (apic->setup_portio_remap)
        apic->setup_portio_remap ();
    smpboot_setup_io_apic ();
    printk (KERN_INFO "CPU%d: ", 0);
    print_cpu_info (& cpu_data (0));
    setup_boot_clock ();
    if (is_uv_system ())
        uv_system_init ();
out :
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1059" endline="1066">
{
    alloc_cpumask_var (& per_cpu (cpu_sibling_map, i), GFP_KERNEL);
    alloc_cpumask_var (& per_cpu (cpu_core_map, i), GFP_KERNEL);
    alloc_cpumask_var (& cpu_data (i).llc_shared_map, GFP_KERNEL);
    cpumask_clear (per_cpu (cpu_core_map, i));
    cpumask_clear (per_cpu (cpu_sibling_map, i));
    cpumask_clear (cpu_data (i).llc_shared_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1074" endline="1078">
{
    printk (KERN_INFO "SMP disabled\n");
    disable_smp ();
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1081" endline="1085">
{
    panic ("Boot APIC ID in local APIC unexpected (%d vs %d)", read_apic_id (), boot_cpu_physical_apicid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1126" endline="1132">
{
    int me = smp_processor_id ();
    switch_to_new_gdt (me);
    cpumask_set_cpu (me, cpu_callout_mask);
    per_cpu (cpu_state, me) = CPU_ONLINE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1135" endline="1143">
{
    pr_debug ("Boot done.\n");
    impress_friends ();
    check_nmi_watchdog ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1147" endline="1150">
{
    get_option (& str, & setup_possible_cpus);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1172" endline="1200">
{
    int i, possible;
    if (!num_processors)
        num_processors = 1;
    if (setup_possible_cpus == -1)
        possible = num_processors + disabled_cpus;
    else
        possible = setup_possible_cpus;
    total_cpus = max_t (int, possible, num_processors +disabled_cpus);
    if (possible > CONFIG_NR_CPUS) {
        printk (KERN_WARNING "%d Processors exceeds NR_CPUS limit of %d\n", possible, CONFIG_NR_CPUS);
        possible = CONFIG_NR_CPUS;
    }
    printk (KERN_INFO "SMP: Allowing %d CPUs, %d hotplug CPUs\n", possible, max_t (int, possible - num_processors, 0));
    for (i = 0; i < possible; i++)
        set_cpu_possible (i, true);
    nr_cpu_ids = possible;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1186" endline="1191">
{
    printk (KERN_WARNING "%d Processors exceeds NR_CPUS limit of %d\n", possible, CONFIG_NR_CPUS);
    possible = CONFIG_NR_CPUS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1325" endline="1327">
{
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1330" endline="1333">
{
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/smpboot.c.ifdefed" startline="1336" endline="1338">
{
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="46" endline="63">
{
    struct module *mod = THIS_MODULE;
    struct exception_table_entry *extable;
    if (mod->num_exentries > 1) {
        printk (KERN_ERR "test_nx: too many exception table entries!\n");
        printk (KERN_ERR "test_nx: test results are not reliable.\n");
        return;
    }
    extable = (struct exception_table_entry *) mod->extable;
    extable[0].insn = (unsigned long) new;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="56" endline="60">
{
    printk (KERN_ERR "test_nx: too many exception table entries!\n");
    printk (KERN_ERR "test_nx: test results are not reliable.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="81" endline="105">
{
    unsigned long result;
    fudze_exception_table (& foo_label, address);
    result = 1;
    asm volatile ("foo_label:\n"
        "0:	call *%[fake_code]\n"
        "1:\n"
        ".section .fixup,\"ax\"\n"
        "2:	mov %[zero], %[rslt]\n"
        "	ret\n"
        ".previous\n"
        _ASM_EXTABLE (0b, 2b)
        : [rslt] "=r" (result)
        : [fake_code] "r" (address), [zero] "r" (0UL), "0" (result)
    ) fudze_exception_table (address, & foo_label);
    if (result)
        return -ENODEV;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="110" endline="165">
{
    int ret = 0;
    char stackcode [] = {0xC3, 0x90, 0};
    char *heap;
    test_data = 0xC3;
    printk (KERN_INFO "Testing NX protection\n");
    if (test_address (&stackcode)) {
        printk (KERN_ERR "test_nx: stack was executable\n");
        ret = -ENODEV;
    }
    heap = kmalloc (64, GFP_KERNEL);
    if (!heap)
        return -ENOMEM;
    heap[0] = 0xC3;
    if (test_address (heap)) {
        printk (KERN_ERR "test_nx: heap was executable\n");
        ret = -ENODEV;
    }
    kfree (heap);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="121" endline="124">
{
    printk (KERN_ERR "test_nx: stack was executable\n");
    ret = -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="133" endline="136">
{
    printk (KERN_ERR "test_nx: heap was executable\n");
    ret = -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/test_nx.c.ifdefed" startline="168" endline="169">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="27" endline="57">
{
    char c;
    int i, k, j;
    while ((c = *str++) != '\0' && n-- > 0) {
        if (current_ypos >= max_ypos) {
            for (k = 1, j = 0; k < max_ypos; k++, j++) {
                for (i = 0; i < max_xpos; i++) {
                    writew (readw (VGABASE + 2 * (max_xpos * k + i)), VGABASE + 2 * (max_xpos * j + i));
                }
            }
            for (i = 0; i < max_xpos; i++)
                writew (0x720, VGABASE +2 * (max_xpos * j + i));
            current_ypos = max_ypos - 1;
        }
        if (c == '\n') {
            current_xpos = 0;
            current_ypos++;
        }
        else if (c != '\r') {
            writew (((0x7 << 8) | (unsigned short) c), VGABASE + 2 * (max_xpos * current_ypos + current_xpos ++));
            if (current_xpos >= max_xpos) {
                current_xpos = 0;
                current_ypos++;
            }
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="31" endline="56">
{
    if (current_ypos >= max_ypos) {
        for (k = 1, j = 0; k < max_ypos; k++, j++) {
            for (i = 0; i < max_xpos; i++) {
                writew (readw (VGABASE + 2 * (max_xpos * k + i)), VGABASE + 2 * (max_xpos * j + i));
            }
        }
        for (i = 0; i < max_xpos; i++)
            writew (0x720, VGABASE +2 * (max_xpos * j + i));
        current_ypos = max_ypos - 1;
    }
    if (c == '\n') {
        current_xpos = 0;
        current_ypos++;
    }
    else if (c != '\r') {
        writew (((0x7 << 8) | (unsigned short) c), VGABASE + 2 * (max_xpos * current_ypos + current_xpos ++));
        if (current_xpos >= max_xpos) {
            current_xpos = 0;
            current_ypos++;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="32" endline="43">
{
    for (k = 1, j = 0; k < max_ypos; k++, j++) {
        for (i = 0; i < max_xpos; i++) {
            writew (readw (VGABASE + 2 * (max_xpos * k + i)), VGABASE + 2 * (max_xpos * j + i));
        }
    }
    for (i = 0; i < max_xpos; i++)
        writew (0x720, VGABASE +2 * (max_xpos * j + i));
    current_ypos = max_ypos - 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="34" endline="39">
{
    for (i = 0; i < max_xpos; i++) {
        writew (readw (VGABASE + 2 * (max_xpos * k + i)), VGABASE + 2 * (max_xpos * j + i));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="35" endline="38">
{
    writew (readw (VGABASE + 2 * (max_xpos * k + i)), VGABASE + 2 * (max_xpos * j + i));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="44" endline="47">
{
    current_xpos = 0;
    current_ypos++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="47" endline="55">
{
    writew (((0x7 << 8) | (unsigned short) c), VGABASE + 2 * (max_xpos * current_ypos + current_xpos ++));
    if (current_xpos >= max_xpos) {
        current_xpos = 0;
        current_ypos++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="51" endline="54">
{
    current_xpos = 0;
    current_ypos++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="87" endline="94">
{
    unsigned timeout = 0xffff;
    while ((inb (early_serial_base +LSR) & XMTRDY) == 0 && --timeout)
        cpu_relax ();
    outb (ch, early_serial_base + TXR);
    return timeout ? 0 : -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="97" endline="104">
{
    while (*s && n-- > 0) {
        if (*s == '\n')
            early_serial_putc ('\r');
        early_serial_putc (*s);
        s++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="98" endline="103">
{
    if (*s == '\n')
        early_serial_putc ('\r');
    early_serial_putc (*s);
    s++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="109" endline="154">
{
    unsigned char c;
    unsigned divisor;
    unsigned baud = DEFAULT_BAUD;
    char *e;
    if (*s == ',')
        ++s;
    if (*s) {
        unsigned port;
        if (!strncmp (s, "0x", 2)) {
            early_serial_base = simple_strtoul (s, &e, 16);
        }
        else {
            static const int __initconst bases [] = {0x3f8, 0x2f8};
            if (!strncmp (s, "ttyS", 4))
                s += 4;
            port = simple_strtoul (s, &e, 10);
            if (port > 1 || s == e)
                port = 0;
            early_serial_base = bases[port];
        }
        s += strcspn (s, ",");
        if (*s == ',')
            s++;
    }
    outb (0x3, early_serial_base + LCR);
    outb (0, early_serial_base + IER);
    outb (0, early_serial_base + FCR);
    outb (0x3, early_serial_base + MCR);
    if (*s) {
        baud = simple_strtoul (s, &e, 0);
        if (baud == 0 || s == e)
            baud = DEFAULT_BAUD;
    }
    divisor = 115200 / baud;
    c = inb (early_serial_base +LCR);
    outb (c | DLAB, early_serial_base + LCR);
    outb (divisor & 0xff, early_serial_base + DLL);
    outb ((divisor >> 8) & 0xff, early_serial_base + DLH);
    outb (c & ~ DLAB, early_serial_base + LCR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="118" endline="135">
{
    unsigned port;
    if (!strncmp (s, "0x", 2)) {
        early_serial_base = simple_strtoul (s, &e, 16);
    }
    else {
        static const int __initconst bases [] = {0x3f8, 0x2f8};
        if (!strncmp (s, "ttyS", 4))
            s += 4;
        port = simple_strtoul (s, &e, 10);
        if (port > 1 || s == e)
            port = 0;
        early_serial_base = bases[port];
    }
    s += strcspn (s, ",");
    if (*s == ',')
        s++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="120" endline="122">
{
    early_serial_base = simple_strtoul (s, &e, 16);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="122" endline="131">
{
    static const int __initconst bases [] = {0x3f8, 0x2f8};
    if (!strncmp (s, "ttyS", 4))
        s += 4;
    port = simple_strtoul (s, &e, 10);
    if (port > 1 || s == e)
        port = 0;
    early_serial_base = bases[port];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="142" endline="146">
{
    baud = simple_strtoul (s, &e, 0);
    if (baud == 0 || s == e)
        baud = DEFAULT_BAUD;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="883" endline="892">
{
    char buf [512];
    int n;
    va_list ap;
    va_start (ap, fmt);
    n = vscnprintf (buf, sizeof (buf), fmt, ap);
    early_console->write (early_console, buf, n);
    va_end (ap);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="896" endline="943">
{
    int keep_early;
    if (!buf)
        return 0;
    if (early_console_initialized)
        return 0;
    early_console_initialized = 1;
    keep_early = (strstr (buf, "keep") != NULL);
    if (!strncmp (buf, "serial", 6)) {
        early_serial_init (buf + 6);
        early_console = &early_serial_console;
    }
    else if (!strncmp (buf, "ttyS", 4)) {
        early_serial_init (buf);
        early_console = &early_serial_console;
    }
    else if (!strncmp (buf, "vga", 3) && boot_params.screen_info.orig_video_isVGA == 1) {
        max_xpos = boot_params.screen_info.orig_video_cols;
        max_ypos = boot_params.screen_info.orig_video_lines;
        current_ypos = boot_params.screen_info.orig_y;
        early_console = &early_vga_console;
    }
    if (keep_early)
        early_console->flags &= ~CON_BOOT;
    else
        early_console->flags |= CON_BOOT;
    register_console (early_console);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="908" endline="911">
{
    early_serial_init (buf + 6);
    early_console = &early_serial_console;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="911" endline="914">
{
    early_serial_init (buf);
    early_console = &early_serial_console;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early_printk.c.ifdefed" startline="915" endline="935">
{
    max_xpos = boot_params.screen_info.orig_video_cols;
    max_ypos = boot_params.screen_info.orig_video_lines;
    current_ypos = boot_params.screen_info.orig_y;
    early_console = &early_vga_console;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="9" endline="49">
{
    unsigned long addr, seg;
    addr = regs->ip;
    seg = regs->cs & 0xffff;
    if (v8086_mode (regs)) {
        addr = (addr & 0xffff) + (seg << 4);
        return addr;
    }
    if ((seg & SEGMENT_TI_MASK) == SEGMENT_LDT) {
        u32 *desc;
        unsigned long base;
        seg &= ~7UL;
        mutex_lock (& child -> mm -> context.lock);
        if (unlikely ((seg >> 3) >= child->mm->context.size))
            addr = -1L;
        else {
            desc = child->mm->context.ldt + seg;
            base = ((desc[0] >> 16) | ((desc[1] & 0xff) << 16) | (desc[1] & 0xff000000));
            if (!((desc[1] >> 22) & 1))
                addr &= 0xffff;
            addr += base;
        }
        mutex_unlock (& child -> mm -> context.lock);
    }
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="14" endline="17">
{
    addr = (addr & 0xffff) + (seg << 4);
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="25" endline="46">
{
    u32 *desc;
    unsigned long base;
    seg &= ~7UL;
    mutex_lock (& child -> mm -> context.lock);
    if (unlikely ((seg >> 3) >= child->mm->context.size))
        addr = -1L;
    else {
        desc = child->mm->context.ldt + seg;
        base = ((desc[0] >> 16) | ((desc[1] & 0xff) << 16) | (desc[1] & 0xff000000));
        if (!((desc[1] >> 22) & 1))
            addr &= 0xffff;
        addr += base;
    }
    mutex_unlock (& child -> mm -> context.lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="34" endline="44">
{
    desc = child->mm->context.ldt + seg;
    base = ((desc[0] >> 16) | ((desc[1] & 0xff) << 16) | (desc[1] & 0xff000000));
    if (!((desc[1] >> 22) & 1))
        addr &= 0xffff;
    addr += base;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="52" endline="100">
{
    int i, copied;
    unsigned char opcode [15];
    unsigned long addr = convert_ip_to_linear (child, regs);
    copied = access_process_vm (child, addr, opcode, sizeof (opcode), 0);
    for (i = 0; i < copied; i++) {
        switch (opcode[i]) {
        case 0x9d :
        case 0xcf :
            return 1;
        case 0x66 :
        case 0x67 :
            continue;
        case 0x26 :
        case 0x2e :
        case 0x36 :
        case 0x3e :
        case 0x64 :
        case 0x65 :
        case 0xf0 :
        case 0xf2 :
        case 0xf3 :
            continue;
        case 0x9c :
        default :
            return 0;
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="58" endline="98">
{
    switch (opcode[i]) {
    case 0x9d :
    case 0xcf :
        return 1;
    case 0x66 :
    case 0x67 :
        continue;
    case 0x26 :
    case 0x2e :
    case 0x36 :
    case 0x3e :
    case 0x64 :
    case 0x65 :
    case 0xf0 :
    case 0xf2 :
    case 0xf3 :
        continue;
    case 0x9c :
    default :
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="59" endline="97">
{
case 0x9d :
case 0xcf :
    return 1;
case 0x66 :
case 0x67 :
    continue;
case 0x26 :
case 0x2e :
case 0x36 :
case 0x3e :
case 0x64 :
case 0x65 :
case 0xf0 :
case 0xf2 :
case 0xf3 :
    continue;
case 0x9c :
default :
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="106" endline="159">
{
    struct pt_regs *regs = task_pt_regs (child);
    unsigned long oflags;
    if (unlikely (test_tsk_thread_flag (child, TIF_SINGLESTEP)))
        regs->flags |= X86_EFLAGS_TF;
    set_tsk_thread_flag (child, TIF_SINGLESTEP);
    oflags = regs->flags;
    regs->flags |= X86_EFLAGS_TF;
    if (is_setting_trap_flag (child, regs)) {
        clear_tsk_thread_flag (child, TIF_FORCED_TF);
        return 0;
    }
    if (oflags & X86_EFLAGS_TF)
        return test_tsk_thread_flag (child, TIF_FORCED_TF);
    set_tsk_thread_flag (child, TIF_FORCED_TF);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="144" endline="147">
{
    clear_tsk_thread_flag (child, TIF_FORCED_TF);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="165" endline="175">
{
    if (child->thread.debugctlmsr == val)
        return;
    child->thread.debugctlmsr = val;
    if (child != current)
        return;
    update_debugctlmsr (val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="181" endline="200">
{
    if (enable_single_step (child) && block) {
        set_tsk_thread_flag (child, TIF_DEBUGCTLMSR);
        write_debugctlmsr (child, child -> thread.debugctlmsr | DEBUGCTLMSR_BTF);
    }
    else {
        write_debugctlmsr (child, child -> thread.debugctlmsr & ~ DEBUGCTLMSR_BTF);
        if (!child->thread.debugctlmsr)
            clear_tsk_thread_flag (child, TIF_DEBUGCTLMSR);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="189" endline="193">
{
    set_tsk_thread_flag (child, TIF_DEBUGCTLMSR);
    write_debugctlmsr (child, child -> thread.debugctlmsr | DEBUGCTLMSR_BTF);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="193" endline="199">
{
    write_debugctlmsr (child, child -> thread.debugctlmsr & ~ DEBUGCTLMSR_BTF);
    if (!child->thread.debugctlmsr)
        clear_tsk_thread_flag (child, TIF_DEBUGCTLMSR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="203" endline="205">
{
    enable_step (child, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="208" endline="210">
{
    enable_step (child, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/step.c.ifdefed" startline="213" endline="229">
{
    write_debugctlmsr (child, child -> thread.debugctlmsr & ~ DEBUGCTLMSR_BTF);
    if (!child->thread.debugctlmsr)
        clear_tsk_thread_flag (child, TIF_DEBUGCTLMSR);
    clear_tsk_thread_flag (child, TIF_SINGLESTEP);
    if (test_and_clear_tsk_thread_flag (child, TIF_FORCED_TF))
        task_pt_regs (child)->flags &= ~X86_EFLAGS_TF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="69" endline="71">
{
    atomic_notifier_chain_register (& idle_notifier, n);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="75" endline="77">
{
    atomic_notifier_chain_unregister (& idle_notifier, n);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="81" endline="84">
{
    percpu_write (is_idle, 1);
    atomic_notifier_call_chain (& idle_notifier, IDLE_START, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="87" endline="91">
{
    if (x86_test_and_clear_bit_percpu (0, is_idle) == 0)
        return;
    atomic_notifier_call_chain (& idle_notifier, IDLE_END, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="95" endline="100">
{
    if (current->pid)
        return;
    __exit_idle ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="104" endline="106">
{
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="116" endline="159">
{
    current_thread_info ()->status |= TS_POLLING;
    boot_init_stack_canary ();
    while (1) {
        tick_nohz_stop_sched_tick (1);
        while (!need_resched ()) {
            rmb ();
            if (cpu_is_offline (smp_processor_id ()))
                play_dead ();
            local_irq_disable ();
            enter_idle ();
            stop_critical_timings ();
            pm_idle ();
            start_critical_timings ();
            __exit_idle ();
        }
        tick_nohz_restart_sched_tick ();
        preempt_enable_no_resched ();
        schedule ();
        preempt_disable ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="129" endline="158">
{
    tick_nohz_stop_sched_tick (1);
    while (!need_resched ()) {
        rmb ();
        if (cpu_is_offline (smp_processor_id ()))
            play_dead ();
        local_irq_disable ();
        enter_idle ();
        stop_critical_timings ();
        pm_idle ();
        start_critical_timings ();
        __exit_idle ();
    }
    tick_nohz_restart_sched_tick ();
    preempt_enable_no_resched ();
    schedule ();
    preempt_disable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="131" endline="152">
{
    rmb ();
    if (cpu_is_offline (smp_processor_id ()))
        play_dead ();
    local_irq_disable ();
    enter_idle ();
    stop_critical_timings ();
    pm_idle ();
    start_critical_timings ();
    __exit_idle ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="163" endline="228">
{
    unsigned long cr0 = 0L, cr2 = 0L, cr3 = 0L, cr4 = 0L, fs, gs, shadowgs;
    unsigned long d0, d1, d2, d3, d6, d7;
    unsigned int fsindex, gsindex;
    unsigned int ds, cs, es;
    const char *board;
    printk ("\n");
    print_modules ();
    board = dmi_get_system_info (DMI_PRODUCT_NAME);
    if (!board)
        board = "";
    printk (KERN_INFO "Pid: %d, comm: %.20s %s %s %.*s %s\n", current -> pid, current -> comm, print_tainted (), init_utsname () -> release, (int) strcspn (init_utsname () -> version, " "), init_utsname () -> version, board);
    printk (KERN_INFO "RIP: %04lx:[<%016lx>] ", regs -> cs & 0xffff, regs -> ip);
    printk_address (regs -> ip, 1);
    printk (KERN_INFO "RSP: %04lx:%016lx  EFLAGS: %08lx\n", regs -> ss, regs -> sp, regs -> flags);
    printk (KERN_INFO "RAX: %016lx RBX: %016lx RCX: %016lx\n", regs -> ax, regs -> bx, regs -> cx);
    printk (KERN_INFO "RDX: %016lx RSI: %016lx RDI: %016lx\n", regs -> dx, regs -> si, regs -> di);
    printk (KERN_INFO "RBP: %016lx R08: %016lx R09: %016lx\n", regs -> bp, regs -> r8, regs -> r9);
    printk (KERN_INFO "R10: %016lx R11: %016lx R12: %016lx\n", regs -> r10, regs -> r11, regs -> r12);
    printk (KERN_INFO "R13: %016lx R14: %016lx R15: %016lx\n", regs -> r13, regs -> r14, regs -> r15);
    asm ("movl %%ds,%0"
        : "=r" (ds)
    ) asm ("movl %%cs,%0"
        : "=r" (cs)
    ) asm ("movl %%es,%0"
        : "=r" (es)
    ) asm ("movl %%fs,%0"
        : "=r" (fsindex)
    ) asm ("movl %%gs,%0"
        : "=r" (gsindex)
    ) rdmsrl (MSR_FS_BASE, fs);
    rdmsrl (MSR_GS_BASE, gs);
    rdmsrl (MSR_KERNEL_GS_BASE, shadowgs);
    if (!all)
        return;
    cr0 = read_cr0 ();
    cr2 = read_cr2 ();
    cr3 = read_cr3 ();
    cr4 = read_cr4 ();
    printk (KERN_INFO "FS:  %016lx(%04x) GS:%016lx(%04x) knlGS:%016lx\n", fs, fsindex, gs, gsindex, shadowgs);
    printk (KERN_INFO "CS:  %04x DS: %04x ES: %04x CR0: %016lx\n", cs, ds, es, cr0);
    printk (KERN_INFO "CR2: %016lx CR3: %016lx CR4: %016lx\n", cr2, cr3, cr4);
    get_debugreg (d0, 0);
    get_debugreg (d1, 1);
    get_debugreg (d2, 2);
    printk (KERN_INFO "DR0: %016lx DR1: %016lx DR2: %016lx\n", d0, d1, d2);
    get_debugreg (d3, 3);
    get_debugreg (d6, 6);
    get_debugreg (d7, 7);
    printk (KERN_INFO "DR3: %016lx DR6: %016lx DR7: %016lx\n", d3, d6, d7);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="231" endline="235">
{
    printk (KERN_INFO "CPU %d:", smp_processor_id ());
    __show_regs (regs, 1);
    show_trace (NULL, regs, (void *) (regs + 1), regs -> bp);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="238" endline="248">
{
    if (dead_task->mm) {
        if (dead_task->mm->context.size) {
            printk ("WARNING: dead process %8s still has LDT? <%p/%d>\n", dead_task -> comm, dead_task -> mm -> context.ldt, dead_task -> mm -> context.size);
            BUG ();
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="239" endline="247">
{
    if (dead_task->mm->context.size) {
        printk ("WARNING: dead process %8s still has LDT? <%p/%d>\n", dead_task -> comm, dead_task -> mm -> context.ldt, dead_task -> mm -> context.size);
        BUG ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="240" endline="246">
{
    printk ("WARNING: dead process %8s still has LDT? <%p/%d>\n", dead_task -> comm, dead_task -> mm -> context.ldt, dead_task -> mm -> context.size);
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="251" endline="262">
{
    struct user_desc ud = {
        .base_addr = addr,
        .limit = 0xfffff,
        .seg_32bit = 1,
        .limit_in_pages = 1,
        .useable = 1,
    };
    struct desc_struct *desc = t->thread.tls_array;
    desc += tls;
    fill_ldt (desc, & ud);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="265" endline="267">
{
    return get_desc_base (&t->thread.tls_array[tls]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="274" endline="276">
{
    unlazy_fpu (tsk);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="281" endline="348">
{
    int err;
    struct pt_regs *childregs;
    struct task_struct *me = current;
    childregs = ((struct pt_regs *) (THREAD_SIZE + task_stack_page (p))) - 1;
    *childregs = *regs;
    childregs->ax = 0;
    childregs->sp = sp;
    if (sp == ~0UL)
        childregs->sp = (unsigned long) childregs;
    p->thread.sp = (unsigned long) childregs;
    p->thread.sp0 = (unsigned long) (childregs + 1);
    p->thread.usersp = me->thread.usersp;
    set_tsk_thread_flag (p, TIF_FORK);
    p->thread.fs = me->thread.fs;
    p->thread.gs = me->thread.gs;
    savesegment (gs, p -> thread.gsindex);
    savesegment (fs, p -> thread.fsindex);
    savesegment (es, p -> thread.es);
    savesegment (ds, p -> thread.ds);
    if (unlikely (test_tsk_thread_flag (me, TIF_IO_BITMAP))) {
        p->thread.io_bitmap_ptr = kmalloc (IO_BITMAP_BYTES, GFP_KERNEL);
        if (!p->thread.io_bitmap_ptr) {
            p->thread.io_bitmap_max = 0;
            return -ENOMEM;
        }
        memcpy (p -> thread.io_bitmap_ptr, me -> thread.io_bitmap_ptr, IO_BITMAP_BYTES);
        set_tsk_thread_flag (p, TIF_IO_BITMAP);
    }
    if (clone_flags & CLONE_SETTLS) {
        err = do_arch_prctl (p, ARCH_SET_FS, childregs->r8);
        if (err)
            goto out;
    }
    clear_tsk_thread_flag (p, TIF_DS_AREA_MSR);
    p->thread.ds_ctx = NULL;
    clear_tsk_thread_flag (p, TIF_DEBUGCTLMSR);
    p->thread.debugctlmsr = 0;
    err = 0;
out :
    if (err && p->thread.io_bitmap_ptr) {
        kfree (p -> thread.io_bitmap_ptr);
        p->thread.io_bitmap_max = 0;
    }
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="309" endline="318">
{
    p->thread.io_bitmap_ptr = kmalloc (IO_BITMAP_BYTES, GFP_KERNEL);
    if (!p->thread.io_bitmap_ptr) {
        p->thread.io_bitmap_max = 0;
        return -ENOMEM;
    }
    memcpy (p -> thread.io_bitmap_ptr, me -> thread.io_bitmap_ptr, IO_BITMAP_BYTES);
    set_tsk_thread_flag (p, TIF_IO_BITMAP);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="311" endline="314">
{
    p->thread.io_bitmap_max = 0;
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="323" endline="333">
{
    err = do_arch_prctl (p, ARCH_SET_FS, childregs->r8);
    if (err)
        goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="343" endline="346">
{
    kfree (p -> thread.io_bitmap_ptr);
    p->thread.io_bitmap_max = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="352" endline="368">
{
    loadsegment (fs, 0);
    loadsegment (es, 0);
    loadsegment (ds, 0);
    load_gs_index (0);
    regs->ip = new_ip;
    regs->sp = new_sp;
    percpu_write (old_rsp, new_sp);
    regs->cs = __USER_CS;
    regs->ss = __USER_DS;
    regs->flags = 0x200;
    set_fs (USER_DS);
    free_thread_xstate (current);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="383" endline="493">
{
    struct thread_struct *prev = &prev_p->thread;
    struct thread_struct *next = &next_p->thread;
    int cpu = smp_processor_id ();
    struct tss_struct *tss = &per_cpu (init_tss, cpu);
    unsigned fsindex, gsindex;
    if (next_p->fpu_counter > 5)
        prefetch (next->xstate);
    load_sp0 (tss, next);
    savesegment (es, prev -> es);
    if (unlikely (next->es | prev->es))
        loadsegment (es, next->es);
    savesegment (ds, prev -> ds);
    if (unlikely (next->ds | prev->ds))
        loadsegment (ds, next->ds);
    savesegment (fs, fsindex);
    savesegment (gs, gsindex);
    load_TLS (next, cpu);
    arch_end_context_switch (next_p);
    if (unlikely (fsindex | next->fsindex | prev->fs)) {
        loadsegment (fs, next -> fsindex);
        if (fsindex)
            prev->fs = 0;
    }
    if (next->fs)
        wrmsrl (MSR_FS_BASE, next->fs);
    prev->fsindex = fsindex;
    if (unlikely (gsindex | next->gsindex | prev->gs)) {
        load_gs_index (next -> gsindex);
        if (gsindex)
            prev->gs = 0;
    }
    if (next->gs)
        wrmsrl (MSR_KERNEL_GS_BASE, next->gs);
    prev->gsindex = gsindex;
    unlazy_fpu (prev_p);
    prev->usersp = percpu_read (old_rsp);
    percpu_write (old_rsp, next -> usersp);
    percpu_write (current_task, next_p);
    percpu_write (kernel_stack, (unsigned long) task_stack_page (next_p) + THREAD_SIZE - KERNEL_STACK_OFFSET);
    if (unlikely (task_thread_info (next_p)->flags & _TIF_WORK_CTXSW_NEXT || task_thread_info (prev_p)->flags & _TIF_WORK_CTXSW_PREV))
        __switch_to_xtra (prev_p, next_p, tss);
    if (tsk_used_math (next_p) && next_p->fpu_counter > 5)
        math_state_restore ();
    return prev_p;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="438" endline="447">
{
    loadsegment (fs, next -> fsindex);
    if (fsindex)
        prev->fs = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="453" endline="457">
{
    load_gs_index (next -> gsindex);
    if (gsindex)
        prev->gs = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="501" endline="512">
{
    long error;
    char *filename;
    filename = getname (name);
    error = PTR_ERR (filename);
    if (IS_ERR (filename))
        return error;
    error = do_execve (filename, argv, envp, regs);
    putname (filename);
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="515" endline="526">
{
    clear_thread_flag (TIF_IA32);
    current->personality &= ~READ_IMPLIES_EXEC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="531" endline="535">
{
    if (!newsp)
        newsp = regs->sp;
    return do_fork (clone_flags, newsp, regs, 0, parent_tid, child_tid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="538" endline="559">
{
    unsigned long stack;
    u64 fp, ip;
    int count = 0;
    if (!p || p == current || p->state == TASK_RUNNING)
        return 0;
    stack = (unsigned long) task_stack_page (p);
    if (p->thread.sp < stack || p->thread.sp >= stack + THREAD_SIZE)
        return 0;
    fp = *(u64*) (p->thread.sp);
    do {
        if (fp < (unsigned long) stack || fp >= (unsigned long) stack + THREAD_SIZE)
            return 0;
        ip = *(u64*) (fp + 8);
        if (!in_sched_functions (ip))
            return ip;
        fp = *(u64*) fp;
    }
    while (count++ < 16);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="549" endline="557">
{
    if (fp < (unsigned long) stack || fp >= (unsigned long) stack + THREAD_SIZE)
        return 0;
    ip = *(u64*) (fp + 8);
    if (!in_sched_functions (ip))
        return ip;
    fp = *(u64*) fp;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="562" endline="654">
{
    int ret = 0;
    int doit = task == current;
    int cpu;
    switch (code) {
    case ARCH_SET_GS :
        if (addr >= TASK_SIZE_OF (task))
            return -EPERM;
        cpu = get_cpu ();
        if (addr <= 0xffffffff) {
            set_32bit_tls (task, GS_TLS, addr);
            if (doit) {
                load_TLS (& task -> thread, cpu);
                load_gs_index (GS_TLS_SEL);
            }
            task->thread.gsindex = GS_TLS_SEL;
            task->thread.gs = 0;
        }
        else {
            task->thread.gsindex = 0;
            task->thread.gs = addr;
            if (doit) {
                load_gs_index (0);
                ret = checking_wrmsrl (MSR_KERNEL_GS_BASE, addr);
            }
        }
        put_cpu ();
        break;
    case ARCH_SET_FS :
        if (addr >= TASK_SIZE_OF (task))
            return -EPERM;
        cpu = get_cpu ();
        if (addr <= 0xffffffff) {
            set_32bit_tls (task, FS_TLS, addr);
            if (doit) {
                load_TLS (& task -> thread, cpu);
                loadsegment (fs, FS_TLS_SEL);
            }
            task->thread.fsindex = FS_TLS_SEL;
            task->thread.fs = 0;
        }
        else {
            task->thread.fsindex = 0;
            task->thread.fs = addr;
            if (doit) {
                loadsegment (fs, 0);
                ret = checking_wrmsrl (MSR_FS_BASE, addr);
            }
        }
        put_cpu ();
        break;
    case ARCH_GET_FS :
        {
            unsigned long base;
            if (task->thread.fsindex == FS_TLS_SEL)
                base = read_32bit_tls (task, FS_TLS);
            else if (doit)
                rdmsrl (MSR_FS_BASE, base);
            else
                base = task->thread.fs;
            ret = put_user (base, (unsigned long __user *) addr);
            break;
        }
    case ARCH_GET_GS :
        {
            unsigned long base;
            unsigned gsindex;
            if (task->thread.gsindex == GS_TLS_SEL)
                base = read_32bit_tls (task, GS_TLS);
            else if (doit) {
                savesegment (gs, gsindex);
                if (gsindex)
                    rdmsrl (MSR_KERNEL_GS_BASE, base);
                else
                    base = task->thread.gs;
            }
            else
                base = task->thread.gs;
            ret = put_user (base, (unsigned long __user *) addr);
            break;
        }
    default :
        ret = -EINVAL;
        break;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="567" endline="651">
{
case ARCH_SET_GS :
    if (addr >= TASK_SIZE_OF (task))
        return -EPERM;
    cpu = get_cpu ();
    if (addr <= 0xffffffff) {
        set_32bit_tls (task, GS_TLS, addr);
        if (doit) {
            load_TLS (& task -> thread, cpu);
            load_gs_index (GS_TLS_SEL);
        }
        task->thread.gsindex = GS_TLS_SEL;
        task->thread.gs = 0;
    }
    else {
        task->thread.gsindex = 0;
        task->thread.gs = addr;
        if (doit) {
            load_gs_index (0);
            ret = checking_wrmsrl (MSR_KERNEL_GS_BASE, addr);
        }
    }
    put_cpu ();
    break;
case ARCH_SET_FS :
    if (addr >= TASK_SIZE_OF (task))
        return -EPERM;
    cpu = get_cpu ();
    if (addr <= 0xffffffff) {
        set_32bit_tls (task, FS_TLS, addr);
        if (doit) {
            load_TLS (& task -> thread, cpu);
            loadsegment (fs, FS_TLS_SEL);
        }
        task->thread.fsindex = FS_TLS_SEL;
        task->thread.fs = 0;
    }
    else {
        task->thread.fsindex = 0;
        task->thread.fs = addr;
        if (doit) {
            loadsegment (fs, 0);
            ret = checking_wrmsrl (MSR_FS_BASE, addr);
        }
    }
    put_cpu ();
    break;
case ARCH_GET_FS :
    {
        unsigned long base;
        if (task->thread.fsindex == FS_TLS_SEL)
            base = read_32bit_tls (task, FS_TLS);
        else if (doit)
            rdmsrl (MSR_FS_BASE, base);
        else
            base = task->thread.fs;
        ret = put_user (base, (unsigned long __user *) addr);
        break;
    }
case ARCH_GET_GS :
    {
        unsigned long base;
        unsigned gsindex;
        if (task->thread.gsindex == GS_TLS_SEL)
            base = read_32bit_tls (task, GS_TLS);
        else if (doit) {
            savesegment (gs, gsindex);
            if (gsindex)
                rdmsrl (MSR_KERNEL_GS_BASE, base);
            else
                base = task->thread.gs;
        }
        else
            base = task->thread.gs;
        ret = put_user (base, (unsigned long __user *) addr);
        break;
    }
default :
    ret = -EINVAL;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="574" endline="582">
{
    set_32bit_tls (task, GS_TLS, addr);
    if (doit) {
        load_TLS (& task -> thread, cpu);
        load_gs_index (GS_TLS_SEL);
    }
    task->thread.gsindex = GS_TLS_SEL;
    task->thread.gs = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="576" endline="579">
{
    load_TLS (& task -> thread, cpu);
    load_gs_index (GS_TLS_SEL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="582" endline="589">
{
    task->thread.gsindex = 0;
    task->thread.gs = addr;
    if (doit) {
        load_gs_index (0);
        ret = checking_wrmsrl (MSR_KERNEL_GS_BASE, addr);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="585" endline="588">
{
    load_gs_index (0);
    ret = checking_wrmsrl (MSR_KERNEL_GS_BASE, addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="600" endline="608">
{
    set_32bit_tls (task, FS_TLS, addr);
    if (doit) {
        load_TLS (& task -> thread, cpu);
        loadsegment (fs, FS_TLS_SEL);
    }
    task->thread.fsindex = FS_TLS_SEL;
    task->thread.fs = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="602" endline="605">
{
    load_TLS (& task -> thread, cpu);
    loadsegment (fs, FS_TLS_SEL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="608" endline="617">
{
    task->thread.fsindex = 0;
    task->thread.fs = addr;
    if (doit) {
        loadsegment (fs, 0);
        ret = checking_wrmsrl (MSR_FS_BASE, addr);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="611" endline="616">
{
    loadsegment (fs, 0);
    ret = checking_wrmsrl (MSR_FS_BASE, addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="620" endline="630">
{
    unsigned long base;
    if (task->thread.fsindex == FS_TLS_SEL)
        base = read_32bit_tls (task, FS_TLS);
    else if (doit)
        rdmsrl (MSR_FS_BASE, base);
    else
        base = task->thread.fs;
    ret = put_user (base, (unsigned long __user *) addr);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="631" endline="646">
{
    unsigned long base;
    unsigned gsindex;
    if (task->thread.gsindex == GS_TLS_SEL)
        base = read_32bit_tls (task, GS_TLS);
    else if (doit) {
        savesegment (gs, gsindex);
        if (gsindex)
            rdmsrl (MSR_KERNEL_GS_BASE, base);
        else
            base = task->thread.gs;
    }
    else
        base = task->thread.gs;
    ret = put_user (base, (unsigned long __user *) addr);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="636" endline="642">
{
    savesegment (gs, gsindex);
    if (gsindex)
        rdmsrl (MSR_KERNEL_GS_BASE, base);
    else
        base = task->thread.gs;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process_64.c.ifdefed" startline="657" endline="659">
{
    return do_arch_prctl (current, code, addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="46" endline="99">
{
    cycles_t start, now, prev, end;
    int i;
    rdtsc_barrier ();
    start = get_cycles ();
    rdtsc_barrier ();
    end = start + tsc_khz * 20ULL;
    now = start;
    for (i = 0;; i++) {
        __raw_spin_lock (& sync_lock);
        prev = last_tsc;
        rdtsc_barrier ();
        now = get_cycles ();
        rdtsc_barrier ();
        last_tsc = now;
        __raw_spin_unlock (& sync_lock);
        if (unlikely (!(i & 7))) {
            if (now > end || i > 10000000)
                break;
            cpu_relax ();
            touch_nmi_watchdog ();
        }
        if (unlikely (prev > now)) {
            __raw_spin_lock (& sync_lock);
            max_warp = max (max_warp, prev -now);
            nr_warps++;
            __raw_spin_unlock (& sync_lock);
        }
    }
    WARN (! (now - start), "Warning: zero tsc calibration delta: %Ld [max: %Ld]\n", now - start, end - start);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="59" endline="95">
{
    __raw_spin_lock (& sync_lock);
    prev = last_tsc;
    rdtsc_barrier ();
    now = get_cycles ();
    rdtsc_barrier ();
    last_tsc = now;
    __raw_spin_unlock (& sync_lock);
    if (unlikely (!(i & 7))) {
        if (now > end || i > 10000000)
            break;
        cpu_relax ();
        touch_nmi_watchdog ();
    }
    if (unlikely (prev > now)) {
        __raw_spin_lock (& sync_lock);
        max_warp = max (max_warp, prev -now);
        nr_warps++;
        __raw_spin_unlock (& sync_lock);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="79" endline="84">
{
    if (now > end || i > 10000000)
        break;
    cpu_relax ();
    touch_nmi_watchdog ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="89" endline="94">
{
    __raw_spin_lock (& sync_lock);
    max_warp = max (max_warp, prev -now);
    nr_warps++;
    __raw_spin_unlock (& sync_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="106" endline="165">
{
    int cpus = 2;
    if (unsynchronized_tsc ())
        return;
    if (boot_cpu_has (X86_FEATURE_TSC_RELIABLE)) {
        pr_info ("Skipping synchronization checks as TSC is reliable.\n");
        return;
    }
    pr_info ("checking TSC synchronization [CPU#%d -> CPU#%d]:", smp_processor_id (), cpu);
    atomic_set (& stop_count, 0);
    while (atomic_read (&start_count) != cpus - 1)
        cpu_relax ();
    atomic_inc (& start_count);
    check_tsc_warp ();
    while (atomic_read (&stop_count) != cpus - 1)
        cpu_relax ();
    if (nr_warps) {
        printk ("\n");
        pr_warning ("Measured %Ld cycles TSC warp between CPUs, " "turning off TSC clock.\n", max_warp);
        mark_tsc_unstable ("check_tsc_sync_source failed");
    }
    else {
        printk (" passed.\n");
    }
    atomic_set (& start_count, 0);
    nr_warps = 0;
    max_warp = 0;
    last_tsc = 0;
    atomic_inc (& stop_count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="116" endline="119">
{
    pr_info ("Skipping synchronization checks as TSC is reliable.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="144" endline="149">
{
    printk ("\n");
    pr_warning ("Measured %Ld cycles TSC warp between CPUs, " "turning off TSC clock.\n", max_warp);
    mark_tsc_unstable ("check_tsc_sync_source failed");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="149" endline="151">
{
    printk (" passed.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tsc_sync.c.ifdefed" startline="171" endline="197">
{
    int cpus = 2;
    if (unsynchronized_tsc () || boot_cpu_has (X86_FEATURE_TSC_RELIABLE))
        return;
    atomic_inc (& start_count);
    while (atomic_read (&start_count) != cpus)
        cpu_relax ();
    check_tsc_warp ();
    atomic_inc (& stop_count);
    while (atomic_read (&stop_count) != cpus)
        cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="47" endline="66">
{
    loff_t ret;
    struct inode *inode = file->f_mapping->host;
    mutex_lock (& inode -> i_mutex);
    switch (orig) {
    case 0 :
        file->f_pos = offset;
        ret = file->f_pos;
        break;
    case 1 :
        file->f_pos += offset;
        ret = file->f_pos;
        break;
    default :
        ret = -EINVAL;
    }
    mutex_unlock (& inode -> i_mutex);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="52" endline="63">
{
case 0 :
    file->f_pos = offset;
    ret = file->f_pos;
    break;
case 1 :
    file->f_pos += offset;
    ret = file->f_pos;
    break;
default :
    ret = -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="70" endline="97">
{
    u32 __user *tmp = (u32 __user *) buf;
    u32 data [2];
    u32 reg = *ppos;
    int cpu = iminor (file->f_path.dentry->d_inode);
    int err = 0;
    ssize_t bytes = 0;
    if (count % 8)
        return -EINVAL;
    for (; count; count -= 8) {
        err = rdmsr_safe_on_cpu (cpu, reg, &data[0], &data[1]);
        if (err) {
            if (err == -EFAULT)
                err = -EIO;
            break;
        }
        if (copy_to_user (tmp, &data, 8)) {
            err = -EFAULT;
            break;
        }
        tmp += 2;
        bytes += 8;
    }
    return bytes ? bytes : err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="81" endline="94">
{
    err = rdmsr_safe_on_cpu (cpu, reg, &data[0], &data[1]);
    if (err) {
        if (err == -EFAULT)
            err = -EIO;
        break;
    }
    if (copy_to_user (tmp, &data, 8)) {
        err = -EFAULT;
        break;
    }
    tmp += 2;
    bytes += 8;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="83" endline="87">
{
    if (err == -EFAULT)
        err = -EIO;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="88" endline="91">
{
    err = -EFAULT;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="101" endline="128">
{
    const u32 __user *tmp = (const u32 __user *) buf;
    u32 data [2];
    u32 reg = *ppos;
    int cpu = iminor (file->f_path.dentry->d_inode);
    int err = 0;
    ssize_t bytes = 0;
    if (count % 8)
        return -EINVAL;
    for (; count; count -= 8) {
        if (copy_from_user (&data, tmp, 8)) {
            err = -EFAULT;
            break;
        }
        err = wrmsr_safe_on_cpu (cpu, reg, data[0], data[1]);
        if (err) {
            if (err == -EFAULT)
                err = -EIO;
            break;
        }
        tmp += 2;
        bytes += 8;
    }
    return bytes ? bytes : err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="112" endline="125">
{
    if (copy_from_user (&data, tmp, 8)) {
        err = -EFAULT;
        break;
    }
    err = wrmsr_safe_on_cpu (cpu, reg, data[0], data[1]);
    if (err) {
        if (err == -EFAULT)
            err = -EIO;
        break;
    }
    tmp += 2;
    bytes += 8;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="113" endline="116">
{
    err = -EFAULT;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="118" endline="122">
{
    if (err == -EFAULT)
        err = -EIO;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="131" endline="149">
{
    unsigned int cpu = iminor (file->f_path.dentry->d_inode);
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    int ret = 0;
    lock_kernel ();
    cpu = iminor (file->f_path.dentry->d_inode);
    if (cpu >= nr_cpu_ids || !cpu_online (cpu)) {
        ret = -ENXIO;
        goto out;
    }
    c = &cpu_data (cpu);
    if (!cpu_has (c, X86_FEATURE_MSR))
        ret = -EIO;
out :
    unlock_kernel ();
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="139" endline="142">
{
    ret = -ENXIO;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="163" endline="169">
{
    struct device *dev;
    dev = device_create (msr_class, NULL, MKDEV (MSR_MAJOR, cpu), NULL, "msr%d", cpu);
    return IS_ERR (dev) ? PTR_ERR (dev) : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="172" endline="174">
{
    device_destroy (msr_class, MKDEV (MSR_MAJOR, cpu));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="178" endline="193">
{
    unsigned int cpu = (unsigned long) hcpu;
    int err = 0;
    switch (action) {
    case CPU_UP_PREPARE :
        err = msr_device_create (cpu);
        break;
    case CPU_UP_CANCELED :
    case CPU_UP_CANCELED_FROZEN :
    case CPU_DEAD :
        msr_device_destroy (cpu);
        break;
    }
    return err ? NOTIFY_BAD : NOTIFY_OK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="182" endline="191">
{
case CPU_UP_PREPARE :
    err = msr_device_create (cpu);
    break;
case CPU_UP_CANCELED :
case CPU_UP_CANCELED_FROZEN :
case CPU_DEAD :
    msr_device_destroy (cpu);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="200" endline="202">
{
    return kasprintf (GFP_KERNEL, "cpu/%u/msr", MINOR (dev->devt));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="205" endline="240">
{
    int i, err = 0;
    i = 0;
    if (register_chrdev (MSR_MAJOR, "cpu/msr", &msr_fops)) {
        printk (KERN_ERR "msr: unable to get major %d for msr\n", MSR_MAJOR);
        err = -EBUSY;
        goto out;
    }
    msr_class = class_create (THIS_MODULE, "msr");
    if (IS_ERR (msr_class)) {
        err = PTR_ERR (msr_class);
        goto out_chrdev;
    }
    msr_class->nodename = msr_nodename;

    for_each_online_cpu (i) {
        err = msr_device_create (i);
        if (err != 0)
            goto out_class;
    }

    register_hotcpu_notifier (& msr_class_cpu_notifier);
    err = 0;
    goto out;
out_class :
    i = 0;
    for_each_online_cpu (i)
    msr_device_destroy (i);
    class_destroy (msr_class);
out_chrdev :
    unregister_chrdev (MSR_MAJOR, "cpu/msr");
out :
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="209" endline="214">
{
    printk (KERN_ERR "msr: unable to get major %d for msr\n", MSR_MAJOR);
    err = -EBUSY;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="216" endline="219">
{
    err = PTR_ERR (msr_class);
    goto out_chrdev;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="221" endline="225">
{
    err = msr_device_create (i);
    if (err != 0)
        goto out_class;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/msr.c.ifdefed" startline="243" endline="250">
{
    int cpu = 0;
    for_each_online_cpu (cpu)
    msr_device_destroy (cpu);
    class_destroy (msr_class);
    unregister_chrdev (MSR_MAJOR, "cpu/msr");
    unregister_hotcpu_notifier (& msr_class_cpu_notifier);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="38" endline="53">
{
    struct vm_struct *area;
    if (!size)
        return NULL;
    size = PAGE_ALIGN (size);
    if (size > MODULES_LEN)
        return NULL;
    area = __get_vm_area (size, VM_ALLOC, MODULES_VADDR, MODULES_END);
    if (!area)
        return NULL;
    return __vmalloc_area (area, GFP_KERNEL | __GFP_HIGHMEM, PAGE_KERNEL_EXEC);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="57" endline="59">
{
    vfree (module_region);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="66" endline="68">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="127" endline="190">
{
    unsigned int i;
    Elf64_Rela *rel = (void *) sechdrs[relsec].sh_addr;
    Elf64_Sym *sym;
    void *loc;
    u64 val;
    DEBUGP ("Applying relocate section %u to %u\n", relsec, sechdrs [relsec].sh_info);
    for (i = 0; i < sechdrs[relsec].sh_size / sizeof (*rel); i++) {
        loc = (void *) sechdrs[sechdrs[relsec].sh_info].sh_addr + rel[i].r_offset;
        sym = (Elf64_Sym *) sechdrs[symindex].sh_addr + ELF64_R_SYM (rel[i].r_info);
        DEBUGP ("type %d st_value %Lx r_addend %Lx loc %Lx\n", (int) ELF64_R_TYPE (rel [i].r_info), sym -> st_value, rel [i].r_addend, (u64) loc);
        val = sym->st_value + rel[i].r_addend;
        switch (ELF64_R_TYPE (rel[i].r_info)) {
        case R_X86_64_NONE :
            break;
        case R_X86_64_64 :
            *(u64*) loc = val;
            break;
        case R_X86_64_32 :
            *(u32*) loc = val;
            if (val != *(u32*) loc)
                goto overflow;
            break;
        case R_X86_64_32S :
            *(s32*) loc = val;
            if ((s64) val != *(s32*) loc)
                goto overflow;
            break;
        case R_X86_64_PC32 :
            val -= (u64) loc;
            *(u32*) loc = val;
            break;
        default :
            printk (KERN_ERR "module %s: Unknown rela relocation: %llu\n", me->name, ELF64_R_TYPE (rel[i].r_info));
            return -ENOEXEC;
        }
    }
    return 0;
overflow :
    printk (KERN_ERR "overflow in relocation type %d val %Lx\n", (int) ELF64_R_TYPE (rel[i].r_info), val);
    printk (KERN_ERR "`%s' likely not compiled with -mcmodel=kernel\n", me -> name);
    return -ENOEXEC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="136" endline="181">
{
    loc = (void *) sechdrs[sechdrs[relsec].sh_info].sh_addr + rel[i].r_offset;
    sym = (Elf64_Sym *) sechdrs[symindex].sh_addr + ELF64_R_SYM (rel[i].r_info);
    DEBUGP ("type %d st_value %Lx r_addend %Lx loc %Lx\n", (int) ELF64_R_TYPE (rel [i].r_info), sym -> st_value, rel [i].r_addend, (u64) loc);
    val = sym->st_value + rel[i].r_addend;
    switch (ELF64_R_TYPE (rel[i].r_info)) {
    case R_X86_64_NONE :
        break;
    case R_X86_64_64 :
        *(u64*) loc = val;
        break;
    case R_X86_64_32 :
        *(u32*) loc = val;
        if (val != *(u32*) loc)
            goto overflow;
        break;
    case R_X86_64_32S :
        *(s32*) loc = val;
        if ((s64) val != *(s32*) loc)
            goto overflow;
        break;
    case R_X86_64_PC32 :
        val -= (u64) loc;
        *(u32*) loc = val;
        break;
    default :
        printk (KERN_ERR "module %s: Unknown rela relocation: %llu\n", me->name, ELF64_R_TYPE (rel[i].r_info));
        return -ENOEXEC;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="152" endline="180">
{
case R_X86_64_NONE :
    break;
case R_X86_64_64 :
    *(u64*) loc = val;
    break;
case R_X86_64_32 :
    *(u32*) loc = val;
    if (val != *(u32*) loc)
        goto overflow;
    break;
case R_X86_64_32S :
    *(s32*) loc = val;
    if ((s64) val != *(s32*) loc)
        goto overflow;
    break;
case R_X86_64_PC32 :
    val -= (u64) loc;
    *(u32*) loc = val;
    break;
default :
    printk (KERN_ERR "module %s: Unknown rela relocation: %llu\n", me->name, ELF64_R_TYPE (rel[i].r_info));
    return -ENOEXEC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="197" endline="200">
{
    printk (KERN_ERR "non add relocation not supported\n");
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="207" endline="242">
{
    const Elf_Shdr *s, *text = NULL, *alt = NULL, *locks = NULL, *para = NULL;
    char *secstrings = (void *) hdr + sechdrs[hdr->e_shstrndx].sh_offset;
    for (s = sechdrs; s < sechdrs + hdr->e_shnum; s++) {
        if (!strcmp (".text", secstrings +s->sh_name))
            text = s;
        if (!strcmp (".altinstructions", secstrings +s->sh_name))
            alt = s;
        if (!strcmp (".smp_locks", secstrings +s->sh_name))
            locks = s;
        if (!strcmp (".parainstructions", secstrings +s->sh_name))
            para = s;
    }
    if (alt) {
        void *aseg = (void *) alt->sh_addr;
        apply_alternatives (aseg, aseg + alt -> sh_size);
    }
    if (locks && text) {
        void *lseg = (void *) locks->sh_addr;
        void *tseg = (void *) text->sh_addr;
        alternatives_smp_module_add (me, me -> name, lseg, lseg + locks -> sh_size, tseg, tseg + text -> sh_size);
    }
    if (para) {
        void *pseg = (void *) para->sh_addr;
        apply_paravirt (pseg, pseg + para -> sh_size);
    }
    return module_bug_finalize (hdr, sechdrs, me);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="212" endline="221">
{
    if (!strcmp (".text", secstrings +s->sh_name))
        text = s;
    if (!strcmp (".altinstructions", secstrings +s->sh_name))
        alt = s;
    if (!strcmp (".smp_locks", secstrings +s->sh_name))
        locks = s;
    if (!strcmp (".parainstructions", secstrings +s->sh_name))
        para = s;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="223" endline="227">
{
    void *aseg = (void *) alt->sh_addr;
    apply_alternatives (aseg, aseg + alt -> sh_size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="228" endline="234">
{
    void *lseg = (void *) locks->sh_addr;
    void *tseg = (void *) text->sh_addr;
    alternatives_smp_module_add (me, me -> name, lseg, lseg + locks -> sh_size, tseg, tseg + text -> sh_size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="236" endline="239">
{
    void *pseg = (void *) para->sh_addr;
    apply_paravirt (pseg, pseg + para -> sh_size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/module.c.ifdefed" startline="245" endline="248">
{
    alternatives_smp_module_del (mod);
    module_bug_cleanup (mod);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="28" endline="42">
{
    if (printk_ratelimit ())
        pr_err ("unexpected IRQ trap at vector %02x\n", irq);
    ack_APIC_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="49" endline="122">
{
    int j;
    seq_printf (p, "%*s: ", prec, "NMI");
    for_each_online_cpu (j)
    seq_printf (p, "%10u ", irq_stats (j) -> __nmi_count);
    seq_printf (p, "  Non-maskable interrupts\n");
    if (generic_interrupt_extension) {
        seq_printf (p, "%*s: ", prec, "PLT");
        for_each_online_cpu (j)
        seq_printf (p, "%10u ", irq_stats (j) -> generic_irqs);
        seq_printf (p, "  Platform interrupts\n");
    }
    seq_printf (p, "%*s: %10u\n", prec, "ERR", atomic_read (& irq_err_count));
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="75" endline="80">
{
    seq_printf (p, "%*s: ", prec, "PLT");
    for_each_online_cpu (j)
    seq_printf (p, "%10u ", irq_stats (j) -> generic_irqs);
    seq_printf (p, "  Platform interrupts\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="125" endline="175">
{
    unsigned long flags, any_count = 0;
    int i = *(loff_t*) v, j, prec;
    struct irqaction *action;
    struct irq_desc *desc;
    if (i > nr_irqs)
        return 0;
    for (prec = 3, j = 1000; prec < 10 && j <= nr_irqs; ++prec)
        j *= 10;
    if (i == nr_irqs)
        return show_other_interrupts (p, prec);
    if (i == 0) {
        seq_printf (p, "%*s", prec + 8, "");
        for_each_online_cpu (j)
        seq_printf (p, "CPU%-8d", j);
        seq_putc (p, '\n');
    }
    desc = irq_to_desc (i);
    if (!desc)
        return 0;
    spin_lock_irqsave (& desc -> lock, flags);
    for_each_online_cpu (j)
    any_count |= kstat_irqs_cpu (i, j);
    action = desc->action;
    if (!action && !any_count)
        goto out;
    seq_printf (p, "%*d: ", prec, i);
    for_each_online_cpu (j)
    seq_printf (p, "%10u ", kstat_irqs_cpu (i, j));
    seq_printf (p, " %8s", desc -> chip -> name);
    seq_printf (p, "-%-8s", desc -> name);
    if (action) {
        seq_printf (p, "  %s", action -> name);
        while ((action = action->next) != NULL)
            seq_printf (p, ", %s", action->name);
    }
    seq_putc (p, '\n');
out :
    spin_unlock_irqrestore (&desc->lock, flags);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="141" endline="146">
{
    seq_printf (p, "%*s", prec + 8, "");
    for_each_online_cpu (j)
    seq_printf (p, "CPU%-8d", j);
    seq_putc (p, '\n');
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="165" endline="169">
{
    seq_printf (p, "  %s", action -> name);
    while ((action = action->next) != NULL)
        seq_printf (p, ", %s", action->name);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="181" endline="208">
{
    u64 sum = irq_stats (cpu)->__nmi_count;
    if (generic_interrupt_extension)
        sum += irq_stats (cpu)->generic_irqs;
    return sum;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="211" endline="218">
{
    u64 sum = atomic_read (&irq_err_count);
    return sum;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="227" endline="251">
{
    struct pt_regs *old_regs = set_irq_regs (regs);
    unsigned vector = ~regs->orig_ax;
    unsigned irq;
    exit_idle ();
    irq_enter ();
    irq = __get_cpu_var (vector_irq)[vector];
    if (!handle_irq (irq, regs)) {
        ack_APIC_irq ();
        if (printk_ratelimit ())
            pr_emerg ("%s: %d.%d No irq handler for vector (irq %d)\n", __func__, smp_processor_id (), vector, irq);
    }
    irq_exit ();
    set_irq_regs (old_regs);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="239" endline="245">
{
    ack_APIC_irq ();
    if (printk_ratelimit ())
        pr_emerg ("%s: %d.%d No irq handler for vector (irq %d)\n", __func__, smp_processor_id (), vector, irq);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irq.c.ifdefed" startline="257" endline="274">
{
    struct pt_regs *old_regs = set_irq_regs (regs);
    ack_APIC_irq ();
    exit_idle ();
    irq_enter ();
    inc_irq_stat (generic_irqs);
    if (generic_interrupt_extension)
        generic_interrupt_extension ();
    irq_exit ();
    set_irq_regs (old_regs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="141" endline="172">
{
    struct cpuinfo_x86 *c = &cpu_data (cpu_num);
    unsigned int val [2];
    memset (csig, 0, sizeof (* csig));
    if (c->x86_vendor != X86_VENDOR_INTEL || c->x86 < 6 || cpu_has (c, X86_FEATURE_IA64)) {
        printk (KERN_ERR "microcode: CPU%d not a capable Intel " "processor\n", cpu_num);
        return -1;
    }
    csig->sig = cpuid_eax (0x00000001);
    if ((c->x86_model >= 5) || (c->x86 > 6)) {
        rdmsr (MSR_IA32_PLATFORM_ID, val [0], val [1]);
        csig->pf = 1 << ((val[1] >> 18) & 7);
    }
    wrmsr (MSR_IA32_UCODE_REV, 0, 0);
    sync_core ();
    rdmsr (MSR_IA32_UCODE_REV, val [0], csig -> rev);
    printk (KERN_INFO "microcode: CPU%d sig=0x%x, pf=0x%x, revision=0x%x\n", cpu_num, csig -> sig, csig -> pf, csig -> rev);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="148" endline="152">
{
    printk (KERN_ERR "microcode: CPU%d not a capable Intel " "processor\n", cpu_num);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="156" endline="160">
{
    rdmsr (MSR_IA32_PLATFORM_ID, val [0], val [1]);
    csig->pf = 1 << ((val[1] >> 18) & 7);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="175" endline="177">
{
    return (!sigmatch (sig, csig->sig, pf, csig->pf)) ? 0 : 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="181" endline="183">
{
    return (mc_header->rev <= rev) ? 0 : 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="186" endline="263">
{
    unsigned long total_size, data_size, ext_table_size;
    struct microcode_header_intel *mc_header = mc;
    struct extended_sigtable *ext_header = NULL;
    int sum, orig_sum, ext_sigcount = 0, i;
    struct extended_signature *ext_sig;
    total_size = get_totalsize (mc_header);
    data_size = get_datasize (mc_header);
    if (data_size + MC_HEADER_SIZE > total_size) {
        printk (KERN_ERR "microcode: error! " "Bad data size in microcode data file\n");
        return -EINVAL;
    }
    if (mc_header->ldrver != 1 || mc_header->hdrver != 1) {
        printk (KERN_ERR "microcode: error! " "Unknown microcode update format\n");
        return -EINVAL;
    }
    ext_table_size = total_size - (MC_HEADER_SIZE + data_size);
    if (ext_table_size) {
        if ((ext_table_size < EXT_HEADER_SIZE) || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {
            printk (KERN_ERR "microcode: error! " "Small exttable size in microcode data file\n");
            return -EINVAL;
        }
        ext_header = mc + MC_HEADER_SIZE + data_size;
        if (ext_table_size != exttable_size (ext_header)) {
            printk (KERN_ERR "microcode: error! " "Bad exttable size in microcode data file\n");
            return -EFAULT;
        }
        ext_sigcount = ext_header->count;
    }
    if (ext_table_size) {
        int ext_table_sum = 0;
        int *ext_tablep = (int *) ext_header;
        i = ext_table_size / DWSIZE;
        while (i--)
            ext_table_sum += ext_tablep[i];
        if (ext_table_sum) {
            printk (KERN_WARNING "microcode: aborting, " "bad extended signature table checksum\n");
            return -EINVAL;
        }
    }
    orig_sum = 0;
    i = (MC_HEADER_SIZE + data_size) / DWSIZE;
    while (i--)
        orig_sum += ((int *) mc)[i];
    if (orig_sum) {
        printk (KERN_ERR "microcode: aborting, bad checksum\n");
        return -EINVAL;
    }
    if (!ext_table_size)
        return 0;
    for (i = 0; i < ext_sigcount; i++) {
        ext_sig = (void *) ext_header + EXT_HEADER_SIZE + EXT_SIGNATURE_SIZE * i;
        sum = orig_sum - (mc_header->sig + mc_header->pf + mc_header->cksum) + (ext_sig->sig + ext_sig->pf + ext_sig->cksum);
        if (sum) {
            printk (KERN_ERR "microcode: aborting, bad checksum\n");
            return -EINVAL;
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="196" endline="200">
{
    printk (KERN_ERR "microcode: error! " "Bad data size in microcode data file\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="202" endline="206">
{
    printk (KERN_ERR "microcode: error! " "Unknown microcode update format\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="208" endline="222">
{
    if ((ext_table_size < EXT_HEADER_SIZE) || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {
        printk (KERN_ERR "microcode: error! " "Small exttable size in microcode data file\n");
        return -EINVAL;
    }
    ext_header = mc + MC_HEADER_SIZE + data_size;
    if (ext_table_size != exttable_size (ext_header)) {
        printk (KERN_ERR "microcode: error! " "Bad exttable size in microcode data file\n");
        return -EFAULT;
    }
    ext_sigcount = ext_header->count;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="210" endline="214">
{
    printk (KERN_ERR "microcode: error! " "Small exttable size in microcode data file\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="216" endline="220">
{
    printk (KERN_ERR "microcode: error! " "Bad exttable size in microcode data file\n");
    return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="225" endline="237">
{
    int ext_table_sum = 0;
    int *ext_tablep = (int *) ext_header;
    i = ext_table_size / DWSIZE;
    while (i--)
        ext_table_sum += ext_tablep[i];
    if (ext_table_sum) {
        printk (KERN_WARNING "microcode: aborting, " "bad extended signature table checksum\n");
        return -EINVAL;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="232" endline="236">
{
    printk (KERN_WARNING "microcode: aborting, " "bad extended signature table checksum\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="244" endline="247">
{
    printk (KERN_ERR "microcode: aborting, bad checksum\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="251" endline="261">
{
    ext_sig = (void *) ext_header + EXT_HEADER_SIZE + EXT_SIGNATURE_SIZE * i;
    sum = orig_sum - (mc_header->sig + mc_header->pf + mc_header->cksum) + (ext_sig->sig + ext_sig->pf + ext_sig->cksum);
    if (sum) {
        printk (KERN_ERR "microcode: aborting, bad checksum\n");
        return -EINVAL;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="257" endline="260">
{
    printk (KERN_ERR "microcode: aborting, bad checksum\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="271" endline="298">
{
    struct microcode_header_intel *mc_header = mc;
    struct extended_sigtable *ext_header;
    unsigned long total_size = get_totalsize (mc_header);
    int ext_sigcount, i;
    struct extended_signature *ext_sig;
    if (!update_match_revision (mc_header, rev))
        return 0;
    if (update_match_cpu (cpu_sig, mc_header->sig, mc_header->pf))
        return 1;
    if (total_size <= get_datasize (mc_header) + MC_HEADER_SIZE)
        return 0;
    ext_header = mc + get_datasize (mc_header) + MC_HEADER_SIZE;
    ext_sigcount = ext_header->count;
    ext_sig = (void *) ext_header + EXT_HEADER_SIZE;
    for (i = 0; i < ext_sigcount; i++) {
        if (update_match_cpu (cpu_sig, ext_sig->sig, ext_sig->pf))
            return 1;
        ext_sig++;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="292" endline="296">
{
    if (update_match_cpu (cpu_sig, ext_sig->sig, ext_sig->pf))
        return 1;
    ext_sig++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="301" endline="345">
{
    struct microcode_intel *mc_intel;
    struct ucode_cpu_info *uci;
    unsigned int val [2];
    int cpu_num;
    cpu_num = raw_smp_processor_id ();
    uci = ucode_cpu_info + cpu;
    mc_intel = uci->mc;
    BUG_ON (cpu_num != cpu);
    if (mc_intel == NULL)
        return 0;
    wrmsr (MSR_IA32_UCODE_WRITE, (unsigned long) mc_intel -> bits, (unsigned long) mc_intel -> bits >> 16 >> 16);
    wrmsr (MSR_IA32_UCODE_REV, 0, 0);
    sync_core ();
    rdmsr (MSR_IA32_UCODE_REV, val [0], val [1]);
    if (val[1] != mc_intel->hdr.rev) {
        printk (KERN_ERR "microcode: CPU%d update " "to revision 0x%x failed\n", cpu_num, mc_intel -> hdr.rev);
        return -1;
    }
    printk (KERN_INFO "microcode: CPU%d updated to revision " "0x%x, date = %04x-%02x-%02x \n", cpu_num, val [1], mc_intel -> hdr.date & 0xffff, mc_intel -> hdr.date >> 24, (mc_intel -> hdr.date >> 16) & 0xff);
    uci->cpu_sig.rev = val[1];
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="329" endline="334">
{
    printk (KERN_ERR "microcode: CPU%d update " "to revision 0x%x failed\n", cpu_num, mc_intel -> hdr.rev);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="349" endline="413">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    u8 *ucode_ptr = data, *new_mc = NULL, *mc;
    int new_rev = uci->cpu_sig.rev;
    unsigned int leftover = size;
    enum ucode_state state = UCODE_OK;
    while (leftover) {
        struct microcode_header_intel mc_header;
        unsigned int mc_size;
        if (get_ucode_data (&mc_header, ucode_ptr, sizeof (mc_header)))
            break;
        mc_size = get_totalsize (&mc_header);
        if (!mc_size || mc_size > leftover) {
            printk (KERN_ERR "microcode: error!" "Bad data in microcode data file\n");
            break;
        }
        mc = vmalloc (mc_size);
        if (!mc)
            break;
        if (get_ucode_data (mc, ucode_ptr, mc_size) || microcode_sanity_check (mc) < 0) {
            vfree (mc);
            break;
        }
        if (get_matching_microcode (&uci->cpu_sig, mc, new_rev)) {
            if (new_mc)
                vfree (new_mc);
            new_rev = mc_header.rev;
            new_mc = mc;
        }
        else
            vfree (mc);
        ucode_ptr += mc_size;
        leftover -= mc_size;
    }
    if (leftover) {
        if (new_mc)
            vfree (new_mc);
        state = UCODE_ERROR;
        goto out;
    }
    if (!new_mc) {
        state = UCODE_NFOUND;
        goto out;
    }
    if (uci->mc)
        vfree (uci->mc);
    uci->mc = (struct microcode_intel *) new_mc;
    pr_debug ("microcode: CPU%d found a matching microcode update with" " version 0x%x (current=0x%x)\n", cpu, new_rev, uci -> cpu_sig.rev);
out :
    return state;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="356" endline="390">
{
    struct microcode_header_intel mc_header;
    unsigned int mc_size;
    if (get_ucode_data (&mc_header, ucode_ptr, sizeof (mc_header)))
        break;
    mc_size = get_totalsize (&mc_header);
    if (!mc_size || mc_size > leftover) {
        printk (KERN_ERR "microcode: error!" "Bad data in microcode data file\n");
        break;
    }
    mc = vmalloc (mc_size);
    if (!mc)
        break;
    if (get_ucode_data (mc, ucode_ptr, mc_size) || microcode_sanity_check (mc) < 0) {
        vfree (mc);
        break;
    }
    if (get_matching_microcode (&uci->cpu_sig, mc, new_rev)) {
        if (new_mc)
            vfree (new_mc);
        new_rev = mc_header.rev;
        new_mc = mc;
    }
    else
        vfree (mc);
    ucode_ptr += mc_size;
    leftover -= mc_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="364" endline="368">
{
    printk (KERN_ERR "microcode: error!" "Bad data in microcode data file\n");
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="375" endline="378">
{
    vfree (mc);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="380" endline="385">
{
    if (new_mc)
        vfree (new_mc);
    new_rev = mc_header.rev;
    new_mc = mc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="392" endline="397">
{
    if (new_mc)
        vfree (new_mc);
    state = UCODE_ERROR;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="399" endline="402">
{
    state = UCODE_NFOUND;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="416" endline="419">
{
    memcpy (to, from, n);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="422" endline="442">
{
    char name [30];
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    const struct firmware *firmware;
    enum ucode_state ret;
    sprintf (name, "intel-ucode/%02x-%02x-%02x", c -> x86, c -> x86_model, c -> x86_mask);
    if (request_firmware (&firmware, name, device)) {
        pr_debug ("microcode: data file %s load failed\n", name);
        return UCODE_NFOUND;
    }
    ret = generic_load_microcode (cpu, (void *) firmware->data, firmware->size, &get_ucode_fw);
    release_firmware (firmware);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="431" endline="434">
{
    pr_debug ("microcode: data file %s load failed\n", name);
    return UCODE_NFOUND;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="445" endline="447">
{
    return copy_from_user (to, from, n);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="451" endline="453">
{
    return generic_load_microcode (cpu, (void *) buf, size, &get_ucode_user);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="456" endline="461">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    vfree (uci -> mc);
    uci->mc = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_intel.c.ifdefed" startline="472" endline="474">
{
    return &microcode_intel_ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="23" endline="46">
{
    u32 htcfg;
    htcfg = read_pci_config (num, slot, func, 0x68);
    if (htcfg & (1 << 18)) {
        printk (KERN_INFO "Detected use of extended apic ids " "on hypertransport bus\n");
        if ((htcfg & (1 << 17)) == 0) {
            printk (KERN_INFO "Enabling hypertransport extended " "apic interrupt broadcast\n");
            printk (KERN_INFO "Note this is a bios bug, " "please contact your hw vendor\n");
            htcfg |= (1 << 17);
            write_pci_config (num, slot, func, 0x68, htcfg);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="32" endline="43">
{
    printk (KERN_INFO "Detected use of extended apic ids " "on hypertransport bus\n");
    if ((htcfg & (1 << 17)) == 0) {
        printk (KERN_INFO "Enabling hypertransport extended " "apic interrupt broadcast\n");
        printk (KERN_INFO "Note this is a bios bug, " "please contact your hw vendor\n");
        htcfg |= (1 << 17);
        write_pci_config (num, slot, func, 0x68, htcfg);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="35" endline="42">
{
    printk (KERN_INFO "Enabling hypertransport extended " "apic interrupt broadcast\n");
    printk (KERN_INFO "Note this is a bios bug, " "please contact your hw vendor\n");
    htcfg |= (1 << 17);
    write_pci_config (num, slot, func, 0x68, htcfg);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="49" endline="59">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="72" endline="97">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="186" endline="187">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="190" endline="191">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="238" endline="274">
{
    u16 class;
    u16 vendor;
    u16 device;
    u8 type;
    int i;
    class = read_pci_config_16 (num, slot, func, PCI_CLASS_DEVICE);
    if (class == 0xffff)
        return -1;
    vendor = read_pci_config_16 (num, slot, func, PCI_VENDOR_ID);
    device = read_pci_config_16 (num, slot, func, PCI_DEVICE_ID);
    for (i = 0; early_qrk[i].f != NULL; i++) {
        if (((early_qrk[i].vendor == PCI_ANY_ID) || (early_qrk[i].vendor == vendor)) && ((early_qrk[i].device == PCI_ANY_ID) || (early_qrk[i].device == device)) && (!((early_qrk[i].class ^ class) & early_qrk[i].class_mask))) {
            if ((early_qrk[i].flags & QFLAG_DONE) != QFLAG_DONE)
                early_qrk[i].f (num, slot, func);
            early_qrk[i].flags |= QFLAG_APPLIED;
        }
    }
    type = read_pci_config_byte (num, slot, func, PCI_HEADER_TYPE);
    if (!(type & 0x80))
        return -1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="254" endline="266">
{
    if (((early_qrk[i].vendor == PCI_ANY_ID) || (early_qrk[i].vendor == vendor)) && ((early_qrk[i].device == PCI_ANY_ID) || (early_qrk[i].device == device)) && (!((early_qrk[i].class ^ class) & early_qrk[i].class_mask))) {
        if ((early_qrk[i].flags & QFLAG_DONE) != QFLAG_DONE)
            early_qrk[i].f (num, slot, func);
        early_qrk[i].flags |= QFLAG_APPLIED;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="260" endline="265">
{
    if ((early_qrk[i].flags & QFLAG_DONE) != QFLAG_DONE)
        early_qrk[i].f (num, slot, func);
    early_qrk[i].flags |= QFLAG_APPLIED;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="277" endline="291">
{
    int slot, func;
    if (!early_pci_allowed ())
        return;
    for (slot = 0; slot < 32; slot++)
        for (func = 0; func < 8; func++) {
            if (check_dev_quirk (0, slot, func))
                break;
        }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/early-quirks.c.ifdefed" startline="286" endline="290">
{
    if (check_dev_quirk (0, slot, func))
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="24" endline="34">
{
    int x = 0;
    int i;
    for (i = 0; i < 8; i++) {
        x ^= (v & 1);
        v >>= 1;
    }
    return x;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="28" endline="31">
{
    x ^= (v & 1);
    v >>= 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="37" endline="52">
{
    unsigned long flags;
    if (sbf_port != -1) {
        v &= ~SBF_PARITY;
        if (!parity (v))
            v |= SBF_PARITY;
        printk (KERN_INFO "Simple Boot Flag at 0x%x set to 0x%x\n", sbf_port, v);
        spin_lock_irqsave (& rtc_lock, flags);
        CMOS_WRITE (v, sbf_port);
        spin_unlock_irqrestore (& rtc_lock, flags);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="40" endline="51">
{
    v &= ~SBF_PARITY;
    if (!parity (v))
        v |= SBF_PARITY;
    printk (KERN_INFO "Simple Boot Flag at 0x%x set to 0x%x\n", sbf_port, v);
    spin_lock_irqsave (& rtc_lock, flags);
    CMOS_WRITE (v, sbf_port);
    spin_unlock_irqrestore (& rtc_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="55" endline="67">
{
    unsigned long flags;
    u8 v;
    if (sbf_port == -1)
        return 0;
    spin_lock_irqsave (& rtc_lock, flags);
    v = CMOS_READ (sbf_port);
    spin_unlock_irqrestore (& rtc_lock, flags);
    return v;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="70" endline="77">
{
    if (v & SBF_RESERVED)
        return 0;
    if (!parity (v))
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="80" endline="101">
{
    u8 v;
    if (sbf_port == -1)
        return 0;
    v = sbf_read ();
    if (!sbf_value_valid (v)) {
        printk (KERN_WARNING "Simple Boot Flag value 0x%x read from " "CMOS RAM was invalid\n", v);
    }
    v &= ~SBF_RESERVED;
    v &= ~SBF_BOOTING;
    v &= ~SBF_DIAG;
    sbf_write (v);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/bootflag.c.ifdefed" startline="87" endline="90">
{
    printk (KERN_WARNING "Simple Boot Flag value 0x%x read from " "CMOS RAM was invalid\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="58" endline="62">
{
    gart_resource.start = aper_base;
    gart_resource.end = aper_base + aper_size - 1;
    insert_resource (& iomem_resource, & gart_resource);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="68" endline="112">
{
    u32 aper_size;
    void *p;
    if (fallback_aper_order > 5)
        fallback_aper_order = 5;
    aper_size = (32 * 1024 * 1024) << fallback_aper_order;
    p = __alloc_bootmem_nopanic (aper_size, aper_size, 512ULL << 20);
    if (!p || __pa (p) + aper_size > 0xffffffff) {
        printk (KERN_ERR "Cannot allocate aperture memory hole (%p,%uK)\n", p, aper_size >> 10);
        if (p)
            free_bootmem (__pa (p), aper_size);
        return 0;
    }
    printk (KERN_INFO "Mapping aperture over %d KB of RAM @ %lx\n", aper_size >> 10, __pa (p));
    insert_aperture_resource ((u32) __pa (p), aper_size);
    register_nosave_region ((u32) __pa (p) >> PAGE_SHIFT, (u32) __pa (p + aper_size) >> PAGE_SHIFT);
    return (u32) __pa (p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="97" endline="104">
{
    printk (KERN_ERR "Cannot allocate aperture memory hole (%p,%uK)\n", p, aper_size >> 10);
    if (p)
        free_bootmem (__pa (p), aper_size);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="117" endline="139">
{
    int bytes;
    u8 pos;
    if (!(read_pci_config_16 (bus, slot, func, PCI_STATUS) & PCI_STATUS_CAP_LIST))
        return 0;
    pos = read_pci_config_byte (bus, slot, func, PCI_CAPABILITY_LIST);
    for (bytes = 0; bytes < 48 && pos >= 0x40; bytes++) {
        u8 id;
        pos &= ~3;
        id = read_pci_config_byte (bus, slot, func, pos +PCI_CAP_LIST_ID);
        if (id == 0xff)
            break;
        if (id == cap)
            return pos;
        pos = read_pci_config_byte (bus, slot, func, pos +PCI_CAP_LIST_NEXT);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="126" endline="137">
{
    u8 id;
    pos &= ~3;
    id = read_pci_config_byte (bus, slot, func, pos +PCI_CAP_LIST_ID);
    if (id == 0xff)
        break;
    if (id == cap)
        return pos;
    pos = read_pci_config_byte (bus, slot, func, pos +PCI_CAP_LIST_NEXT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="143" endline="192">
{
    u32 apsize;
    u32 apsizereg;
    int nbits;
    u32 aper_low, aper_hi;
    u64 aper;
    u32 old_order;
    printk (KERN_INFO "AGP bridge at %02x:%02x:%02x\n", bus, slot, func);
    apsizereg = read_pci_config_16 (bus, slot, func, cap +0x14);
    if (apsizereg == 0xffffffff) {
        printk (KERN_ERR "APSIZE in AGP bridge unreadable\n");
        return 0;
    }
    old_order = *order;
    apsize = apsizereg & 0xfff;
    if (apsize & 0xff)
        apsize |= 0xf00;
    nbits = hweight16 (apsize);
    *order = 7 - nbits;
    if ((int) *order < 0)
        *order = 0;
    aper_low = read_pci_config (bus, slot, func, 0x10);
    aper_hi = read_pci_config (bus, slot, func, 0x14);
    aper = (aper_low & ~((1 << 22) - 1)) | ((u64) aper_hi << 32);
    printk (KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n", aper, 32 << old_order);
    if (aper + (32ULL << (20 + *order)) > 0x100000000ULL) {
        printk (KERN_INFO "Aperture size %u MB (APSIZE %x) is not right, using settings from NB\n", 32 << * order, apsizereg);
        *order = old_order;
    }
    printk (KERN_INFO "Aperture from AGP @ %Lx size %u MB (APSIZE %x)\n", aper, 32 << * order, apsizereg);
    if (!aperture_valid (aper, (32 * 1024 * 1024) << *order, 32 << 20))
        return 0;
    return (u32) aper;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="153" endline="156">
{
    printk (KERN_ERR "APSIZE in AGP bridge unreadable\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="180" endline="184">
{
    printk (KERN_INFO "Aperture size %u MB (APSIZE %x) is not right, using settings from NB\n", 32 << * order, apsizereg);
    *order = old_order;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="208" endline="246">
{
    int bus, slot, func;
    for (bus = 0; bus < 256; bus++) {
        for (slot = 0; slot < 32; slot++) {
            for (func = 0; func < 8; func++) {
                u32 class, cap;
                u8 type;
                class = read_pci_config (bus, slot, func, PCI_CLASS_REVISION);
                if (class == 0xffffffff)
                    break;
                switch (class >> 16) {
                case PCI_CLASS_BRIDGE_HOST :
                case PCI_CLASS_BRIDGE_OTHER :
                    cap = find_cap (bus, slot, func, PCI_CAP_ID_AGP);
                    if (!cap)
                        break;
                    *valid_agp = 1;
                    return read_agp (bus, slot, func, cap, order);
                }
                type = read_pci_config_byte (bus, slot, func, PCI_HEADER_TYPE);
                if (!(type & 0x80))
                    break;
            }
        }
    }
    printk (KERN_INFO "No AGP bridge found\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="212" endline="242">
{
    for (slot = 0; slot < 32; slot++) {
        for (func = 0; func < 8; func++) {
            u32 class, cap;
            u8 type;
            class = read_pci_config (bus, slot, func, PCI_CLASS_REVISION);
            if (class == 0xffffffff)
                break;
            switch (class >> 16) {
            case PCI_CLASS_BRIDGE_HOST :
            case PCI_CLASS_BRIDGE_OTHER :
                cap = find_cap (bus, slot, func, PCI_CAP_ID_AGP);
                if (!cap)
                    break;
                *valid_agp = 1;
                return read_agp (bus, slot, func, cap, order);
            }
            type = read_pci_config_byte (bus, slot, func, PCI_HEADER_TYPE);
            if (!(type & 0x80))
                break;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="213" endline="241">
{
    for (func = 0; func < 8; func++) {
        u32 class, cap;
        u8 type;
        class = read_pci_config (bus, slot, func, PCI_CLASS_REVISION);
        if (class == 0xffffffff)
            break;
        switch (class >> 16) {
        case PCI_CLASS_BRIDGE_HOST :
        case PCI_CLASS_BRIDGE_OTHER :
            cap = find_cap (bus, slot, func, PCI_CAP_ID_AGP);
            if (!cap)
                break;
            *valid_agp = 1;
            return read_agp (bus, slot, func, cap, order);
        }
        type = read_pci_config_byte (bus, slot, func, PCI_HEADER_TYPE);
        if (!(type & 0x80))
            break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="214" endline="240">
{
    u32 class, cap;
    u8 type;
    class = read_pci_config (bus, slot, func, PCI_CLASS_REVISION);
    if (class == 0xffffffff)
        break;
    switch (class >> 16) {
    case PCI_CLASS_BRIDGE_HOST :
    case PCI_CLASS_BRIDGE_OTHER :
        cap = find_cap (bus, slot, func, PCI_CAP_ID_AGP);
        if (!cap)
            break;
        *valid_agp = 1;
        return read_agp (bus, slot, func, cap, order);
    }
    type = read_pci_config_byte (bus, slot, func, PCI_HEADER_TYPE);
    if (!(type & 0x80))
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="222" endline="233">
{
case PCI_CLASS_BRIDGE_HOST :
case PCI_CLASS_BRIDGE_OTHER :
    cap = find_cap (bus, slot, func, PCI_CAP_ID_AGP);
    if (!cap)
        break;
    *valid_agp = 1;
    return read_agp (bus, slot, func, cap, order);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="251" endline="261">
{
    if (!p)
        return -EINVAL;
    if (!strncmp (p, "off", 3))
        gart_fix_e820 = 0;
    else if (!strncmp (p, "on", 2))
        gart_fix_e820 = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="265" endline="360">
{
    int i, fix, slot;
    u32 ctl;
    u32 aper_size = 0, aper_order = 0, last_aper_order = 0;
    u64 aper_base = 0, last_aper_base = 0;
    int aper_enabled = 0, last_aper_enabled = 0, last_valid = 0;
    if (!early_pci_allowed ())
        return;
    fix = 0;
    for (i = 0; i < ARRAY_SIZE (bus_dev_ranges); i++) {
        int bus;
        int dev_base, dev_limit;
        bus = bus_dev_ranges[i].bus;
        dev_base = bus_dev_ranges[i].dev_base;
        dev_limit = bus_dev_ranges[i].dev_limit;
        for (slot = dev_base; slot < dev_limit; slot++) {
            if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
                continue;
            ctl = read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL);
            aper_enabled = ctl & AMD64_GARTEN;
            aper_order = (ctl >> 1) & 7;
            aper_size = (32 * 1024 * 1024) << aper_order;
            aper_base = read_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE) & 0x7fff;
            aper_base <<= 25;
            if (last_valid) {
                if ((aper_order != last_aper_order) || (aper_base != last_aper_base) || (aper_enabled != last_aper_enabled)) {
                    fix = 1;
                    break;
                }
            }
            last_aper_order = aper_order;
            last_aper_base = aper_base;
            last_aper_enabled = aper_enabled;
            last_valid = 1;
        }
    }
    if (!fix && !aper_enabled)
        return;
    if (!aper_base || !aper_size || aper_base + aper_size > 0x100000000UL)
        fix = 1;
    if (gart_fix_e820 && !fix && aper_enabled) {
        if (e820_any_mapped (aper_base, aper_base +aper_size, E820_RAM)) {
            printk (KERN_INFO "update e820 for GART\n");
            e820_add_region (aper_base, aper_size, E820_RESERVED);
            update_e820 ();
        }
    }
    if (!fix)
        return;
    for (i = 0; i < ARRAY_SIZE (bus_dev_ranges); i++) {
        int bus;
        int dev_base, dev_limit;
        bus = bus_dev_ranges[i].bus;
        dev_base = bus_dev_ranges[i].dev_base;
        dev_limit = bus_dev_ranges[i].dev_limit;
        for (slot = dev_base; slot < dev_limit; slot++) {
            if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
                continue;
            ctl = read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL);
            ctl &= ~AMD64_GARTEN;
            write_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL, ctl);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="287" endline="320">
{
    int bus;
    int dev_base, dev_limit;
    bus = bus_dev_ranges[i].bus;
    dev_base = bus_dev_ranges[i].dev_base;
    dev_limit = bus_dev_ranges[i].dev_limit;
    for (slot = dev_base; slot < dev_limit; slot++) {
        if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
            continue;
        ctl = read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL);
        aper_enabled = ctl & AMD64_GARTEN;
        aper_order = (ctl >> 1) & 7;
        aper_size = (32 * 1024 * 1024) << aper_order;
        aper_base = read_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE) & 0x7fff;
        aper_base <<= 25;
        if (last_valid) {
            if ((aper_order != last_aper_order) || (aper_base != last_aper_base) || (aper_enabled != last_aper_enabled)) {
                fix = 1;
                break;
            }
        }
        last_aper_order = aper_order;
        last_aper_base = aper_base;
        last_aper_enabled = aper_enabled;
        last_valid = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="295" endline="319">
{
    if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
        continue;
    ctl = read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL);
    aper_enabled = ctl & AMD64_GARTEN;
    aper_order = (ctl >> 1) & 7;
    aper_size = (32 * 1024 * 1024) << aper_order;
    aper_base = read_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE) & 0x7fff;
    aper_base <<= 25;
    if (last_valid) {
        if ((aper_order != last_aper_order) || (aper_base != last_aper_base) || (aper_enabled != last_aper_enabled)) {
            fix = 1;
            break;
        }
    }
    last_aper_order = aper_order;
    last_aper_base = aper_base;
    last_aper_enabled = aper_enabled;
    last_valid = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="306" endline="313">
{
    if ((aper_order != last_aper_order) || (aper_base != last_aper_base) || (aper_enabled != last_aper_enabled)) {
        fix = 1;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="309" endline="312">
{
    fix = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="328" endline="336">
{
    if (e820_any_mapped (aper_base, aper_base +aper_size, E820_RAM)) {
        printk (KERN_INFO "update e820 for GART\n");
        e820_add_region (aper_base, aper_size, E820_RESERVED);
        update_e820 ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="330" endline="335">
{
    printk (KERN_INFO "update e820 for GART\n");
    e820_add_region (aper_base, aper_size, E820_RESERVED);
    update_e820 ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="342" endline="358">
{
    int bus;
    int dev_base, dev_limit;
    bus = bus_dev_ranges[i].bus;
    dev_base = bus_dev_ranges[i].dev_base;
    dev_limit = bus_dev_ranges[i].dev_limit;
    for (slot = dev_base; slot < dev_limit; slot++) {
        if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
            continue;
        ctl = read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL);
        ctl &= ~AMD64_GARTEN;
        write_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL, ctl);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="350" endline="357">
{
    if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
        continue;
    ctl = read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL);
    ctl &= ~AMD64_GARTEN;
    write_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL, ctl);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="365" endline="505">
{
    u32 agp_aper_base = 0, agp_aper_order = 0;
    u32 aper_size, aper_alloc = 0, aper_order = 0, last_aper_order = 0;
    u64 aper_base, last_aper_base = 0;
    int fix, slot, valid_agp = 0;
    int i, node;
    if (gart_iommu_aperture_disabled || !fix_aperture || !early_pci_allowed ())
        return;
    printk (KERN_INFO "Checking aperture...\n");
    if (!fallback_aper_force)
        agp_aper_base = search_agp_bridge (&agp_aper_order, &valid_agp);
    fix = 0;
    node = 0;
    for (i = 0; i < ARRAY_SIZE (bus_dev_ranges); i++) {
        int bus;
        int dev_base, dev_limit;
        bus = bus_dev_ranges[i].bus;
        dev_base = bus_dev_ranges[i].dev_base;
        dev_limit = bus_dev_ranges[i].dev_limit;
        for (slot = dev_base; slot < dev_limit; slot++) {
            if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
                continue;
            iommu_detected = 1;
            gart_iommu_aperture = 1;
            aper_order = (read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL) >> 1) & 7;
            aper_size = (32 * 1024 * 1024) << aper_order;
            aper_base = read_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE) & 0x7fff;
            aper_base <<= 25;
            printk (KERN_INFO "Node %d: aperture @ %Lx size %u MB\n", node, aper_base, aper_size >> 20);
            node++;
            if (!aperture_valid (aper_base, aper_size, 64 << 20)) {
                if (valid_agp && agp_aper_base && agp_aper_base == aper_base && agp_aper_order == aper_order) {
                    if (!no_iommu && max_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {
                        printk (KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");
                        printk (KERN_ERR "please increase GART size in your BIOS setup\n");
                        printk (KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");
                        printed_gart_size_msg = 1;
                    }
                }
                else {
                    fix = 1;
                    goto out;
                }
            }
            if ((last_aper_order && aper_order != last_aper_order) || (last_aper_base && aper_base != last_aper_base)) {
                fix = 1;
                goto out;
            }
            last_aper_order = aper_order;
            last_aper_base = aper_base;
        }
    }
out :
    if (!fix && !fallback_aper_force) {
        if (last_aper_base) {
            unsigned long n = (32 * 1024 * 1024) << last_aper_order;
            insert_aperture_resource ((u32) last_aper_base, n);
        }
        return;
    }
    if (!fallback_aper_force) {
        aper_alloc = agp_aper_base;
        aper_order = agp_aper_order;
    }
    if (aper_alloc) {
    }
    else if (swiotlb && !valid_agp) {
    }
    else if ((!no_iommu && max_pfn > MAX_DMA32_PFN) || force_iommu || valid_agp || fallback_aper_force) {
        printk (KERN_INFO "Your BIOS doesn't leave a aperture memory hole\n");
        printk (KERN_INFO "Please enable the IOMMU option in the BIOS setup\n");
        printk (KERN_INFO "This costs you %d MB of RAM\n", 32 << fallback_aper_order);
        aper_order = fallback_aper_order;
        aper_alloc = allocate_aperture ();
        if (!aper_alloc) {
            panic ("Not enough memory for aperture");
        }
    }
    else {
        return;
    }
    for (i = 0; i < ARRAY_SIZE (bus_dev_ranges); i++) {
        int bus;
        int dev_base, dev_limit;
        bus = bus_dev_ranges[i].bus;
        dev_base = bus_dev_ranges[i].dev_base;
        dev_limit = bus_dev_ranges[i].dev_limit;
        for (slot = dev_base; slot < dev_limit; slot++) {
            if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
                continue;
            write_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL, aper_order << 1);
            write_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE, aper_alloc >> 25);
        }
    }
    set_up_gart_resume (aper_order, aper_alloc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="383" endline="434">
{
    int bus;
    int dev_base, dev_limit;
    bus = bus_dev_ranges[i].bus;
    dev_base = bus_dev_ranges[i].dev_base;
    dev_limit = bus_dev_ranges[i].dev_limit;
    for (slot = dev_base; slot < dev_limit; slot++) {
        if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
            continue;
        iommu_detected = 1;
        gart_iommu_aperture = 1;
        aper_order = (read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL) >> 1) & 7;
        aper_size = (32 * 1024 * 1024) << aper_order;
        aper_base = read_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE) & 0x7fff;
        aper_base <<= 25;
        printk (KERN_INFO "Node %d: aperture @ %Lx size %u MB\n", node, aper_base, aper_size >> 20);
        node++;
        if (!aperture_valid (aper_base, aper_size, 64 << 20)) {
            if (valid_agp && agp_aper_base && agp_aper_base == aper_base && agp_aper_order == aper_order) {
                if (!no_iommu && max_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {
                    printk (KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");
                    printk (KERN_ERR "please increase GART size in your BIOS setup\n");
                    printk (KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");
                    printed_gart_size_msg = 1;
                }
            }
            else {
                fix = 1;
                goto out;
            }
        }
        if ((last_aper_order && aper_order != last_aper_order) || (last_aper_base && aper_base != last_aper_base)) {
            fix = 1;
            goto out;
        }
        last_aper_order = aper_order;
        last_aper_base = aper_base;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="391" endline="433">
{
    if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
        continue;
    iommu_detected = 1;
    gart_iommu_aperture = 1;
    aper_order = (read_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL) >> 1) & 7;
    aper_size = (32 * 1024 * 1024) << aper_order;
    aper_base = read_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE) & 0x7fff;
    aper_base <<= 25;
    printk (KERN_INFO "Node %d: aperture @ %Lx size %u MB\n", node, aper_base, aper_size >> 20);
    node++;
    if (!aperture_valid (aper_base, aper_size, 64 << 20)) {
        if (valid_agp && agp_aper_base && agp_aper_base == aper_base && agp_aper_order == aper_order) {
            if (!no_iommu && max_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {
                printk (KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");
                printk (KERN_ERR "please increase GART size in your BIOS setup\n");
                printk (KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");
                printed_gart_size_msg = 1;
            }
        }
        else {
            fix = 1;
            goto out;
        }
    }
    if ((last_aper_order && aper_order != last_aper_order) || (last_aper_base && aper_base != last_aper_base)) {
        fix = 1;
        goto out;
    }
    last_aper_order = aper_order;
    last_aper_base = aper_base;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="407" endline="424">
{
    if (valid_agp && agp_aper_base && agp_aper_base == aper_base && agp_aper_order == aper_order) {
        if (!no_iommu && max_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {
            printk (KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");
            printk (KERN_ERR "please increase GART size in your BIOS setup\n");
            printk (KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");
            printed_gart_size_msg = 1;
        }
    }
    else {
        fix = 1;
        goto out;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="410" endline="420">
{
    if (!no_iommu && max_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {
        printk (KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");
        printk (KERN_ERR "please increase GART size in your BIOS setup\n");
        printk (KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");
        printed_gart_size_msg = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="414" endline="419">
{
    printk (KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");
    printk (KERN_ERR "please increase GART size in your BIOS setup\n");
    printk (KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");
    printed_gart_size_msg = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="420" endline="423">
{
    fix = 1;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="427" endline="430">
{
    fix = 1;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="437" endline="444">
{
    if (last_aper_base) {
        unsigned long n = (32 * 1024 * 1024) << last_aper_order;
        insert_aperture_resource ((u32) last_aper_base, n);
    }
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="438" endline="442">
{
    unsigned long n = (32 * 1024 * 1024) << last_aper_order;
    insert_aperture_resource ((u32) last_aper_base, n);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="446" endline="449">
{
    aper_alloc = agp_aper_base;
    aper_order = agp_aper_order;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="451" endline="453">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="453" endline="455">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="458" endline="480">
{
    printk (KERN_INFO "Your BIOS doesn't leave a aperture memory hole\n");
    printk (KERN_INFO "Please enable the IOMMU option in the BIOS setup\n");
    printk (KERN_INFO "This costs you %d MB of RAM\n", 32 << fallback_aper_order);
    aper_order = fallback_aper_order;
    aper_alloc = allocate_aperture ();
    if (!aper_alloc) {
        panic ("Not enough memory for aperture");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="469" endline="479">
{
    panic ("Not enough memory for aperture");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="480" endline="482">
{
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="485" endline="502">
{
    int bus;
    int dev_base, dev_limit;
    bus = bus_dev_ranges[i].bus;
    dev_base = bus_dev_ranges[i].dev_base;
    dev_limit = bus_dev_ranges[i].dev_limit;
    for (slot = dev_base; slot < dev_limit; slot++) {
        if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
            continue;
        write_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL, aper_order << 1);
        write_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE, aper_alloc >> 25);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/aperture_64.c.ifdefed" startline="492" endline="501">
{
    if (!early_is_k8_nb (read_pci_config (bus, slot, 3, 0x00)))
        continue;
    write_pci_config (bus, slot, 3, AMD64_GARTAPERTURECTL, aper_order << 1);
    write_pci_config (bus, slot, 3, AMD64_GARTAPERTUREBASE, aper_alloc >> 25);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="122" endline="127">
{
    struct cpu_info_ctx *ctx = arg;
    ctx->err = microcode_ops->collect_cpu_info (smp_processor_id (), ctx->cpu_sig);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="130" endline="139">
{
    struct cpu_info_ctx ctx = {
        .cpu_sig = cpu_sig,
        .err = 0
    };
    int ret;
    ret = smp_call_function_single (cpu, collect_cpu_info_local, &ctx, 1);
    if (!ret)
        ret = ctx.err;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="142" endline="153">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    int ret;
    memset (uci, 0, sizeof (* uci));
    ret = collect_cpu_info_on_target (cpu, &uci->cpu_sig);
    if (!ret)
        uci->valid = 1;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="160" endline="164">
{
    struct apply_microcode_ctx *ctx = arg;
    ctx->err = microcode_ops->apply_microcode (smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="167" endline="176">
{
    struct apply_microcode_ctx ctx = {
        .err = 0
    };
    int ret;
    ret = smp_call_function_single (cpu, apply_microcode_local, &ctx, 1);
    if (!ret)
        ret = ctx.err;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="271" endline="289">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    int err = 0;
    mutex_lock (& microcode_mutex);
    if (uci->valid) {
        enum ucode_state ustate;
        ustate = microcode_ops->request_microcode_fw (cpu, &microcode_pdev->dev);
        if (ustate == UCODE_OK)
            apply_microcode_on_target (cpu);
        else if (ustate == UCODE_ERROR)
            err = -EINVAL;
    }
    mutex_unlock (& microcode_mutex);
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="276" endline="285">
{
    enum ucode_state ustate;
    ustate = microcode_ops->request_microcode_fw (cpu, &microcode_pdev->dev);
    if (ustate == UCODE_OK)
        apply_microcode_on_target (cpu);
    else if (ustate == UCODE_ERROR)
        err = -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="294" endline="315">
{
    unsigned long val;
    int cpu = dev->id;
    int ret = 0;
    char *end;
    val = simple_strtoul (buf, &end, 0);
    if (end == buf)
        return -EINVAL;
    if (val == 1) {
        get_online_cpus ();
        if (cpu_online (cpu))
            ret = reload_for_cpu (cpu);
        put_online_cpus ();
    }
    if (!ret)
        ret = size;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="304" endline="309">
{
    get_online_cpus ();
    if (cpu_online (cpu))
        ret = reload_for_cpu (cpu);
    put_online_cpus ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="319" endline="323">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + dev->id;
    return sprintf (buf, "0x%x\n", uci->cpu_sig.rev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="327" endline="331">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + dev->id;
    return sprintf (buf, "0x%x\n", uci->cpu_sig.pf);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="350" endline="355">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    microcode_ops->microcode_fini_cpu (cpu);
    uci->valid = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="358" endline="368">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    if (!uci->mc)
        return UCODE_NFOUND;
    pr_debug ("microcode: CPU%d updated upon resume\n", cpu);
    apply_microcode_on_target (cpu);
    return UCODE_OK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="371" endline="389">
{
    enum ucode_state ustate;
    if (collect_cpu_info (cpu))
        return UCODE_ERROR;
    if (system_state != SYSTEM_RUNNING)
        return UCODE_NFOUND;
    ustate = microcode_ops->request_microcode_fw (cpu, &microcode_pdev->dev);
    if (ustate == UCODE_OK) {
        pr_debug ("microcode: CPU%d updated upon init\n", cpu);
        apply_microcode_on_target (cpu);
    }
    return ustate;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="383" endline="386">
{
    pr_debug ("microcode: CPU%d updated upon init\n", cpu);
    apply_microcode_on_target (cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="392" endline="402">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    enum ucode_state ustate;
    if (uci->valid)
        ustate = microcode_resume_cpu (cpu);
    else
        ustate = microcode_init_cpu (cpu);
    return ustate;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="405" endline="421">
{
    int err, cpu = sys_dev->id;
    if (!cpu_online (cpu))
        return 0;
    pr_debug ("microcode: CPU%d added\n", cpu);
    err = sysfs_create_group (&sys_dev->kobj, &mc_attr_group);
    if (err)
        return err;
    if (microcode_init_cpu (cpu) == UCODE_ERROR)
        err = -EINVAL;
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="424" endline="434">
{
    int cpu = sys_dev->id;
    if (!cpu_online (cpu))
        return 0;
    pr_debug ("microcode: CPU%d removed\n", cpu);
    microcode_fini_cpu (cpu);
    sysfs_remove_group (& sys_dev -> kobj, & mc_attr_group);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="437" endline="457">
{
    int cpu = dev->id;
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    if (!cpu_online (cpu))
        return 0;
    WARN_ON (cpu != 0);
    if (uci->valid && uci->mc)
        microcode_ops->apply_microcode (cpu);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="467" endline="495">
{
    unsigned int cpu = (unsigned long) hcpu;
    struct sys_device *sys_dev;
    sys_dev = get_cpu_sysdev (cpu);
    switch (action) {
    case CPU_ONLINE :
    case CPU_ONLINE_FROZEN :
        microcode_update_cpu (cpu);
    case CPU_DOWN_FAILED :
    case CPU_DOWN_FAILED_FROZEN :
        pr_debug ("microcode: CPU%d added\n", cpu);
        if (sysfs_create_group (&sys_dev->kobj, &mc_attr_group))
            pr_err ("microcode: Failed to create group for CPU%d\n", cpu);
        break;
    case CPU_DOWN_PREPARE :
    case CPU_DOWN_PREPARE_FROZEN :
        sysfs_remove_group (&sys_dev->kobj, &mc_attr_group);
        pr_debug ("microcode: CPU%d removed\n", cpu);
        break;
    case CPU_DEAD :
    case CPU_UP_CANCELED_FROZEN :
        microcode_fini_cpu (cpu);
        break;
    }
    return NOTIFY_OK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="472" endline="493">
{
case CPU_ONLINE :
case CPU_ONLINE_FROZEN :
    microcode_update_cpu (cpu);
case CPU_DOWN_FAILED :
case CPU_DOWN_FAILED_FROZEN :
    pr_debug ("microcode: CPU%d added\n", cpu);
    if (sysfs_create_group (&sys_dev->kobj, &mc_attr_group))
        pr_err ("microcode: Failed to create group for CPU%d\n", cpu);
    break;
case CPU_DOWN_PREPARE :
case CPU_DOWN_PREPARE_FROZEN :
    sysfs_remove_group (&sys_dev->kobj, &mc_attr_group);
    pr_debug ("microcode: CPU%d removed\n", cpu);
    break;
case CPU_DEAD :
case CPU_UP_CANCELED_FROZEN :
    microcode_fini_cpu (cpu);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="502" endline="547">
{
    struct cpuinfo_x86 *c = &cpu_data (0);
    int error;
    if (c->x86_vendor == X86_VENDOR_INTEL)
        microcode_ops = init_intel_microcode ();
    else if (c->x86_vendor == X86_VENDOR_AMD)
        microcode_ops = init_amd_microcode ();
    if (!microcode_ops) {
        pr_err ("microcode: no support for this CPU vendor\n");
        return -ENODEV;
    }
    microcode_pdev = platform_device_register_simple ("microcode", -1, NULL, 0);
    if (IS_ERR (microcode_pdev)) {
        microcode_dev_exit ();
        return PTR_ERR (microcode_pdev);
    }
    get_online_cpus ();
    mutex_lock (& microcode_mutex);
    error = sysdev_driver_register (&cpu_sysdev_class, &mc_sysdev_driver);
    mutex_unlock (& microcode_mutex);
    put_online_cpus ();
    if (error) {
        platform_device_unregister (microcode_pdev);
        return error;
    }
    error = microcode_dev_init ();
    if (error)
        return error;
    register_hotcpu_notifier (& mc_cpu_notifier);
    pr_info ("Microcode Update Driver: v" MICROCODE_VERSION " <tigran@aivazian.fsnet.co.uk>," " Peter Oruba\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="511" endline="514">
{
    pr_err ("microcode: no support for this CPU vendor\n");
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="518" endline="521">
{
    microcode_dev_exit ();
    return PTR_ERR (microcode_pdev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="531" endline="534">
{
    platform_device_unregister (microcode_pdev);
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_core.c.ifdefed" startline="551" endline="569">
{
    microcode_dev_exit ();
    unregister_hotcpu_notifier (& mc_cpu_notifier);
    get_online_cpus ();
    mutex_lock (& microcode_mutex);
    sysdev_driver_unregister (& cpu_sysdev_class, & mc_sysdev_driver);
    mutex_unlock (& microcode_mutex);
    put_online_cpus ();
    platform_device_unregister (microcode_pdev);
    microcode_ops = NULL;
    pr_info ("Microcode Update Driver: v" MICROCODE_VERSION " removed.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/crash_dump_64.c.ifdefed" startline="31" endline="51">
{
    void *vaddr;
    if (!csize)
        return 0;
    vaddr = ioremap (pfn << PAGE_SHIFT, PAGE_SIZE);
    if (!vaddr)
        return -ENOMEM;
    if (userbuf) {
        if (copy_to_user (buf, vaddr +offset, csize)) {
            iounmap (vaddr);
            return -EFAULT;
        }
    }
    else
        memcpy (buf, vaddr +offset, csize);
    iounmap (vaddr);
    return csize;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/crash_dump_64.c.ifdefed" startline="41" endline="46">
{
    if (copy_to_user (buf, vaddr +offset, csize)) {
        iounmap (vaddr);
        return -EFAULT;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/crash_dump_64.c.ifdefed" startline="42" endline="45">
{
    iounmap (vaddr);
    return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="67" endline="74">
{
    unsigned long flags;
    write_seqlock_irqsave (& vsyscall_gtod_data.lock, flags);
    vsyscall_gtod_data.sys_tz = sys_tz;
    write_sequnlock_irqrestore (& vsyscall_gtod_data.lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="77" endline="91">
{
    unsigned long flags;
    write_seqlock_irqsave (& vsyscall_gtod_data.lock, flags);
    vsyscall_gtod_data.clock.vread = clock->vread;
    vsyscall_gtod_data.clock.cycle_last = clock->cycle_last;
    vsyscall_gtod_data.clock.mask = clock->mask;
    vsyscall_gtod_data.clock.mult = clock->mult;
    vsyscall_gtod_data.clock.shift = clock->shift;
    vsyscall_gtod_data.wall_time_sec = wall_time->tv_sec;
    vsyscall_gtod_data.wall_time_nsec = wall_time->tv_nsec;
    vsyscall_gtod_data.wall_to_monotonic = wall_to_monotonic;
    write_sequnlock_irqrestore (& vsyscall_gtod_data.lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="97" endline="99">
{
    *tz = __vsyscall_gtod_data.sys_tz;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="102" endline="109">
{
    int ret;
    asm volatile ("syscall"
        : "=a" (ret)
        : "0" (__NR_gettimeofday), "D" (tv), "S" (tz)
        : __syscall_clobber
    ) return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="112" endline="118">
{
    long secs;
    asm volatile ("syscall"
        : "=a" (secs)
        : "0" (__NR_time), "D" (t)
        : __syscall_clobber
    ) return secs;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="121" endline="155">
{
    cycle_t now, base, mask, cycle_delta;
    unsigned seq;
    unsigned long mult, shift, nsec;
    cycle_t (*vread) (void);
    do {
        seq = read_seqbegin (&__vsyscall_gtod_data.lock);
        vread = __vsyscall_gtod_data.clock.vread;
        if (unlikely (!__vsyscall_gtod_data.sysctl_enabled || !vread)) {
            gettimeofday (tv, NULL);
            return;
        }
        now = vread ();
        base = __vsyscall_gtod_data.clock.cycle_last;
        mask = __vsyscall_gtod_data.clock.mask;
        mult = __vsyscall_gtod_data.clock.mult;
        shift = __vsyscall_gtod_data.clock.shift;
        tv->tv_sec = __vsyscall_gtod_data.wall_time_sec;
        nsec = __vsyscall_gtod_data.wall_time_nsec;
    }
    while (read_seqretry (&__vsyscall_gtod_data.lock, seq));
    cycle_delta = (now - base) & mask;
    nsec += (cycle_delta * mult) >> shift;
    while (nsec >= NSEC_PER_SEC) {
        tv->tv_sec += 1;
        nsec -= NSEC_PER_SEC;
    }
    tv->tv_usec = nsec / NSEC_PER_USEC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="126" endline="143">
{
    seq = read_seqbegin (&__vsyscall_gtod_data.lock);
    vread = __vsyscall_gtod_data.clock.vread;
    if (unlikely (!__vsyscall_gtod_data.sysctl_enabled || !vread)) {
        gettimeofday (tv, NULL);
        return;
    }
    now = vread ();
    base = __vsyscall_gtod_data.clock.cycle_last;
    mask = __vsyscall_gtod_data.clock.mask;
    mult = __vsyscall_gtod_data.clock.mult;
    shift = __vsyscall_gtod_data.clock.shift;
    tv->tv_sec = __vsyscall_gtod_data.wall_time_sec;
    nsec = __vsyscall_gtod_data.wall_time_nsec;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="130" endline="133">
{
    gettimeofday (tv, NULL);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="150" endline="153">
{
    tv->tv_sec += 1;
    nsec -= NSEC_PER_SEC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="158" endline="164">
{
    if (tv)
        do_vgettimeofday (tv);
    if (tz)
        do_get_tz (tz);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="169" endline="180">
{
    struct timeval tv;
    time_t result;
    if (unlikely (!__vsyscall_gtod_data.sysctl_enabled))
        return time_syscall (t);
    vgettimeofday (& tv, NULL);
    result = tv.tv_sec;
    if (t)
        *t = result;
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="192" endline="222">
{
    unsigned int p;
    unsigned long j = 0;
    if (tcache && tcache->blob[0] == (j = __jiffies)) {
        p = tcache->blob[1];
    }
    else if (__vgetcpu_mode == VGETCPU_RDTSCP) {
        native_read_tscp (& p);
    }
    else {
        asm ("lsl %1,%0"
            : "=r" (p)
            : "r" (__PER_CPU_SEG)
        )}
    if (tcache) {
        tcache->blob[0] = j;
        tcache->blob[1] = p;
    }
    if (cpu)
        *cpu = p & 0xfff;
    if (node)
        *node = p >> 12;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="204" endline="206">
{
    p = tcache->blob[1];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="206" endline="209">
{
    native_read_tscp (& p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="209" endline="212">
{
    asm ("lsl %1,%0"
        : "=r" (p)
        : "r" (__PER_CPU_SEG)
    )}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="213" endline="216">
{
    tcache->blob[0] = j;
    tcache->blob[1] = p;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="225" endline="227">
{
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="256" endline="273">
{
    unsigned long d;
    unsigned long node = 0;
    if (cpu_has (&cpu_data (cpu), X86_FEATURE_RDTSCP))
        write_rdtscp_aux ((node << 12) | cpu);
    d = 0x0f40000000000ULL;
    d |= cpu;
    d |= (node & 0xf) << 12;
    d |= (node >> 4) << 48;
    write_gdt_entry (get_cpu_gdt_table (cpu), GDT_ENTRY_PER_CPU, & d, DESCTYPE_S);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="276" endline="279">
{
    vsyscall_set_cpu (raw_smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="283" endline="288">
{
    long cpu = (long) arg;
    if (action == CPU_ONLINE || action == CPU_ONLINE_FROZEN)
        smp_call_function_single (cpu, cpu_vsyscall_init, NULL, 1);
    return NOTIFY_DONE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="291" endline="297">
{
    extern char __vsyscall_0;
    unsigned long physaddr_page0 = __pa_symbol (&__vsyscall_0);
    __set_fixmap (VSYSCALL_FIRST_PAGE, physaddr_page0, PAGE_KERNEL_VSYSCALL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsyscall_64.c.ifdefed" startline="300" endline="312">
{
    BUG_ON (((unsigned long) & vgettimeofday != VSYSCALL_ADDR (__NR_vgettimeofday)));
    BUG_ON ((unsigned long) & vtime != VSYSCALL_ADDR (__NR_vtime));
    BUG_ON ((VSYSCALL_ADDR (0) != __fix_to_virt (VSYSCALL_FIRST_PAGE)));
    BUG_ON ((unsigned long) & vgetcpu != VSYSCALL_ADDR (__NR_vgetcpu));
    on_each_cpu (cpu_vsyscall_init, NULL, 1);
    hotcpu_notifier (cpu_vsyscall_notifier, 0);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="39" endline="46">
{
    int sum = 0;
    while (len--)
        sum += *mp++;
    return sum & 0xFF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="49" endline="70">
{
    int apicid;
    char *bootup_cpu = "";
    if (!(m->cpuflag & CPU_ENABLED)) {
        disabled_cpus++;
        return;
    }
    if (x86_quirks->mpc_apic_id)
        apicid = x86_quirks->mpc_apic_id (m);
    else
        apicid = m->apicid;
    if (m->cpuflag & CPU_BOOTPROCESSOR) {
        bootup_cpu = " (Bootup-CPU)";
        boot_cpu_physical_apicid = m->apicid;
    }
    printk (KERN_INFO "Processor #%d%s\n", m -> apicid, bootup_cpu);
    generic_processor_info (apicid, m -> apicver);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="53" endline="56">
{
    disabled_cpus++;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="63" endline="66">
{
    bootup_cpu = " (Bootup-CPU)";
    boot_cpu_physical_apicid = m->apicid;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="226" endline="226">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="227" endline="227">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="228" endline="228">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="233" endline="238">
{
    apic_printk (APIC_VERBOSE, "Lint: type %d, pol %d, trig %d, bus %02x," " IRQ %02x, APIC ID %x, APIC LINT %02x\n", m -> irqtype, m -> irqflag & 3, (m -> irqflag >> 2) & 3, m -> srcbusid, m -> srcbusirq, m -> destapic, m -> destapiclint);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="245" endline="278">
{
    if (memcmp (mpc->signature, MPC_SIGNATURE, 4)) {
        printk (KERN_ERR "MPTABLE: bad signature [%c%c%c%c]!\n", mpc -> signature [0], mpc -> signature [1], mpc -> signature [2], mpc -> signature [3]);
        return 0;
    }
    if (mpf_checksum ((unsigned char *) mpc, mpc->length)) {
        printk (KERN_ERR "MPTABLE: checksum error!\n");
        return 0;
    }
    if (mpc->spec != 0x01 && mpc->spec != 0x04) {
        printk (KERN_ERR "MPTABLE: bad table version (%d)!!\n", mpc -> spec);
        return 0;
    }
    if (!mpc->lapic) {
        printk (KERN_ERR "MPTABLE: null local APIC address!\n");
        return 0;
    }
    memcpy (oem, mpc -> oem, 8);
    oem[8] = 0;
    printk (KERN_INFO "MPTABLE: OEM ID: %s\n", oem);
    memcpy (str, mpc -> productid, 12);
    str[12] = 0;
    printk (KERN_INFO "MPTABLE: Product ID: %s\n", str);
    printk (KERN_INFO "MPTABLE: APIC at: 0x%X\n", mpc -> lapic);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="247" endline="252">
{
    printk (KERN_ERR "MPTABLE: bad signature [%c%c%c%c]!\n", mpc -> signature [0], mpc -> signature [1], mpc -> signature [2], mpc -> signature [3]);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="253" endline="256">
{
    printk (KERN_ERR "MPTABLE: checksum error!\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="257" endline="261">
{
    printk (KERN_ERR "MPTABLE: bad table version (%d)!!\n", mpc -> spec);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="262" endline="265">
{
    printk (KERN_ERR "MPTABLE: null local APIC address!\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="281" endline="284">
{
    *ptr += size;
    *count += size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="287" endline="292">
{
    printk (KERN_ERR "Your mptable is wrong, contact your HW vendor!\n" "type %x\n", * mpt);
    print_hex_dump (KERN_ERR, "  ", DUMP_PREFIX_ADDRESS, 16, 1, mpc, mpc -> length, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="295" endline="370">
{
    char str [16];
    char oem [10];
    int count = sizeof (*mpc);
    unsigned char *mpt = ((unsigned char *) mpc) + count;
    if (!smp_check_mpc (mpc, oem, str))
        return 0;
    if (!acpi_lapic)
        mp_lapic_addr = mpc->lapic;
    if (early)
        return 1;
    if (mpc->oemptr && x86_quirks->smp_read_mpc_oem) {
        struct mpc_oemtable *oem_table = (void *) (long) mpc->oemptr;
        x86_quirks->smp_read_mpc_oem (oem_table, mpc->oemsize);
    }
    if (x86_quirks->mpc_record)
        *x86_quirks->mpc_record = 0;
    while (count < mpc->length) {
        switch (*mpt) {
        case MP_PROCESSOR :
            if (!acpi_lapic)
                MP_processor_info ((struct mpc_cpu *) mpt);
            skip_entry (& mpt, & count, sizeof (struct mpc_cpu));
            break;
        case MP_BUS :
            MP_bus_info ((struct mpc_bus *) mpt);
            skip_entry (& mpt, & count, sizeof (struct mpc_bus));
            break;
        case MP_IOAPIC :
            MP_ioapic_info ((struct mpc_ioapic *) mpt);
            skip_entry (& mpt, & count, sizeof (struct mpc_ioapic));
            break;
        case MP_INTSRC :
            MP_intsrc_info ((struct mpc_intsrc *) mpt);
            skip_entry (& mpt, & count, sizeof (struct mpc_intsrc));
            break;
        case MP_LINTSRC :
            MP_lintsrc_info ((struct mpc_lintsrc *) mpt);
            skip_entry (& mpt, & count, sizeof (struct mpc_lintsrc));
            break;
        default :
            smp_dump_mptable (mpc, mpt);
            count = mpc->length;
            break;
        }
        if (x86_quirks->mpc_record)
            (*x86_quirks->mpc_record)++;
    }
    if (apic->setup_apic_routing)
        apic->setup_apic_routing ();
    if (!num_processors)
        printk (KERN_ERR "MPTABLE: no processors registered!\n");
    return num_processors;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="315" endline="318">
{
    struct mpc_oemtable *oem_table = (void *) (long) mpc->oemptr;
    x86_quirks->smp_read_mpc_oem (oem_table, mpc->oemsize);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="326" endline="358">
{
    switch (*mpt) {
    case MP_PROCESSOR :
        if (!acpi_lapic)
            MP_processor_info ((struct mpc_cpu *) mpt);
        skip_entry (& mpt, & count, sizeof (struct mpc_cpu));
        break;
    case MP_BUS :
        MP_bus_info ((struct mpc_bus *) mpt);
        skip_entry (& mpt, & count, sizeof (struct mpc_bus));
        break;
    case MP_IOAPIC :
        MP_ioapic_info ((struct mpc_ioapic *) mpt);
        skip_entry (& mpt, & count, sizeof (struct mpc_ioapic));
        break;
    case MP_INTSRC :
        MP_intsrc_info ((struct mpc_intsrc *) mpt);
        skip_entry (& mpt, & count, sizeof (struct mpc_intsrc));
        break;
    case MP_LINTSRC :
        MP_lintsrc_info ((struct mpc_lintsrc *) mpt);
        skip_entry (& mpt, & count, sizeof (struct mpc_lintsrc));
        break;
    default :
        smp_dump_mptable (mpc, mpt);
        count = mpc->length;
        break;
    }
    if (x86_quirks->mpc_record)
        (*x86_quirks->mpc_record)++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="327" endline="355">
{
case MP_PROCESSOR :
    if (!acpi_lapic)
        MP_processor_info ((struct mpc_cpu *) mpt);
    skip_entry (& mpt, & count, sizeof (struct mpc_cpu));
    break;
case MP_BUS :
    MP_bus_info ((struct mpc_bus *) mpt);
    skip_entry (& mpt, & count, sizeof (struct mpc_bus));
    break;
case MP_IOAPIC :
    MP_ioapic_info ((struct mpc_ioapic *) mpt);
    skip_entry (& mpt, & count, sizeof (struct mpc_ioapic));
    break;
case MP_INTSRC :
    MP_intsrc_info ((struct mpc_intsrc *) mpt);
    skip_entry (& mpt, & count, sizeof (struct mpc_intsrc));
    break;
case MP_LINTSRC :
    MP_lintsrc_info ((struct mpc_lintsrc *) mpt);
    skip_entry (& mpt, & count, sizeof (struct mpc_lintsrc));
    break;
default :
    smp_dump_mptable (mpc, mpt);
    count = mpc->length;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="498" endline="498">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="502" endline="542">
{
    struct mpc_cpu processor;
    struct mpc_lintsrc lintsrc;
    int linttypes [2] = {mp_ExtINT, mp_NMI};
    int i;
    mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
    processor.type = MP_PROCESSOR;
    processor.apicver = mpc_default_type > 4 ? 0x10 : 0x01;
    processor.cpuflag = CPU_ENABLED;
    processor.cpufeature = (boot_cpu_data.x86 << 8) | (boot_cpu_data.x86_model << 4) | boot_cpu_data.x86_mask;
    processor.featureflag = boot_cpu_data.x86_capability[0];
    processor.reserved[0] = 0;
    processor.reserved[1] = 0;
    for (i = 0; i < 2; i++) {
        processor.apicid = i;
        MP_processor_info (& processor);
    }
    construct_ioapic_table (mpc_default_type);
    lintsrc.type = MP_LINTSRC;
    lintsrc.irqflag = 0;
    lintsrc.srcbusid = 0;
    lintsrc.srcbusirq = 0;
    lintsrc.destapic = MP_APIC_ALL;
    for (i = 0; i < 2; i++) {
        lintsrc.irqtype = linttypes[i];
        lintsrc.destapiclint = i;
        MP_lintsrc_info (& lintsrc);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="525" endline="528">
{
    processor.apicid = i;
    MP_processor_info (& processor);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="537" endline="541">
{
    lintsrc.irqtype = linttypes[i];
    lintsrc.destapiclint = i;
    MP_lintsrc_info (& lintsrc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="547" endline="557">
{
    struct mpc_table *mpc;
    unsigned long size;
    mpc = early_ioremap (physptr, PAGE_SIZE);
    size = mpc->length;
    early_iounmap (mpc, PAGE_SIZE);
    apic_printk (APIC_VERBOSE, "  mpc: %lx-%lx\n", physptr, physptr + size);
    return size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="560" endline="606">
{
    struct mpc_table *mpc;
    unsigned long size;
    size = get_mpc_size (mpf->physptr);
    mpc = early_ioremap (mpf->physptr, size);
    if (!smp_read_mpc (mpc, early)) {
        printk (KERN_ERR "BIOS bug, MP table errors detected!...\n" "... disabling SMP support. (tell your hw vendor)\n");
        early_iounmap (mpc, size);
        return -1;
    }
    early_iounmap (mpc, size);
    if (early)
        return -1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="570" endline="578">
{
    printk (KERN_ERR "BIOS bug, MP table errors detected!...\n" "... disabling SMP support. (tell your hw vendor)\n");
    early_iounmap (mpc, size);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="612" endline="671">
{
    struct mpf_intel *mpf = mpf_found;
    if (!mpf)
        return;
    if (acpi_lapic && early)
        return;
    if (acpi_lapic && acpi_ioapic)
        return;
    if (x86_quirks->mach_get_smp_config) {
        if (x86_quirks->mach_get_smp_config (early))
            return;
    }
    printk (KERN_INFO "Intel MultiProcessor Specification v1.%d\n", mpf -> specification);
    if (mpf->feature1 != 0) {
        if (early) {
            mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
            return;
        }
        printk (KERN_INFO "Default MP configuration #%d\n", mpf -> feature1);
        construct_default_ISA_mptable (mpf -> feature1);
    }
    else if (mpf->physptr) {
        if (check_physptr (mpf, early))
            return;
    }
    else
        BUG ();
    if (!early)
        printk (KERN_INFO "Processors: %d\n", num_processors);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="628" endline="631">
{
    if (x86_quirks->mach_get_smp_config (early))
        return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="647" endline="660">
{
    if (early) {
        mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
        return;
    }
    printk (KERN_INFO "Default MP configuration #%d\n", mpf -> feature1);
    construct_default_ISA_mptable (mpf -> feature1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="648" endline="654">
{
    mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="660" endline="663">
{
    if (check_physptr (mpf, early))
        return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="674" endline="676">
{
    __get_smp_config (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="679" endline="681">
{
    __get_smp_config (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="684" endline="706">
{
    unsigned long size = get_mpc_size (mpf->physptr);
    reserve_bootmem_generic (mpf -> physptr, size, BOOTMEM_DEFAULT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="710" endline="746">
{
    unsigned int *bp = phys_to_virt (base);
    struct mpf_intel *mpf;
    apic_printk (APIC_VERBOSE, "Scan SMP from %p for %ld bytes.\n", bp, length);
    BUILD_BUG_ON (sizeof (* mpf) != 16);
    while (length > 0) {
        mpf = (struct mpf_intel *) bp;
        if ((*bp == SMP_MAGIC_IDENT) && (mpf->length == 1) && !mpf_checksum ((unsigned char *) bp, 16) && ((mpf->specification == 1) || (mpf->specification == 4))) {
            mpf_found = mpf;
            printk (KERN_INFO "found SMP MP-table at [%p] %llx\n", mpf, (u64) virt_to_phys (mpf));
            if (!reserve)
                return 1;
            reserve_bootmem_generic (virt_to_phys (mpf), sizeof (* mpf), BOOTMEM_DEFAULT);
            if (mpf->physptr)
                smp_reserve_bootmem (mpf);
            return 1;
        }
        bp += 4;
        length -= 16;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="718" endline="744">
{
    mpf = (struct mpf_intel *) bp;
    if ((*bp == SMP_MAGIC_IDENT) && (mpf->length == 1) && !mpf_checksum ((unsigned char *) bp, 16) && ((mpf->specification == 1) || (mpf->specification == 4))) {
        mpf_found = mpf;
        printk (KERN_INFO "found SMP MP-table at [%p] %llx\n", mpf, (u64) virt_to_phys (mpf));
        if (!reserve)
            return 1;
        reserve_bootmem_generic (virt_to_phys (mpf), sizeof (* mpf), BOOTMEM_DEFAULT);
        if (mpf->physptr)
            smp_reserve_bootmem (mpf);
        return 1;
    }
    bp += 4;
    length -= 16;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="724" endline="741">
{
    mpf_found = mpf;
    printk (KERN_INFO "found SMP MP-table at [%p] %llx\n", mpf, (u64) virt_to_phys (mpf));
    if (!reserve)
        return 1;
    reserve_bootmem_generic (virt_to_phys (mpf), sizeof (* mpf), BOOTMEM_DEFAULT);
    if (mpf->physptr)
        smp_reserve_bootmem (mpf);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="749" endline="788">
{
    unsigned int address;
    if (x86_quirks->mach_find_smp_config) {
        if (x86_quirks->mach_find_smp_config (reserve))
            return;
    }
    if (smp_scan_config (0x0, 0x400, reserve) || smp_scan_config (639 * 0x400, 0x400, reserve) || smp_scan_config (0xF0000, 0x10000, reserve))
        return;
    address = get_bios_ebda ();
    if (address)
        smp_scan_config (address, 0x400, reserve);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="752" endline="755">
{
    if (x86_quirks->mach_find_smp_config (reserve))
        return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="791" endline="793">
{
    __find_smp_config (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="796" endline="798">
{
    __find_smp_config (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="871" endline="871">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="876" endline="885">
{
    int ret = 0;
    if (!mpc_new_phys || count <= mpc_new_length) {
        WARN (1, "update_mptable: No spare slots (length: %x)\n", count);
        return -1;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="879" endline="882">
{
    WARN (1, "update_mptable: No spare slots (length: %x)\n", count);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="890" endline="958">
{
    int count = sizeof (*mpc);
    int nr_m_spare = 0;
    unsigned char *mpt = ((unsigned char *) mpc) + count;
    printk (KERN_INFO "mpc_length %x\n", mpc -> length);
    while (count < mpc->length) {
        switch (*mpt) {
        case MP_PROCESSOR :
            skip_entry (&mpt, &count, sizeof (struct mpc_cpu));
            break;
        case MP_BUS :
            skip_entry (&mpt, &count, sizeof (struct mpc_bus));
            break;
        case MP_IOAPIC :
            skip_entry (&mpt, &count, sizeof (struct mpc_ioapic));
            break;
        case MP_INTSRC :
            check_irq_src ((struct mpc_intsrc *) mpt, &nr_m_spare);
            skip_entry (& mpt, & count, sizeof (struct mpc_intsrc));
            break;
        case MP_LINTSRC :
            skip_entry (&mpt, &count, sizeof (struct mpc_lintsrc));
            break;
        default :
            smp_dump_mptable (mpc, mpt);
            goto out;
        }
    }
out :
    mpc->checksum = 0;
    mpc->checksum -= mpf_checksum ((unsigned char *) mpc, mpc->length);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="899" endline="922">
{
    switch (*mpt) {
    case MP_PROCESSOR :
        skip_entry (&mpt, &count, sizeof (struct mpc_cpu));
        break;
    case MP_BUS :
        skip_entry (&mpt, &count, sizeof (struct mpc_bus));
        break;
    case MP_IOAPIC :
        skip_entry (&mpt, &count, sizeof (struct mpc_ioapic));
        break;
    case MP_INTSRC :
        check_irq_src ((struct mpc_intsrc *) mpt, &nr_m_spare);
        skip_entry (& mpt, & count, sizeof (struct mpc_intsrc));
        break;
    case MP_LINTSRC :
        skip_entry (&mpt, &count, sizeof (struct mpc_lintsrc));
        break;
    default :
        smp_dump_mptable (mpc, mpt);
        goto out;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="900" endline="921">
{
case MP_PROCESSOR :
    skip_entry (&mpt, &count, sizeof (struct mpc_cpu));
    break;
case MP_BUS :
    skip_entry (&mpt, &count, sizeof (struct mpc_bus));
    break;
case MP_IOAPIC :
    skip_entry (&mpt, &count, sizeof (struct mpc_ioapic));
    break;
case MP_INTSRC :
    check_irq_src ((struct mpc_intsrc *) mpt, &nr_m_spare);
    skip_entry (& mpt, & count, sizeof (struct mpc_intsrc));
    break;
case MP_LINTSRC :
    skip_entry (&mpt, &count, sizeof (struct mpc_lintsrc));
    break;
default :
    smp_dump_mptable (mpc, mpt);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="963" endline="969">
{
    enable_update_mptable = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="978" endline="988">
{
    enable_update_mptable = 1;
    alloc_mptable = 1;
    if (!p)
        return 0;
    mpc_new_length = memparse (p, &p);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="992" endline="1000">
{
    if (enable_update_mptable && alloc_mptable) {
        u64 startt = 0;
        mpc_new_phys = early_reserve_e820 (startt, mpc_new_length, 4);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="993" endline="999">
{
    u64 startt = 0;
    mpc_new_phys = early_reserve_e820 (startt, mpc_new_length, 4);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="1003" endline="1080">
{
    char str [16];
    char oem [10];
    struct mpf_intel *mpf;
    struct mpc_table *mpc, *mpc_new;
    if (!enable_update_mptable)
        return 0;
    mpf = mpf_found;
    if (!mpf)
        return 0;
    if (mpf->feature1 != 0)
        return 0;
    if (!mpf->physptr)
        return 0;
    mpc = phys_to_virt (mpf->physptr);
    if (!smp_check_mpc (mpc, oem, str))
        return 0;
    printk (KERN_INFO "mpf: %llx\n", (u64) virt_to_phys (mpf));
    printk (KERN_INFO "physptr: %x\n", mpf -> physptr);
    if (mpc_new_phys && mpc->length > mpc_new_length) {
        mpc_new_phys = 0;
        printk (KERN_INFO "mpc_new_length is %ld, please use alloc_mptable=8k\n", mpc_new_length);
    }
    if (!mpc_new_phys) {
        unsigned char old, new;
        mpc->checksum = 0;
        old = mpf_checksum ((unsigned char *) mpc, mpc->length);
        mpc->checksum = 0xff;
        new = mpf_checksum ((unsigned char *) mpc, mpc->length);
        if (old == new) {
            printk (KERN_INFO "mpc is readonly, please try alloc_mptable instead\n");
            return 0;
        }
        printk (KERN_INFO "use in-positon replacing\n");
    }
    else {
        mpf->physptr = mpc_new_phys;
        mpc_new = phys_to_virt (mpc_new_phys);
        memcpy (mpc_new, mpc, mpc -> length);
        mpc = mpc_new;
        if (mpc_new_phys - mpf->physptr) {
            struct mpf_intel *mpf_new;
            printk (KERN_INFO "mpf new: %x\n", 0x400 - 16);
            mpf_new = phys_to_virt (0x400 - 16);
            memcpy (mpf_new, mpf, 16);
            mpf = mpf_new;
            mpf->physptr = mpc_new_phys;
        }
        mpf->checksum = 0;
        mpf->checksum -= mpf_checksum ((unsigned char *) mpf, 16);
        printk (KERN_INFO "physptr new: %x\n", mpf -> physptr);
    }
    replace_intsrc_all (mpc, mpc_new_phys, mpc_new_length);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="1033" endline="1037">
{
    mpc_new_phys = 0;
    printk (KERN_INFO "mpc_new_length is %ld, please use alloc_mptable=8k\n", mpc_new_length);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="1039" endline="1051">
{
    unsigned char old, new;
    mpc->checksum = 0;
    old = mpf_checksum ((unsigned char *) mpc, mpc->length);
    mpc->checksum = 0xff;
    new = mpf_checksum ((unsigned char *) mpc, mpc->length);
    if (old == new) {
        printk (KERN_INFO "mpc is readonly, please try alloc_mptable instead\n");
        return 0;
    }
    printk (KERN_INFO "use in-positon replacing\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="1046" endline="1049">
{
    printk (KERN_INFO "mpc is readonly, please try alloc_mptable instead\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="1051" endline="1069">
{
    mpf->physptr = mpc_new_phys;
    mpc_new = phys_to_virt (mpc_new_phys);
    memcpy (mpc_new, mpc, mpc -> length);
    mpc = mpc_new;
    if (mpc_new_phys - mpf->physptr) {
        struct mpf_intel *mpf_new;
        printk (KERN_INFO "mpf new: %x\n", 0x400 - 16);
        mpf_new = phys_to_virt (0x400 - 16);
        memcpy (mpf_new, mpf, 16);
        mpf = mpf_new;
        mpf->physptr = mpc_new_phys;
    }
    mpf->checksum = 0;
    mpf->checksum -= mpf_checksum ((unsigned char *) mpf, 16);
    printk (KERN_INFO "physptr new: %x\n", mpf -> physptr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/mpparse.c.ifdefed" startline="1057" endline="1065">
{
    struct mpf_intel *mpf_new;
    printk (KERN_INFO "mpf new: %x\n", 0x400 - 16);
    mpf_new = phys_to_virt (0x400 - 16);
    memcpy (mpf_new, mpf, 16);
    mpf = mpf_new;
    mpf->physptr = mpc_new_phys;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="70" endline="72">
{
    return unlikely (value != 0 && (value & SEGMENT_RPL_MASK) != USER_RPL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="149" endline="152">
{
    BUILD_BUG_ON (offsetof (struct pt_regs, r15) != 0);
    return &regs->r15 + (offset / sizeof (regs->r15));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="155" endline="193">
{
    unsigned int seg;
    switch (offset) {
    case offsetof (struct user_regs_struct, fs) :
        if (task == current) {
            asm ("movl %%fs,%0"
                : "=r" (seg)
            ) return seg;
        }
        return task->thread.fsindex;
    case offsetof (struct user_regs_struct, gs) :
        if (task == current) {
            asm ("movl %%gs,%0"
                : "=r" (seg)
            ) return seg;
        }
        return task->thread.gsindex;
    case offsetof (struct user_regs_struct, ds) :
        if (task == current) {
            asm ("movl %%ds,%0"
                : "=r" (seg)
            ) return seg;
        }
        return task->thread.ds;
    case offsetof (struct user_regs_struct, es) :
        if (task == current) {
            asm ("movl %%es,%0"
                : "=r" (seg)
            ) return seg;
        }
        return task->thread.es;
    case offsetof (struct user_regs_struct, cs) :
    case offsetof (struct user_regs_struct, ss) :
        break;
    }
    return *pt_regs_access (task_pt_regs (task), offset);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="161" endline="191">
{
case offsetof (struct user_regs_struct, fs) :
    if (task == current) {
        asm ("movl %%fs,%0"
            : "=r" (seg)
        ) return seg;
    }
    return task->thread.fsindex;
case offsetof (struct user_regs_struct, gs) :
    if (task == current) {
        asm ("movl %%gs,%0"
            : "=r" (seg)
        ) return seg;
    }
    return task->thread.gsindex;
case offsetof (struct user_regs_struct, ds) :
    if (task == current) {
        asm ("movl %%ds,%0"
            : "=r" (seg)
        ) return seg;
    }
    return task->thread.ds;
case offsetof (struct user_regs_struct, es) :
    if (task == current) {
        asm ("movl %%es,%0"
            : "=r" (seg)
        ) return seg;
    }
    return task->thread.es;
case offsetof (struct user_regs_struct, cs) :
case offsetof (struct user_regs_struct, ss) :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="163" endline="167">
{
    asm ("movl %%fs,%0"
        : "=r" (seg)
    ) return seg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="170" endline="173">
{
    asm ("movl %%gs,%0"
        : "=r" (seg)
    ) return seg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="176" endline="179">
{
    asm ("movl %%ds,%0"
        : "=r" (seg)
    ) return seg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="182" endline="185">
{
    asm ("movl %%es,%0"
        : "=r" (seg)
    ) return seg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="197" endline="266">
{
    if (invalid_selector (value))
        return -EIO;
    switch (offset) {
    case offsetof (struct user_regs_struct, fs) :
        if ((value == FS_TLS_SEL && task->thread.fsindex == 0 && task->thread.fs != 0) || (value == 0 && task->thread.fsindex == FS_TLS_SEL && task->thread.fs == 0))
            break;
        task->thread.fsindex = value;
        if (task == current)
            loadsegment (fs, task->thread.fsindex);
        break;
    case offsetof (struct user_regs_struct, gs) :
        if ((value == GS_TLS_SEL && task->thread.gsindex == 0 && task->thread.gs != 0) || (value == 0 && task->thread.gsindex == GS_TLS_SEL && task->thread.gs == 0))
            break;
        task->thread.gsindex = value;
        if (task == current)
            load_gs_index (task->thread.gsindex);
        break;
    case offsetof (struct user_regs_struct, ds) :
        task->thread.ds = value;
        if (task == current)
            loadsegment (ds, task->thread.ds);
        break;
    case offsetof (struct user_regs_struct, es) :
        task->thread.es = value;
        if (task == current)
            loadsegment (es, task->thread.es);
        break;
    case offsetof (struct user_regs_struct, cs) :
        if (unlikely (value == 0))
            return -EIO;
        break;
    case offsetof (struct user_regs_struct, ss) :
        if (unlikely (value == 0))
            return -EIO;
        break;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="204" endline="263">
{
case offsetof (struct user_regs_struct, fs) :
    if ((value == FS_TLS_SEL && task->thread.fsindex == 0 && task->thread.fs != 0) || (value == 0 && task->thread.fsindex == FS_TLS_SEL && task->thread.fs == 0))
        break;
    task->thread.fsindex = value;
    if (task == current)
        loadsegment (fs, task->thread.fsindex);
    break;
case offsetof (struct user_regs_struct, gs) :
    if ((value == GS_TLS_SEL && task->thread.gsindex == 0 && task->thread.gs != 0) || (value == 0 && task->thread.gsindex == GS_TLS_SEL && task->thread.gs == 0))
        break;
    task->thread.gsindex = value;
    if (task == current)
        load_gs_index (task->thread.gsindex);
    break;
case offsetof (struct user_regs_struct, ds) :
    task->thread.ds = value;
    if (task == current)
        loadsegment (ds, task->thread.ds);
    break;
case offsetof (struct user_regs_struct, es) :
    task->thread.es = value;
    if (task == current)
        loadsegment (es, task->thread.es);
    break;
case offsetof (struct user_regs_struct, cs) :
    if (unlikely (value == 0))
        return -EIO;
    break;
case offsetof (struct user_regs_struct, ss) :
    if (unlikely (value == 0))
        return -EIO;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="269" endline="275">
{
    return TASK_SIZE_MAX - 7;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="280" endline="290">
{
    unsigned long retval = task_pt_regs (task)->flags;
    if (test_tsk_thread_flag (task, TIF_FORCED_TF))
        retval &= ~X86_EFLAGS_TF;
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="293" endline="309">
{
    struct pt_regs *regs = task_pt_regs (task);
    if (value & X86_EFLAGS_TF)
        clear_tsk_thread_flag (task, TIF_FORCED_TF);
    else if (test_tsk_thread_flag (task, TIF_FORCED_TF))
        value |= X86_EFLAGS_TF;
    regs->flags = (regs->flags & ~FLAG_MASK) | (value & FLAG_MASK);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="313" endline="362">
{
    switch (offset) {
    case offsetof (struct user_regs_struct, cs) :
    case offsetof (struct user_regs_struct, ds) :
    case offsetof (struct user_regs_struct, es) :
    case offsetof (struct user_regs_struct, fs) :
    case offsetof (struct user_regs_struct, gs) :
    case offsetof (struct user_regs_struct, ss) :
        return set_segment_reg (child, offset, value);
    case offsetof (struct user_regs_struct, flags) :
        return set_flags (child, value);
    }
    *pt_regs_access (task_pt_regs (child), offset) = value;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="314" endline="358">
{
case offsetof (struct user_regs_struct, cs) :
case offsetof (struct user_regs_struct, ds) :
case offsetof (struct user_regs_struct, es) :
case offsetof (struct user_regs_struct, fs) :
case offsetof (struct user_regs_struct, gs) :
case offsetof (struct user_regs_struct, ss) :
    return set_segment_reg (child, offset, value);
case offsetof (struct user_regs_struct, flags) :
    return set_flags (child, value);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="365" endline="411">
{
    switch (offset) {
    case offsetof (struct user_regs_struct, cs) :
    case offsetof (struct user_regs_struct, ds) :
    case offsetof (struct user_regs_struct, es) :
    case offsetof (struct user_regs_struct, fs) :
    case offsetof (struct user_regs_struct, gs) :
    case offsetof (struct user_regs_struct, ss) :
        return get_segment_reg (task, offset);
    case offsetof (struct user_regs_struct, flags) :
        return get_flags (task);
    }
    return *pt_regs_access (task_pt_regs (task), offset);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="366" endline="408">
{
case offsetof (struct user_regs_struct, cs) :
case offsetof (struct user_regs_struct, ds) :
case offsetof (struct user_regs_struct, es) :
case offsetof (struct user_regs_struct, fs) :
case offsetof (struct user_regs_struct, gs) :
case offsetof (struct user_regs_struct, ss) :
    return get_segment_reg (task, offset);
case offsetof (struct user_regs_struct, flags) :
    return get_flags (task);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="417" endline="436">
{
    if (kbuf) {
        unsigned long *k = kbuf;
        while (count > 0) {
            *k++ = getreg (target, pos);
            count -= sizeof (*k);
            pos += sizeof (*k);
        }
    }
    else {
        unsigned long __user *u = ubuf;
        while (count > 0) {
            if (__put_user (getreg (target, pos), u++))
                return -EFAULT;
            count -= sizeof (*u);
            pos += sizeof (*u);
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="418" endline="425">
{
    unsigned long *k = kbuf;
    while (count > 0) {
        *k++ = getreg (target, pos);
        count -= sizeof (*k);
        pos += sizeof (*k);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="420" endline="424">
{
    *k++ = getreg (target, pos);
    count -= sizeof (*k);
    pos += sizeof (*k);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="425" endline="433">
{
    unsigned long __user *u = ubuf;
    while (count > 0) {
        if (__put_user (getreg (target, pos), u++))
            return -EFAULT;
        count -= sizeof (*u);
        pos += sizeof (*u);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="427" endline="432">
{
    if (__put_user (getreg (target, pos), u++))
        return -EFAULT;
    count -= sizeof (*u);
    pos += sizeof (*u);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="442" endline="464">
{
    int ret = 0;
    if (kbuf) {
        const unsigned long *k = kbuf;
        while (count > 0 && !ret) {
            ret = putreg (target, pos, *k++);
            count -= sizeof (*k);
            pos += sizeof (*k);
        }
    }
    else {
        const unsigned long __user *u = ubuf;
        while (count > 0 && !ret) {
            unsigned long word;
            ret = __get_user (word, u++);
            if (ret)
                break;
            ret = putreg (target, pos, word);
            count -= sizeof (*u);
            pos += sizeof (*u);
        }
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="444" endline="451">
{
    const unsigned long *k = kbuf;
    while (count > 0 && !ret) {
        ret = putreg (target, pos, *k++);
        count -= sizeof (*k);
        pos += sizeof (*k);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="446" endline="450">
{
    ret = putreg (target, pos, *k++);
    count -= sizeof (*k);
    pos += sizeof (*k);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="451" endline="462">
{
    const unsigned long __user *u = ubuf;
    while (count > 0 && !ret) {
        unsigned long word;
        ret = __get_user (word, u++);
        if (ret)
            break;
        ret = putreg (target, pos, word);
        count -= sizeof (*u);
        pos += sizeof (*u);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="453" endline="461">
{
    unsigned long word;
    ret = __get_user (word, u++);
    if (ret)
        break;
    ret = putreg (target, pos, word);
    count -= sizeof (*u);
    pos += sizeof (*u);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="472" endline="482">
{
    switch (n) {
    case 0 :
        return child->thread.debugreg0;
    case 1 :
        return child->thread.debugreg1;
    case 2 :
        return child->thread.debugreg2;
    case 3 :
        return child->thread.debugreg3;
    case 6 :
        return child->thread.debugreg6;
    case 7 :
        return child->thread.debugreg7;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="473" endline="480">
{
case 0 :
    return child->thread.debugreg0;
case 1 :
    return child->thread.debugreg1;
case 2 :
    return child->thread.debugreg2;
case 3 :
    return child->thread.debugreg3;
case 6 :
    return child->thread.debugreg6;
case 7 :
    return child->thread.debugreg7;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="486" endline="556">
{
    int i;
    if (unlikely (n == 4 || n == 5))
        return -EIO;
    if (n < 4 && unlikely (data >= debugreg_addr_limit (child)))
        return -EIO;
    switch (n) {
    case 0 :
        child->thread.debugreg0 = data;
        break;
    case 1 :
        child->thread.debugreg1 = data;
        break;
    case 2 :
        child->thread.debugreg2 = data;
        break;
    case 3 :
        child->thread.debugreg3 = data;
        break;
    case 6 :
        if ((data & ~0xffffffffUL) != 0)
            return -EIO;
        child->thread.debugreg6 = data;
        break;
    case 7 :
        data &= ~DR_CONTROL_RESERVED;
        for (i = 0; i < 4; i++)
            if ((DR7_MASK >> ((data >> (16 + 4 * i)) & 0xf)) & 1)
                return -EIO;
        child->thread.debugreg7 = data;
        if (data)
            set_tsk_thread_flag (child, TIF_DEBUG);
        else
            clear_tsk_thread_flag (child, TIF_DEBUG);
        break;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="495" endline="553">
{
case 0 :
    child->thread.debugreg0 = data;
    break;
case 1 :
    child->thread.debugreg1 = data;
    break;
case 2 :
    child->thread.debugreg2 = data;
    break;
case 3 :
    child->thread.debugreg3 = data;
    break;
case 6 :
    if ((data & ~0xffffffffUL) != 0)
        return -EIO;
    child->thread.debugreg6 = data;
    break;
case 7 :
    data &= ~DR_CONTROL_RESERVED;
    for (i = 0; i < 4; i++)
        if ((DR7_MASK >> ((data >> (16 + 4 * i)) & 0xf)) & 1)
            return -EIO;
    child->thread.debugreg7 = data;
    if (data)
        set_tsk_thread_flag (child, TIF_DEBUG);
    else
        clear_tsk_thread_flag (child, TIF_DEBUG);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="564" endline="566">
{
    return target->thread.io_bitmap_max / regset->size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="572" endline="579">
{
    if (!target->thread.io_bitmap_ptr)
        return -ENXIO;
    return user_regset_copyout (&pos, &count, &kbuf, &ubuf, target->thread.io_bitmap_ptr, 0, IO_BITMAP_BYTES);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="923" endline="928">
{
    user_disable_single_step (child);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="935" endline="1083">
{
    int ret;
    unsigned long __user *datap = (unsigned long __user *) data;
    switch (request) {
    case PTRACE_PEEKUSR :
        {
            unsigned long tmp;
            ret = -EIO;
            if ((addr & (sizeof (data) - 1)) || addr < 0 || addr >= sizeof (struct user))
                break;
            tmp = 0;
            if (addr < sizeof (struct user_regs_struct))
                tmp = getreg (child, addr);
            else if (addr >= offsetof (struct user, u_debugreg[0]) && addr <= offsetof (struct user, u_debugreg[7])) {
                addr -= offsetof (struct user, u_debugreg[0]);
                tmp = ptrace_get_debugreg (child, addr / sizeof (data));
            }
            ret = put_user (tmp, datap);
            break;
        }
    case PTRACE_POKEUSR :
        ret = -EIO;
        if ((addr & (sizeof (data) - 1)) || addr < 0 || addr >= sizeof (struct user))
            break;
        if (addr < sizeof (struct user_regs_struct))
            ret = putreg (child, addr, data);
        else if (addr >= offsetof (struct user, u_debugreg[0]) && addr <= offsetof (struct user, u_debugreg[7])) {
            addr -= offsetof (struct user, u_debugreg[0]);
            ret = ptrace_set_debugreg (child, addr / sizeof (data), data);
        }
        break;
    case PTRACE_GETREGS :
        return copy_regset_to_user (child, task_user_regset_view (current), REGSET_GENERAL, 0, sizeof (struct user_regs_struct), datap);
    case PTRACE_SETREGS :
        return copy_regset_from_user (child, task_user_regset_view (current), REGSET_GENERAL, 0, sizeof (struct user_regs_struct), datap);
    case PTRACE_GETFPREGS :
        return copy_regset_to_user (child, task_user_regset_view (current), REGSET_FP, 0, sizeof (struct user_i387_struct), datap);
    case PTRACE_SETFPREGS :
        return copy_regset_from_user (child, task_user_regset_view (current), REGSET_FP, 0, sizeof (struct user_i387_struct), datap);
    default :
        ret = ptrace_request (child, request, addr, data);
        break;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="939" endline="1080">
{
case PTRACE_PEEKUSR :
    {
        unsigned long tmp;
        ret = -EIO;
        if ((addr & (sizeof (data) - 1)) || addr < 0 || addr >= sizeof (struct user))
            break;
        tmp = 0;
        if (addr < sizeof (struct user_regs_struct))
            tmp = getreg (child, addr);
        else if (addr >= offsetof (struct user, u_debugreg[0]) && addr <= offsetof (struct user, u_debugreg[7])) {
            addr -= offsetof (struct user, u_debugreg[0]);
            tmp = ptrace_get_debugreg (child, addr / sizeof (data));
        }
        ret = put_user (tmp, datap);
        break;
    }
case PTRACE_POKEUSR :
    ret = -EIO;
    if ((addr & (sizeof (data) - 1)) || addr < 0 || addr >= sizeof (struct user))
        break;
    if (addr < sizeof (struct user_regs_struct))
        ret = putreg (child, addr, data);
    else if (addr >= offsetof (struct user, u_debugreg[0]) && addr <= offsetof (struct user, u_debugreg[7])) {
        addr -= offsetof (struct user, u_debugreg[0]);
        ret = ptrace_set_debugreg (child, addr / sizeof (data), data);
    }
    break;
case PTRACE_GETREGS :
    return copy_regset_to_user (child, task_user_regset_view (current), REGSET_GENERAL, 0, sizeof (struct user_regs_struct), datap);
case PTRACE_SETREGS :
    return copy_regset_from_user (child, task_user_regset_view (current), REGSET_GENERAL, 0, sizeof (struct user_regs_struct), datap);
case PTRACE_GETFPREGS :
    return copy_regset_to_user (child, task_user_regset_view (current), REGSET_FP, 0, sizeof (struct user_i387_struct), datap);
case PTRACE_SETFPREGS :
    return copy_regset_from_user (child, task_user_regset_view (current), REGSET_FP, 0, sizeof (struct user_i387_struct), datap);
default :
    ret = ptrace_request (child, request, addr, data);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="941" endline="959">
{
    unsigned long tmp;
    ret = -EIO;
    if ((addr & (sizeof (data) - 1)) || addr < 0 || addr >= sizeof (struct user))
        break;
    tmp = 0;
    if (addr < sizeof (struct user_regs_struct))
        tmp = getreg (child, addr);
    else if (addr >= offsetof (struct user, u_debugreg[0]) && addr <= offsetof (struct user, u_debugreg[7])) {
        addr -= offsetof (struct user, u_debugreg[0]);
        tmp = ptrace_get_debugreg (child, addr / sizeof (data));
    }
    ret = put_user (tmp, datap);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="953" endline="956">
{
    addr -= offsetof (struct user, u_debugreg[0]);
    tmp = ptrace_get_debugreg (child, addr / sizeof (data));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="970" endline="974">
{
    addr -= offsetof (struct user, u_debugreg[0]);
    ret = ptrace_set_debugreg (child, addr / sizeof (data), data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="1432" endline="1442">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="1446" endline="1461">
{
    struct siginfo info;
    tsk->thread.trap_no = 1;
    tsk->thread.error_code = error_code;
    memset (& info, 0, sizeof (info));
    info.si_signo = SIGTRAP;
    info.si_code = si_code;
    info.si_addr = user_mode_vm (regs) ? (void __user *) regs->ip : NULL;
    force_sig_info (SIGTRAP, & info, tsk);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="1477" endline="1519">
{
    long ret = 0;
    if (test_thread_flag (TIF_SINGLESTEP))
        regs->flags |= X86_EFLAGS_TF;
    secure_computing (regs -> orig_ax);
    if (unlikely (test_thread_flag (TIF_SYSCALL_EMU)))
        ret = -1L;
    if ((ret || test_thread_flag (TIF_SYSCALL_TRACE)) && tracehook_report_syscall_entry (regs))
        ret = -1L;
    if (unlikely (test_thread_flag (TIF_SYSCALL_FTRACE)))
        ftrace_syscall_enter (regs);
    if (unlikely (current->audit_context)) {
        if (IS_IA32)
            audit_syscall_entry (AUDIT_ARCH_I386, regs->orig_ax, regs->bx, regs->cx, regs->dx, regs->si);
    }
    return ret ? : regs->orig_ax;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="1503" endline="1516">
{
    if (IS_IA32)
        audit_syscall_entry (AUDIT_ARCH_I386, regs->orig_ax, regs->bx, regs->cx, regs->dx, regs->si);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/ptrace.c.ifdefed" startline="1522" endline="1548">
{
    if (unlikely (current->audit_context))
        audit_syscall_exit (AUDITSC_RESULT (regs->ax), regs->ax);
    if (unlikely (test_thread_flag (TIF_SYSCALL_FTRACE)))
        ftrace_syscall_exit (regs);
    if (test_thread_flag (TIF_SYSCALL_TRACE))
        tracehook_report_syscall_exit (regs, 0);
    if (unlikely (test_thread_flag (TIF_SYSCALL_EMU)))
        return;
    if (test_thread_flag (TIF_SINGLESTEP) && tracehook_consider_fatal_signal (current, SIGTRAP))
        send_sigtrap (current, regs, 0, TRAP_BRKPT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/trampoline.c.ifdefed" startline="10" endline="22">
{
    reserve_early (TRAMPOLINE_BASE, TRAMPOLINE_BASE + TRAMPOLINE_SIZE, "TRAMPOLINE");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/trampoline.c.ifdefed" startline="30" endline="33">
{
    memcpy (trampoline_base, trampoline_data, TRAMPOLINE_SIZE);
    return virt_to_phys (trampoline_base);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="40" endline="46">
{
    if (cpu_has_clflush)
        clflush (tceaddr);
    else
        wbinvd ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="50" endline="72">
{
    u64 *tp;
    u64 t;
    u64 rpn;
    t = (1 << TCE_READ_SHIFT);
    if (direction != DMA_TO_DEVICE)
        t |= (1 << TCE_WRITE_SHIFT);
    tp = ((u64 *) tbl->it_base) + index;
    while (npages--) {
        rpn = (virt_to_bus ((void *) uaddr)) >> PAGE_SHIFT;
        t &= ~TCE_RPN_MASK;
        t |= (rpn << TCE_RPN_SHIFT);
        *tp = cpu_to_be64 (t);
        flush_tce (tp);
        uaddr += PAGE_SIZE;
        tp++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="61" endline="71">
{
    rpn = (virt_to_bus ((void *) uaddr)) >> PAGE_SHIFT;
    t &= ~TCE_RPN_MASK;
    t |= (rpn << TCE_RPN_SHIFT);
    *tp = cpu_to_be64 (t);
    flush_tce (tp);
    uaddr += PAGE_SIZE;
    tp++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="75" endline="85">
{
    u64 *tp;
    tp = ((u64 *) tbl->it_base) + index;
    while (npages--) {
        *tp = cpu_to_be64 (0);
        flush_tce (tp);
        tp++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="80" endline="84">
{
    *tp = cpu_to_be64 (0);
    flush_tce (tp);
    tp++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="88" endline="95">
{
    return (1 << size) << 13;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="98" endline="132">
{
    unsigned int bitmapsz;
    unsigned long bmppages;
    int ret;
    tbl->it_busno = dev->bus->number;
    tbl->it_size = table_size_to_number_of_entries (specified_table_size);
    bitmapsz = tbl->it_size / BITS_PER_BYTE;
    bmppages = __get_free_pages (GFP_KERNEL, get_order (bitmapsz));
    if (!bmppages) {
        printk (KERN_ERR "Calgary: cannot allocate bitmap\n");
        ret = -ENOMEM;
        goto done;
    }
    tbl->it_map = (unsigned long *) bmppages;
    memset (tbl -> it_map, 0, bitmapsz);
    tbl->it_hint = 0;
    spin_lock_init (& tbl -> it_lock);
    return 0;
done :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="114" endline="118">
{
    printk (KERN_ERR "Calgary: cannot allocate bitmap\n");
    ret = -ENOMEM;
    goto done;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="135" endline="166">
{
    struct iommu_table *tbl;
    int ret;
    if (pci_iommu (dev->bus)) {
        printk (KERN_ERR "Calgary: dev %p has sysdata->iommu %p\n", dev, pci_iommu (dev -> bus));
        BUG ();
    }
    tbl = kzalloc (sizeof (struct iommu_table), GFP_KERNEL);
    if (!tbl) {
        printk (KERN_ERR "Calgary: error allocating iommu_table\n");
        ret = -ENOMEM;
        goto done;
    }
    ret = tce_table_setparms (dev, tbl);
    if (ret)
        goto free_tbl;
    tbl->bbar = bbar;
    set_pci_iommu (dev -> bus, tbl);
    return 0;
free_tbl :
    kfree (tbl);
done :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="139" endline="143">
{
    printk (KERN_ERR "Calgary: dev %p has sysdata->iommu %p\n", dev, pci_iommu (dev -> bus));
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="146" endline="150">
{
    printk (KERN_ERR "Calgary: error allocating iommu_table\n");
    ret = -ENOMEM;
    goto done;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="169" endline="176">
{
    unsigned int size;
    size = table_size_to_number_of_entries (specified_table_size);
    size *= TCE_ENTRY_SIZE;
    return __alloc_bootmem_low (size, size, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tce_64.c.ifdefed" startline="179" endline="189">
{
    unsigned int size;
    if (!tbl)
        return;
    size = table_size_to_number_of_entries (specified_table_size);
    size *= TCE_ENTRY_SIZE;
    free_bootmem (__pa (tbl), size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="16" endline="26">
{
    if (hwdev && !is_buffer_dma_capable (*hwdev->dma_mask, bus, size)) {
        if (*hwdev->dma_mask >= DMA_BIT_MASK (32))
            printk (KERN_ERR "nommu_%s: overflow %Lx+%zu of device mask %Lx\n", name, (long long) bus, size, (long long) *hwdev->dma_mask);
        return 0;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="17" endline="24">
{
    if (*hwdev->dma_mask >= DMA_BIT_MASK (32))
        printk (KERN_ERR "nommu_%s: overflow %Lx+%zu of device mask %Lx\n", name, (long long) bus, size, (long long) *hwdev->dma_mask);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="32" endline="39">
{
    dma_addr_t bus = page_to_phys (page) + offset;
    WARN_ON (size == 0);
    if (!check_addr ("map_single", dev, bus, size))
        return bad_dma_address;
    flush_write_buffers ();
    return bus;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="59" endline="74">
{
    struct scatterlist *s;
    int i;
    WARN_ON (nents == 0 || sg [0].length == 0);

    for_each_sg (sg, s, nents, i) {
        BUG_ON (! sg_page (s));
        s->dma_address = sg_phys (s);
        if (!check_addr ("map_sg", hwdev, s->dma_address, s->length))
            return 0;
        s->dma_length = s->length;
    }

    flush_write_buffers ();
    return nents;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="65" endline="71">
{
    BUG_ON (! sg_page (s));
    s->dma_address = sg_phys (s);
    if (!check_addr ("map_sg", hwdev, s->dma_address, s->length))
        return 0;
    s->dma_length = s->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="78" endline="80">
{
    free_pages ((unsigned long) vaddr, get_order (size));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-nommu.c.ifdefed" startline="91" endline="97">
{
    if (dma_ops)
        return;
    force_iommu = 0;
    dma_ops = &nommu_dma_ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="54" endline="61">
{
    if (!dev->dma_mask || !dma_supported (dev, mask))
        return -EIO;
    *dev->dma_mask = mask;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="113" endline="132">
{
    gart_iommu_hole_init ();
    detect_calgary ();
    detect_intel_iommu ();
    amd_iommu_detect ();
    pci_swiotlb_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="136" endline="163">
{
    unsigned long dma_mask;
    struct page *page;
    dma_addr_t addr;
    dma_mask = dma_alloc_coherent_mask (dev, flag);
    flag |= __GFP_ZERO;
again :
    page = alloc_pages_node (dev_to_node (dev), flag, get_order (size));
    if (!page)
        return NULL;
    addr = page_to_phys (page);
    if (!is_buffer_dma_capable (dma_mask, addr, size)) {
        __free_pages (page, get_order (size));
        if (dma_mask < DMA_BIT_MASK (32) && !(flag & GFP_DMA)) {
            flag = (flag & ~GFP_DMA32) | GFP_DMA;
            goto again;
        }
        return NULL;
    }
    *dma_addr = addr;
    return page_address (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="150" endline="159">
{
    __free_pages (page, get_order (size));
    if (dma_mask < DMA_BIT_MASK (32) && !(flag & GFP_DMA)) {
        flag = (flag & ~GFP_DMA32) | GFP_DMA;
        goto again;
    }
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="153" endline="156">
{
    flag = (flag & ~GFP_DMA32) | GFP_DMA;
    goto again;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="170" endline="232">
{
    iommu_merge = 1;
    if (!p)
        return -EINVAL;
    while (*p) {
        if (!strncmp (p, "off", 3))
            no_iommu = 1;
        if (!strncmp (p, "force", 5))
            force_iommu = 1;
        if (!strncmp (p, "noforce", 7)) {
            iommu_merge = 0;
            force_iommu = 0;
        }
        if (!strncmp (p, "biomerge", 8)) {
            iommu_merge = 1;
            force_iommu = 1;
        }
        if (!strncmp (p, "panic", 5))
            panic_on_overflow = 1;
        if (!strncmp (p, "nopanic", 7))
            panic_on_overflow = 0;
        if (!strncmp (p, "merge", 5)) {
            iommu_merge = 1;
            force_iommu = 1;
        }
        if (!strncmp (p, "nomerge", 7))
            iommu_merge = 0;
        if (!strncmp (p, "forcesac", 8))
            iommu_sac_force = 1;
        if (!strncmp (p, "allowdac", 8))
            forbid_dac = 0;
        if (!strncmp (p, "nodac", 5))
            forbid_dac = -1;
        if (!strncmp (p, "usedac", 6)) {
            forbid_dac = -1;
            return 1;
        }
        if (!strncmp (p, "pt", 2)) {
            iommu_pass_through = 1;
            return 1;
        }
        gart_parse_options (p);
        p += strcspn (p, ",");
        if (*p == ',')
            ++p;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="176" endline="230">
{
    if (!strncmp (p, "off", 3))
        no_iommu = 1;
    if (!strncmp (p, "force", 5))
        force_iommu = 1;
    if (!strncmp (p, "noforce", 7)) {
        iommu_merge = 0;
        force_iommu = 0;
    }
    if (!strncmp (p, "biomerge", 8)) {
        iommu_merge = 1;
        force_iommu = 1;
    }
    if (!strncmp (p, "panic", 5))
        panic_on_overflow = 1;
    if (!strncmp (p, "nopanic", 7))
        panic_on_overflow = 0;
    if (!strncmp (p, "merge", 5)) {
        iommu_merge = 1;
        force_iommu = 1;
    }
    if (!strncmp (p, "nomerge", 7))
        iommu_merge = 0;
    if (!strncmp (p, "forcesac", 8))
        iommu_sac_force = 1;
    if (!strncmp (p, "allowdac", 8))
        forbid_dac = 0;
    if (!strncmp (p, "nodac", 5))
        forbid_dac = -1;
    if (!strncmp (p, "usedac", 6)) {
        forbid_dac = -1;
        return 1;
    }
    if (!strncmp (p, "pt", 2)) {
        iommu_pass_through = 1;
        return 1;
    }
    gart_parse_options (p);
    p += strcspn (p, ",");
    if (*p == ',')
        ++p;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="182" endline="185">
{
    iommu_merge = 0;
    force_iommu = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="187" endline="190">
{
    iommu_merge = 1;
    force_iommu = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="195" endline="198">
{
    iommu_merge = 1;
    force_iommu = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="207" endline="210">
{
    forbid_dac = -1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="215" endline="218">
{
    iommu_pass_through = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="236" endline="273">
{
    struct dma_map_ops *ops = get_dma_ops (dev);
    if (ops->dma_supported)
        return ops->dma_supported (dev, mask);
    if (mask < DMA_BIT_MASK (24))
        return 0;
    if (iommu_sac_force && (mask >= DMA_BIT_MASK (40))) {
        dev_info (dev, "Force SAC with mask %Lx\n", mask);
        return 0;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="267" endline="270">
{
    dev_info (dev, "Force SAC with mask %Lx\n", mask);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="277" endline="294">
{
    dma_debug_init (PREALLOC_DMA_DEBUG_ENTRIES);
    calgary_iommu_init ();
    intel_iommu_init ();
    amd_iommu_init ();
    gart_iommu_init ();
    no_iommu_init ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-dma.c.ifdefed" startline="297" endline="301">
{
    gart_iommu_shutdown ();
    amd_iommu_shutdown ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/audit_64.c.ifdefed" startline="32" endline="38">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/audit_64.c.ifdefed" startline="41" endline="57">
{
    switch (syscall) {
    case __NR_open :
        return 2;
    case __NR_openat :
        return 3;
    case __NR_execve :
        return 5;
    default :
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/audit_64.c.ifdefed" startline="47" endline="56">
{
case __NR_open :
    return 2;
case __NR_openat :
    return 3;
case __NR_execve :
    return 5;
default :
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/audit_64.c.ifdefed" startline="60" endline="79">
{
    audit_register_class (AUDIT_CLASS_WRITE, write_class);
    audit_register_class (AUDIT_CLASS_READ, read_class);
    audit_register_class (AUDIT_CLASS_DIR_WRITE, dir_class);
    audit_register_class (AUDIT_CLASS_CHATTR, chattr_class);
    audit_register_class (AUDIT_CLASS_SIGNAL, signal_class);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/addon_cpuid_features.c.ifdefed" startline="27" endline="52">
{
    u32 max_level;
    u32 regs [4];
    const struct cpuid_bit *cb;
    static const struct cpuid_bit __cpuinitconst cpuid_bits [] = {{X86_FEATURE_IDA, CR_EAX, 1, 0x00000006}, {X86_FEATURE_ARAT, CR_EAX, 2, 0x00000006}, {0, 0, 0, 0}};
    for (cb = cpuid_bits; cb->feature; cb++) {
        max_level = cpuid_eax (cb->level & 0xffff0000);
        if (max_level < cb->level || max_level > (cb->level | 0xffff))
            continue;
        cpuid (cb -> level, & regs [CR_EAX], & regs [CR_EBX], & regs [CR_ECX], & regs [CR_EDX]);
        if (regs[cb->reg] & (1 << cb->bit))
            set_cpu_cap (c, cb->feature);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/addon_cpuid_features.c.ifdefed" startline="38" endline="51">
{
    max_level = cpuid_eax (cb->level & 0xffff0000);
    if (max_level < cb->level || max_level > (cb->level | 0xffff))
        continue;
    cpuid (cb -> level, & regs [CR_EAX], & regs [CR_EBX], & regs [CR_ECX], & regs [CR_EDX]);
    if (regs[cb->reg] & (1 << cb->bit))
        set_cpu_cap (c, cb->feature);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/addon_cpuid_features.c.ifdefed" startline="72" endline="138">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="258" endline="271">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="274" endline="307">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="310" endline="333">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="336" endline="366">
{
    early_init_amd_mc (c);
    if (c->x86_power & (1 << 8)) {
        set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
        set_cpu_cap (c, X86_FEATURE_NONSTOP_TSC);
    }
    if (c->x86 == 5)
        if (c->x86_model == 13 || c->x86_model == 9 || (c->x86_model == 8 && c->x86_mask >= 8))
            set_cpu_cap (c, X86_FEATURE_K6_MTRR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="343" endline="346">
{
    set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
    set_cpu_cap (c, X86_FEATURE_NONSTOP_TSC);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="369" endline="507">
{
    early_init_amd (c);
    clear_cpu_cap (c, 0 * 32 + 31);
    switch (c->x86) {
    case 4 :
        init_amd_k5 (c);
        break;
    case 5 :
        init_amd_k6 (c);
        break;
    case 6 :
        init_amd_k7 (c);
        break;
    }
    if (c->x86 < 6)
        clear_cpu_cap (c, X86_FEATURE_MCE);
    if (c->x86 >= 6)
        set_cpu_cap (c, X86_FEATURE_FXSAVE_LEAK);
    if (!c->x86_model_id[0]) {
        switch (c->x86) {
        case 0xf :
            strcpy (c->x86_model_id, "Hammer");
            break;
        }
    }
    display_cacheinfo (c);
    if (c->extended_cpuid_level >= 0x80000008) {
        amd_detect_cmp (c);
        srat_detect_node (c);
    }
    if (c->extended_cpuid_level >= 0x80000006) {
        if ((c->x86 >= 0x0f) && (cpuid_edx (0x80000006) & 0xf000))
            num_cache_leaves = 4;
        else
            num_cache_leaves = 3;
    }
    if (c->x86 >= 0xf && c->x86 <= 0x11)
        set_cpu_cap (c, X86_FEATURE_K8);
    if (cpu_has_xmm2) {
        set_cpu_cap (c, X86_FEATURE_MFENCE_RDTSC);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="421" endline="431">
{
case 4 :
    init_amd_k5 (c);
    break;
case 5 :
    init_amd_k6 (c);
    break;
case 6 :
    init_amd_k7 (c);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="442" endline="450">
{
    switch (c->x86) {
    case 0xf :
        strcpy (c->x86_model_id, "Hammer");
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="443" endline="449">
{
case 0xf :
    strcpy (c->x86_model_id, "Hammer");
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="455" endline="458">
{
    amd_detect_cmp (c);
    srat_detect_node (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="464" endline="469">
{
    if ((c->x86 >= 0x0f) && (cpuid_edx (0x80000006) & 0xf000))
        num_cache_leaves = 4;
    else
        num_cache_leaves = 3;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/amd.c.ifdefed" startline="474" endline="477">
{
    set_cpu_cap (c, X86_FEATURE_MFENCE_RDTSC);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="223" endline="288">
{
    unsigned dummy;
    unsigned line_size, lines_per_tag, assoc, size_in_kb;
    union l1_cache l1i, l1d;
    union l2_cache l2;
    union l3_cache l3;
    union l1_cache *l1 = &l1d;
    eax->full = 0;
    ebx->full = 0;
    ecx->full = 0;
    cpuid (0x80000005, & dummy, & dummy, & l1d.val, & l1i.val);
    cpuid (0x80000006, & dummy, & dummy, & l2.val, & l3.val);
    switch (leaf) {
    case 1 :
        l1 = &l1i;
    case 0 :
        if (!l1->val)
            return;
        assoc = l1->assoc;
        line_size = l1->line_size;
        lines_per_tag = l1->lines_per_tag;
        size_in_kb = l1->size_in_kb;
        break;
    case 2 :
        if (!l2.val)
            return;
        assoc = l2.assoc;
        line_size = l2.line_size;
        lines_per_tag = l2.lines_per_tag;
        size_in_kb = current_cpu_data.x86_cache_size;
        break;
    case 3 :
        if (!l3.val)
            return;
        assoc = l3.assoc;
        line_size = l3.line_size;
        lines_per_tag = l3.lines_per_tag;
        size_in_kb = l3.size_encoded * 512;
        break;
    default :
        return;
    }
    eax->split.is_self_initializing = 1;
    eax->split.type = types[leaf];
    eax->split.level = levels[leaf];
    if (leaf == 3)
        eax->split.num_threads_sharing = current_cpu_data.x86_max_cores - 1;
    else
        eax->split.num_threads_sharing = 0;
    eax->split.num_cores_on_die = current_cpu_data.x86_max_cores - 1;
    if (assoc == 0xf)
        eax->split.is_fully_associative = 1;
    ebx->split.coherency_line_size = line_size - 1;
    ebx->split.ways_of_associativity = assocs[assoc] - 1;
    ebx->split.physical_line_partition = lines_per_tag - 1;
    ecx->split.number_of_sets = (size_in_kb * 1024) / line_size / (ebx->split.ways_of_associativity + 1) - 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="238" endline="268">
{
case 1 :
    l1 = &l1i;
case 0 :
    if (!l1->val)
        return;
    assoc = l1->assoc;
    line_size = l1->line_size;
    lines_per_tag = l1->lines_per_tag;
    size_in_kb = l1->size_in_kb;
    break;
case 2 :
    if (!l2.val)
        return;
    assoc = l2.assoc;
    line_size = l2.line_size;
    lines_per_tag = l2.lines_per_tag;
    size_in_kb = current_cpu_data.x86_cache_size;
    break;
case 3 :
    if (!l3.val)
        return;
    assoc = l3.assoc;
    line_size = l3.line_size;
    lines_per_tag = l3.lines_per_tag;
    size_in_kb = l3.size_encoded * 512;
    break;
default :
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="292" endline="304">
{
    if (index < 3)
        return;
    if (boot_cpu_data.x86 == 0x11)
        return;
    if ((boot_cpu_data.x86 == 0x10) && (boot_cpu_data.x86_model < 0x8))
        return;
    this_leaf->can_disable = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="309" endline="334">
{
    union _cpuid4_leaf_eax eax;
    union _cpuid4_leaf_ebx ebx;
    union _cpuid4_leaf_ecx ecx;
    unsigned edx;
    if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD) {
        amd_cpuid4 (index, & eax, & ebx, & ecx);
        if (boot_cpu_data.x86 >= 0x10)
            amd_check_l3_disable (index, this_leaf);
    }
    else {
        cpuid_count (4, index, & eax.full, & ebx.full, & ecx.full, & edx);
    }
    if (eax.split.type == CACHE_TYPE_NULL)
        return -EIO;
    this_leaf->eax = eax;
    this_leaf->ebx = ebx;
    this_leaf->ecx = ecx;
    this_leaf->size = (ecx.split.number_of_sets + 1) * (ebx.split.coherency_line_size + 1) * (ebx.split.physical_line_partition + 1) * (ebx.split.ways_of_associativity + 1);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="315" endline="319">
{
    amd_cpuid4 (index, & eax, & ebx, & ecx);
    if (boot_cpu_data.x86 >= 0x10)
        amd_check_l3_disable (index, this_leaf);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="319" endline="321">
{
    cpuid_count (4, index, & eax.full, & ebx.full, & ecx.full, & edx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="337" endline="349">
{
    unsigned int eax, ebx, ecx, edx;
    union _cpuid4_leaf_eax cache_eax;
    int i = -1;
    do {
        ++i;
        cpuid_count (4, i, & eax, & ebx, & ecx, & edx);
        cache_eax.full = eax;
    }
    while (cache_eax.split.type != CACHE_TYPE_NULL);
    return i;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="342" endline="347">
{
    ++i;
    cpuid_count (4, i, & eax, & ebx, & ecx, & edx);
    cache_eax.full = eax;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="352" endline="509">
{
    unsigned int trace = 0, l1i = 0, l1d = 0, l2 = 0, l3 = 0;
    unsigned int new_l1d = 0, new_l1i = 0;
    unsigned int new_l2 = 0, new_l3 = 0, i;
    unsigned int l2_id = 0, l3_id = 0, num_threads_sharing, index_msb;
    if (c->cpuid_level > 3) {
        static int is_initialized;
        if (is_initialized == 0) {
            num_cache_leaves = find_num_cache_leaves ();
            is_initialized++;
        }
        for (i = 0; i < num_cache_leaves; i++) {
            struct _cpuid4_info_regs this_leaf;
            int retval;
            retval = cpuid4_cache_lookup_regs (i, &this_leaf);
            if (retval >= 0) {
                switch (this_leaf.eax.split.level) {
                case 1 :
                    if (this_leaf.eax.split.type == CACHE_TYPE_DATA)
                        new_l1d = this_leaf.size / 1024;
                    else if (this_leaf.eax.split.type == CACHE_TYPE_INST)
                        new_l1i = this_leaf.size / 1024;
                    break;
                case 2 :
                    new_l2 = this_leaf.size / 1024;
                    num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
                    index_msb = get_count_order (num_threads_sharing);
                    l2_id = c->apicid >> index_msb;
                    break;
                case 3 :
                    new_l3 = this_leaf.size / 1024;
                    num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
                    index_msb = get_count_order (num_threads_sharing);
                    l3_id = c->apicid >> index_msb;
                    break;
                default :
                    break;
                }
            }
        }
    }
    if ((num_cache_leaves == 0 || c->x86 == 15) && c->cpuid_level > 1) {
        int j, n;
        unsigned int regs [4];
        unsigned char *dp = (unsigned char *) regs;
        int only_trace = 0;
        if (num_cache_leaves != 0 && c->x86 == 15)
            only_trace = 1;
        n = cpuid_eax (2) & 0xFF;
        for (i = 0; i < n; i++) {
            cpuid (2, & regs [0], & regs [1], & regs [2], & regs [3]);
            for (j = 0; j < 3; j++) {
                if (regs[j] & (1 << 31))
                    regs[j] = 0;
            }
            for (j = 1; j < 16; j++) {
                unsigned char des = dp[j];
                unsigned char k = 0;
                while (cache_table[k].descriptor != 0) {
                    if (cache_table[k].descriptor == des) {
                        if (only_trace && cache_table[k].cache_type != LVL_TRACE)
                            break;
                        switch (cache_table[k].cache_type) {
                        case LVL_1_INST :
                            l1i += cache_table[k].size;
                            break;
                        case LVL_1_DATA :
                            l1d += cache_table[k].size;
                            break;
                        case LVL_2 :
                            l2 += cache_table[k].size;
                            break;
                        case LVL_3 :
                            l3 += cache_table[k].size;
                            break;
                        case LVL_TRACE :
                            trace += cache_table[k].size;
                            break;
                        }
                        break;
                    }
                    k++;
                }
            }
        }
    }
    if (new_l1d)
        l1d = new_l1d;
    if (new_l1i)
        l1i = new_l1i;
    if (new_l2) {
        l2 = new_l2;
    }
    if (new_l3) {
        l3 = new_l3;
    }
    if (trace)
        printk (KERN_INFO "CPU: Trace cache: %dK uops", trace);
    else if (l1i)
        printk (KERN_INFO "CPU: L1 I cache: %dK", l1i);
    if (l1d)
        printk (", L1 D cache: %dK\n", l1d);
    else
        printk ("\n");
    if (l2)
        printk (KERN_INFO "CPU: L2 cache: %dK\n", l2);
    if (l3)
        printk (KERN_INFO "CPU: L3 cache: %dK\n", l3);
    c->x86_cache_size = l3 ? l3 : (l2 ? l2 : (l1i + l1d));
    return l2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="361" endline="406">
{
    static int is_initialized;
    if (is_initialized == 0) {
        num_cache_leaves = find_num_cache_leaves ();
        is_initialized++;
    }
    for (i = 0; i < num_cache_leaves; i++) {
        struct _cpuid4_info_regs this_leaf;
        int retval;
        retval = cpuid4_cache_lookup_regs (i, &this_leaf);
        if (retval >= 0) {
            switch (this_leaf.eax.split.level) {
            case 1 :
                if (this_leaf.eax.split.type == CACHE_TYPE_DATA)
                    new_l1d = this_leaf.size / 1024;
                else if (this_leaf.eax.split.type == CACHE_TYPE_INST)
                    new_l1i = this_leaf.size / 1024;
                break;
            case 2 :
                new_l2 = this_leaf.size / 1024;
                num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
                index_msb = get_count_order (num_threads_sharing);
                l2_id = c->apicid >> index_msb;
                break;
            case 3 :
                new_l3 = this_leaf.size / 1024;
                num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
                index_msb = get_count_order (num_threads_sharing);
                l3_id = c->apicid >> index_msb;
                break;
            default :
                break;
            }
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="364" endline="368">
{
    num_cache_leaves = find_num_cache_leaves ();
    is_initialized++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="374" endline="405">
{
    struct _cpuid4_info_regs this_leaf;
    int retval;
    retval = cpuid4_cache_lookup_regs (i, &this_leaf);
    if (retval >= 0) {
        switch (this_leaf.eax.split.level) {
        case 1 :
            if (this_leaf.eax.split.type == CACHE_TYPE_DATA)
                new_l1d = this_leaf.size / 1024;
            else if (this_leaf.eax.split.type == CACHE_TYPE_INST)
                new_l1i = this_leaf.size / 1024;
            break;
        case 2 :
            new_l2 = this_leaf.size / 1024;
            num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
            index_msb = get_count_order (num_threads_sharing);
            l2_id = c->apicid >> index_msb;
            break;
        case 3 :
            new_l3 = this_leaf.size / 1024;
            num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
            index_msb = get_count_order (num_threads_sharing);
            l3_id = c->apicid >> index_msb;
            break;
        default :
            break;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="379" endline="404">
{
    switch (this_leaf.eax.split.level) {
    case 1 :
        if (this_leaf.eax.split.type == CACHE_TYPE_DATA)
            new_l1d = this_leaf.size / 1024;
        else if (this_leaf.eax.split.type == CACHE_TYPE_INST)
            new_l1i = this_leaf.size / 1024;
        break;
    case 2 :
        new_l2 = this_leaf.size / 1024;
        num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
        index_msb = get_count_order (num_threads_sharing);
        l2_id = c->apicid >> index_msb;
        break;
    case 3 :
        new_l3 = this_leaf.size / 1024;
        num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
        index_msb = get_count_order (num_threads_sharing);
        l3_id = c->apicid >> index_msb;
        break;
    default :
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="380" endline="403">
{
case 1 :
    if (this_leaf.eax.split.type == CACHE_TYPE_DATA)
        new_l1d = this_leaf.size / 1024;
    else if (this_leaf.eax.split.type == CACHE_TYPE_INST)
        new_l1i = this_leaf.size / 1024;
    break;
case 2 :
    new_l2 = this_leaf.size / 1024;
    num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
    index_msb = get_count_order (num_threads_sharing);
    l2_id = c->apicid >> index_msb;
    break;
case 3 :
    new_l3 = this_leaf.size / 1024;
    num_threads_sharing = 1 + this_leaf.eax.split.num_threads_sharing;
    index_msb = get_count_order (num_threads_sharing);
    l3_id = c->apicid >> index_msb;
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="411" endline="468">
{
    int j, n;
    unsigned int regs [4];
    unsigned char *dp = (unsigned char *) regs;
    int only_trace = 0;
    if (num_cache_leaves != 0 && c->x86 == 15)
        only_trace = 1;
    n = cpuid_eax (2) & 0xFF;
    for (i = 0; i < n; i++) {
        cpuid (2, & regs [0], & regs [1], & regs [2], & regs [3]);
        for (j = 0; j < 3; j++) {
            if (regs[j] & (1 << 31))
                regs[j] = 0;
        }
        for (j = 1; j < 16; j++) {
            unsigned char des = dp[j];
            unsigned char k = 0;
            while (cache_table[k].descriptor != 0) {
                if (cache_table[k].descriptor == des) {
                    if (only_trace && cache_table[k].cache_type != LVL_TRACE)
                        break;
                    switch (cache_table[k].cache_type) {
                    case LVL_1_INST :
                        l1i += cache_table[k].size;
                        break;
                    case LVL_1_DATA :
                        l1d += cache_table[k].size;
                        break;
                    case LVL_2 :
                        l2 += cache_table[k].size;
                        break;
                    case LVL_3 :
                        l3 += cache_table[k].size;
                        break;
                    case LVL_TRACE :
                        trace += cache_table[k].size;
                        break;
                    }
                    break;
                }
                k++;
            }
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="424" endline="467">
{
    cpuid (2, & regs [0], & regs [1], & regs [2], & regs [3]);
    for (j = 0; j < 3; j++) {
        if (regs[j] & (1 << 31))
            regs[j] = 0;
    }
    for (j = 1; j < 16; j++) {
        unsigned char des = dp[j];
        unsigned char k = 0;
        while (cache_table[k].descriptor != 0) {
            if (cache_table[k].descriptor == des) {
                if (only_trace && cache_table[k].cache_type != LVL_TRACE)
                    break;
                switch (cache_table[k].cache_type) {
                case LVL_1_INST :
                    l1i += cache_table[k].size;
                    break;
                case LVL_1_DATA :
                    l1d += cache_table[k].size;
                    break;
                case LVL_2 :
                    l2 += cache_table[k].size;
                    break;
                case LVL_3 :
                    l3 += cache_table[k].size;
                    break;
                case LVL_TRACE :
                    trace += cache_table[k].size;
                    break;
                }
                break;
            }
            k++;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="428" endline="430">
{
    if (regs[j] & (1 << 31))
        regs[j] = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="433" endline="466">
{
    unsigned char des = dp[j];
    unsigned char k = 0;
    while (cache_table[k].descriptor != 0) {
        if (cache_table[k].descriptor == des) {
            if (only_trace && cache_table[k].cache_type != LVL_TRACE)
                break;
            switch (cache_table[k].cache_type) {
            case LVL_1_INST :
                l1i += cache_table[k].size;
                break;
            case LVL_1_DATA :
                l1d += cache_table[k].size;
                break;
            case LVL_2 :
                l2 += cache_table[k].size;
                break;
            case LVL_3 :
                l3 += cache_table[k].size;
                break;
            case LVL_TRACE :
                trace += cache_table[k].size;
                break;
            }
            break;
        }
        k++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="439" endline="465">
{
    if (cache_table[k].descriptor == des) {
        if (only_trace && cache_table[k].cache_type != LVL_TRACE)
            break;
        switch (cache_table[k].cache_type) {
        case LVL_1_INST :
            l1i += cache_table[k].size;
            break;
        case LVL_1_DATA :
            l1d += cache_table[k].size;
            break;
        case LVL_2 :
            l2 += cache_table[k].size;
            break;
        case LVL_3 :
            l3 += cache_table[k].size;
            break;
        case LVL_TRACE :
            trace += cache_table[k].size;
            break;
        }
        break;
    }
    k++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="440" endline="462">
{
    if (only_trace && cache_table[k].cache_type != LVL_TRACE)
        break;
    switch (cache_table[k].cache_type) {
    case LVL_1_INST :
        l1i += cache_table[k].size;
        break;
    case LVL_1_DATA :
        l1d += cache_table[k].size;
        break;
    case LVL_2 :
        l2 += cache_table[k].size;
        break;
    case LVL_3 :
        l3 += cache_table[k].size;
        break;
    case LVL_TRACE :
        trace += cache_table[k].size;
        break;
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="443" endline="459">
{
case LVL_1_INST :
    l1i += cache_table[k].size;
    break;
case LVL_1_DATA :
    l1d += cache_table[k].size;
    break;
case LVL_2 :
    l2 += cache_table[k].size;
    break;
case LVL_3 :
    l3 += cache_table[k].size;
    break;
case LVL_TRACE :
    trace += cache_table[k].size;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="476" endline="481">
{
    l2 = new_l2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel_cacheinfo.c.ifdefed" startline="483" endline="488">
{
    l3 = new_l3;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="90" endline="94">
{
    struct cpuinfo_x86 *cpu = &cpu_data (cpuid);
    return cpu_has (cpu, X86_FEATURE_EST);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="97" endline="108">
{
    struct acpi_processor_performance *perf;
    int i;
    perf = data->acpi_data;
    for (i = 0; i < perf->state_count; i++) {
        if (value == perf->states[i].status)
            return data->freq_table[i].frequency;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="103" endline="106">
{
    if (value == perf->states[i].status)
        return data->freq_table[i].frequency;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="111" endline="123">
{
    int i;
    struct acpi_processor_performance *perf;
    msr &= INTEL_MSR_RANGE;
    perf = data->acpi_data;
    for (i = 0; data->freq_table[i].frequency != CPUFREQ_TABLE_END; i++) {
        if (msr == perf->states[data->freq_table[i].index].status)
            return data->freq_table[i].frequency;
    }
    return data->freq_table[0].frequency;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="118" endline="121">
{
    if (msr == perf->states[data->freq_table[i].index].status)
        return data->freq_table[i].frequency;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="126" endline="135">
{
    switch (data->cpu_feature) {
    case SYSTEM_INTEL_MSR_CAPABLE :
        return extract_msr (val, data);
    case SYSTEM_IO_CAPABLE :
        return extract_io (val, data);
    default :
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="127" endline="134">
{
case SYSTEM_INTEL_MSR_CAPABLE :
    return extract_msr (val, data);
case SYSTEM_IO_CAPABLE :
    return extract_io (val, data);
default :
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="158" endline="174">
{
    struct drv_cmd *cmd = _cmd;
    u32 h;
    switch (cmd->type) {
    case SYSTEM_INTEL_MSR_CAPABLE :
        rdmsr (cmd->addr.msr.reg, cmd->val, h);
        break;
    case SYSTEM_IO_CAPABLE :
        acpi_os_read_port ((acpi_io_address) cmd->addr.io.port, &cmd->val, (u32) cmd->addr.io.bit_width);
        break;
    default :
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="162" endline="173">
{
case SYSTEM_INTEL_MSR_CAPABLE :
    rdmsr (cmd->addr.msr.reg, cmd->val, h);
    break;
case SYSTEM_IO_CAPABLE :
    acpi_os_read_port ((acpi_io_address) cmd->addr.io.port, &cmd->val, (u32) cmd->addr.io.bit_width);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="178" endline="196">
{
    struct drv_cmd *cmd = _cmd;
    u32 lo, hi;
    switch (cmd->type) {
    case SYSTEM_INTEL_MSR_CAPABLE :
        rdmsr (cmd->addr.msr.reg, lo, hi);
        lo = (lo & ~INTEL_MSR_RANGE) | (cmd->val & INTEL_MSR_RANGE);
        wrmsr (cmd -> addr.msr.reg, lo, hi);
        break;
    case SYSTEM_IO_CAPABLE :
        acpi_os_write_port ((acpi_io_address) cmd->addr.io.port, cmd->val, (u32) cmd->addr.io.bit_width);
        break;
    default :
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="182" endline="195">
{
case SYSTEM_INTEL_MSR_CAPABLE :
    rdmsr (cmd->addr.msr.reg, lo, hi);
    lo = (lo & ~INTEL_MSR_RANGE) | (cmd->val & INTEL_MSR_RANGE);
    wrmsr (cmd -> addr.msr.reg, lo, hi);
    break;
case SYSTEM_IO_CAPABLE :
    acpi_os_write_port ((acpi_io_address) cmd->addr.io.port, cmd->val, (u32) cmd->addr.io.bit_width);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="199" endline="203">
{
    cmd->val = 0;
    smp_call_function_single (cpumask_any (cmd -> mask), do_drv_read, cmd, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="206" endline="214">
{
    int this_cpu;
    this_cpu = get_cpu ();
    if (cpumask_test_cpu (this_cpu, cmd->mask))
        do_drv_write (cmd);
    smp_call_function_many (cmd -> mask, do_drv_write, cmd, 1);
    put_cpu ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="217" endline="245">
{
    struct acpi_processor_performance *perf;
    struct drv_cmd cmd;
    if (unlikely (cpumask_empty (mask)))
        return 0;
    switch (per_cpu (drv_data, cpumask_first (mask))->cpu_feature) {
    case SYSTEM_INTEL_MSR_CAPABLE :
        cmd.type = SYSTEM_INTEL_MSR_CAPABLE;
        cmd.addr.msr.reg = MSR_IA32_PERF_STATUS;
        break;
    case SYSTEM_IO_CAPABLE :
        cmd.type = SYSTEM_IO_CAPABLE;
        perf = per_cpu (drv_data, cpumask_first (mask))->acpi_data;
        cmd.addr.io.port = perf->control_register.address;
        cmd.addr.io.bit_width = perf->control_register.bit_width;
        break;
    default :
        return 0;
    }
    cmd.mask = mask;
    drv_read (& cmd);
    dprintk ("get_cur_val = %u\n", cmd.val);
    return cmd.val;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="224" endline="237">
{
case SYSTEM_INTEL_MSR_CAPABLE :
    cmd.type = SYSTEM_INTEL_MSR_CAPABLE;
    cmd.addr.msr.reg = MSR_IA32_PERF_STATUS;
    break;
case SYSTEM_IO_CAPABLE :
    cmd.type = SYSTEM_IO_CAPABLE;
    perf = per_cpu (drv_data, cpumask_first (mask))->acpi_data;
    cmd.addr.io.port = perf->control_register.address;
    cmd.addr.io.bit_width = perf->control_register.bit_width;
    break;
default :
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="259" endline="264">
{
    struct perf_pair *cur = _cur;
    rdmsr (MSR_IA32_APERF, cur -> aperf.split.lo, cur -> aperf.split.hi);
    rdmsr (MSR_IA32_MPERF, cur -> mperf.split.lo, cur -> mperf.split.hi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="281" endline="341">
{
    struct perf_pair readin, cur;
    unsigned int perf_percent;
    unsigned int retval;
    if (smp_call_function_single (cpu, read_measured_perf_ctrs, &readin, 1))
        return 0;
    cur.aperf.whole = readin.aperf.whole - per_cpu (msr_data, cpu).saved_aperf;
    cur.mperf.whole = readin.mperf.whole - per_cpu (msr_data, cpu).saved_mperf;
    per_cpu (msr_data, cpu).saved_aperf = readin.aperf.whole;
    per_cpu (msr_data, cpu).saved_mperf = readin.mperf.whole;
    if (unlikely (((unsigned long) (-1) / 100) < cur.aperf.whole)) {
        int shift_count = 7;
        cur.aperf.whole >>= shift_count;
        cur.mperf.whole >>= shift_count;
    }
    if (cur.aperf.whole && cur.mperf.whole)
        perf_percent = (cur.aperf.whole * 100) / cur.mperf.whole;
    else
        perf_percent = 0;
    retval = (policy->cpuinfo.max_freq * perf_percent) / 100;
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="325" endline="329">
{
    int shift_count = 7;
    cur.aperf.whole >>= shift_count;
    cur.mperf.whole >>= shift_count;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="344" endline="369">
{
    struct acpi_cpufreq_data *data = per_cpu (drv_data, cpu);
    unsigned int freq;
    unsigned int cached_freq;
    dprintk ("get_cur_freq_on_cpu (%d)\n", cpu);
    if (unlikely (data == NULL || data->acpi_data == NULL || data->freq_table == NULL)) {
        return 0;
    }
    cached_freq = data->freq_table[data->acpi_data->state].frequency;
    freq = extract_freq (get_cur_val (cpumask_of (cpu)), data);
    if (freq != cached_freq) {
        data->resume = 1;
    }
    dprintk ("cur freq = %u\n", freq);
    return freq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="352" endline="354">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="358" endline="364">
{
    data->resume = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="373" endline="384">
{
    unsigned int cur_freq;
    unsigned int i;
    for (i = 0; i < 100; i++) {
        cur_freq = extract_freq (get_cur_val (mask), data);
        if (cur_freq == freq)
            return 1;
        udelay (10);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="377" endline="382">
{
    cur_freq = extract_freq (get_cur_val (mask), data);
    if (cur_freq == freq)
        return 1;
    udelay (10);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="388" endline="480">
{
    struct acpi_cpufreq_data *data = per_cpu (drv_data, policy->cpu);
    struct acpi_processor_performance *perf;
    struct cpufreq_freqs freqs;
    struct drv_cmd cmd;
    unsigned int next_state = 0;
    unsigned int next_perf_state = 0;
    unsigned int i;
    int result = 0;
    struct power_trace it;
    dprintk ("acpi_cpufreq_target %d (%d)\n", target_freq, policy -> cpu);
    if (unlikely (data == NULL || data->acpi_data == NULL || data->freq_table == NULL)) {
        return -ENODEV;
    }
    perf = data->acpi_data;
    result = cpufreq_frequency_table_target (policy, data->freq_table, target_freq, relation, &next_state);
    if (unlikely (result)) {
        result = -ENODEV;
        goto out;
    }
    next_perf_state = data->freq_table[next_state].index;
    if (perf->state == next_perf_state) {
        if (unlikely (data->resume)) {
            dprintk ("Called after resume, resetting to P%d\n", next_perf_state);
            data->resume = 0;
        }
        else {
            dprintk ("Already at target state (P%d)\n", next_perf_state);
            goto out;
        }
    }
    trace_power_mark (& it, POWER_PSTATE, next_perf_state);
    switch (data->cpu_feature) {
    case SYSTEM_INTEL_MSR_CAPABLE :
        cmd.type = SYSTEM_INTEL_MSR_CAPABLE;
        cmd.addr.msr.reg = MSR_IA32_PERF_CTL;
        cmd.val = (u32) perf->states[next_perf_state].control;
        break;
    case SYSTEM_IO_CAPABLE :
        cmd.type = SYSTEM_IO_CAPABLE;
        cmd.addr.io.port = perf->control_register.address;
        cmd.addr.io.bit_width = perf->control_register.bit_width;
        cmd.val = (u32) perf->states[next_perf_state].control;
        break;
    default :
        result = -ENODEV;
        goto out;
    }
    if (policy->shared_type != CPUFREQ_SHARED_TYPE_ANY)
        cmd.mask = policy->cpus;
    else
        cmd.mask = cpumask_of (policy->cpu);
    freqs.old = perf->states[perf->state].core_frequency * 1000;
    freqs.new = data->freq_table[next_state].frequency;
    for_each_cpu (i, cmd.mask) {freqs
        .cpu = i cpufreq_notify_transition (&freqs, CPUFREQ_PRECHANGE)
    } drv_write (&cmd)
    if (acpi_pstate_strict) {
        if (!check_freqs (cmd.mask, freqs.new, data)) {
            dprintk ("acpi_cpufreq_target failed (%d)\n", policy -> cpu);
            result = -EAGAIN;
            goto out;
        }
    }
    for_each_cpu (i, cmd.mask) {freqs
        .cpu = i cpufreq_notify_transition (&freqs, CPUFREQ_POSTCHANGE)
    } perf->state
    = next_perf_state;
out :
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="402" endline="404">
{
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="411" endline="414">
{
    result = -ENODEV;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="417" endline="427">
{
    if (unlikely (data->resume)) {
        dprintk ("Called after resume, resetting to P%d\n", next_perf_state);
        data->resume = 0;
    }
    else {
        dprintk ("Already at target state (P%d)\n", next_perf_state);
        goto out;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="418" endline="422">
{
    dprintk ("Called after resume, resetting to P%d\n", next_perf_state);
    data->resume = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="422" endline="426">
{
    dprintk ("Already at target state (P%d)\n", next_perf_state);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="431" endline="446">
{
case SYSTEM_INTEL_MSR_CAPABLE :
    cmd.type = SYSTEM_INTEL_MSR_CAPABLE;
    cmd.addr.msr.reg = MSR_IA32_PERF_CTL;
    cmd.val = (u32) perf->states[next_perf_state].control;
    break;
case SYSTEM_IO_CAPABLE :
    cmd.type = SYSTEM_IO_CAPABLE;
    cmd.addr.io.port = perf->control_register.address;
    cmd.addr.io.bit_width = perf->control_register.bit_width;
    cmd.val = (u32) perf->states[next_perf_state].control;
    break;
default :
    result = -ENODEV;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="463" endline="470">
{
    if (!check_freqs (cmd.mask, freqs.new, data)) {
        dprintk ("acpi_cpufreq_target failed (%d)\n", policy -> cpu);
        result = -EAGAIN;
        goto out;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="464" endline="469">
{
    dprintk ("acpi_cpufreq_target failed (%d)\n", policy -> cpu);
    result = -EAGAIN;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="483" endline="489">
{
    struct acpi_cpufreq_data *data = per_cpu (drv_data, policy->cpu);
    dprintk ("acpi_cpufreq_verify\n");
    return cpufreq_frequency_table_verify (policy, data->freq_table);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="493" endline="517">
{
    struct acpi_processor_performance *perf = data->acpi_data;
    if (cpu_khz) {
        unsigned int i;
        unsigned long freq;
        unsigned long freqn = perf->states[0].core_frequency * 1000;
        for (i = 0; i < (perf->state_count - 1); i++) {
            freq = freqn;
            freqn = perf->states[i + 1].core_frequency * 1000;
            if ((2 * cpu_khz) > (freqn + freq)) {
                perf->state = i;
                return freq;
            }
        }
        perf->state = perf->state_count - 1;
        return freqn;
    }
    else {
        perf->state = 0;
        return perf->states[0].core_frequency * 1000;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="496" endline="512">
{
    unsigned int i;
    unsigned long freq;
    unsigned long freqn = perf->states[0].core_frequency * 1000;
    for (i = 0; i < (perf->state_count - 1); i++) {
        freq = freqn;
        freqn = perf->states[i + 1].core_frequency * 1000;
        if ((2 * cpu_khz) > (freqn + freq)) {
            perf->state = i;
            return freq;
        }
    }
    perf->state = perf->state_count - 1;
    return freqn;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="502" endline="509">
{
    freq = freqn;
    freqn = perf->states[i + 1].core_frequency * 1000;
    if ((2 * cpu_khz) > (freqn + freq)) {
        perf->state = i;
        return freq;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="505" endline="508">
{
    perf->state = i;
    return freq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="512" endline="516">
{
    perf->state = 0;
    return perf->states[0].core_frequency * 1000;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="520" endline="528">
{
    unsigned int i;
    for_each_possible_cpu (i)
    free_cpumask_var (per_cpu_ptr (acpi_perf_data, i) -> shared_cpu_map);
    free_percpu (acpi_perf_data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="539" endline="562">
{
    unsigned int i;
    dprintk ("acpi_cpufreq_early_init\n");
    acpi_perf_data = alloc_percpu (struct acpi_processor_performance);
    if (!acpi_perf_data) {
        dprintk ("Memory allocation error for acpi_perf_data.\n");
        return -ENOMEM;
    }

    for_each_possible_cpu (i) {
        if (!zalloc_cpumask_var_node (&per_cpu_ptr (acpi_perf_data, i)->shared_cpu_map, GFP_KERNEL, cpu_to_node (i))) {
            free_acpi_perf_data ();
            return -ENOMEM;
        }
    }

    acpi_processor_preregister_performance (acpi_perf_data);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="544" endline="547">
{
    dprintk ("Memory allocation error for acpi_perf_data.\n");
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="548" endline="557">
{
    if (!zalloc_cpumask_var_node (&per_cpu_ptr (acpi_perf_data, i)->shared_cpu_map, GFP_KERNEL, cpu_to_node (i))) {
        free_acpi_perf_data ();
        return -ENOMEM;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="551" endline="556">
{
    free_acpi_perf_data ();
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="594" endline="768">
{
    unsigned int i;
    unsigned int valid_states = 0;
    unsigned int cpu = policy->cpu;
    struct acpi_cpufreq_data *data;
    unsigned int result = 0;
    struct cpuinfo_x86 *c = &cpu_data (policy->cpu);
    struct acpi_processor_performance *perf;
    dprintk ("acpi_cpufreq_cpu_init\n");
    data = kzalloc (sizeof (struct acpi_cpufreq_data), GFP_KERNEL);
    if (!data)
        return -ENOMEM;
    data->acpi_data = per_cpu_ptr (acpi_perf_data, cpu);
    per_cpu (drv_data, cpu) = data;
    if (cpu_has (c, X86_FEATURE_CONSTANT_TSC))
        acpi_cpufreq_driver.flags |= CPUFREQ_CONST_LOOPS;
    result = acpi_processor_register_performance (data->acpi_data, cpu);
    if (result)
        goto err_free;
    perf = data->acpi_data;
    policy->shared_type = perf->shared_type;
    if (policy->shared_type == CPUFREQ_SHARED_TYPE_ALL || policy->shared_type == CPUFREQ_SHARED_TYPE_ANY) {
        cpumask_copy (policy -> cpus, perf -> shared_cpu_map);
    }
    cpumask_copy (policy -> related_cpus, perf -> shared_cpu_map);
    if (perf->state_count <= 1) {
        dprintk ("No P-States\n");
        result = -ENODEV;
        goto err_unreg;
    }
    if (perf->control_register.space_id != perf->status_register.space_id) {
        result = -ENODEV;
        goto err_unreg;
    }
    switch (perf->control_register.space_id) {
    case ACPI_ADR_SPACE_SYSTEM_IO :
        dprintk ("SYSTEM IO addr space\n");
        data->cpu_feature = SYSTEM_IO_CAPABLE;
        break;
    case ACPI_ADR_SPACE_FIXED_HARDWARE :
        dprintk ("HARDWARE addr space\n");
        if (!check_est_cpu (cpu)) {
            result = -ENODEV;
            goto err_unreg;
        }
        data->cpu_feature = SYSTEM_INTEL_MSR_CAPABLE;
        break;
    default :
        dprintk ("Unknown addr space %d\n", (u32) (perf->control_register.space_id));
        result = -ENODEV;
        goto err_unreg;
    }
    data->freq_table = kmalloc (sizeof (struct cpufreq_frequency_table) * (perf->state_count + 1), GFP_KERNEL);
    if (!data->freq_table) {
        result = -ENOMEM;
        goto err_unreg;
    }
    policy->cpuinfo.transition_latency = 0;
    for (i = 0; i < perf->state_count; i++) {
        if ((perf->states[i].transition_latency * 1000) > policy->cpuinfo.transition_latency)
            policy->cpuinfo.transition_latency = perf->states[i].transition_latency * 1000;
    }
    if (perf->control_register.space_id == ACPI_ADR_SPACE_FIXED_HARDWARE && policy->cpuinfo.transition_latency > 20 * 1000) {
        policy->cpuinfo.transition_latency = 20 * 1000;
        printk_once (KERN_INFO "P-state transition latency capped at 20 uS\n");
    }
    for (i = 0; i < perf->state_count; i++) {
        if (i > 0 && perf->states[i].core_frequency >= data->freq_table[valid_states - 1].frequency / 1000)
            continue;
        data->freq_table[valid_states].index = i;
        data->freq_table[valid_states].frequency = perf->states[i].core_frequency * 1000;
        valid_states++;
    }
    data->freq_table[valid_states].frequency = CPUFREQ_TABLE_END;
    perf->state = 0;
    result = cpufreq_frequency_table_cpuinfo (policy, data->freq_table);
    if (result)
        goto err_freqfree;
    if (perf->states[0].core_frequency * 1000 != policy->cpuinfo.max_freq)
        printk (KERN_WARNING FW_WARN "P-state 0 is not max freq\n");
    switch (perf->control_register.space_id) {
    case ACPI_ADR_SPACE_SYSTEM_IO :
        policy->cur = acpi_cpufreq_guess_freq (data, policy->cpu);
        break;
    case ACPI_ADR_SPACE_FIXED_HARDWARE :
        acpi_cpufreq_driver.get = get_cur_freq_on_cpu;
        policy->cur = get_cur_freq_on_cpu (cpu);
        break;
    default :
        break;
    }
    acpi_processor_notify_smm (THIS_MODULE);
    if (c->x86_vendor == X86_VENDOR_INTEL && c->cpuid_level >= 6) {
        unsigned int ecx;
        ecx = cpuid_ecx (6);
        if (ecx & CPUID_6_ECX_APERFMPERF_CAPABILITY)
            acpi_cpufreq_driver.getavg = get_measured_perf;
    }
    dprintk ("CPU%u - ACPI performance management activated.\n", cpu);
    for (i = 0; i < perf->state_count; i++)
        dprintk ("     %cP%d: %d MHz, %d mW, %d uS\n", (i == perf->state ? '*' : ' '), i, (u32) perf->states[i].core_frequency, (u32) perf->states[i].power, (u32) perf->states[i].transition_latency);
    cpufreq_frequency_table_get_attr (data -> freq_table, policy -> cpu);
    data->resume = 1;
    return result;
err_freqfree :
    kfree (data->freq_table);
err_unreg :
    acpi_processor_unregister_performance (perf, cpu);
err_free :
    kfree (data);
    per_cpu (drv_data, cpu) = NULL;
    return result;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="627" endline="629">
{
    cpumask_copy (policy -> cpus, perf -> shared_cpu_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="641" endline="645">
{
    dprintk ("No P-States\n");
    result = -ENODEV;
    goto err_unreg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="647" endline="650">
{
    result = -ENODEV;
    goto err_unreg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="652" endline="670">
{
case ACPI_ADR_SPACE_SYSTEM_IO :
    dprintk ("SYSTEM IO addr space\n");
    data->cpu_feature = SYSTEM_IO_CAPABLE;
    break;
case ACPI_ADR_SPACE_FIXED_HARDWARE :
    dprintk ("HARDWARE addr space\n");
    if (!check_est_cpu (cpu)) {
        result = -ENODEV;
        goto err_unreg;
    }
    data->cpu_feature = SYSTEM_INTEL_MSR_CAPABLE;
    break;
default :
    dprintk ("Unknown addr space %d\n", (u32) (perf->control_register.space_id));
    result = -ENODEV;
    goto err_unreg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="659" endline="662">
{
    result = -ENODEV;
    goto err_unreg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="674" endline="677">
{
    result = -ENOMEM;
    goto err_unreg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="681" endline="686">
{
    if ((perf->states[i].transition_latency * 1000) > policy->cpuinfo.transition_latency)
        policy->cpuinfo.transition_latency = perf->states[i].transition_latency * 1000;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="690" endline="694">
{
    policy->cpuinfo.transition_latency = 20 * 1000;
    printk_once (KERN_INFO "P-state transition latency capped at 20 uS\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="697" endline="706">
{
    if (i > 0 && perf->states[i].core_frequency >= data->freq_table[valid_states - 1].frequency / 1000)
        continue;
    data->freq_table[valid_states].index = i;
    data->freq_table[valid_states].frequency = perf->states[i].core_frequency * 1000;
    valid_states++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="717" endline="728">
{
case ACPI_ADR_SPACE_SYSTEM_IO :
    policy->cur = acpi_cpufreq_guess_freq (data, policy->cpu);
    break;
case ACPI_ADR_SPACE_FIXED_HARDWARE :
    acpi_cpufreq_driver.get = get_cur_freq_on_cpu;
    policy->cur = get_cur_freq_on_cpu (cpu);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="734" endline="739">
{
    unsigned int ecx;
    ecx = cpuid_ecx (6);
    if (ecx & CPUID_6_ECX_APERFMPERF_CAPABILITY)
        acpi_cpufreq_driver.getavg = get_measured_perf;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="771" endline="785">
{
    struct acpi_cpufreq_data *data = per_cpu (drv_data, policy->cpu);
    dprintk ("acpi_cpufreq_cpu_exit\n");
    if (data) {
        cpufreq_frequency_table_put_attr (policy -> cpu);
        per_cpu (drv_data, policy->cpu) = NULL;
        acpi_processor_unregister_performance (data -> acpi_data, policy -> cpu);
        kfree (data);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="776" endline="782">
{
    cpufreq_frequency_table_put_attr (policy -> cpu);
    per_cpu (drv_data, policy->cpu) = NULL;
    acpi_processor_unregister_performance (data -> acpi_data, policy -> cpu);
    kfree (data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="788" endline="796">
{
    struct acpi_cpufreq_data *data = per_cpu (drv_data, policy->cpu);
    dprintk ("acpi_cpufreq_resume\n");
    data->resume = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="815" endline="832">
{
    int ret;
    if (acpi_disabled)
        return 0;
    dprintk ("acpi_cpufreq_init\n");
    ret = acpi_cpufreq_early_init ();
    if (ret)
        return ret;
    ret = cpufreq_register_driver (&acpi_cpufreq_driver);
    if (ret)
        free_acpi_perf_data ();
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c.ifdefed" startline="835" endline="841">
{
    dprintk ("acpi_cpufreq_exit\n");
    cpufreq_unregister_driver (& acpi_cpufreq_driver);
    free_percpu (acpi_perf_data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/bugs_64.c.ifdefed" startline="15" endline="33">
{
    identify_boot_cpu ();
    alternative_instructions ();
    if (!direct_gbpages)
        set_memory_4k ((unsigned long) __va (0), 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="84" endline="86">
{
    return p6_perfmon_event_map[event];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="97" endline="112">
{
    return event & P6_EVNTSEL_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="130" endline="132">
{
    return intel_perfmon_event_map[event];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="423" endline="438">
{
    return event & CORE_EVNTSEL_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="545" endline="547">
{
    return amd_perfmon_event_map[event];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="550" endline="565">
{
    return event & K7_EVNTSEL_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="575" endline="610">
{
    int shift = 64 - x86_pmu.counter_bits;
    u64 prev_raw_count, new_raw_count;
    s64 delta;
again :
    prev_raw_count = atomic64_read (&hwc->prev_count);
    rdmsrl (hwc -> counter_base + idx, new_raw_count);
    if (atomic64_cmpxchg (&hwc->prev_count, prev_raw_count, new_raw_count) != prev_raw_count)
        goto again;
    delta = (new_raw_count << shift) - (prev_raw_count << shift);
    delta >>= shift;
    atomic64_add (delta, & counter -> count);
    atomic64_sub (delta, & hwc -> period_left);
    return new_raw_count;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="616" endline="652">
{
    return true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="655" endline="667">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="670" endline="675">
{
    if (atomic_dec_and_mutex_lock (&active_counters, &pmc_reserve_mutex)) {
        release_pmc_hardware ();
        mutex_unlock (& pmc_reserve_mutex);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="671" endline="674">
{
    release_pmc_hardware ();
    mutex_unlock (& pmc_reserve_mutex);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="678" endline="680">
{
    return x86_pmu.handle_irq != NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="684" endline="713">
{
    unsigned int cache_type, cache_op, cache_result;
    u64 config, val;
    config = attr->config;
    cache_type = (config >> 0) & 0xff;
    if (cache_type >= PERF_COUNT_HW_CACHE_MAX)
        return -EINVAL;
    cache_op = (config >> 8) & 0xff;
    if (cache_op >= PERF_COUNT_HW_CACHE_OP_MAX)
        return -EINVAL;
    cache_result = (config >> 16) & 0xff;
    if (cache_result >= PERF_COUNT_HW_CACHE_RESULT_MAX)
        return -EINVAL;
    val = hw_cache_event_ids[cache_type][cache_op][cache_result];
    if (val == 0)
        return -ENOENT;
    if (val == -1)
        return -EINVAL;
    hwc->config |= val;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="719" endline="799">
{
    struct perf_counter_attr *attr = &counter->attr;
    struct hw_perf_counter *hwc = &counter->hw;
    u64 config;
    int err;
    if (!x86_pmu_initialized ())
        return -ENODEV;
    err = 0;
    if (!atomic_inc_not_zero (&active_counters)) {
        mutex_lock (& pmc_reserve_mutex);
        if (atomic_read (&active_counters) == 0 && !reserve_pmc_hardware ())
            err = -EBUSY;
        else
            atomic_inc (&active_counters);
        mutex_unlock (& pmc_reserve_mutex);
    }
    if (err)
        return err;
    hwc->config = ARCH_PERFMON_EVENTSEL_INT;
    if (!attr->exclude_user)
        hwc->config |= ARCH_PERFMON_EVENTSEL_USR;
    if (!attr->exclude_kernel)
        hwc->config |= ARCH_PERFMON_EVENTSEL_OS;
    if (!hwc->sample_period) {
        hwc->sample_period = x86_pmu.max_period;
        hwc->last_period = hwc->sample_period;
        atomic64_set (& hwc -> period_left, hwc -> sample_period);
    }
    else {
        if (!x86_pmu.apic)
            return -EOPNOTSUPP;
    }
    counter->destroy = hw_perf_counter_destroy;
    if (attr->type == PERF_TYPE_RAW) {
        hwc->config |= x86_pmu.raw_event (attr->config);
        return 0;
    }
    if (attr->type == PERF_TYPE_HW_CACHE)
        return set_ext_hw_attr (hwc, attr);
    if (attr->config >= x86_pmu.max_events)
        return -EINVAL;
    config = x86_pmu.event_map (attr->config);
    if (config == 0)
        return -ENOENT;
    if (config == -1LL)
        return -EINVAL;
    hwc->config |= config;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="729" endline="736">
{
    mutex_lock (& pmc_reserve_mutex);
    if (atomic_read (&active_counters) == 0 && !reserve_pmc_hardware ())
        err = -EBUSY;
    else
        atomic_inc (&active_counters);
    mutex_unlock (& pmc_reserve_mutex);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="754" endline="758">
{
    hwc->sample_period = x86_pmu.max_period;
    hwc->last_period = hwc->sample_period;
    atomic64_set (& hwc -> period_left, hwc -> sample_period);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="758" endline="767">
{
    if (!x86_pmu.apic)
        return -EOPNOTSUPP;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="774" endline="777">
{
    hwc->config |= x86_pmu.raw_event (attr->config);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="802" endline="816">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    u64 val;
    if (!cpuc->enabled)
        return;
    cpuc->enabled = 0;
    barrier ();
    rdmsrl (MSR_P6_EVNTSEL0, val);
    val &= ~ARCH_PERFMON_EVENTSEL0_ENABLE;
    wrmsrl (MSR_P6_EVNTSEL0, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="819" endline="821">
{
    wrmsrl (MSR_CORE_PERF_GLOBAL_CTRL, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="824" endline="850">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    int idx;
    if (!cpuc->enabled)
        return;
    cpuc->enabled = 0;
    barrier ();
    for (idx = 0; idx < x86_pmu.num_counters; idx++) {
        u64 val;
        if (!test_bit (idx, cpuc->active_mask))
            continue;
        rdmsrl (MSR_K7_EVNTSEL0 + idx, val);
        if (!(val & ARCH_PERFMON_EVENTSEL0_ENABLE))
            continue;
        val &= ~ARCH_PERFMON_EVENTSEL0_ENABLE;
        wrmsrl (MSR_K7_EVNTSEL0 + idx, val);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="839" endline="849">
{
    u64 val;
    if (!test_bit (idx, cpuc->active_mask))
        continue;
    rdmsrl (MSR_K7_EVNTSEL0 + idx, val);
    if (!(val & ARCH_PERFMON_EVENTSEL0_ENABLE))
        continue;
    val &= ~ARCH_PERFMON_EVENTSEL0_ENABLE;
    wrmsrl (MSR_K7_EVNTSEL0 + idx, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="853" endline="857">
{
    if (!x86_pmu_initialized ())
        return;
    return x86_pmu.disable_all ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="860" endline="874">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    unsigned long val;
    if (cpuc->enabled)
        return;
    cpuc->enabled = 1;
    barrier ();
    rdmsrl (MSR_P6_EVNTSEL0, val);
    val |= ARCH_PERFMON_EVENTSEL0_ENABLE;
    wrmsrl (MSR_P6_EVNTSEL0, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="877" endline="879">
{
    wrmsrl (MSR_CORE_PERF_GLOBAL_CTRL, x86_pmu.intel_ctrl);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="882" endline="903">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    int idx;
    if (cpuc->enabled)
        return;
    cpuc->enabled = 1;
    barrier ();
    for (idx = 0; idx < x86_pmu.num_counters; idx++) {
        struct perf_counter *counter = cpuc->counters[idx];
        u64 val;
        if (!test_bit (idx, cpuc->active_mask))
            continue;
        val = counter->hw.config;
        val |= ARCH_PERFMON_EVENTSEL0_ENABLE;
        wrmsrl (MSR_K7_EVNTSEL0 + idx, val);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="892" endline="902">
{
    struct perf_counter *counter = cpuc->counters[idx];
    u64 val;
    if (!test_bit (idx, cpuc->active_mask))
        continue;
    val = counter->hw.config;
    val |= ARCH_PERFMON_EVENTSEL0_ENABLE;
    wrmsrl (MSR_K7_EVNTSEL0 + idx, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="906" endline="910">
{
    if (!x86_pmu_initialized ())
        return;
    x86_pmu.enable_all ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="913" endline="919">
{
    u64 status;
    rdmsrl (MSR_CORE_PERF_GLOBAL_STATUS, status);
    return status;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="922" endline="924">
{
    wrmsrl (MSR_CORE_PERF_GLOBAL_OVF_CTRL, ack);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="927" endline="930">
{
    (void) checking_wrmsrl (hwc->config_base + idx, hwc->config | ARCH_PERFMON_EVENTSEL0_ENABLE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="933" endline="935">
{
    (void) checking_wrmsrl (hwc->config_base + idx, hwc->config);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="939" endline="948">
{
    int idx = __idx - X86_PMC_IDX_FIXED;
    u64 ctrl_val, mask;
    mask = 0xfULL << (idx * 4);
    rdmsrl (hwc -> config_base, ctrl_val);
    ctrl_val &= ~mask;
    (void) checking_wrmsrl (hwc->config_base, ctrl_val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="952" endline="960">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    u64 val = P6_NOP_COUNTER;
    if (cpuc->enabled)
        val |= ARCH_PERFMON_EVENTSEL0_ENABLE;
    (void) checking_wrmsrl (hwc->config_base + idx, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="964" endline="971">
{
    if (unlikely (hwc->config_base == MSR_ARCH_PERFMON_FIXED_CTR_CTRL)) {
        intel_pmu_disable_fixed (hwc, idx);
        return;
    }
    x86_pmu_disable_counter (hwc, idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="965" endline="968">
{
    intel_pmu_disable_fixed (hwc, idx);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="975" endline="977">
{
    x86_pmu_disable_counter (hwc, idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="988" endline="1032">
{
    s64 left = atomic64_read (&hwc->period_left);
    s64 period = hwc->sample_period;
    int err, ret = 0;
    if (unlikely (left <= -period)) {
        left = period;
        atomic64_set (& hwc -> period_left, left);
        hwc->last_period = period;
        ret = 1;
    }
    if (unlikely (left <= 0)) {
        left += period;
        atomic64_set (& hwc -> period_left, left);
        hwc->last_period = period;
        ret = 1;
    }
    if (unlikely (left < 2))
        left = 2;
    if (left > x86_pmu.max_period)
        left = x86_pmu.max_period;
    per_cpu (prev_left[idx], smp_processor_id ()) = left;
    atomic64_set (& hwc -> prev_count, (u64) - left);
    err = checking_wrmsrl (hwc->counter_base + idx, (u64) (-left) & x86_pmu.counter_mask);
    perf_counter_update_userpage (counter);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="996" endline="1001">
{
    left = period;
    atomic64_set (& hwc -> period_left, left);
    hwc->last_period = period;
    ret = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1003" endline="1008">
{
    left += period;
    atomic64_set (& hwc -> period_left, left);
    hwc->last_period = period;
    ret = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1036" endline="1058">
{
    int idx = __idx - X86_PMC_IDX_FIXED;
    u64 ctrl_val, bits, mask;
    int err;
    bits = 0x8ULL;
    if (hwc->config & ARCH_PERFMON_EVENTSEL_USR)
        bits |= 0x2;
    if (hwc->config & ARCH_PERFMON_EVENTSEL_OS)
        bits |= 0x1;
    bits <<= (idx * 4);
    mask = 0xfULL << (idx * 4);
    rdmsrl (hwc -> config_base, ctrl_val);
    ctrl_val &= ~mask;
    ctrl_val |= bits;
    err = checking_wrmsrl (hwc->config_base, ctrl_val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1061" endline="1070">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    u64 val;
    val = hwc->config;
    if (cpuc->enabled)
        val |= ARCH_PERFMON_EVENTSEL0_ENABLE;
    (void) checking_wrmsrl (hwc->config_base + idx, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1074" endline="1081">
{
    if (unlikely (hwc->config_base == MSR_ARCH_PERFMON_FIXED_CTR_CTRL)) {
        intel_pmu_enable_fixed (hwc, idx);
        return;
    }
    x86_pmu_enable_counter (hwc, idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1075" endline="1078">
{
    intel_pmu_enable_fixed (hwc, idx);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1084" endline="1089">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    if (cpuc->enabled)
        x86_pmu_enable_counter (hwc, idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1093" endline="1109">
{
    unsigned int event;
    if (!x86_pmu.num_counters_fixed)
        return -1;
    event = hwc->config & ARCH_PERFMON_EVENT_MASK;
    if (unlikely (event == x86_pmu.event_map (PERF_COUNT_HW_INSTRUCTIONS)))
        return X86_PMC_IDX_FIXED_INSTRUCTIONS;
    if (unlikely (event == x86_pmu.event_map (PERF_COUNT_HW_CPU_CYCLES)))
        return X86_PMC_IDX_FIXED_CPU_CYCLES;
    if (unlikely (event == x86_pmu.event_map (PERF_COUNT_HW_BUS_CYCLES)))
        return X86_PMC_IDX_FIXED_BUS_CYCLES;
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1115" endline="1167">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    struct hw_perf_counter *hwc = &counter->hw;
    int idx;
    idx = fixed_mode_idx (counter, hwc);
    if (idx >= 0) {
        if (test_and_set_bit (idx, cpuc->used_mask))
            goto try_generic;
        hwc->config_base = MSR_ARCH_PERFMON_FIXED_CTR_CTRL;
        hwc->counter_base = MSR_ARCH_PERFMON_FIXED_CTR0 - X86_PMC_IDX_FIXED;
        hwc->idx = idx;
    }
    else {
        idx = hwc->idx;
        if (test_and_set_bit (idx, cpuc->used_mask)) {
        try_generic :
            idx = find_first_zero_bit (cpuc->used_mask, x86_pmu.num_counters);
            if (idx == x86_pmu.num_counters)
                return -EAGAIN;
            set_bit (idx, cpuc -> used_mask);
            hwc->idx = idx;
        }
        hwc->config_base = x86_pmu.eventsel;
        hwc->counter_base = x86_pmu.perfctr;
    }
    perf_counters_lapic_init ();
    x86_pmu.disable (hwc, idx);
    cpuc->counters[idx] = counter;
    set_bit (idx, cpuc -> active_mask);
    x86_perf_counter_set_period (counter, hwc, idx);
    x86_pmu.enable (hwc, idx);
    perf_counter_update_userpage (counter);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1121" endline="1137">
{
    if (test_and_set_bit (idx, cpuc->used_mask))
        goto try_generic;
    hwc->config_base = MSR_ARCH_PERFMON_FIXED_CTR_CTRL;
    hwc->counter_base = MSR_ARCH_PERFMON_FIXED_CTR0 - X86_PMC_IDX_FIXED;
    hwc->idx = idx;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1137" endline="1152">
{
    idx = hwc->idx;
    if (test_and_set_bit (idx, cpuc->used_mask)) {
    try_generic :
        idx = find_first_zero_bit (cpuc->used_mask, x86_pmu.num_counters);
        if (idx == x86_pmu.num_counters)
            return -EAGAIN;
        set_bit (idx, cpuc -> used_mask);
        hwc->idx = idx;
    }
    hwc->config_base = x86_pmu.eventsel;
    hwc->counter_base = x86_pmu.perfctr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1140" endline="1149">
{
try_generic :
    idx = find_first_zero_bit (cpuc->used_mask, x86_pmu.num_counters);
    if (idx == x86_pmu.num_counters)
        return -EAGAIN;
    set_bit (idx, cpuc -> used_mask);
    hwc->idx = idx;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1170" endline="1179">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    struct hw_perf_counter *hwc = &counter->hw;
    if (WARN_ON_ONCE (hwc->idx >= X86_PMC_IDX_MAX || cpuc->counters[hwc->idx] != counter))
        return;
    x86_pmu.enable (hwc, hwc->idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1182" endline="1230">
{
    u64 ctrl, status, overflow, pmc_ctrl, pmc_count, prev_left, fixed;
    struct cpu_hw_counters *cpuc;
    unsigned long flags;
    int cpu, idx;
    if (!x86_pmu.num_counters)
        return;
    local_irq_save (flags);
    cpu = smp_processor_id ();
    cpuc = &per_cpu (cpu_hw_counters, cpu);
    if (x86_pmu.version >= 2) {
        rdmsrl (MSR_CORE_PERF_GLOBAL_CTRL, ctrl);
        rdmsrl (MSR_CORE_PERF_GLOBAL_STATUS, status);
        rdmsrl (MSR_CORE_PERF_GLOBAL_OVF_CTRL, overflow);
        rdmsrl (MSR_ARCH_PERFMON_FIXED_CTR_CTRL, fixed);
        pr_info ("\n");
        pr_info ("CPU#%d: ctrl:       %016llx\n", cpu, ctrl);
        pr_info ("CPU#%d: status:     %016llx\n", cpu, status);
        pr_info ("CPU#%d: overflow:   %016llx\n", cpu, overflow);
        pr_info ("CPU#%d: fixed:      %016llx\n", cpu, fixed);
    }
    pr_info ("CPU#%d: used:       %016llx\n", cpu, * (u64 *) cpuc -> used_mask);
    for (idx = 0; idx < x86_pmu.num_counters; idx++) {
        rdmsrl (x86_pmu.eventsel + idx, pmc_ctrl);
        rdmsrl (x86_pmu.perfctr + idx, pmc_count);
        prev_left = per_cpu (prev_left[idx], cpu);
        pr_info ("CPU#%d:   gen-PMC%d ctrl:  %016llx\n", cpu, idx, pmc_ctrl);
        pr_info ("CPU#%d:   gen-PMC%d count: %016llx\n", cpu, idx, pmc_count);
        pr_info ("CPU#%d:   gen-PMC%d left:  %016llx\n", cpu, idx, prev_left);
    }
    for (idx = 0; idx < x86_pmu.num_counters_fixed; idx++) {
        rdmsrl (MSR_ARCH_PERFMON_FIXED_CTR0 + idx, pmc_count);
        pr_info ("CPU#%d: fixed-PMC%d count: %016llx\n", cpu, idx, pmc_count);
    }
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1196" endline="1207">
{
    rdmsrl (MSR_CORE_PERF_GLOBAL_CTRL, ctrl);
    rdmsrl (MSR_CORE_PERF_GLOBAL_STATUS, status);
    rdmsrl (MSR_CORE_PERF_GLOBAL_OVF_CTRL, overflow);
    rdmsrl (MSR_ARCH_PERFMON_FIXED_CTR_CTRL, fixed);
    pr_info ("\n");
    pr_info ("CPU#%d: ctrl:       %016llx\n", cpu, ctrl);
    pr_info ("CPU#%d: status:     %016llx\n", cpu, status);
    pr_info ("CPU#%d: overflow:   %016llx\n", cpu, overflow);
    pr_info ("CPU#%d: fixed:      %016llx\n", cpu, fixed);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1210" endline="1222">
{
    rdmsrl (x86_pmu.eventsel + idx, pmc_ctrl);
    rdmsrl (x86_pmu.perfctr + idx, pmc_count);
    prev_left = per_cpu (prev_left[idx], cpu);
    pr_info ("CPU#%d:   gen-PMC%d ctrl:  %016llx\n", cpu, idx, pmc_ctrl);
    pr_info ("CPU#%d:   gen-PMC%d count: %016llx\n", cpu, idx, pmc_count);
    pr_info ("CPU#%d:   gen-PMC%d left:  %016llx\n", cpu, idx, prev_left);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1223" endline="1228">
{
    rdmsrl (MSR_ARCH_PERFMON_FIXED_CTR0 + idx, pmc_count);
    pr_info ("CPU#%d: fixed-PMC%d count: %016llx\n", cpu, idx, pmc_count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1233" endline="1260">
{
    struct cpu_hw_counters *cpuc = &__get_cpu_var (cpu_hw_counters);
    struct hw_perf_counter *hwc = &counter->hw;
    int idx = hwc->idx;
    clear_bit (idx, cpuc -> active_mask);
    x86_pmu.disable (hwc, idx);
    barrier ();
    x86_perf_counter_update (counter, hwc, idx);
    cpuc->counters[idx] = NULL;
    clear_bit (idx, cpuc -> used_mask);
    perf_counter_update_userpage (counter);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1267" endline="1279">
{
    struct hw_perf_counter *hwc = &counter->hw;
    int idx = hwc->idx;
    int ret;
    x86_perf_counter_update (counter, hwc, idx);
    ret = x86_perf_counter_set_period (counter, hwc, idx);
    if (counter->state == PERF_COUNTER_STATE_ACTIVE)
        intel_pmu_enable_counter (hwc, idx);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1282" endline="1302">
{
    unsigned long flags;
    int idx;
    if (!x86_pmu.num_counters)
        return;
    local_irq_save (flags);
    printk ("clearing PMU state on CPU#%d\n", smp_processor_id ());
    for (idx = 0; idx < x86_pmu.num_counters; idx++) {
        checking_wrmsrl (x86_pmu.eventsel + idx, 0ull);
        checking_wrmsrl (x86_pmu.perfctr + idx, 0ull);
    }
    for (idx = 0; idx < x86_pmu.num_counters_fixed; idx++) {
        checking_wrmsrl (MSR_ARCH_PERFMON_FIXED_CTR0 + idx, 0ull);
    }
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1293" endline="1296">
{
    checking_wrmsrl (x86_pmu.eventsel + idx, 0ull);
    checking_wrmsrl (x86_pmu.perfctr + idx, 0ull);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1297" endline="1299">
{
    checking_wrmsrl (MSR_ARCH_PERFMON_FIXED_CTR0 + idx, 0ull);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1305" endline="1346">
{
    struct perf_sample_data data;
    struct cpu_hw_counters *cpuc;
    struct perf_counter *counter;
    struct hw_perf_counter *hwc;
    int idx, handled = 0;
    u64 val;
    data.regs = regs;
    data.addr = 0;
    cpuc = &__get_cpu_var (cpu_hw_counters);
    for (idx = 0; idx < x86_pmu.num_counters; idx++) {
        if (!test_bit (idx, cpuc->active_mask))
            continue;
        counter = cpuc->counters[idx];
        hwc = &counter->hw;
        val = x86_perf_counter_update (counter, hwc, idx);
        if (val & (1ULL << (x86_pmu.counter_bits - 1)))
            continue;
        handled = 1;
        data.period = counter->hw.last_period;
        if (!x86_perf_counter_set_period (counter, hwc, idx))
            continue;
        if (perf_counter_overflow (counter, 1, &data))
            p6_pmu_disable_counter (hwc, idx);
    }
    if (handled)
        inc_irq_stat (apic_perf_irqs);
    return handled;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1318" endline="1340">
{
    if (!test_bit (idx, cpuc->active_mask))
        continue;
    counter = cpuc->counters[idx];
    hwc = &counter->hw;
    val = x86_perf_counter_update (counter, hwc, idx);
    if (val & (1ULL << (x86_pmu.counter_bits - 1)))
        continue;
    handled = 1;
    data.period = counter->hw.last_period;
    if (!x86_perf_counter_set_period (counter, hwc, idx))
        continue;
    if (perf_counter_overflow (counter, 1, &data))
        p6_pmu_disable_counter (hwc, idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1353" endline="1411">
{
    struct perf_sample_data data;
    struct cpu_hw_counters *cpuc;
    int bit, loops;
    u64 ack, status;
    data.regs = regs;
    data.addr = 0;
    cpuc = &__get_cpu_var (cpu_hw_counters);
    perf_disable ();
    status = intel_pmu_get_status ();
    if (!status) {
        perf_enable ();
        return 0;
    }
    loops = 0;
again :
    if (++loops > 100) {
        WARN_ONCE (1, "perfcounters: irq loop stuck!\n");
        perf_counter_print_debug ();
        intel_pmu_reset ();
        perf_enable ();
        return 1;
    }
    inc_irq_stat (apic_perf_irqs);
    ack = status;
    for_each_bit (bit, (unsigned long *) & status, X86_PMC_IDX_MAX)
    {
        struct perf_counter *counter = cpuc->counters[bit];
        clear_bit (bit, (unsigned long *) & status);
        if (!test_bit (bit, cpuc->active_mask))
            continue;
        if (!intel_pmu_save_and_restart (counter))
            continue;
        data.period = counter->hw.last_period;
        if (perf_counter_overflow (counter, 1, &data))
            intel_pmu_disable_counter (&counter->hw, bit);
    }
    intel_pmu_ack_status (ack);
    status = intel_pmu_get_status ();
    if (status)
        goto again;
    perf_enable ();
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1366" endline="1369">
{
    perf_enable ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1373" endline="1379">
{
    WARN_ONCE (1, "perfcounters: irq loop stuck!\n");
    perf_counter_print_debug ();
    intel_pmu_reset ();
    perf_enable ();
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1383" endline="1397">
{
    struct perf_counter *counter = cpuc->counters[bit];
    clear_bit (bit, (unsigned long *) & status);
    if (!test_bit (bit, cpuc->active_mask))
        continue;
    if (!intel_pmu_save_and_restart (counter))
        continue;
    data.period = counter->hw.last_period;
    if (perf_counter_overflow (counter, 1, &data))
        intel_pmu_disable_counter (&counter->hw, bit);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1414" endline="1455">
{
    struct perf_sample_data data;
    struct cpu_hw_counters *cpuc;
    struct perf_counter *counter;
    struct hw_perf_counter *hwc;
    int idx, handled = 0;
    u64 val;
    data.regs = regs;
    data.addr = 0;
    cpuc = &__get_cpu_var (cpu_hw_counters);
    for (idx = 0; idx < x86_pmu.num_counters; idx++) {
        if (!test_bit (idx, cpuc->active_mask))
            continue;
        counter = cpuc->counters[idx];
        hwc = &counter->hw;
        val = x86_perf_counter_update (counter, hwc, idx);
        if (val & (1ULL << (x86_pmu.counter_bits - 1)))
            continue;
        handled = 1;
        data.period = counter->hw.last_period;
        if (!x86_perf_counter_set_period (counter, hwc, idx))
            continue;
        if (perf_counter_overflow (counter, 1, &data))
            amd_pmu_disable_counter (hwc, idx);
    }
    if (handled)
        inc_irq_stat (apic_perf_irqs);
    return handled;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1427" endline="1449">
{
    if (!test_bit (idx, cpuc->active_mask))
        continue;
    counter = cpuc->counters[idx];
    hwc = &counter->hw;
    val = x86_perf_counter_update (counter, hwc, idx);
    if (val & (1ULL << (x86_pmu.counter_bits - 1)))
        continue;
    handled = 1;
    data.period = counter->hw.last_period;
    if (!x86_perf_counter_set_period (counter, hwc, idx))
        continue;
    if (perf_counter_overflow (counter, 1, &data))
        amd_pmu_disable_counter (hwc, idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1458" endline="1464">
{
    irq_enter ();
    ack_APIC_irq ();
    inc_irq_stat (apic_pending_irqs);
    perf_counter_do_pending ();
    irq_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1467" endline="1471">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1474" endline="1484">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1489" endline="1520">
{
    struct die_args *args = __args;
    struct pt_regs *regs;
    if (!atomic_read (&active_counters))
        return NOTIFY_DONE;
    switch (cmd) {
    case DIE_NMI :
    case DIE_NMI_IPI :
        break;
    default :
        return NOTIFY_DONE;
    }
    regs = args->regs;
    x86_pmu.handle_irq (regs);
    return NOTIFY_STOP;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1496" endline="1503">
{
case DIE_NMI :
case DIE_NMI_IPI :
    break;
default :
    return NOTIFY_DONE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1597" endline="1626">
{
    switch (boot_cpu_data.x86_model) {
    case 1 :
    case 3 :
    case 5 :
    case 6 :
    case 7 :
    case 8 :
    case 11 :
        break;
    case 9 :
    case 13 :
        break;
    default :
        pr_cont ("unsupported p6 CPU model %d ", boot_cpu_data.x86_model);
        return -ENODEV;
    }
    x86_pmu = p6_pmu;
    if (!cpu_has_apic) {
        pr_info ("no APIC, boot with the \"lapic\" boot parameter to force-enable it.\n");
        pr_info ("no hardware sampling interrupt available.\n");
        x86_pmu.apic = 0;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1598" endline="1615">
{
case 1 :
case 3 :
case 5 :
case 6 :
case 7 :
case 8 :
case 11 :
    break;
case 9 :
case 13 :
    break;
default :
    pr_cont ("unsupported p6 CPU model %d ", boot_cpu_data.x86_model);
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1619" endline="1623">
{
    pr_info ("no APIC, boot with the \"lapic\" boot parameter to force-enable it.\n");
    pr_info ("no hardware sampling interrupt available.\n");
    x86_pmu.apic = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1629" endline="1697">
{
    union cpuid10_edx edx;
    union cpuid10_eax eax;
    unsigned int unused;
    unsigned int ebx;
    int version;
    if (!cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON)) {
        if (boot_cpu_data.x86 == 6) {
            return p6_pmu_init ();
        }
        else {
            return -ENODEV;
        }
    }
    cpuid (10, & eax.full, & ebx, & unused, & edx.full);
    if (eax.split.mask_length <= ARCH_PERFMON_BRANCH_MISSES_RETIRED)
        return -ENODEV;
    version = eax.split.version_id;
    if (version < 2)
        return -ENODEV;
    x86_pmu = intel_pmu;
    x86_pmu.version = version;
    x86_pmu.num_counters = eax.split.num_counters;
    x86_pmu.counter_bits = eax.split.bit_width;
    x86_pmu.counter_mask = (1ULL << eax.split.bit_width) - 1;
    x86_pmu.num_counters_fixed = max ((int) edx.split.num_counters_fixed, 3);
    switch (boot_cpu_data.x86_model) {
    case 15 :
    case 22 :
    case 23 :
    case 29 :
        memcpy (hw_cache_event_ids, core2_hw_cache_event_ids, sizeof (hw_cache_event_ids));
        pr_cont ("Core2 events, ");
        break;
    default :
    case 26 :
        memcpy (hw_cache_event_ids, nehalem_hw_cache_event_ids, sizeof (hw_cache_event_ids));
        pr_cont ("Nehalem/Corei7 events, ");
        break;
    case 28 :
        memcpy (hw_cache_event_ids, atom_hw_cache_event_ids, sizeof (hw_cache_event_ids));
        pr_cont ("Atom events, ");
        break;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1636" endline="1643">
{
    if (boot_cpu_data.x86 == 6) {
        return p6_pmu_init ();
    }
    else {
        return -ENODEV;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1638" endline="1640">
{
    return p6_pmu_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1640" endline="1642">
{
    return -ENODEV;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1672" endline="1695">
{
case 15 :
case 22 :
case 23 :
case 29 :
    memcpy (hw_cache_event_ids, core2_hw_cache_event_ids, sizeof (hw_cache_event_ids));
    pr_cont ("Core2 events, ");
    break;
default :
case 26 :
    memcpy (hw_cache_event_ids, nehalem_hw_cache_event_ids, sizeof (hw_cache_event_ids));
    pr_cont ("Nehalem/Corei7 events, ");
    break;
case 28 :
    memcpy (hw_cache_event_ids, atom_hw_cache_event_ids, sizeof (hw_cache_event_ids));
    pr_cont ("Atom events, ");
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1700" endline="1712">
{
    if (boot_cpu_data.x86 < 6)
        return -ENODEV;
    x86_pmu = amd_pmu;
    memcpy (hw_cache_event_ids, amd_hw_cache_event_ids, sizeof (hw_cache_event_ids));
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1715" endline="1765">
{
    int err;
    pr_info ("Performance Counters: ");
    switch (boot_cpu_data.x86_vendor) {
    case X86_VENDOR_INTEL :
        err = intel_pmu_init ();
        break;
    case X86_VENDOR_AMD :
        err = amd_pmu_init ();
        break;
    default :
        return;
    }
    if (err != 0) {
        pr_cont ("no PMU driver, software counters only.\n");
        return;
    }
    pr_cont ("%s PMU driver.\n", x86_pmu.name);
    if (x86_pmu.num_counters > X86_PMC_MAX_GENERIC) {
        WARN (1, KERN_ERR "hw perf counters %d > max(%d), clipping!", x86_pmu.num_counters, X86_PMC_MAX_GENERIC);
        x86_pmu.num_counters = X86_PMC_MAX_GENERIC;
    }
    perf_counter_mask = (1 << x86_pmu.num_counters) - 1;
    perf_max_counters = x86_pmu.num_counters;
    if (x86_pmu.num_counters_fixed > X86_PMC_MAX_FIXED) {
        WARN (1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!", x86_pmu.num_counters_fixed, X86_PMC_MAX_FIXED);
        x86_pmu.num_counters_fixed = X86_PMC_MAX_FIXED;
    }
    perf_counter_mask |= ((1LL << x86_pmu.num_counters_fixed) - 1) << X86_PMC_IDX_FIXED;
    x86_pmu.intel_ctrl = perf_counter_mask;
    perf_counters_lapic_init ();
    register_die_notifier (& perf_counter_nmi_notifier);
    pr_info ("... version:                 %d\n", x86_pmu.version);
    pr_info ("... bit width:               %d\n", x86_pmu.counter_bits);
    pr_info ("... generic counters:        %d\n", x86_pmu.num_counters);
    pr_info ("... value mask:              %016Lx\n", x86_pmu.counter_mask);
    pr_info ("... max period:              %016Lx\n", x86_pmu.max_period);
    pr_info ("... fixed-purpose counters:  %d\n", x86_pmu.num_counters_fixed);
    pr_info ("... counter mask:            %016Lx\n", perf_counter_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1720" endline="1729">
{
case X86_VENDOR_INTEL :
    err = intel_pmu_init ();
    break;
case X86_VENDOR_AMD :
    err = amd_pmu_init ();
    break;
default :
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1730" endline="1733">
{
    pr_cont ("no PMU driver, software counters only.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1737" endline="1741">
{
    WARN (1, KERN_ERR "hw perf counters %d > max(%d), clipping!", x86_pmu.num_counters, X86_PMC_MAX_GENERIC);
    x86_pmu.num_counters = X86_PMC_MAX_GENERIC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1745" endline="1749">
{
    WARN (1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!", x86_pmu.num_counters_fixed, X86_PMC_MAX_FIXED);
    x86_pmu.num_counters_fixed = X86_PMC_MAX_FIXED;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1768" endline="1770">
{
    x86_perf_counter_update (counter, & counter -> hw, counter -> hw.idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1780" endline="1788">
{
    int err;
    err = __hw_perf_counter_init (counter);
    if (err)
        return ERR_PTR (err);
    return &pmu;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1796" endline="1799">
{
    if (entry->nr < PERF_MAX_STACK_DEPTH)
        entry->ip[entry->nr++] = ip;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1808" endline="1810">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1813" endline="1815">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1818" endline="1823">
{
    per_cpu (in_nmi_frame, smp_processor_id ()) = x86_is_stack_id (NMI_STACK, name);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1826" endline="1834">
{
    struct perf_callchain_entry *entry = data;
    if (per_cpu (in_nmi_frame, smp_processor_id ()))
        return;
    if (reliable)
        callchain_store (entry, addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1847" endline="1852">
{
    callchain_store (entry, PERF_CONTEXT_KERNEL);
    callchain_store (entry, regs -> ip);
    dump_trace (NULL, regs, NULL, 0, & backtrace_ops, entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1859" endline="1887">
{
    unsigned long offset, addr = (unsigned long) from;
    int type = in_nmi () ? KM_NMI : KM_IRQ0;
    unsigned long size, len = 0;
    struct page *page;
    void *map;
    int ret;
    do {
        ret = __get_user_pages_fast (addr, 1, 0, &page);
        if (!ret)
            break;
        offset = addr & (PAGE_SIZE - 1);
        size = min (PAGE_SIZE -offset, n -len);
        map = kmap_atomic (page, type);
        memcpy (to, map + offset, size);
        kunmap_atomic (map, type);
        put_page (page);
        len += size;
        to += size;
        addr += size;
    }
    while (len < n);
    return len;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1867" endline="1884">
{
    ret = __get_user_pages_fast (addr, 1, 0, &page);
    if (!ret)
        break;
    offset = addr & (PAGE_SIZE - 1);
    size = min (PAGE_SIZE -offset, n -len);
    map = kmap_atomic (page, type);
    memcpy (to, map + offset, size);
    kunmap_atomic (map, type);
    put_page (page);
    len += size;
    to += size;
    addr += size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1890" endline="1896">
{
    unsigned long bytes;
    bytes = copy_from_user_nmi (frame, fp, sizeof (*frame));
    return bytes == sizeof (*frame);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1900" endline="1925">
{
    struct stack_frame frame;
    const void __user *fp;
    if (!user_mode (regs))
        regs = task_pt_regs (current);
    fp = (void __user *) regs->bp;
    callchain_store (entry, PERF_CONTEXT_USER);
    callchain_store (entry, regs -> ip);
    while (entry->nr < PERF_MAX_STACK_DEPTH) {
        frame.next_frame = NULL;
        frame.return_address = 0;
        if (!copy_stack_frame (fp, &frame))
            break;
        if ((unsigned long) fp < regs->sp)
            break;
        callchain_store (entry, frame.return_address);
        fp = frame.next_frame;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1912" endline="1924">
{
    frame.next_frame = NULL;
    frame.return_address = 0;
    if (!copy_stack_frame (fp, &frame))
        break;
    if ((unsigned long) fp < regs->sp)
        break;
    callchain_store (entry, frame.return_address);
    fp = frame.next_frame;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1929" endline="1948">
{
    int is_user;
    if (!regs)
        return;
    is_user = user_mode (regs);
    if (!current || current->pid == 0)
        return;
    if (is_user && current->state != TASK_RUNNING)
        return;
    if (!is_user)
        perf_callchain_kernel (regs, entry);
    if (current->mm)
        perf_callchain_user (regs, entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perf_counter.c.ifdefed" startline="1951" endline="1964">
{
    struct perf_callchain_entry *entry;
    if (in_nmi ())
        entry = &__get_cpu_var (nmi_entry);
    else
        entry = &__get_cpu_var (irq_entry);
    entry->nr = 0;
    perf_do_callchain (regs, entry);
    return entry;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="67" endline="84">
{
    switch (boot_cpu_data.x86_vendor) {
    case X86_VENDOR_AMD :
        return (msr - MSR_K7_PERFCTR0);
    case X86_VENDOR_INTEL :
        if (cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON))
            return (msr - MSR_ARCH_PERFMON_PERFCTR0);
        switch (boot_cpu_data.x86) {
        case 6 :
            return (msr - MSR_P6_PERFCTR0);
        case 15 :
            return (msr - MSR_P4_BPU_PERFCTR0);
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="69" endline="82">
{
case X86_VENDOR_AMD :
    return (msr - MSR_K7_PERFCTR0);
case X86_VENDOR_INTEL :
    if (cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON))
        return (msr - MSR_ARCH_PERFMON_PERFCTR0);
    switch (boot_cpu_data.x86) {
    case 6 :
        return (msr - MSR_P6_PERFCTR0);
    case 15 :
        return (msr - MSR_P4_BPU_PERFCTR0);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="76" endline="81">
{
case 6 :
    return (msr - MSR_P6_PERFCTR0);
case 15 :
    return (msr - MSR_P4_BPU_PERFCTR0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="91" endline="109">
{
    switch (boot_cpu_data.x86_vendor) {
    case X86_VENDOR_AMD :
        return (msr - MSR_K7_EVNTSEL0);
    case X86_VENDOR_INTEL :
        if (cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON))
            return (msr - MSR_ARCH_PERFMON_EVENTSEL0);
        switch (boot_cpu_data.x86) {
        case 6 :
            return (msr - MSR_P6_EVNTSEL0);
        case 15 :
            return (msr - MSR_P4_BSU_ESCR0);
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="93" endline="106">
{
case X86_VENDOR_AMD :
    return (msr - MSR_K7_EVNTSEL0);
case X86_VENDOR_INTEL :
    if (cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON))
        return (msr - MSR_ARCH_PERFMON_EVENTSEL0);
    switch (boot_cpu_data.x86) {
    case 6 :
        return (msr - MSR_P6_EVNTSEL0);
    case 15 :
        return (msr - MSR_P4_BSU_ESCR0);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="100" endline="105">
{
case 6 :
    return (msr - MSR_P6_EVNTSEL0);
case 15 :
    return (msr - MSR_P4_BSU_ESCR0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="113" endline="117">
{
    BUG_ON (counter > NMI_MAX_COUNTER_BITS);
    return (!test_bit (counter, perfctr_nmi_owner));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="121" endline="128">
{
    unsigned int counter;
    counter = nmi_perfctr_msr_to_bit (msr);
    BUG_ON (counter > NMI_MAX_COUNTER_BITS);
    return (!test_bit (counter, perfctr_nmi_owner));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="132" endline="143">
{
    unsigned int counter;
    counter = nmi_perfctr_msr_to_bit (msr);
    if (counter > NMI_MAX_COUNTER_BITS)
        return 1;
    if (!test_and_set_bit (counter, perfctr_nmi_owner))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="147" endline="156">
{
    unsigned int counter;
    counter = nmi_perfctr_msr_to_bit (msr);
    if (counter > NMI_MAX_COUNTER_BITS)
        return;
    clear_bit (counter, perfctr_nmi_owner);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="160" endline="171">
{
    unsigned int counter;
    counter = nmi_evntsel_msr_to_bit (msr);
    if (counter > NMI_MAX_COUNTER_BITS)
        return 1;
    if (!test_and_set_bit (counter, evntsel_nmi_owner))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="175" endline="184">
{
    unsigned int counter;
    counter = nmi_evntsel_msr_to_bit (msr);
    if (counter > NMI_MAX_COUNTER_BITS)
        return;
    clear_bit (counter, evntsel_nmi_owner);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="188" endline="200">
{
    BUG_ON (nmi_watchdog != NMI_LOCAL_APIC);
    if (atomic_read (&nmi_active) <= 0)
        return;
    on_each_cpu (stop_apic_nmi_watchdog, NULL, 1);
    if (wd_ops)
        wd_ops->unreserve ();
    BUG_ON (atomic_read (& nmi_active) != 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="203" endline="220">
{
    BUG_ON (nmi_watchdog != NMI_LOCAL_APIC);
    if (atomic_read (&nmi_active) != 0)
        return;
    if (!wd_ops)
        return;
    if (!wd_ops->reserve ()) {
        printk (KERN_ERR "NMI watchdog: cannot reserve perfctrs\n");
        return;
    }
    on_each_cpu (setup_apic_nmi_watchdog, NULL, 1);
    touch_nmi_watchdog ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="213" endline="216">
{
    printk (KERN_ERR "NMI watchdog: cannot reserve perfctrs\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="227" endline="246">
{
    u64 counter_val;
    unsigned int retval = hz;
    counter_val = (u64) cpu_khz * 1000;
    do_div (counter_val, retval);
    if (counter_val > 0x7fffffffULL) {
        u64 count = (u64) cpu_khz * 1000;
        do_div (count, 0x7fffffffUL);
        retval = count + 1;
    }
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="240" endline="244">
{
    u64 count = (u64) cpu_khz * 1000;
    do_div (count, 0x7fffffffUL);
    retval = count + 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="250" endline="257">
{
    u64 count = (u64) cpu_khz * 1000;
    do_div (count, nmi_hz);
    if (descr)
        pr_debug ("setting %s to -0x%08Lx\n", descr, count);
    wrmsrl (perfctr_msr, 0 - count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="261" endline="268">
{
    u64 count = (u64) cpu_khz * 1000;
    do_div (count, nmi_hz);
    if (descr)
        pr_debug ("setting %s to -0x%08Lx\n", descr, count);
    wrmsr (perfctr_msr, (u32) (- count), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="282" endline="314">
{
    unsigned int perfctr_msr, evntsel_msr;
    unsigned int evntsel;
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    perfctr_msr = wd_ops->perfctr;
    evntsel_msr = wd_ops->evntsel;
    wrmsrl (perfctr_msr, 0UL);
    evntsel = K7_EVNTSEL_INT | K7_EVNTSEL_OS | K7_EVNTSEL_USR | K7_NMI_EVENT;
    wrmsr (evntsel_msr, evntsel, 0);
    write_watchdog_counter (perfctr_msr, "K7_PERFCTR0", nmi_hz);
    wd->perfctr_msr = perfctr_msr;
    wd->evntsel_msr = evntsel_msr;
    wd->cccr_msr = 0;
    cpu_nmi_set_wd_enabled ();
    apic_write (APIC_LVTPC, APIC_DM_NMI);
    evntsel |= K7_EVNTSEL_ENABLE;
    wrmsr (evntsel_msr, evntsel, 0);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="317" endline="321">
{
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    wrmsr (wd -> evntsel_msr, 0, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="324" endline="333">
{
    if (!reserve_perfctr_nmi (wd_ops->perfctr))
        return 0;
    if (!reserve_evntsel_nmi (wd_ops->evntsel)) {
        release_perfctr_nmi (wd_ops -> perfctr);
        return 0;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="328" endline="331">
{
    release_perfctr_nmi (wd_ops -> perfctr);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="336" endline="339">
{
    release_evntsel_nmi (wd_ops -> evntsel);
    release_perfctr_nmi (wd_ops -> perfctr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="343" endline="346">
{
    write_watchdog_counter (wd -> perfctr_msr, NULL, nmi_hz);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="370" endline="405">
{
    unsigned int perfctr_msr, evntsel_msr;
    unsigned int evntsel;
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    perfctr_msr = wd_ops->perfctr;
    evntsel_msr = wd_ops->evntsel;
    if (wrmsr_safe (perfctr_msr, 0, 0) < 0)
        return 0;
    evntsel = P6_EVNTSEL_INT | P6_EVNTSEL_OS | P6_EVNTSEL_USR | P6_NMI_EVENT;
    wrmsr (evntsel_msr, evntsel, 0);
    nmi_hz = adjust_for_32bit_ctr (nmi_hz);
    write_watchdog_counter32 (perfctr_msr, "P6_PERFCTR0", nmi_hz);
    wd->perfctr_msr = perfctr_msr;
    wd->evntsel_msr = evntsel_msr;
    wd->cccr_msr = 0;
    cpu_nmi_set_wd_enabled ();
    apic_write (APIC_LVTPC, APIC_DM_NMI);
    evntsel |= P6_EVNTSEL0_ENABLE;
    wrmsr (evntsel_msr, evntsel, 0);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="408" endline="419">
{
    apic_write (APIC_LVTPC, APIC_DM_NMI);
    write_watchdog_counter32 (wd -> perfctr_msr, NULL, nmi_hz);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="477" endline="570">
{
    unsigned int perfctr_msr, evntsel_msr, cccr_msr;
    unsigned int evntsel, cccr_val;
    unsigned int misc_enable, dummy;
    unsigned int ht_num;
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    rdmsr (MSR_IA32_MISC_ENABLE, misc_enable, dummy);
    if (!(misc_enable & MSR_P4_MISC_ENABLE_PERF_AVAIL))
        return 0;
    ht_num = 0;
    if (!ht_num) {
        perfctr_msr = MSR_P4_IQ_PERFCTR0;
        evntsel_msr = MSR_P4_CRU_ESCR0;
        cccr_msr = MSR_P4_IQ_CCCR0;
        cccr_val = P4_CCCR_OVF_PMI0 | P4_CCCR_ESCR_SELECT (4);
        if (reset_devices) {
            unsigned int low, high;
            int i;
            for (i = 0; i < P4_CONTROLS; i++) {
                rdmsr (p4_controls [i], low, high);
                low &= ~(P4_CCCR_ENABLE | P4_CCCR_OVF);
                wrmsr (p4_controls [i], low, high);
            }
        }
    }
    else {
        perfctr_msr = MSR_P4_IQ_PERFCTR1;
        evntsel_msr = MSR_P4_CRU_ESCR0;
        cccr_msr = MSR_P4_IQ_CCCR1;
        if (boot_cpu_data.x86_model == 4 && boot_cpu_data.x86_mask == 4)
            cccr_val = P4_CCCR_OVF_PMI0;
        else
            cccr_val = P4_CCCR_OVF_PMI1;
        cccr_val |= P4_CCCR_ESCR_SELECT (4);
    }
    evntsel = P4_ESCR_EVENT_SELECT (0x3F) | P4_ESCR_OS | P4_ESCR_USR;
    cccr_val |= P4_CCCR_THRESHOLD (15) | P4_CCCR_COMPLEMENT | P4_CCCR_COMPARE | P4_CCCR_REQUIRED;
    wrmsr (evntsel_msr, evntsel, 0);
    wrmsr (cccr_msr, cccr_val, 0);
    write_watchdog_counter (perfctr_msr, "P4_IQ_COUNTER0", nmi_hz);
    wd->perfctr_msr = perfctr_msr;
    wd->evntsel_msr = evntsel_msr;
    wd->cccr_msr = cccr_msr;
    cpu_nmi_set_wd_enabled ();
    apic_write (APIC_LVTPC, APIC_DM_NMI);
    cccr_val |= P4_CCCR_ENABLE;
    wrmsr (cccr_msr, cccr_val, 0);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="506" endline="532">
{
    perfctr_msr = MSR_P4_IQ_PERFCTR0;
    evntsel_msr = MSR_P4_CRU_ESCR0;
    cccr_msr = MSR_P4_IQ_CCCR0;
    cccr_val = P4_CCCR_OVF_PMI0 | P4_CCCR_ESCR_SELECT (4);
    if (reset_devices) {
        unsigned int low, high;
        int i;
        for (i = 0; i < P4_CONTROLS; i++) {
            rdmsr (p4_controls [i], low, high);
            low &= ~(P4_CCCR_ENABLE | P4_CCCR_OVF);
            wrmsr (p4_controls [i], low, high);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="522" endline="531">
{
    unsigned int low, high;
    int i;
    for (i = 0; i < P4_CONTROLS; i++) {
        rdmsr (p4_controls [i], low, high);
        low &= ~(P4_CCCR_ENABLE | P4_CCCR_OVF);
        wrmsr (p4_controls [i], low, high);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="526" endline="530">
{
    rdmsr (p4_controls [i], low, high);
    low &= ~(P4_CCCR_ENABLE | P4_CCCR_OVF);
    wrmsr (p4_controls [i], low, high);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="532" endline="544">
{
    perfctr_msr = MSR_P4_IQ_PERFCTR1;
    evntsel_msr = MSR_P4_CRU_ESCR0;
    cccr_msr = MSR_P4_IQ_CCCR1;
    if (boot_cpu_data.x86_model == 4 && boot_cpu_data.x86_mask == 4)
        cccr_val = P4_CCCR_OVF_PMI0;
    else
        cccr_val = P4_CCCR_OVF_PMI1;
    cccr_val |= P4_CCCR_ESCR_SELECT (4);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="573" endline="577">
{
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    wrmsr (wd -> cccr_msr, 0, 0);
    wrmsr (wd -> evntsel_msr, 0, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="580" endline="599">
{
    if (!reserve_perfctr_nmi (MSR_P4_IQ_PERFCTR0))
        return 0;
    if (!reserve_evntsel_nmi (MSR_P4_CRU_ESCR0))
        goto fail2;
    return 1;
fail2 :
    release_perfctr_nmi (MSR_P4_IQ_PERFCTR0);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="602" endline="609">
{
    release_evntsel_nmi (MSR_P4_CRU_ESCR0);
    release_perfctr_nmi (MSR_P4_IQ_PERFCTR0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="612" endline="627">
{
    unsigned dummy;
    rdmsrl (wd -> cccr_msr, dummy);
    dummy &= ~P4_CCCR_OVF;
    wrmsrl (wd -> cccr_msr, dummy);
    apic_write (APIC_LVTPC, APIC_DM_NMI);
    write_watchdog_counter (wd -> perfctr_msr, NULL, nmi_hz);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="651" endline="697">
{
    unsigned int ebx;
    union cpuid10_eax eax;
    unsigned int unused;
    unsigned int perfctr_msr, evntsel_msr;
    unsigned int evntsel;
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    cpuid (10, & (eax.full), & ebx, & unused, & unused);
    if ((eax.split.mask_length < (ARCH_PERFMON_UNHALTED_CORE_CYCLES_INDEX + 1)) || (ebx & ARCH_PERFMON_UNHALTED_CORE_CYCLES_PRESENT))
        return 0;
    perfctr_msr = wd_ops->perfctr;
    evntsel_msr = wd_ops->evntsel;
    wrmsrl (perfctr_msr, 0UL);
    evntsel = ARCH_PERFMON_EVENTSEL_INT | ARCH_PERFMON_EVENTSEL_OS | ARCH_PERFMON_EVENTSEL_USR | ARCH_PERFMON_NMI_EVENT_SEL | ARCH_PERFMON_NMI_EVENT_UMASK;
    wrmsr (evntsel_msr, evntsel, 0);
    nmi_hz = adjust_for_32bit_ctr (nmi_hz);
    write_watchdog_counter32 (perfctr_msr, "INTEL_ARCH_PERFCTR0", nmi_hz);
    wd->perfctr_msr = perfctr_msr;
    wd->evntsel_msr = evntsel_msr;
    wd->cccr_msr = 0;
    cpu_nmi_set_wd_enabled ();
    apic_write (APIC_LVTPC, APIC_DM_NMI);
    evntsel |= ARCH_PERFMON_EVENTSEL0_ENABLE;
    wrmsr (evntsel_msr, evntsel, 0);
    intel_arch_wd_ops.checkbit = 1ULL << (eax.split.bit_width - 1);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="710" endline="750">
{
    switch (boot_cpu_data.x86_vendor) {
    case X86_VENDOR_AMD :
        if (boot_cpu_data.x86 != 6 && boot_cpu_data.x86 != 15 && boot_cpu_data.x86 != 16)
            return;
        wd_ops = &k7_wd_ops;
        break;
    case X86_VENDOR_INTEL :
        if ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model == 14) || ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model == 15 && boot_cpu_data.x86_mask == 4))) {
            intel_arch_wd_ops.perfctr = MSR_ARCH_PERFMON_PERFCTR0;
            intel_arch_wd_ops.evntsel = MSR_ARCH_PERFMON_EVENTSEL0;
        }
        if (cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON)) {
            wd_ops = &intel_arch_wd_ops;
            break;
        }
        switch (boot_cpu_data.x86) {
        case 6 :
            if (boot_cpu_data.x86_model > 13)
                return;
            wd_ops = &p6_wd_ops;
            break;
        case 15 :
            wd_ops = &p4_wd_ops;
            break;
        default :
            return;
        }
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="711" endline="749">
{
case X86_VENDOR_AMD :
    if (boot_cpu_data.x86 != 6 && boot_cpu_data.x86 != 15 && boot_cpu_data.x86 != 16)
        return;
    wd_ops = &k7_wd_ops;
    break;
case X86_VENDOR_INTEL :
    if ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model == 14) || ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model == 15 && boot_cpu_data.x86_mask == 4))) {
        intel_arch_wd_ops.perfctr = MSR_ARCH_PERFMON_PERFCTR0;
        intel_arch_wd_ops.evntsel = MSR_ARCH_PERFMON_EVENTSEL0;
    }
    if (cpu_has (&boot_cpu_data, X86_FEATURE_ARCH_PERFMON)) {
        wd_ops = &intel_arch_wd_ops;
        break;
    }
    switch (boot_cpu_data.x86) {
    case 6 :
        if (boot_cpu_data.x86_model > 13)
            return;
        wd_ops = &p6_wd_ops;
        break;
    case 15 :
        wd_ops = &p4_wd_ops;
        break;
    default :
        return;
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="727" endline="730">
{
    intel_arch_wd_ops.perfctr = MSR_ARCH_PERFMON_PERFCTR0;
    intel_arch_wd_ops.evntsel = MSR_ARCH_PERFMON_EVENTSEL0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="731" endline="734">
{
    wd_ops = &intel_arch_wd_ops;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="735" endline="747">
{
case 6 :
    if (boot_cpu_data.x86_model > 13)
        return;
    wd_ops = &p6_wd_ops;
    break;
case 15 :
    wd_ops = &p4_wd_ops;
    break;
default :
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="755" endline="777">
{
    if (!wd_ops) {
        probe_nmi_watchdog ();
        if (!wd_ops) {
            printk (KERN_INFO "NMI watchdog: CPU not supported\n");
            return -1;
        }
        if (!wd_ops->reserve ()) {
            printk (KERN_ERR "NMI watchdog: cannot reserve perfctrs\n");
            return -1;
        }
    }
    if (!(wd_ops->setup (nmi_hz))) {
        printk (KERN_ERR "Cannot setup NMI watchdog on CPU %d\n", raw_smp_processor_id ());
        return -1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="756" endline="768">
{
    probe_nmi_watchdog ();
    if (!wd_ops) {
        printk (KERN_INFO "NMI watchdog: CPU not supported\n");
        return -1;
    }
    if (!wd_ops->reserve ()) {
        printk (KERN_ERR "NMI watchdog: cannot reserve perfctrs\n");
        return -1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="758" endline="761">
{
    printk (KERN_INFO "NMI watchdog: CPU not supported\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="763" endline="767">
{
    printk (KERN_ERR "NMI watchdog: cannot reserve perfctrs\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="770" endline="774">
{
    printk (KERN_ERR "Cannot setup NMI watchdog on CPU %d\n", raw_smp_processor_id ());
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="780" endline="783">
{
    if (wd_ops)
        wd_ops->stop ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="786" endline="792">
{
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    if (wd->perfctr_msr == MSR_P6_PERFCTR0 || wd->perfctr_msr == MSR_ARCH_PERFMON_PERFCTR1)
        hz = adjust_for_32bit_ctr (hz);
    return hz;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/perfctr-watchdog.c.ifdefed" startline="795" endline="805">
{
    struct nmi_watchdog_ctlblk *wd = &__get_cpu_var (nmi_watchdog_ctlblk);
    u64 ctr;
    rdmsrl (wd -> perfctr_msr, ctr);
    if (ctr & wd_ops->checkbit)
        return 0;
    wd_ops->rearm (wd, nmi_hz);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="32" endline="112">
{
    if (c->x86 > 6 || (c->x86 == 6 && c->x86_model >= 0xd)) {
        u64 misc_enable;
        rdmsrl (MSR_IA32_MISC_ENABLE, misc_enable);
        if (misc_enable & MSR_IA32_MISC_ENABLE_LIMIT_CPUID) {
            misc_enable &= ~MSR_IA32_MISC_ENABLE_LIMIT_CPUID;
            wrmsrl (MSR_IA32_MISC_ENABLE, misc_enable);
            c->cpuid_level = cpuid_eax (0);
        }
    }
    if ((c->x86 == 0xf && c->x86_model >= 0x03) || (c->x86 == 0x6 && c->x86_model >= 0x0e))
        set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
    if (c->x86 == 15 && c->x86_cache_alignment == 64)
        c->x86_cache_alignment = 128;
    if (c->x86 == 0xF && c->x86_model == 0x3 && (c->x86_mask == 0x3 || c->x86_mask == 0x4))
        c->x86_phys_bits = 36;
    if (c->x86_power & (1 << 8)) {
        set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
        set_cpu_cap (c, X86_FEATURE_NONSTOP_TSC);
        set_cpu_cap (c, X86_FEATURE_TSC_RELIABLE);
        sched_clock_stable = 1;
    }
    if (c->x86 == 6 && c->x86_model < 15)
        clear_cpu_cap (c, X86_FEATURE_PAT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="34" endline="44">
{
    u64 misc_enable;
    rdmsrl (MSR_IA32_MISC_ENABLE, misc_enable);
    if (misc_enable & MSR_IA32_MISC_ENABLE_LIMIT_CPUID) {
        misc_enable &= ~MSR_IA32_MISC_ENABLE_LIMIT_CPUID;
        wrmsrl (MSR_IA32_MISC_ENABLE, misc_enable);
        c->cpuid_level = cpuid_eax (0);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="39" endline="43">
{
    misc_enable &= ~MSR_IA32_MISC_ENABLE_LIMIT_CPUID;
    wrmsrl (MSR_IA32_MISC_ENABLE, misc_enable);
    c->cpuid_level = cpuid_eax (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="70" endline="75">
{
    set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
    set_cpu_cap (c, X86_FEATURE_NONSTOP_TSC);
    set_cpu_cap (c, X86_FEATURE_TSC_RELIABLE);
    sched_clock_stable = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="251" endline="252">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="256" endline="271">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="277" endline="289">
{
    unsigned int eax, ebx, ecx, edx;
    if (c->cpuid_level < 4)
        return 1;
    cpuid_count (4, 0, & eax, & ebx, & ecx, & edx);
    if (eax & 0x1f)
        return ((eax >> 26) + 1);
    else
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="292" endline="327">
{
    u32 vmx_msr_low, vmx_msr_high, msr_ctl, msr_ctl2;
    clear_cpu_cap (c, X86_FEATURE_TPR_SHADOW);
    clear_cpu_cap (c, X86_FEATURE_VNMI);
    clear_cpu_cap (c, X86_FEATURE_FLEXPRIORITY);
    clear_cpu_cap (c, X86_FEATURE_EPT);
    clear_cpu_cap (c, X86_FEATURE_VPID);
    rdmsr (MSR_IA32_VMX_PROCBASED_CTLS, vmx_msr_low, vmx_msr_high);
    msr_ctl = vmx_msr_high | vmx_msr_low;
    if (msr_ctl & X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW)
        set_cpu_cap (c, X86_FEATURE_TPR_SHADOW);
    if (msr_ctl & X86_VMX_FEATURE_PROC_CTLS_VNMI)
        set_cpu_cap (c, X86_FEATURE_VNMI);
    if (msr_ctl & X86_VMX_FEATURE_PROC_CTLS_2ND_CTLS) {
        rdmsr (MSR_IA32_VMX_PROCBASED_CTLS2, vmx_msr_low, vmx_msr_high);
        msr_ctl2 = vmx_msr_high | vmx_msr_low;
        if ((msr_ctl2 & X86_VMX_FEATURE_PROC_CTLS2_VIRT_APIC) && (msr_ctl & X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW))
            set_cpu_cap (c, X86_FEATURE_FLEXPRIORITY);
        if (msr_ctl2 & X86_VMX_FEATURE_PROC_CTLS2_EPT)
            set_cpu_cap (c, X86_FEATURE_EPT);
        if (msr_ctl2 & X86_VMX_FEATURE_PROC_CTLS2_VPID)
            set_cpu_cap (c, X86_FEATURE_VPID);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="315" endline="326">
{
    rdmsr (MSR_IA32_VMX_PROCBASED_CTLS2, vmx_msr_low, vmx_msr_high);
    msr_ctl2 = vmx_msr_high | vmx_msr_low;
    if ((msr_ctl2 & X86_VMX_FEATURE_PROC_CTLS2_VIRT_APIC) && (msr_ctl & X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW))
        set_cpu_cap (c, X86_FEATURE_FLEXPRIORITY);
    if (msr_ctl2 & X86_VMX_FEATURE_PROC_CTLS2_EPT)
        set_cpu_cap (c, X86_FEATURE_EPT);
    if (msr_ctl2 & X86_VMX_FEATURE_PROC_CTLS2_VPID)
        set_cpu_cap (c, X86_FEATURE_VPID);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="330" endline="430">
{
    unsigned int l2 = 0;
    early_init_intel (c);
    intel_workarounds (c);
    detect_extended_topology (c);
    l2 = init_intel_cacheinfo (c);
    if (c->cpuid_level > 9) {
        unsigned eax = cpuid_eax (10);
        if ((eax & 0xff) && (((eax >> 8) & 0xff) > 1))
            set_cpu_cap (c, X86_FEATURE_ARCH_PERFMON);
    }
    if (cpu_has_xmm2)
        set_cpu_cap (c, X86_FEATURE_LFENCE_RDTSC);
    if (cpu_has_ds) {
        unsigned int l1;
        rdmsr (MSR_IA32_MISC_ENABLE, l1, l2);
        if (!(l1 & (1 << 11)))
            set_cpu_cap (c, X86_FEATURE_BTS);
        if (!(l1 & (1 << 12)))
            set_cpu_cap (c, X86_FEATURE_PEBS);
        ds_init_intel (c);
    }
    if (c->x86 == 6 && c->x86_model == 29 && cpu_has_clflush)
        set_cpu_cap (c, X86_FEATURE_CLFLUSH_MONITOR);
    if (c->x86 == 6) {
        char *p = NULL;
        switch (c->x86_model) {
        case 5 :
            if (c->x86_mask == 0) {
                if (l2 == 0)
                    p = "Celeron (Covington)";
                else if (l2 == 256)
                    p = "Mobile Pentium II (Dixon)";
            }
            break;
        case 6 :
            if (l2 == 128)
                p = "Celeron (Mendocino)";
            else if (c->x86_mask == 0 || c->x86_mask == 5)
                p = "Celeron-A";
            break;
        case 8 :
            if (l2 == 128)
                p = "Celeron (Coppermine)";
            break;
        }
        if (p)
            strcpy (c->x86_model_id, p);
    }
    if (c->x86 == 15)
        set_cpu_cap (c, X86_FEATURE_P4);
    if (c->x86 == 6)
        set_cpu_cap (c, X86_FEATURE_P3);
    if (!cpu_has (c, X86_FEATURE_XTOPOLOGY)) {
        c->x86_max_cores = intel_num_cpu_cores (c);
    }
    srat_detect_node (c);
    if (cpu_has (c, X86_FEATURE_VMX))
        detect_vmx_virtcap (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="345" endline="350">
{
    unsigned eax = cpuid_eax (10);
    if ((eax & 0xff) && (((eax >> 8) & 0xff) > 1))
        set_cpu_cap (c, X86_FEATURE_ARCH_PERFMON);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="354" endline="362">
{
    unsigned int l1;
    rdmsr (MSR_IA32_MISC_ENABLE, l1, l2);
    if (!(l1 & (1 << 11)))
        set_cpu_cap (c, X86_FEATURE_BTS);
    if (!(l1 & (1 << 12)))
        set_cpu_cap (c, X86_FEATURE_PEBS);
    ds_init_intel (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="378" endline="406">
{
    char *p = NULL;
    switch (c->x86_model) {
    case 5 :
        if (c->x86_mask == 0) {
            if (l2 == 0)
                p = "Celeron (Covington)";
            else if (l2 == 256)
                p = "Mobile Pentium II (Dixon)";
        }
        break;
    case 6 :
        if (l2 == 128)
            p = "Celeron (Mendocino)";
        else if (c->x86_mask == 0 || c->x86_mask == 5)
            p = "Celeron-A";
        break;
    case 8 :
        if (l2 == 128)
            p = "Celeron (Coppermine)";
        break;
    }
    if (p)
        strcpy (c->x86_model_id, p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="381" endline="402">
{
case 5 :
    if (c->x86_mask == 0) {
        if (l2 == 0)
            p = "Celeron (Covington)";
        else if (l2 == 256)
            p = "Mobile Pentium II (Dixon)";
    }
    break;
case 6 :
    if (l2 == 128)
        p = "Celeron (Mendocino)";
    else if (c->x86_mask == 0 || c->x86_mask == 5)
        p = "Celeron-A";
    break;
case 8 :
    if (l2 == 128)
        p = "Celeron (Coppermine)";
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="383" endline="388">
{
    if (l2 == 0)
        p = "Celeron (Covington)";
    else if (l2 == 256)
        p = "Mobile Pentium II (Dixon)";
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/intel.c.ifdefed" startline="414" endline="423">
{
    c->x86_max_cores = intel_num_cpu_cores (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/state.c.ifdefed" startline="13" endline="43">
{
    unsigned int cr0;
    local_irq_save (ctxt -> flags);
    if (use_intel () || is_cpu (CYRIX)) {
        if (cpu_has_pge) {
            ctxt->cr4val = read_cr4 ();
            write_cr4 (ctxt -> cr4val & ~ X86_CR4_PGE);
        }
        cr0 = read_cr0 () | X86_CR0_CD;
        wbinvd ();
        write_cr0 (cr0);
        wbinvd ();
        if (use_intel ())
            rdmsr (MSR_MTRRdefType, ctxt->deftype_lo, ctxt->deftype_hi);
        else
            ctxt->ccr3 = getCx86 (CX86_CCR3);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/state.c.ifdefed" startline="19" endline="42">
{
    if (cpu_has_pge) {
        ctxt->cr4val = read_cr4 ();
        write_cr4 (ctxt -> cr4val & ~ X86_CR4_PGE);
    }
    cr0 = read_cr0 () | X86_CR0_CD;
    wbinvd ();
    write_cr0 (cr0);
    wbinvd ();
    if (use_intel ())
        rdmsr (MSR_MTRRdefType, ctxt->deftype_lo, ctxt->deftype_hi);
    else
        ctxt->ccr3 = getCx86 (CX86_CCR3);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/state.c.ifdefed" startline="22" endline="25">
{
    ctxt->cr4val = read_cr4 ();
    write_cr4 (ctxt -> cr4val & ~ X86_CR4_PGE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/state.c.ifdefed" startline="46" endline="54">
{
    if (use_intel ())
        mtrr_wrmsr (MSR_MTRRdefType, ctxt->deftype_lo & 0xf300UL, ctxt->deftype_hi);
    else if (is_cpu (CYRIX))
        setCx86 (CX86_CCR3, (ctxt->ccr3 & 0x0f) | 0x10);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/state.c.ifdefed" startline="58" endline="81">
{
    if (use_intel () || is_cpu (CYRIX)) {
        wbinvd ();
        if (use_intel ())
            mtrr_wrmsr (MSR_MTRRdefType, ctxt->deftype_lo, ctxt->deftype_hi);
        else
            setCx86 (CX86_CCR3, ctxt->ccr3);
        write_cr0 (read_cr0 () & 0xbfffffff);
        if (cpu_has_pge)
            write_cr4 (ctxt->cr4val);
    }
    local_irq_restore (ctxt -> flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/state.c.ifdefed" startline="59" endline="78">
{
    wbinvd ();
    if (use_intel ())
        mtrr_wrmsr (MSR_MTRRdefType, ctxt->deftype_lo, ctxt->deftype_hi);
    else
        setCx86 (CX86_CCR3, ctxt->ccr3);
    write_cr0 (read_cr0 () & 0xbfffffff);
    if (cpu_has_pge)
        write_cr4 (ctxt->cr4val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="47" endline="58">
{
    if (nr_range >= RANGE_NUM)
        return nr_range;
    range[nr_range].start = start;
    range[nr_range].end = end;
    nr_range++;
    return nr_range;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="63" endline="89">
{
    int i;
    for (i = 0; i < nr_range; i++) {
        unsigned long final_start, final_end;
        unsigned long common_start, common_end;
        if (!range[i].end)
            continue;
        common_start = max (range[i].start, start);
        common_end = min (range[i].end, end);
        if (common_start > common_end + 1)
            continue;
        final_start = min (range[i].start, start);
        final_end = max (range[i].end, end);
        range[i].start = final_start;
        range[i].end = final_end;
        return nr_range;
    }
    return add_range (range, nr_range, start, end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="67" endline="85">
{
    unsigned long final_start, final_end;
    unsigned long common_start, common_end;
    if (!range[i].end)
        continue;
    common_start = max (range[i].start, start);
    common_end = min (range[i].end, end);
    if (common_start > common_end + 1)
        continue;
    final_start = min (range[i].start, start);
    final_end = max (range[i].end, end);
    range[i].start = final_start;
    range[i].end = final_end;
    return nr_range;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="93" endline="135">
{
    int i, j;
    for (j = 0; j < RANGE_NUM; j++) {
        if (!range[j].end)
            continue;
        if (start <= range[j].start && end >= range[j].end) {
            range[j].start = 0;
            range[j].end = 0;
            continue;
        }
        if (start <= range[j].start && end < range[j].end && range[j].start < end + 1) {
            range[j].start = end + 1;
            continue;
        }
        if (start > range[j].start && end >= range[j].end && range[j].end > start - 1) {
            range[j].end = start - 1;
            continue;
        }
        if (start > range[j].start && end < range[j].end) {
            for (i = 0; i < RANGE_NUM; i++) {
                if (range[i].end == 0)
                    break;
            }
            if (i < RANGE_NUM) {
                range[i].end = range[j].end;
                range[i].start = end + 1;
            }
            else {
                printk (KERN_ERR "run of slot in ranges\n");
            }
            range[j].end = start - 1;
            continue;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="96" endline="134">
{
    if (!range[j].end)
        continue;
    if (start <= range[j].start && end >= range[j].end) {
        range[j].start = 0;
        range[j].end = 0;
        continue;
    }
    if (start <= range[j].start && end < range[j].end && range[j].start < end + 1) {
        range[j].start = end + 1;
        continue;
    }
    if (start > range[j].start && end >= range[j].end && range[j].end > start - 1) {
        range[j].end = start - 1;
        continue;
    }
    if (start > range[j].start && end < range[j].end) {
        for (i = 0; i < RANGE_NUM; i++) {
            if (range[i].end == 0)
                break;
        }
        if (i < RANGE_NUM) {
            range[i].end = range[j].end;
            range[i].start = end + 1;
        }
        else {
            printk (KERN_ERR "run of slot in ranges\n");
        }
        range[j].end = start - 1;
        continue;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="100" endline="104">
{
    range[j].start = 0;
    range[j].end = 0;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="107" endline="110">
{
    range[j].start = end + 1;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="114" endline="117">
{
    range[j].end = start - 1;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="119" endline="133">
{
    for (i = 0; i < RANGE_NUM; i++) {
        if (range[i].end == 0)
            break;
    }
    if (i < RANGE_NUM) {
        range[i].end = range[j].end;
        range[i].start = end + 1;
    }
    else {
        printk (KERN_ERR "run of slot in ranges\n");
    }
    range[j].end = start - 1;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="121" endline="124">
{
    if (range[i].end == 0)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="125" endline="128">
{
    range[i].end = range[j].end;
    range[i].start = end + 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="128" endline="130">
{
    printk (KERN_ERR "run of slot in ranges\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="138" endline="147">
{
    const struct res_range *r1 = x1;
    const struct res_range *r2 = x2;
    long start1, start2;
    start1 = r1->start;
    start2 = r2->start;
    return start1 - start2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="162" endline="238">
{
    unsigned long base, size;
    mtrr_type type;
    int i;
    for (i = 0; i < num_var_ranges; i++) {
        type = range_state[i].type;
        if (type != MTRR_TYPE_WRBACK)
            continue;
        base = range_state[i].base_pfn;
        size = range_state[i].size_pfn;
        nr_range = add_range_with_merge (range, nr_range, base, base +size - 1);
    }
    if (debug_print) {
        printk (KERN_DEBUG "After WB checking\n");
        for (i = 0; i < nr_range; i++)
            printk (KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);
    }
    for (i = 0; i < num_var_ranges; i++) {
        type = range_state[i].type;
        if (type != MTRR_TYPE_UNCACHABLE && type != MTRR_TYPE_WRPROT)
            continue;
        size = range_state[i].size_pfn;
        if (!size)
            continue;
        base = range_state[i].base_pfn;
        if (base < (1 << (20 - PAGE_SHIFT)) && mtrr_state.have_fixed && (mtrr_state.enabled & 1)) {
            printk (KERN_WARNING "WARNING: BIOS bug: VAR MTRR %d " "contains strange UC entry under 1M, check " "with your system vendor!\n", i);
            if (base + size <= (1 << (20 - PAGE_SHIFT)))
                continue;
            size -= (1 << (20 - PAGE_SHIFT)) - base;
            base = 1 << (20 - PAGE_SHIFT);
        }
        subtract_range (range, base, base + size - 1);
    }
    if (extra_remove_size)
        subtract_range (range, extra_remove_base, extra_remove_base +extra_remove_size - 1);
    nr_range = 0;
    for (i = 0; i < RANGE_NUM; i++) {
        if (!range[i].end)
            continue;
        nr_range++;
    }
    if (debug_print) {
        printk (KERN_DEBUG "After UC checking\n");
        for (i = 0; i < nr_range; i++)
            printk (KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);
    }
    sort (range, nr_range, sizeof (struct res_range), cmp_range, NULL);
    if (debug_print) {
        printk (KERN_DEBUG "After sorting\n");
        for (i = 0; i < nr_range; i++)
            printk (KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);
    }
    for (i = nr_range; i < RANGE_NUM; i++)
        memset (&range[i], 0, sizeof (range[i]));
    return nr_range;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="167" endline="175">
{
    type = range_state[i].type;
    if (type != MTRR_TYPE_WRBACK)
        continue;
    base = range_state[i].base_pfn;
    size = range_state[i].size_pfn;
    nr_range = add_range_with_merge (range, nr_range, base, base +size - 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="176" endline="181">
{
    printk (KERN_DEBUG "After WB checking\n");
    for (i = 0; i < nr_range; i++)
        printk (KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="184" endline="205">
{
    type = range_state[i].type;
    if (type != MTRR_TYPE_UNCACHABLE && type != MTRR_TYPE_WRPROT)
        continue;
    size = range_state[i].size_pfn;
    if (!size)
        continue;
    base = range_state[i].base_pfn;
    if (base < (1 << (20 - PAGE_SHIFT)) && mtrr_state.have_fixed && (mtrr_state.enabled & 1)) {
        printk (KERN_WARNING "WARNING: BIOS bug: VAR MTRR %d " "contains strange UC entry under 1M, check " "with your system vendor!\n", i);
        if (base + size <= (1 << (20 - PAGE_SHIFT)))
            continue;
        size -= (1 << (20 - PAGE_SHIFT)) - base;
        base = 1 << (20 - PAGE_SHIFT);
    }
    subtract_range (range, base, base + size - 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="194" endline="203">
{
    printk (KERN_WARNING "WARNING: BIOS bug: VAR MTRR %d " "contains strange UC entry under 1M, check " "with your system vendor!\n", i);
    if (base + size <= (1 << (20 - PAGE_SHIFT)))
        continue;
    size -= (1 << (20 - PAGE_SHIFT)) - base;
    base = 1 << (20 - PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="212" endline="216">
{
    if (!range[i].end)
        continue;
    nr_range++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="217" endline="222">
{
    printk (KERN_DEBUG "After UC checking\n");
    for (i = 0; i < nr_range; i++)
        printk (KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="226" endline="231">
{
    printk (KERN_DEBUG "After sorting\n");
    for (i = 0; i < nr_range; i++)
        printk (KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="924" endline="926">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="932" endline="935">
{
    disable_mtrr_trim = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="948" endline="966">
{
    u32 l, h;
    if (boot_cpu_data.x86_vendor != X86_VENDOR_AMD)
        return 0;
    if (boot_cpu_data.x86 < 0xf || boot_cpu_data.x86 > 0x11)
        return 0;
    if (rdmsr_safe (MSR_K8_SYSCFG, &l, &h) < 0)
        return 0;
    if ((l & (Tom2Enabled | Tom2ForceMemTypeWB)) == (Tom2Enabled | Tom2ForceMemTypeWB))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="970" endline="980">
{
    u64 trim_start, trim_size;
    trim_start = start_pfn;
    trim_start <<= PAGE_SHIFT;
    trim_size = limit_pfn;
    trim_size <<= PAGE_SHIFT;
    trim_size -= trim_start;
    return e820_update_range (trim_start, trim_size, E820_RAM, E820_RESERVED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="993" endline="1100">
{
    unsigned long i, base, size, highest_pfn = 0, def, dummy;
    mtrr_type type;
    u64 total_trim_size;
    int num [MTRR_NUM_TYPES + 1];
    if (!is_cpu (INTEL) || disable_mtrr_trim)
        return 0;
    rdmsr (MSR_MTRRdefType, def, dummy);
    def &= 0xff;
    if (def != MTRR_TYPE_UNCACHABLE)
        return 0;
    memset (range_state, 0, sizeof (range_state));
    for (i = 0; i < num_var_ranges; i++) {
        mtrr_if->get (i, &base, &size, &type);
        range_state[i].base_pfn = base;
        range_state[i].size_pfn = size;
        range_state[i].type = type;
    }
    for (i = 0; i < num_var_ranges; i++) {
        type = range_state[i].type;
        if (type != MTRR_TYPE_WRBACK)
            continue;
        base = range_state[i].base_pfn;
        size = range_state[i].size_pfn;
        if (highest_pfn < base + size)
            highest_pfn = base + size;
    }
    if (!highest_pfn) {
        printk (KERN_INFO "CPU MTRRs all blank - virtualized system.\n");
        return 0;
    }
    memset (num, 0, sizeof (num));
    for (i = 0; i < num_var_ranges; i++) {
        type = range_state[i].type;
        if (type >= MTRR_NUM_TYPES)
            continue;
        size = range_state[i].size_pfn;
        if (!size)
            type = MTRR_NUM_TYPES;
        num[type]++;
    }
    if (!num[MTRR_TYPE_WRBACK])
        return 0;
    if (num[MTRR_TYPE_WRBACK] + num[MTRR_TYPE_UNCACHABLE] != num_var_ranges - num[MTRR_NUM_TYPES])
        return 0;
    memset (range, 0, sizeof (range));
    nr_range = 0;
    if (mtrr_tom2) {
        range[nr_range].start = (1ULL << (32 - PAGE_SHIFT));
        range[nr_range].end = (mtrr_tom2 >> PAGE_SHIFT) - 1;
        if (highest_pfn < range[nr_range].end + 1)
            highest_pfn = range[nr_range].end + 1;
        nr_range++;
    }
    nr_range = x86_get_mtrr_mem_range (range, nr_range, 0, 0);
    total_trim_size = 0;
    if (range[0].start)
        total_trim_size += real_trim_memory (0, range[0].start);
    for (i = 0; i < nr_range - 1; i++) {
        if (range[i].end + 1 < range[i + 1].start)
            total_trim_size += real_trim_memory (range[i].end + 1, range[i + 1].start);
    }
    i = nr_range - 1;
    if (range[i].end + 1 < end_pfn)
        total_trim_size += real_trim_memory (range[i].end + 1, end_pfn);
    if (total_trim_size) {
        printk (KERN_WARNING "WARNING: BIOS bug: CPU MTRRs don't cover" " all of memory, losing %lluMB of RAM.\n", total_trim_size >> 20);
        if (!changed_by_mtrr_cleanup)
            WARN_ON (1);
        printk (KERN_INFO "update e820 for mtrr\n");
        update_e820 ();
        return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1013" endline="1018">
{
    mtrr_if->get (i, &base, &size, &type);
    range_state[i].base_pfn = base;
    range_state[i].size_pfn = size;
    range_state[i].type = type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1021" endline="1029">
{
    type = range_state[i].type;
    if (type != MTRR_TYPE_WRBACK)
        continue;
    base = range_state[i].base_pfn;
    size = range_state[i].size_pfn;
    if (highest_pfn < base + size)
        highest_pfn = base + size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1032" endline="1035">
{
    printk (KERN_INFO "CPU MTRRs all blank - virtualized system.\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1039" endline="1047">
{
    type = range_state[i].type;
    if (type >= MTRR_NUM_TYPES)
        continue;
    size = range_state[i].size_pfn;
    if (!size)
        type = MTRR_NUM_TYPES;
    num[type]++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1060" endline="1066">
{
    range[nr_range].start = (1ULL << (32 - PAGE_SHIFT));
    range[nr_range].end = (mtrr_tom2 >> PAGE_SHIFT) - 1;
    if (highest_pfn < range[nr_range].end + 1)
        highest_pfn = range[nr_range].end + 1;
    nr_range++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1074" endline="1078">
{
    if (range[i].end + 1 < range[i + 1].start)
        total_trim_size += real_trim_memory (range[i].end + 1, range[i + 1].start);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/cleanup.c.ifdefed" startline="1085" endline="1097">
{
    printk (KERN_WARNING "WARNING: BIOS bug: CPU MTRRs don't cover" " all of memory, losing %lluMB of RAM.\n", total_trim_size >> 20);
    if (!changed_by_mtrr_cleanup)
        WARN_ON (1);
    printk (KERN_INFO "update e820 for mtrr\n");
    update_e820 ();
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/if.c.ifdefed" startline="28" endline="30">
{
    return (x <= 6) ? mtrr_strings[x] : "?";
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="45" endline="60">
{
    u32 lo, hi;
    if (!((boot_cpu_data.x86_vendor == X86_VENDOR_AMD) && (boot_cpu_data.x86 >= 0x0f)))
        return;
    rdmsr (MSR_K8_SYSCFG, lo, hi);
    if (lo & K8_MTRRFIXRANGE_DRAM_MODIFY) {
        printk (KERN_ERR FW_WARN "MTRR: CPU %u: SYSCFG[MtrrFixDramModEn]" " not cleared by BIOS, clearing this bit\n", smp_processor_id ());
        lo &= ~K8_MTRRFIXRANGE_DRAM_MODIFY;
        mtrr_wrmsr (MSR_K8_SYSCFG, lo, hi);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="53" endline="59">
{
    printk (KERN_ERR FW_WARN "MTRR: CPU %u: SYSCFG[MtrrFixDramModEn]" " not cleared by BIOS, clearing this bit\n", smp_processor_id ());
    lo &= ~K8_MTRRFIXRANGE_DRAM_MODIFY;
    mtrr_wrmsr (MSR_K8_SYSCFG, lo, hi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="69" endline="165">
{
    int i;
    u64 base, mask;
    u8 prev_match, curr_match;
    if (!mtrr_state_set)
        return 0xFF;
    if (!mtrr_state.enabled)
        return 0xFF;
    end--;
    if (mtrr_state.have_fixed && (start < 0x100000)) {
        int idx;
        if (start < 0x80000) {
            idx = 0;
            idx += (start >> 16);
            return mtrr_state.fixed_ranges[idx];
        }
        else if (start < 0xC0000) {
            idx = 1 * 8;
            idx += ((start - 0x80000) >> 14);
            return mtrr_state.fixed_ranges[idx];
        }
        else if (start < 0x1000000) {
            idx = 3 * 8;
            idx += ((start - 0xC0000) >> 12);
            return mtrr_state.fixed_ranges[idx];
        }
    }
    if (!(mtrr_state.enabled & 2)) {
        return mtrr_state.def_type;
    }
    prev_match = 0xFF;
    for (i = 0; i < num_var_ranges; ++i) {
        unsigned short start_state, end_state;
        if (!(mtrr_state.var_ranges[i].mask_lo & (1 << 11)))
            continue;
        base = (((u64) mtrr_state.var_ranges[i].base_hi) << 32) + (mtrr_state.var_ranges[i].base_lo & PAGE_MASK);
        mask = (((u64) mtrr_state.var_ranges[i].mask_hi) << 32) + (mtrr_state.var_ranges[i].mask_lo & PAGE_MASK);
        start_state = ((start & mask) == (base & mask));
        end_state = ((end & mask) == (base & mask));
        if (start_state != end_state)
            return 0xFE;
        if ((start & mask) != (base & mask)) {
            continue;
        }
        curr_match = mtrr_state.var_ranges[i].base_lo & 0xff;
        if (prev_match == 0xFF) {
            prev_match = curr_match;
            continue;
        }
        if (prev_match == MTRR_TYPE_UNCACHABLE || curr_match == MTRR_TYPE_UNCACHABLE) {
            return MTRR_TYPE_UNCACHABLE;
        }
        if ((prev_match == MTRR_TYPE_WRBACK && curr_match == MTRR_TYPE_WRTHROUGH) || (prev_match == MTRR_TYPE_WRTHROUGH && curr_match == MTRR_TYPE_WRBACK)) {
            prev_match = MTRR_TYPE_WRTHROUGH;
            curr_match = MTRR_TYPE_WRTHROUGH;
        }
        if (prev_match != curr_match) {
            return MTRR_TYPE_UNCACHABLE;
        }
    }
    if (mtrr_tom2) {
        if (start >= (1ULL << 32) && (end < mtrr_tom2))
            return MTRR_TYPE_WRBACK;
    }
    if (prev_match != 0xFF)
        return prev_match;
    return mtrr_state.def_type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="84" endline="100">
{
    int idx;
    if (start < 0x80000) {
        idx = 0;
        idx += (start >> 16);
        return mtrr_state.fixed_ranges[idx];
    }
    else if (start < 0xC0000) {
        idx = 1 * 8;
        idx += ((start - 0x80000) >> 14);
        return mtrr_state.fixed_ranges[idx];
    }
    else if (start < 0x1000000) {
        idx = 3 * 8;
        idx += ((start - 0xC0000) >> 12);
        return mtrr_state.fixed_ranges[idx];
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="87" endline="91">
{
    idx = 0;
    idx += (start >> 16);
    return mtrr_state.fixed_ranges[idx];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="91" endline="95">
{
    idx = 1 * 8;
    idx += ((start - 0x80000) >> 14);
    return mtrr_state.fixed_ranges[idx];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="95" endline="99">
{
    idx = 3 * 8;
    idx += ((start - 0xC0000) >> 12);
    return mtrr_state.fixed_ranges[idx];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="107" endline="109">
{
    return mtrr_state.def_type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="112" endline="154">
{
    unsigned short start_state, end_state;
    if (!(mtrr_state.var_ranges[i].mask_lo & (1 << 11)))
        continue;
    base = (((u64) mtrr_state.var_ranges[i].base_hi) << 32) + (mtrr_state.var_ranges[i].base_lo & PAGE_MASK);
    mask = (((u64) mtrr_state.var_ranges[i].mask_hi) << 32) + (mtrr_state.var_ranges[i].mask_lo & PAGE_MASK);
    start_state = ((start & mask) == (base & mask));
    end_state = ((end & mask) == (base & mask));
    if (start_state != end_state)
        return 0xFE;
    if ((start & mask) != (base & mask)) {
        continue;
    }
    curr_match = mtrr_state.var_ranges[i].base_lo & 0xff;
    if (prev_match == 0xFF) {
        prev_match = curr_match;
        continue;
    }
    if (prev_match == MTRR_TYPE_UNCACHABLE || curr_match == MTRR_TYPE_UNCACHABLE) {
        return MTRR_TYPE_UNCACHABLE;
    }
    if ((prev_match == MTRR_TYPE_WRBACK && curr_match == MTRR_TYPE_WRTHROUGH) || (prev_match == MTRR_TYPE_WRTHROUGH && curr_match == MTRR_TYPE_WRBACK)) {
        prev_match = MTRR_TYPE_WRTHROUGH;
        curr_match = MTRR_TYPE_WRTHROUGH;
    }
    if (prev_match != curr_match) {
        return MTRR_TYPE_UNCACHABLE;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="128" endline="130">
{
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="133" endline="136">
{
    prev_match = curr_match;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="139" endline="141">
{
    return MTRR_TYPE_UNCACHABLE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="146" endline="149">
{
    prev_match = MTRR_TYPE_WRTHROUGH;
    curr_match = MTRR_TYPE_WRTHROUGH;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="151" endline="153">
{
    return MTRR_TYPE_UNCACHABLE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="156" endline="159">
{
    if (start >= (1ULL << 32) && (end < mtrr_tom2))
        return MTRR_TYPE_WRBACK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="170" endline="173">
{
    rdmsr (MTRRphysBase_MSR (index), vr -> base_lo, vr -> base_hi);
    rdmsr (MTRRphysMask_MSR (index), vr -> mask_lo, vr -> mask_hi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="178" endline="187">
{
    struct mtrr_var_range *vr;
    vr = mtrr_state.var_ranges;
    vr[index].base_lo = base_lo;
    vr[index].base_hi = base_hi;
    vr[index].mask_lo = mask_lo;
    vr[index].mask_hi = mask_hi;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="191" endline="203">
{
    unsigned int *p = (unsigned int *) frs;
    int i;
    k8_check_syscfg_dram_mod_en ();
    rdmsr (MSR_MTRRfix64K_00000, p [0], p [1]);
    for (i = 0; i < 2; i++)
        rdmsr (MSR_MTRRfix16K_80000 +i, p[2 + i * 2], p[3 + i * 2]);
    for (i = 0; i < 8; i++)
        rdmsr (MSR_MTRRfix4K_C0000 +i, p[6 + i * 2], p[7 + i * 2]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="206" endline="209">
{
    if (cpu_has_mtrr)
        get_fixed_ranges (mtrr_state.fixed_ranges);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="216" endline="224">
{
    if (!last_fixed_end)
        return;
    printk (KERN_DEBUG "  %05X-%05X %s\n", last_fixed_start, last_fixed_end - 1, mtrr_attrib_to_str (last_fixed_type));
    last_fixed_end = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="228" endline="232">
{
    last_fixed_start = base;
    last_fixed_end = end;
    last_fixed_type = type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="236" endline="252">
{
    unsigned i;
    for (i = 0; i < 8; ++i, ++types, base += step) {
        if (last_fixed_end == 0) {
            update_fixed_last (base, base + step, * types);
            continue;
        }
        if (last_fixed_end == base && last_fixed_type == *types) {
            last_fixed_end = base + step;
            continue;
        }
        print_fixed_last ();
        update_fixed_last (base, base + step, * types);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="239" endline="251">
{
    if (last_fixed_end == 0) {
        update_fixed_last (base, base + step, * types);
        continue;
    }
    if (last_fixed_end == base && last_fixed_type == *types) {
        last_fixed_end = base + step;
        continue;
    }
    print_fixed_last ();
    update_fixed_last (base, base + step, * types);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="240" endline="243">
{
    update_fixed_last (base, base + step, * types);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="244" endline="247">
{
    last_fixed_end = base + step;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="258" endline="301">
{
    unsigned int i;
    int high_width;
    printk (KERN_DEBUG "MTRR default type: %s\n", mtrr_attrib_to_str (mtrr_state.def_type));
    if (mtrr_state.have_fixed) {
        printk (KERN_DEBUG "MTRR fixed ranges %sabled:\n", mtrr_state.enabled & 1 ? "en" : "dis");
        print_fixed (0x00000, 0x10000, mtrr_state.fixed_ranges + 0);
        for (i = 0; i < 2; ++i)
            print_fixed (0x80000 + i * 0x20000, 0x04000, mtrr_state.fixed_ranges + (i + 1) * 8);
        for (i = 0; i < 8; ++i)
            print_fixed (0xC0000 + i * 0x08000, 0x01000, mtrr_state.fixed_ranges + (i + 3) * 8);
        print_fixed_last ();
    }
    printk (KERN_DEBUG "MTRR variable ranges %sabled:\n", mtrr_state.enabled & 2 ? "en" : "dis");
    if (size_or_mask & 0xffffffffUL)
        high_width = ffs (size_or_mask &0xffffffffUL) - 1;
    else
        high_width = ffs (size_or_mask >> 32) + 32 - 1;
    high_width = (high_width - (32 - PAGE_SHIFT) + 3) / 4;
    for (i = 0; i < num_var_ranges; ++i) {
        if (mtrr_state.var_ranges[i].mask_lo & (1 << 11))
            printk (KERN_DEBUG "  %u base %0*X%05X000 mask %0*X%05X000 %s\n", i, high_width, mtrr_state.var_ranges[i].base_hi, mtrr_state.var_ranges[i].base_lo >> 12, high_width, mtrr_state.var_ranges[i].mask_hi, mtrr_state.var_ranges[i].mask_lo >> 12, mtrr_attrib_to_str (mtrr_state.var_ranges[i].base_lo & 0xff));
        else
            printk (KERN_DEBUG "  %u disabled\n", i);
    }
    if (mtrr_tom2) {
        printk (KERN_DEBUG "TOM2: %016llx aka %lldM\n", mtrr_tom2, mtrr_tom2 >> 20);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="264" endline="275">
{
    printk (KERN_DEBUG "MTRR fixed ranges %sabled:\n", mtrr_state.enabled & 1 ? "en" : "dis");
    print_fixed (0x00000, 0x10000, mtrr_state.fixed_ranges + 0);
    for (i = 0; i < 2; ++i)
        print_fixed (0x80000 + i * 0x20000, 0x04000, mtrr_state.fixed_ranges + (i + 1) * 8);
    for (i = 0; i < 8; ++i)
        print_fixed (0xC0000 + i * 0x08000, 0x01000, mtrr_state.fixed_ranges + (i + 3) * 8);
    print_fixed_last ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="283" endline="296">
{
    if (mtrr_state.var_ranges[i].mask_lo & (1 << 11))
        printk (KERN_DEBUG "  %u base %0*X%05X000 mask %0*X%05X000 %s\n", i, high_width, mtrr_state.var_ranges[i].base_hi, mtrr_state.var_ranges[i].base_lo >> 12, high_width, mtrr_state.var_ranges[i].mask_hi, mtrr_state.var_ranges[i].mask_lo >> 12, mtrr_attrib_to_str (mtrr_state.var_ranges[i].base_lo & 0xff));
    else
        printk (KERN_DEBUG "  %u disabled\n", i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="297" endline="300">
{
    printk (KERN_DEBUG "TOM2: %016llx aka %lldM\n", mtrr_tom2, mtrr_tom2 >> 20);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="305" endline="348">
{
    unsigned int i;
    struct mtrr_var_range *vrs;
    unsigned lo, dummy;
    unsigned long flags;
    vrs = mtrr_state.var_ranges;
    rdmsr (MSR_MTRRcap, lo, dummy);
    mtrr_state.have_fixed = (lo >> 8) & 1;
    for (i = 0; i < num_var_ranges; i++)
        get_mtrr_var_range (i, &vrs[i]);
    if (mtrr_state.have_fixed)
        get_fixed_ranges (mtrr_state.fixed_ranges);
    rdmsr (MSR_MTRRdefType, lo, dummy);
    mtrr_state.def_type = (lo & 0xff);
    mtrr_state.enabled = (lo & 0xc00) >> 10;
    if (amd_special_default_mtrr ()) {
        unsigned low, high;
        rdmsr (MSR_K8_TOP_MEM2, low, high);
        mtrr_tom2 = high;
        mtrr_tom2 <<= 32;
        mtrr_tom2 |= low;
        mtrr_tom2 &= 0xffffff800000ULL;
    }
    print_mtrr_state ();
    mtrr_state_set = 1;
    local_irq_save (flags);
    prepare_set ();
    pat_init ();
    post_set ();
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="325" endline="333">
{
    unsigned low, high;
    rdmsr (MSR_K8_TOP_MEM2, low, high);
    mtrr_tom2 = high;
    mtrr_tom2 <<= 32;
    mtrr_tom2 |= low;
    mtrr_tom2 &= 0xffffff800000ULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="352" endline="365">
{
    unsigned long mask = smp_changes_mask;
    if (!mask)
        return;
    if (mask & MTRR_CHANGE_MASK_FIXED)
        printk (KERN_WARNING "mtrr: your CPUs had inconsistent fixed MTRR settings\n");
    if (mask & MTRR_CHANGE_MASK_VARIABLE)
        printk (KERN_WARNING "mtrr: your CPUs had inconsistent variable MTRR settings\n");
    if (mask & MTRR_CHANGE_MASK_DEFTYPE)
        printk (KERN_WARNING "mtrr: your CPUs had inconsistent MTRRdefType settings\n");
    printk (KERN_INFO "mtrr: probably your BIOS does not setup all CPUs.\n");
    printk (KERN_INFO "mtrr: corrected configuration.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="371" endline="376">
{
    if (wrmsr_safe (msr, a, b) < 0)
        printk (KERN_ERR "MTRR: CPU %u: Writing MSR %x to %x:%x failed\n", smp_processor_id (), msr, a, b);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="385" endline="394">
{
    unsigned lo, hi;
    rdmsr (msr, lo, hi);
    if (lo != msrwords[0] || hi != msrwords[1]) {
        mtrr_wrmsr (msr, msrwords [0], msrwords [1]);
        *changed = true;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="390" endline="393">
{
    mtrr_wrmsr (msr, msrwords [0], msrwords [1]);
    *changed = true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="405" endline="419">
{
    int i, max;
    mtrr_type ltype;
    unsigned long lbase, lsize;
    max = num_var_ranges;
    if (replace_reg >= 0 && replace_reg < max)
        return replace_reg;
    for (i = 0; i < max; ++i) {
        mtrr_if->get (i, &lbase, &lsize, &ltype);
        if (lsize == 0)
            return i;
    }
    return -ENOSPC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="413" endline="417">
{
    mtrr_if->get (i, &lbase, &lsize, &ltype);
    if (lsize == 0)
        return i;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="423" endline="471">
{
    unsigned int mask_lo, mask_hi, base_lo, base_hi;
    unsigned int tmp, hi;
    int cpu;
    cpu = get_cpu ();
    rdmsr (MTRRphysMask_MSR (reg), mask_lo, mask_hi);
    if ((mask_lo & 0x800) == 0) {
        *base = 0;
        *size = 0;
        *type = 0;
        goto out_put_cpu;
    }
    rdmsr (MTRRphysBase_MSR (reg), base_lo, base_hi);
    tmp = mask_hi << (32 - PAGE_SHIFT) | mask_lo >> PAGE_SHIFT;
    mask_lo = size_or_mask | tmp;
    hi = fls (tmp);
    if (hi > 0) {
        tmp |= ~((1 << (hi - 1)) - 1);
        if (tmp != mask_lo) {
            WARN_ONCE (1, KERN_INFO "mtrr: your BIOS has set up an incorrect mask, fixing it up.\n");
            mask_lo = tmp;
        }
    }
    *size = -mask_lo;
    *base = base_hi << (32 - PAGE_SHIFT) | base_lo >> PAGE_SHIFT;
    *type = base_lo & 0xff;
out_put_cpu :
    put_cpu ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="436" endline="442">
{
    *base = 0;
    *size = 0;
    *type = 0;
    goto out_put_cpu;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="452" endline="459">
{
    tmp |= ~((1 << (hi - 1)) - 1);
    if (tmp != mask_lo) {
        WARN_ONCE (1, KERN_INFO "mtrr: your BIOS has set up an incorrect mask, fixing it up.\n");
        mask_lo = tmp;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="455" endline="458">
{
    WARN_ONCE (1, KERN_INFO "mtrr: your BIOS has set up an incorrect mask, fixing it up.\n");
    mask_lo = tmp;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="478" endline="491">
{
    unsigned long long *saved = (unsigned long long *) frs;
    bool changed = false;
    int block = -1, range;
    k8_check_syscfg_dram_mod_en ();
    while (fixed_range_blocks[++block].ranges)
        for (range = 0; range < fixed_range_blocks[block].ranges; range++)
            set_fixed_range (fixed_range_blocks[block].base_msr + range, &changed, (unsigned int *) saved++);
    return changed;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="496" endline="517">
{
    unsigned int lo, hi;
    bool changed = false;
    rdmsr (MTRRphysBase_MSR (index), lo, hi);
    if ((vr->base_lo & 0xfffff0ffUL) != (lo & 0xfffff0ffUL) || (vr->base_hi & (size_and_mask >> (32 - PAGE_SHIFT))) != (hi & (size_and_mask >> (32 - PAGE_SHIFT)))) {
        mtrr_wrmsr (MTRRphysBase_MSR (index), vr -> base_lo, vr -> base_hi);
        changed = true;
    }
    rdmsr (MTRRphysMask_MSR (index), lo, hi);
    if ((vr->mask_lo & 0xfffff800UL) != (lo & 0xfffff800UL) || (vr->mask_hi & (size_and_mask >> (32 - PAGE_SHIFT))) != (hi & (size_and_mask >> (32 - PAGE_SHIFT)))) {
        mtrr_wrmsr (MTRRphysMask_MSR (index), vr -> mask_lo, vr -> mask_hi);
        changed = true;
    }
    return changed;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="503" endline="506">
{
    mtrr_wrmsr (MTRRphysBase_MSR (index), vr -> base_lo, vr -> base_hi);
    changed = true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="512" endline="515">
{
    mtrr_wrmsr (MTRRphysMask_MSR (index), vr -> mask_lo, vr -> mask_hi);
    changed = true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="528" endline="548">
{
    unsigned int i;
    unsigned long change_mask = 0;
    for (i = 0; i < num_var_ranges; i++)
        if (set_mtrr_var_ranges (i, &mtrr_state.var_ranges[i]))
            change_mask |= MTRR_CHANGE_MASK_VARIABLE;
    if (mtrr_state.have_fixed && set_fixed_ranges (mtrr_state.fixed_ranges))
        change_mask |= MTRR_CHANGE_MASK_FIXED;
    if ((deftype_lo & 0xff) != mtrr_state.def_type || ((deftype_lo & 0xc00) >> 10) != mtrr_state.enabled) {
        deftype_lo = (deftype_lo & ~0xcff) | mtrr_state.def_type | (mtrr_state.enabled << 10);
        change_mask |= MTRR_CHANGE_MASK_DEFTYPE;
    }
    return change_mask;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="542" endline="545">
{
    deftype_lo = (deftype_lo & ~0xcff) | mtrr_state.def_type | (mtrr_state.enabled << 10);
    change_mask |= MTRR_CHANGE_MASK_DEFTYPE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="562" endline="590">
{
    unsigned long cr0;
    spin_lock (& set_atomicity_lock);
    cr0 = read_cr0 () | X86_CR0_CD;
    write_cr0 (cr0);
    wbinvd ();
    if (cpu_has_pge) {
        cr4 = read_cr4 ();
        write_cr4 (cr4 & ~ X86_CR4_PGE);
    }
    __flush_tlb ();
    rdmsr (MSR_MTRRdefType, deftype_lo, deftype_hi);
    mtrr_wrmsr (MSR_MTRRdefType, deftype_lo & ~ 0xcff, deftype_hi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="577" endline="580">
{
    cr4 = read_cr4 ();
    write_cr4 (cr4 & ~ X86_CR4_PGE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="593" endline="607">
{
    __flush_tlb ();
    mtrr_wrmsr (MSR_MTRRdefType, deftype_lo, deftype_hi);
    write_cr0 (read_cr0 () & 0xbfffffff);
    if (cpu_has_pge)
        write_cr4 (cr4);
    spin_unlock (& set_atomicity_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="610" endline="633">
{
    unsigned long mask, count;
    unsigned long flags;
    local_irq_save (flags);
    prepare_set ();
    mask = set_mtrr_state ();
    pat_init ();
    post_set ();
    local_irq_restore (flags);
    for (count = 0; count < sizeof mask * 8; ++count) {
        if (mask & 0x01)
            set_bit (count, &smp_changes_mask);
        mask >>= 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="627" endline="631">
{
    if (mask & 0x01)
        set_bit (count, &smp_changes_mask);
    mask >>= 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="644" endline="670">
{
    unsigned long flags;
    struct mtrr_var_range *vr;
    vr = &mtrr_state.var_ranges[reg];
    local_irq_save (flags);
    prepare_set ();
    if (size == 0) {
        mtrr_wrmsr (MTRRphysMask_MSR (reg), 0, 0);
        memset (vr, 0, sizeof (struct mtrr_var_range));
    }
    else {
        vr->base_lo = base << PAGE_SHIFT | type;
        vr->base_hi = (base & size_and_mask) >> (32 - PAGE_SHIFT);
        vr->mask_lo = -size << PAGE_SHIFT | 0x800;
        vr->mask_hi = (-size & size_and_mask) >> (32 - PAGE_SHIFT);
        mtrr_wrmsr (MTRRphysBase_MSR (reg), vr -> base_lo, vr -> base_hi);
        mtrr_wrmsr (MTRRphysMask_MSR (reg), vr -> mask_lo, vr -> mask_hi);
    }
    post_set ();
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="653" endline="658">
{
    mtrr_wrmsr (MTRRphysMask_MSR (reg), 0, 0);
    memset (vr, 0, sizeof (struct mtrr_var_range));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="658" endline="666">
{
    vr->base_lo = base << PAGE_SHIFT | type;
    vr->base_hi = (base & size_and_mask) >> (32 - PAGE_SHIFT);
    vr->mask_lo = -size << PAGE_SHIFT | 0x800;
    vr->mask_hi = (-size & size_and_mask) >> (32 - PAGE_SHIFT);
    mtrr_wrmsr (MTRRphysBase_MSR (reg), vr -> base_lo, vr -> base_hi);
    mtrr_wrmsr (MTRRphysMask_MSR (reg), vr -> mask_lo, vr -> mask_hi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="673" endline="704">
{
    unsigned long lbase, last;
    if (is_cpu (INTEL) && boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model == 1 && boot_cpu_data.x86_mask <= 7) {
        if (base & ((1 << (22 - PAGE_SHIFT)) - 1)) {
            printk (KERN_WARNING "mtrr: base(0x%lx000) is not 4 MiB aligned\n", base);
            return -EINVAL;
        }
        if (!(base + size < 0x70000 || base > 0x7003F) && (type == MTRR_TYPE_WRCOMB || type == MTRR_TYPE_WRBACK)) {
            printk (KERN_WARNING "mtrr: writable mtrr between 0x70000000 and 0x7003FFFF may hang the CPU.\n");
            return -EINVAL;
        }
    }
    last = base + size - 1;
    for (lbase = base; !(lbase & 1) && (last & 1); lbase = lbase >> 1, last = last >> 1)
        ;
    if (lbase != last) {
        printk (KERN_WARNING "mtrr: base(0x%lx000) is not aligned on a size(0x%lx000) boundary\n", base, size);
        return -EINVAL;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="680" endline="691">
{
    if (base & ((1 << (22 - PAGE_SHIFT)) - 1)) {
        printk (KERN_WARNING "mtrr: base(0x%lx000) is not 4 MiB aligned\n", base);
        return -EINVAL;
    }
    if (!(base + size < 0x70000 || base > 0x7003F) && (type == MTRR_TYPE_WRCOMB || type == MTRR_TYPE_WRBACK)) {
        printk (KERN_WARNING "mtrr: writable mtrr between 0x70000000 and 0x7003FFFF may hang the CPU.\n");
        return -EINVAL;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="681" endline="684">
{
    printk (KERN_WARNING "mtrr: base(0x%lx000) is not 4 MiB aligned\n", base);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="687" endline="690">
{
    printk (KERN_WARNING "mtrr: writable mtrr between 0x70000000 and 0x7003FFFF may hang the CPU.\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="698" endline="702">
{
    printk (KERN_WARNING "mtrr: base(0x%lx000) is not aligned on a size(0x%lx000) boundary\n", base, size);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="708" endline="712">
{
    unsigned long config, dummy;
    rdmsr (MSR_MTRRcap, config, dummy);
    return (config & (1 << 10));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/generic.c.ifdefed" startline="715" endline="717">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="65" endline="68">
{
    if (ops->vendor && ops->vendor < X86_VENDOR_NUM)
        mtrr_ops[ops->vendor] = ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="72" endline="99">
{
    struct pci_dev *dev;
    u8 rev;
    if ((dev = pci_get_class (PCI_CLASS_BRIDGE_HOST << 8, NULL)) != NULL) {
        if (dev->vendor == PCI_VENDOR_ID_SERVERWORKS && dev->device == PCI_DEVICE_ID_SERVERWORKS_LE) {
            pci_read_config_byte (dev, PCI_CLASS_REVISION, & rev);
            if (rev <= 5) {
                printk (KERN_INFO "mtrr: Serverworks LE rev < 6 detected. Write-combining disabled.\n");
                pci_dev_put (dev);
                return 0;
            }
        }
        if (dev->vendor == PCI_VENDOR_ID_INTEL && dev->device == PCI_DEVICE_ID_INTEL_82451NX) {
            printk (KERN_INFO "mtrr: Intel 450NX MMC detected. Write-combining disabled.\n");
            pci_dev_put (dev);
            return 0;
        }
        pci_dev_put (dev);
    }
    return (mtrr_if->have_wrcomb ? mtrr_if->have_wrcomb () : 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="76" endline="97">
{
    if (dev->vendor == PCI_VENDOR_ID_SERVERWORKS && dev->device == PCI_DEVICE_ID_SERVERWORKS_LE) {
        pci_read_config_byte (dev, PCI_CLASS_REVISION, & rev);
        if (rev <= 5) {
            printk (KERN_INFO "mtrr: Serverworks LE rev < 6 detected. Write-combining disabled.\n");
            pci_dev_put (dev);
            return 0;
        }
    }
    if (dev->vendor == PCI_VENDOR_ID_INTEL && dev->device == PCI_DEVICE_ID_INTEL_82451NX) {
        printk (KERN_INFO "mtrr: Intel 450NX MMC detected. Write-combining disabled.\n");
        pci_dev_put (dev);
        return 0;
    }
    pci_dev_put (dev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="80" endline="87">
{
    pci_read_config_byte (dev, PCI_CLASS_REVISION, & rev);
    if (rev <= 5) {
        printk (KERN_INFO "mtrr: Serverworks LE rev < 6 detected. Write-combining disabled.\n");
        pci_dev_put (dev);
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="82" endline="86">
{
    printk (KERN_INFO "mtrr: Serverworks LE rev < 6 detected. Write-combining disabled.\n");
    pci_dev_put (dev);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="91" endline="95">
{
    printk (KERN_INFO "mtrr: Intel 450NX MMC detected. Write-combining disabled.\n");
    pci_dev_put (dev);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="103" endline="113">
{
    unsigned long config = 0, dummy;
    if (use_intel ()) {
        rdmsr (MSR_MTRRcap, config, dummy);
    }
    else if (is_cpu (AMD))
        config = 2;
    else if (is_cpu (CYRIX) || is_cpu (CENTAUR))
        config = 8;
    num_var_ranges = config & 0xff;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="106" endline="108">
{
    rdmsr (MSR_MTRRcap, config, dummy);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="116" endline="122">
{
    int i, max;
    max = num_var_ranges;
    for (i = 0; i < max; i++)
        mtrr_usage_table[i] = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="137" endline="162">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="164" endline="169">
{
    return type1 == MTRR_TYPE_UNCACHABLE || type2 == MTRR_TYPE_UNCACHABLE || (type1 == MTRR_TYPE_WRTHROUGH && type2 == MTRR_TYPE_WRBACK) || (type1 == MTRR_TYPE_WRBACK && type2 == MTRR_TYPE_WRTHROUGH);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="212" endline="266">
{
    struct set_mtrr_data data;
    unsigned long flags;
    data.smp_reg = reg;
    data.smp_base = base;
    data.smp_size = size;
    data.smp_type = type;
    atomic_set (& data.count, num_booting_cpus () - 1);
    smp_wmb ();
    atomic_set (& data.gate, 0);
    if (smp_call_function (ipi_handler, &data, 0) != 0)
        panic ("mtrr: timed out waiting for other CPUs\n");
    local_irq_save (flags);
    while (atomic_read (&data.count))
        cpu_relax ();
    atomic_set (& data.count, num_booting_cpus () - 1);
    smp_wmb ();
    atomic_set (& data.gate, 1);
    if (reg != ~0U)
        mtrr_if->set (reg, base, size, type);
    while (atomic_read (&data.count))
        cpu_relax ();
    atomic_set (& data.count, num_booting_cpus () - 1);
    smp_wmb ();
    atomic_set (& data.gate, 0);
    while (atomic_read (&data.count))
        cpu_relax ();
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="306" endline="403">
{
    int i, replace, error;
    mtrr_type ltype;
    unsigned long lbase, lsize;
    if (!mtrr_if)
        return -ENXIO;
    if ((error = mtrr_if->validate_add_page (base, size, type)))
        return error;
    if (type >= MTRR_NUM_TYPES) {
        printk (KERN_WARNING "mtrr: type: %u invalid\n", type);
        return -EINVAL;
    }
    if ((type == MTRR_TYPE_WRCOMB) && !have_wrcomb ()) {
        printk (KERN_WARNING "mtrr: your processor doesn't support write-combining\n");
        return -ENOSYS;
    }
    if (!size) {
        printk (KERN_WARNING "mtrr: zero sized request\n");
        return -EINVAL;
    }
    if (base & size_or_mask || size & size_or_mask) {
        printk (KERN_WARNING "mtrr: base or size exceeds the MTRR width\n");
        return -EINVAL;
    }
    error = -EINVAL;
    replace = -1;
    get_online_cpus ();
    mutex_lock (& mtrr_mutex);
    for (i = 0; i < num_var_ranges; ++i) {
        mtrr_if->get (i, &lbase, &lsize, &ltype);
        if (!lsize || base > lbase + lsize - 1 || base + size - 1 < lbase)
            continue;
        if (base < lbase || base + size - 1 > lbase + lsize - 1) {
            if (base <= lbase && base + size - 1 >= lbase + lsize - 1) {
                if (type == ltype) {
                    replace = replace == -1 ? i : -2;
                    continue;
                }
                else if (types_compatible (type, ltype))
                    continue;
            }
            printk (KERN_WARNING "mtrr: 0x%lx000,0x%lx000 overlaps existing" " 0x%lx000,0x%lx000\n", base, size, lbase, lsize);
            goto out;
        }
        if (ltype != type) {
            if (types_compatible (type, ltype))
                continue;
            printk (KERN_WARNING "mtrr: type mismatch for %lx000,%lx000 old: %s new: %s\n", base, size, mtrr_attrib_to_str (ltype), mtrr_attrib_to_str (type));
            goto out;
        }
        if (increment)
            ++mtrr_usage_table[i];
        error = i;
        goto out;
    }
    i = mtrr_if->get_free_region (base, size, replace);
    if (i >= 0) {
        set_mtrr (i, base, size, type);
        if (likely (replace < 0)) {
            mtrr_usage_table[i] = 1;
        }
        else {
            mtrr_usage_table[i] = mtrr_usage_table[replace];
            if (increment)
                mtrr_usage_table[i]++;
            if (unlikely (replace != i)) {
                set_mtrr (replace, 0, 0, 0);
                mtrr_usage_table[replace] = 0;
            }
        }
    }
    else
        printk (KERN_INFO "mtrr: no more MTRRs available\n");
    error = i;
out :
    mutex_unlock (&mtrr_mutex);
    put_online_cpus ();
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="317" endline="320">
{
    printk (KERN_WARNING "mtrr: type: %u invalid\n", type);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="323" endline="327">
{
    printk (KERN_WARNING "mtrr: your processor doesn't support write-combining\n");
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="329" endline="332">
{
    printk (KERN_WARNING "mtrr: zero sized request\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="334" endline="337">
{
    printk (KERN_WARNING "mtrr: base or size exceeds the MTRR width\n");
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="346" endline="380">
{
    mtrr_if->get (i, &lbase, &lsize, &ltype);
    if (!lsize || base > lbase + lsize - 1 || base + size - 1 < lbase)
        continue;
    if (base < lbase || base + size - 1 > lbase + lsize - 1) {
        if (base <= lbase && base + size - 1 >= lbase + lsize - 1) {
            if (type == ltype) {
                replace = replace == -1 ? i : -2;
                continue;
            }
            else if (types_compatible (type, ltype))
                continue;
        }
        printk (KERN_WARNING "mtrr: 0x%lx000,0x%lx000 overlaps existing" " 0x%lx000,0x%lx000\n", base, size, lbase, lsize);
        goto out;
    }
    if (ltype != type) {
        if (types_compatible (type, ltype))
            continue;
        printk (KERN_WARNING "mtrr: type mismatch for %lx000,%lx000 old: %s new: %s\n", base, size, mtrr_attrib_to_str (ltype), mtrr_attrib_to_str (type));
        goto out;
    }
    if (increment)
        ++mtrr_usage_table[i];
    error = i;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="351" endline="366">
{
    if (base <= lbase && base + size - 1 >= lbase + lsize - 1) {
        if (type == ltype) {
            replace = replace == -1 ? i : -2;
            continue;
        }
        else if (types_compatible (type, ltype))
            continue;
    }
    printk (KERN_WARNING "mtrr: 0x%lx000,0x%lx000 overlaps existing" " 0x%lx000,0x%lx000\n", base, size, lbase, lsize);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="352" endline="360">
{
    if (type == ltype) {
        replace = replace == -1 ? i : -2;
        continue;
    }
    else if (types_compatible (type, ltype))
        continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="354" endline="357">
{
    replace = replace == -1 ? i : -2;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="368" endline="375">
{
    if (types_compatible (type, ltype))
        continue;
    printk (KERN_WARNING "mtrr: type mismatch for %lx000,%lx000 old: %s new: %s\n", base, size, mtrr_attrib_to_str (ltype), mtrr_attrib_to_str (type));
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="383" endline="396">
{
    set_mtrr (i, base, size, type);
    if (likely (replace < 0)) {
        mtrr_usage_table[i] = 1;
    }
    else {
        mtrr_usage_table[i] = mtrr_usage_table[replace];
        if (increment)
            mtrr_usage_table[i]++;
        if (unlikely (replace != i)) {
            set_mtrr (replace, 0, 0, 0);
            mtrr_usage_table[replace] = 0;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="385" endline="387">
{
    mtrr_usage_table[i] = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="387" endline="395">
{
    mtrr_usage_table[i] = mtrr_usage_table[replace];
    if (increment)
        mtrr_usage_table[i]++;
    if (unlikely (replace != i)) {
        set_mtrr (replace, 0, 0, 0);
        mtrr_usage_table[replace] = 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="391" endline="394">
{
    set_mtrr (replace, 0, 0, 0);
    mtrr_usage_table[replace] = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="406" endline="416">
{
    if ((base & (PAGE_SIZE - 1)) || (size & (PAGE_SIZE - 1))) {
        printk (KERN_WARNING "mtrr: size and base must be multiples of 4 kiB\n");
        printk (KERN_DEBUG "mtrr: size: 0x%lx  base: 0x%lx\n", size, base);
        dump_stack ();
        return -1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="407" endline="414">
{
    printk (KERN_WARNING "mtrr: size and base must be multiples of 4 kiB\n");
    printk (KERN_DEBUG "mtrr: size: 0x%lx  base: 0x%lx\n", size, base);
    dump_stack ();
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="457" endline="462">
{
    if (mtrr_check (base, size))
        return -EINVAL;
    return mtrr_add_page (base >> PAGE_SHIFT, size >> PAGE_SHIFT, type, increment);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="480" endline="528">
{
    int i, max;
    mtrr_type ltype;
    unsigned long lbase, lsize;
    int error = -EINVAL;
    if (!mtrr_if)
        return -ENXIO;
    max = num_var_ranges;
    get_online_cpus ();
    mutex_lock (& mtrr_mutex);
    if (reg < 0) {
        for (i = 0; i < max; ++i) {
            mtrr_if->get (i, &lbase, &lsize, &ltype);
            if (lbase == base && lsize == size) {
                reg = i;
                break;
            }
        }
        if (reg < 0) {
            printk (KERN_DEBUG "mtrr: no MTRR for %lx000,%lx000 found\n", base, size);
            goto out;
        }
    }
    if (reg >= max) {
        printk (KERN_WARNING "mtrr: register: %d too big\n", reg);
        goto out;
    }
    mtrr_if->get (reg, &lbase, &lsize, &ltype);
    if (lsize < 1) {
        printk (KERN_WARNING "mtrr: MTRR %d not used\n", reg);
        goto out;
    }
    if (mtrr_usage_table[reg] < 1) {
        printk (KERN_WARNING "mtrr: reg: %d has count=0\n", reg);
        goto out;
    }
    if (--mtrr_usage_table[reg] < 1)
        set_mtrr (reg, 0, 0, 0);
    error = reg;
out :
    mutex_unlock (&mtrr_mutex);
    put_online_cpus ();
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="493" endline="507">
{
    for (i = 0; i < max; ++i) {
        mtrr_if->get (i, &lbase, &lsize, &ltype);
        if (lbase == base && lsize == size) {
            reg = i;
            break;
        }
    }
    if (reg < 0) {
        printk (KERN_DEBUG "mtrr: no MTRR for %lx000,%lx000 found\n", base, size);
        goto out;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="495" endline="501">
{
    mtrr_if->get (i, &lbase, &lsize, &ltype);
    if (lbase == base && lsize == size) {
        reg = i;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="497" endline="500">
{
    reg = i;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="502" endline="506">
{
    printk (KERN_DEBUG "mtrr: no MTRR for %lx000,%lx000 found\n", base, size);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="508" endline="511">
{
    printk (KERN_WARNING "mtrr: register: %d too big\n", reg);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="513" endline="516">
{
    printk (KERN_WARNING "mtrr: MTRR %d not used\n", reg);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="517" endline="520">
{
    printk (KERN_WARNING "mtrr: reg: %d has count=0\n", reg);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="546" endline="550">
{
    if (mtrr_check (base, size))
        return -EINVAL;
    return mtrr_del_page (reg, base >> PAGE_SHIFT, size >> PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="560" endline="566">
{
    amd_init_mtrr ();
    cyrix_init_mtrr ();
    centaur_init_mtrr ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="580" endline="590">
{
    int i;
    for (i = 0; i < num_var_ranges; i++) {
        mtrr_if->get (i, &mtrr_value[i].lbase, &mtrr_value[i].lsize, &mtrr_value[i].ltype);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="583" endline="588">
{
    mtrr_if->get (i, &mtrr_value[i].lbase, &mtrr_value[i].lsize, &mtrr_value[i].ltype);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="593" endline="604">
{
    int i;
    for (i = 0; i < num_var_ranges; i++) {
        if (mtrr_value[i].lsize)
            set_mtrr (i, mtrr_value[i].lbase, mtrr_value[i].lsize, mtrr_value[i].ltype);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="596" endline="602">
{
    if (mtrr_value[i].lsize)
        set_mtrr (i, mtrr_value[i].lbase, mtrr_value[i].lsize, mtrr_value[i].ltype);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="623" endline="700">
{
    u32 phys_addr;
    init_ifs ();
    phys_addr = 32;
    if (cpu_has_mtrr) {
        mtrr_if = &generic_mtrr_ops;
        size_or_mask = 0xff000000;
        size_and_mask = 0x00f00000;
        phys_addr = 36;
        if (cpuid_eax (0x80000000) >= 0x80000008) {
            phys_addr = cpuid_eax (0x80000008) & 0xff;
            if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL && boot_cpu_data.x86 == 0xF && boot_cpu_data.x86_model == 0x3 && (boot_cpu_data.x86_mask == 0x3 || boot_cpu_data.x86_mask == 0x4))
                phys_addr = 36;
            size_or_mask = ~((1ULL << (phys_addr - PAGE_SHIFT)) - 1);
            size_and_mask = ~size_or_mask & 0xfffff00000ULL;
        }
        else if (boot_cpu_data.x86_vendor == X86_VENDOR_CENTAUR && boot_cpu_data.x86 == 6) {
            size_or_mask = 0xfff00000;
            size_and_mask = 0;
            phys_addr = 32;
        }
    }
    else {
        switch (boot_cpu_data.x86_vendor) {
        case X86_VENDOR_AMD :
            if (cpu_has_k6_mtrr) {
                mtrr_if = mtrr_ops[X86_VENDOR_AMD];
                size_or_mask = 0xfff00000;
                size_and_mask = 0;
            }
            break;
        case X86_VENDOR_CENTAUR :
            if (cpu_has_centaur_mcr) {
                mtrr_if = mtrr_ops[X86_VENDOR_CENTAUR];
                size_or_mask = 0xfff00000;
                size_and_mask = 0;
            }
            break;
        case X86_VENDOR_CYRIX :
            if (cpu_has_cyrix_arr) {
                mtrr_if = mtrr_ops[X86_VENDOR_CYRIX];
                size_or_mask = 0xfff00000;
                size_and_mask = 0;
            }
            break;
        default :
            break;
        }
    }
    if (mtrr_if) {
        set_num_var_ranges ();
        init_table ();
        if (use_intel ()) {
            get_mtrr_state ();
            if (mtrr_cleanup (phys_addr)) {
                changed_by_mtrr_cleanup = 1;
                mtrr_if->set_all ();
            }
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="629" endline="658">
{
    mtrr_if = &generic_mtrr_ops;
    size_or_mask = 0xff000000;
    size_and_mask = 0x00f00000;
    phys_addr = 36;
    if (cpuid_eax (0x80000000) >= 0x80000008) {
        phys_addr = cpuid_eax (0x80000008) & 0xff;
        if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL && boot_cpu_data.x86 == 0xF && boot_cpu_data.x86_model == 0x3 && (boot_cpu_data.x86_mask == 0x3 || boot_cpu_data.x86_mask == 0x4))
            phys_addr = 36;
        size_or_mask = ~((1ULL << (phys_addr - PAGE_SHIFT)) - 1);
        size_and_mask = ~size_or_mask & 0xfffff00000ULL;
    }
    else if (boot_cpu_data.x86_vendor == X86_VENDOR_CENTAUR && boot_cpu_data.x86 == 6) {
        size_or_mask = 0xfff00000;
        size_and_mask = 0;
        phys_addr = 32;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="638" endline="650">
{
    phys_addr = cpuid_eax (0x80000008) & 0xff;
    if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL && boot_cpu_data.x86 == 0xF && boot_cpu_data.x86_model == 0x3 && (boot_cpu_data.x86_mask == 0x3 || boot_cpu_data.x86_mask == 0x4))
        phys_addr = 36;
    size_or_mask = ~((1ULL << (phys_addr - PAGE_SHIFT)) - 1);
    size_and_mask = ~size_or_mask & 0xfffff00000ULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="651" endline="657">
{
    size_or_mask = 0xfff00000;
    size_and_mask = 0;
    phys_addr = 32;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="658" endline="685">
{
    switch (boot_cpu_data.x86_vendor) {
    case X86_VENDOR_AMD :
        if (cpu_has_k6_mtrr) {
            mtrr_if = mtrr_ops[X86_VENDOR_AMD];
            size_or_mask = 0xfff00000;
            size_and_mask = 0;
        }
        break;
    case X86_VENDOR_CENTAUR :
        if (cpu_has_centaur_mcr) {
            mtrr_if = mtrr_ops[X86_VENDOR_CENTAUR];
            size_or_mask = 0xfff00000;
            size_and_mask = 0;
        }
        break;
    case X86_VENDOR_CYRIX :
        if (cpu_has_cyrix_arr) {
            mtrr_if = mtrr_ops[X86_VENDOR_CYRIX];
            size_or_mask = 0xfff00000;
            size_and_mask = 0;
        }
        break;
    default :
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="659" endline="684">
{
case X86_VENDOR_AMD :
    if (cpu_has_k6_mtrr) {
        mtrr_if = mtrr_ops[X86_VENDOR_AMD];
        size_or_mask = 0xfff00000;
        size_and_mask = 0;
    }
    break;
case X86_VENDOR_CENTAUR :
    if (cpu_has_centaur_mcr) {
        mtrr_if = mtrr_ops[X86_VENDOR_CENTAUR];
        size_or_mask = 0xfff00000;
        size_and_mask = 0;
    }
    break;
case X86_VENDOR_CYRIX :
    if (cpu_has_cyrix_arr) {
        mtrr_if = mtrr_ops[X86_VENDOR_CYRIX];
        size_or_mask = 0xfff00000;
        size_and_mask = 0;
    }
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="661" endline="666">
{
    mtrr_if = mtrr_ops[X86_VENDOR_AMD];
    size_or_mask = 0xfff00000;
    size_and_mask = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="669" endline="673">
{
    mtrr_if = mtrr_ops[X86_VENDOR_CENTAUR];
    size_or_mask = 0xfff00000;
    size_and_mask = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="676" endline="680">
{
    mtrr_if = mtrr_ops[X86_VENDOR_CYRIX];
    size_or_mask = 0xfff00000;
    size_and_mask = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="687" endline="699">
{
    set_num_var_ranges ();
    init_table ();
    if (use_intel ()) {
        get_mtrr_state ();
        if (mtrr_cleanup (phys_addr)) {
            changed_by_mtrr_cleanup = 1;
            mtrr_if->set_all ();
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="690" endline="698">
{
    get_mtrr_state ();
    if (mtrr_cleanup (phys_addr)) {
        changed_by_mtrr_cleanup = 1;
        mtrr_if->set_all ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="693" endline="696">
{
    changed_by_mtrr_cleanup = 1;
    mtrr_if->set_all ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="703" endline="721">
{
    unsigned long flags;
    if (!mtrr_if || !use_intel ())
        return;
    local_irq_save (flags);
    mtrr_if->set_all ();
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="727" endline="729">
{
    smp_call_function_single (0, mtrr_save_fixed_ranges, NULL, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="732" endline="749">
{
    if (!mtrr_if)
        return 0;
    if (use_intel ()) {
        if (!changed_by_mtrr_cleanup)
            mtrr_state_warn ();
    }
    else {
        sysdev_driver_register (& cpu_sysdev_class, & mtrr_sysdev_driver);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="735" endline="738">
{
    if (!changed_by_mtrr_cleanup)
        mtrr_state_warn ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mtrr/main.c.ifdefed" startline="738" endline="747">
{
    sysdev_driver_register (& cpu_sysdev_class, & mtrr_sysdev_driver);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="55" endline="60">
{
    alloc_bootmem_cpumask_var (& cpu_initialized_mask);
    alloc_bootmem_cpumask_var (& cpu_callin_mask);
    alloc_bootmem_cpumask_var (& cpu_callout_mask);
    alloc_bootmem_cpumask_var (& cpu_sibling_setup_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="63" endline="77">
{
    if (c->cpuid_level == -1) {
        if (c->x86 == 4)
            strcpy (c->x86_model_id, "486");
        else if (c->x86 == 3)
            strcpy (c->x86_model_id, "386");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="69" endline="75">
{
    if (c->x86 == 4)
        strcpy (c->x86_model_id, "486");
    else if (c->x86 == 3)
        strcpy (c->x86_model_id, "386");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="142" endline="145">
{
    setup_clear_cpu_cap (X86_FEATURE_XSAVE);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="237" endline="239">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="242" endline="244">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="246" endline="247">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="269" endline="296">
{
    const struct cpuid_dependent_feature *df;
    for (df = cpuid_dependent_features; df->feature; df++) {
        if (!cpu_has (c, df->feature))
            continue;
        if (!((s32) df->level < 0 ? (u32) df->level > (u32) c->extended_cpuid_level : (s32) df->level > (s32) c->cpuid_level))
            continue;
        clear_cpu_cap (c, df -> feature);
        if (!warn)
            continue;
        printk (KERN_WARNING "CPU: CPU feature %s disabled, no CPUID level 0x%x\n", x86_cap_flags [df -> feature], df -> level);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="272" endline="295">
{
    if (!cpu_has (c, df->feature))
        continue;
    if (!((s32) df->level < 0 ? (u32) df->level > (u32) c->extended_cpuid_level : (s32) df->level > (s32) c->cpuid_level))
        continue;
    clear_cpu_cap (c, df -> feature);
    if (!warn)
        continue;
    printk (KERN_WARNING "CPU: CPU feature %s disabled, no CPUID level 0x%x\n", x86_cap_flags [df -> feature], df -> level);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="307" endline="324">
{
    const struct cpu_model_info *info;
    if (c->x86_model >= 16)
        return NULL;
    if (!this_cpu)
        return NULL;
    info = this_cpu->c_models;
    while (info && info->family) {
        if (info->family == c->x86)
            return info->model_names[c->x86_model];
        info++;
    }
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="318" endline="322">
{
    if (info->family == c->x86)
        return info->model_names[c->x86_model];
    info++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="330" endline="338">
{
    loadsegment (gs, 0);
    wrmsrl (MSR_GS_BASE, (unsigned long) per_cpu (irq_stack_union.gs_base, cpu));
    load_stack_canary_segment ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="345" endline="354">
{
    struct desc_ptr gdt_descr;
    gdt_descr.address = (long) get_cpu_gdt_table (cpu);
    gdt_descr.size = GDT_SIZE - 1;
    load_gdt (& gdt_descr);
    load_percpu_segment (cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="359" endline="385">
{
    unsigned int *v;
    char *p, *q;
    if (c->extended_cpuid_level < 0x80000004)
        return;
    v = (unsigned int *) c->x86_model_id;
    cpuid (0x80000002, & v [0], & v [1], & v [2], & v [3]);
    cpuid (0x80000003, & v [4], & v [5], & v [6], & v [7]);
    cpuid (0x80000004, & v [8], & v [9], & v [10], & v [11]);
    c->x86_model_id[48] = 0;
    p = q = &c->x86_model_id[0];
    while (*p == ' ')
        p++;
    if (p != q) {
        while (*p)
            *q++ = *p++;
        while (q <= &c->x86_model_id[48])
            *q++ = '\0';
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="379" endline="384">
{
    while (*p)
        *q++ = *p++;
    while (q <= &c->x86_model_id[48])
        *q++ = '\0';
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="388" endline="429">
{
    unsigned int n, dummy, ebx, ecx, edx, l2size;
    n = c->extended_cpuid_level;
    if (n >= 0x80000005) {
        cpuid (0x80000005, & dummy, & ebx, & ecx, & edx);
        printk (KERN_INFO "CPU: L1 I Cache: %dK (%d bytes/line), D cache %dK (%d bytes/line)\n", edx >> 24, edx & 0xFF, ecx >> 24, ecx & 0xFF);
        c->x86_cache_size = (ecx >> 24) + (edx >> 24);
    }
    if (n < 0x80000006)
        return;
    cpuid (0x80000006, & dummy, & ebx, & ecx, & edx);
    l2size = ecx >> 16;
    if (this_cpu->c_size_cache)
        l2size = this_cpu->c_size_cache (c, l2size);
    if (cachesize_override != -1)
        l2size = cachesize_override;
    if (l2size == 0)
        return;
    c->x86_cache_size = l2size;
    printk (KERN_INFO "CPU: L2 Cache: %dK (%d bytes/line)\n", l2size, ecx & 0xFF);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="393" endline="402">
{
    cpuid (0x80000005, & dummy, & ebx, & ecx, & edx);
    printk (KERN_INFO "CPU: L1 I Cache: %dK (%d bytes/line), D cache %dK (%d bytes/line)\n", edx >> 24, edx & 0xFF, ecx >> 24, ecx & 0xFF);
    c->x86_cache_size = (ecx >> 24) + (edx >> 24);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="432" endline="485">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="488" endline="512">
{
    char *v = c->x86_vendor_id;
    int i;
    for (i = 0; i < X86_VENDOR_NUM; i++) {
        if (!cpu_devs[i])
            break;
        if (!strcmp (v, cpu_devs[i]->c_ident[0]) || (cpu_devs[i]->c_ident[1] && !strcmp (v, cpu_devs[i]->c_ident[1]))) {
            this_cpu = cpu_devs[i];
            c->x86_vendor = this_cpu->c_x86_vendor;
            return;
        }
    }
    printk_once (KERN_ERR "CPU: vendor_id '%s' unknown, using generic init.\n" \ "CPU: Your system may be unstable.\n", v);
    c->x86_vendor = X86_VENDOR_UNKNOWN;
    this_cpu = &default_cpu;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="492" endline="504">
{
    if (!cpu_devs[i])
        break;
    if (!strcmp (v, cpu_devs[i]->c_ident[0]) || (cpu_devs[i]->c_ident[1] && !strcmp (v, cpu_devs[i]->c_ident[1]))) {
        this_cpu = cpu_devs[i];
        c->x86_vendor = this_cpu->c_x86_vendor;
        return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="498" endline="503">
{
    this_cpu = cpu_devs[i];
    c->x86_vendor = this_cpu->c_x86_vendor;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="515" endline="542">
{
    cpuid (0x00000000, (unsigned int *) & c -> cpuid_level, (unsigned int *) & c -> x86_vendor_id [0], (unsigned int *) & c -> x86_vendor_id [8], (unsigned int *) & c -> x86_vendor_id [4]);
    c->x86 = 4;
    if (c->cpuid_level >= 0x00000001) {
        u32 junk, tfms, cap0, misc;
        cpuid (0x00000001, & tfms, & misc, & junk, & cap0);
        c->x86 = (tfms >> 8) & 0xf;
        c->x86_model = (tfms >> 4) & 0xf;
        c->x86_mask = tfms & 0xf;
        if (c->x86 == 0xf)
            c->x86 += (tfms >> 20) & 0xff;
        if (c->x86 >= 0x6)
            c->x86_model += ((tfms >> 16) & 0xf) << 4;
        if (cap0 & (1 << 19)) {
            c->x86_clflush_size = ((misc >> 8) & 0xff) * 8;
            c->x86_cache_alignment = c->x86_clflush_size;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="524" endline="541">
{
    u32 junk, tfms, cap0, misc;
    cpuid (0x00000001, & tfms, & misc, & junk, & cap0);
    c->x86 = (tfms >> 8) & 0xf;
    c->x86_model = (tfms >> 4) & 0xf;
    c->x86_mask = tfms & 0xf;
    if (c->x86 == 0xf)
        c->x86 += (tfms >> 20) & 0xff;
    if (c->x86 >= 0x6)
        c->x86_model += ((tfms >> 16) & 0xf) << 4;
    if (cap0 & (1 << 19)) {
        c->x86_clflush_size = ((misc >> 8) & 0xff) * 8;
        c->x86_cache_alignment = c->x86_clflush_size;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="537" endline="540">
{
    c->x86_clflush_size = ((misc >> 8) & 0xff) * 8;
    c->x86_cache_alignment = c->x86_clflush_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="545" endline="583">
{
    u32 tfms, xlvl;
    u32 ebx;
    if (c->cpuid_level >= 0x00000001) {
        u32 capability, excap;
        cpuid (0x00000001, & tfms, & ebx, & excap, & capability);
        c->x86_capability[0] = capability;
        c->x86_capability[4] = excap;
    }
    xlvl = cpuid_eax (0x80000000);
    c->extended_cpuid_level = xlvl;
    if ((xlvl & 0xffff0000) == 0x80000000) {
        if (xlvl >= 0x80000001) {
            c->x86_capability[1] = cpuid_edx (0x80000001);
            c->x86_capability[6] = cpuid_ecx (0x80000001);
        }
    }
    if (c->extended_cpuid_level >= 0x80000008) {
        u32 eax = cpuid_eax (0x80000008);
        c->x86_virt_bits = (eax >> 8) & 0xff;
        c->x86_phys_bits = eax & 0xff;
    }
    if (c->extended_cpuid_level >= 0x80000007)
        c->x86_power = cpuid_edx (0x80000007);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="550" endline="556">
{
    u32 capability, excap;
    cpuid (0x00000001, & tfms, & ebx, & excap, & capability);
    c->x86_capability[0] = capability;
    c->x86_capability[4] = excap;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="562" endline="567">
{
    if (xlvl >= 0x80000001) {
        c->x86_capability[1] = cpuid_edx (0x80000001);
        c->x86_capability[6] = cpuid_ecx (0x80000001);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="563" endline="566">
{
    c->x86_capability[1] = cpuid_edx (0x80000001);
    c->x86_capability[6] = cpuid_ecx (0x80000001);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="569" endline="574">
{
    u32 eax = cpuid_eax (0x80000008);
    c->x86_virt_bits = (eax >> 8) & 0xff;
    c->x86_phys_bits = eax & 0xff;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="586" endline="609">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="621" endline="656">
{
    c->x86_clflush_size = 32;
    c->x86_phys_bits = 32;
    c->x86_virt_bits = 32;
    c->x86_cache_alignment = c->x86_clflush_size;
    memset (& c -> x86_capability, 0, sizeof c -> x86_capability);
    c->extended_cpuid_level = 0;
    if (!have_cpuid_p ())
        identify_cpu_without_cpuid (c);
    if (!have_cpuid_p ())
        return;
    cpu_detect (c);
    get_cpu_vendor (c);
    get_cpu_cap (c);
    if (this_cpu->c_early_init)
        this_cpu->c_early_init (c);
    filter_cpuid_features (c, false);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="659" endline="682">
{
    const struct cpu_dev * const *cdev;
    int count = 0;
    printk (KERN_INFO "KERNEL supported cpus:\n");
    for (cdev = __x86_cpu_dev_start; cdev < __x86_cpu_dev_end; cdev++) {
        const struct cpu_dev *cpudev = *cdev;
        unsigned int j;
        if (count >= X86_VENDOR_NUM)
            break;
        cpu_devs[count] = cpudev;
        count++;
        for (j = 0; j < 2; j++) {
            if (!cpudev->c_ident[j])
                continue;
            printk (KERN_INFO "  %s %s\n", cpudev -> c_vendor, cpudev -> c_ident [j]);
        }
    }
    early_identify_cpu (& boot_cpu_data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="664" endline="679">
{
    const struct cpu_dev *cpudev = *cdev;
    unsigned int j;
    if (count >= X86_VENDOR_NUM)
        break;
    cpu_devs[count] = cpudev;
    count++;
    for (j = 0; j < 2; j++) {
        if (!cpudev->c_ident[j])
            continue;
        printk (KERN_INFO "  %s %s\n", cpudev -> c_vendor, cpudev -> c_ident [j]);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="673" endline="678">
{
    if (!cpudev->c_ident[j])
        continue;
    printk (KERN_INFO "  %s %s\n", cpudev -> c_vendor, cpudev -> c_ident [j]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="693" endline="695">
{
    clear_cpu_cap (c, X86_FEATURE_NOPL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="698" endline="733">
{
    c->extended_cpuid_level = 0;
    if (!have_cpuid_p ())
        identify_cpu_without_cpuid (c);
    if (!have_cpuid_p ())
        return;
    cpu_detect (c);
    get_cpu_vendor (c);
    get_cpu_cap (c);
    if (c->cpuid_level >= 0x00000001) {
        c->initial_apicid = (cpuid_ebx (1) >> 24) & 0xFF;
    }
    get_model_name (c);
    init_scattered_cpuid_features (c);
    detect_nopl (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="714" endline="727">
{
    c->initial_apicid = (cpuid_ebx (1) >> 24) & 0xFF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="739" endline="851">
{
    int i;
    c->loops_per_jiffy = loops_per_jiffy;
    c->x86_cache_size = -1;
    c->x86_vendor = X86_VENDOR_UNKNOWN;
    c->x86_model = c->x86_mask = 0;
    c->x86_vendor_id[0] = '\0';
    c->x86_model_id[0] = '\0';
    c->x86_max_cores = 1;
    c->x86_coreid_bits = 0;
    c->cpuid_level = -1;
    c->x86_clflush_size = 32;
    c->x86_phys_bits = 32;
    c->x86_virt_bits = 32;
    c->x86_cache_alignment = c->x86_clflush_size;
    memset (& c -> x86_capability, 0, sizeof c -> x86_capability);
    generic_identify (c);
    if (this_cpu->c_identify)
        this_cpu->c_identify (c);
    for (i = 0; i < NCAPINTS; i++) {
        c->x86_capability[i] &= ~cpu_caps_cleared[i];
        c->x86_capability[i] |= cpu_caps_set[i];
    }
    if (this_cpu->c_init)
        this_cpu->c_init (c);
    squash_the_stupid_serial_number (c);
    filter_cpuid_features (c, true);
    if (!c->x86_model_id[0]) {
        const char *p;
        p = table_lookup_model (c);
        if (p)
            strcpy (c->x86_model_id, p);
        else
            sprintf (c->x86_model_id, "%02x/%02x", c->x86, c->x86_model);
    }
    init_hypervisor (c);
    for (i = 0; i < NCAPINTS; i++) {
        c->x86_capability[i] &= ~cpu_caps_cleared[i];
        c->x86_capability[i] |= cpu_caps_set[i];
    }
    if (c != &boot_cpu_data) {
        for (i = 0; i < NCAPINTS; i++)
            boot_cpu_data.x86_capability[i] &= c->x86_capability[i];
    }
    select_idle_routine (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="769" endline="772">
{
    c->x86_capability[i] &= ~cpu_caps_cleared[i];
    c->x86_capability[i] |= cpu_caps_set[i];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="803" endline="812">
{
    const char *p;
    p = table_lookup_model (c);
    if (p)
        strcpy (c->x86_model_id, p);
    else
        sprintf (c->x86_model_id, "%02x/%02x", c->x86, c->x86_model);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="824" endline="827">
{
    c->x86_capability[i] &= ~cpu_caps_cleared[i];
    c->x86_capability[i] |= cpu_caps_set[i];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="835" endline="839">
{
    for (i = 0; i < NCAPINTS; i++)
        boot_cpu_data.x86_capability[i] &= c->x86_capability[i];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="864" endline="874">
{
    identify_cpu (& boot_cpu_data);
    init_c1e_mask ();
    vgetcpu_set_mode ();
    init_hw_perf_counters ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="877" endline="884">
{
    BUG_ON (c == & boot_cpu_data);
    identify_cpu (c);
    mtrr_ap_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="899" endline="915">
{
    unsigned index_min, index_max;
    unsigned index;
    u64 val;
    int i;
    for (i = 0; i < ARRAY_SIZE (msr_range_array); i++) {
        index_min = msr_range_array[i].min;
        index_max = msr_range_array[i].max;
        for (index = index_min; index < index_max; index++) {
            if (rdmsrl_amd_safe (index, &val))
                continue;
            printk (KERN_INFO " MSR%08x: %016llx\n", index, val);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="905" endline="914">
{
    index_min = msr_range_array[i].min;
    index_max = msr_range_array[i].max;
    for (index = index_min; index < index_max; index++) {
        if (rdmsrl_amd_safe (index, &val))
            continue;
        printk (KERN_INFO " MSR%08x: %016llx\n", index, val);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="909" endline="913">
{
    if (rdmsrl_amd_safe (index, &val))
        continue;
    printk (KERN_INFO " MSR%08x: %016llx\n", index, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="920" endline="928">
{
    int num;
    get_option (& arg, & num);
    if (num > 0)
        show_msr = num;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="932" endline="935">
{
    setup_clear_cpu_cap (X86_FEATURE_CLFLSH);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="939" endline="969">
{
    const char *vendor = NULL;
    if (c->x86_vendor < X86_VENDOR_NUM) {
        vendor = this_cpu->c_vendor;
    }
    else {
        if (c->cpuid_level >= 0)
            vendor = c->x86_vendor_id;
    }
    if (vendor && !strstr (c->x86_model_id, vendor))
        printk (KERN_CONT "%s ", vendor);
    if (c->x86_model_id[0])
        printk (KERN_CONT "%s", c->x86_model_id);
    else
        printk (KERN_CONT "%d86", c->x86);
    if (c->x86_mask || c->cpuid_level >= 0)
        printk (KERN_CONT " stepping %02x\n", c->x86_mask);
    else
        printk (KERN_CONT "\n");
    if (show_msr)
        print_cpu_msr ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="942" endline="944">
{
    vendor = this_cpu->c_vendor;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="944" endline="947">
{
    if (c->cpuid_level >= 0)
        vendor = c->x86_vendor_id;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="972" endline="981">
{
    int bit;
    if (get_option (&arg, &bit) && bit < NCAPINTS * 32)
        setup_clear_cpu_cap (bit);
    else
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="1051" endline="1057">
{
    memset (regs, 0, sizeof (struct pt_regs));
    regs->fs = __KERNEL_PERCPU;
    regs->gs = __KERNEL_STACK_CANARY;
    return regs;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="1064" endline="1074">
{
    int i;
    for (i = 0; i < 8; i++) {
        if ((i == 4) || (i == 5))
            continue;
        set_debugreg (0, i);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="1067" endline="1073">
{
    if ((i == 4) || (i == 5))
        continue;
    set_debugreg (0, i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="1190" endline="1249">
{
    int cpu = smp_processor_id ();
    struct task_struct *curr = current;
    struct tss_struct *t = &per_cpu (init_tss, cpu);
    struct thread_struct *thread = &curr->thread;
    if (cpumask_test_and_set_cpu (cpu, cpu_initialized_mask)) {
        printk (KERN_WARNING "CPU#%d already initialized!\n", cpu);
        for (;;)
            local_irq_enable ();
    }
    printk (KERN_INFO "Initializing CPU#%d\n", cpu);
    if (cpu_has_vme || cpu_has_tsc || cpu_has_de)
        clear_in_cr4 (X86_CR4_VME | X86_CR4_PVI | X86_CR4_TSD | X86_CR4_DE);
    load_idt (& idt_descr);
    switch_to_new_gdt (cpu);
    atomic_inc (& init_mm.mm_count);
    curr->active_mm = &init_mm;
    BUG_ON (curr -> mm);
    enter_lazy_tlb (& init_mm, curr);
    load_sp0 (t, thread);
    set_tss_desc (cpu, t);
    load_TR_desc ();
    load_LDT (& init_mm.context);
    t->x86_tss.io_bitmap_base = offsetof (struct tss_struct, io_bitmap);
    clear_all_debug_regs ();
    if (cpu_has_xsave)
        current_thread_info ()->status = TS_XSAVE;
    else
        current_thread_info ()->status = 0;
    clear_used_math ();
    mxcsr_feature_mask_init ();
    if (smp_processor_id () == boot_cpu_id)
        init_thread_xstate ();
    xsave_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/common.c.ifdefed" startline="1196" endline="1200">
{
    printk (KERN_WARNING "CPU#%d already initialized!\n", cpu);
    for (;;)
        local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/vmware.c.ifdefed" startline="44" endline="48">
{
    uint32_t eax, ebx, ecx, edx;
    VMWARE_PORT (GETVERSION, eax, ebx, ecx, edx);
    return eax != (uint32_t) -1 && ebx == VMWARE_HYPERVISOR_MAGIC;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/vmware.c.ifdefed" startline="51" endline="63">
{
    uint64_t tsc_hz;
    uint32_t eax, ebx, ecx, edx;
    VMWARE_PORT (GETHZ, eax, ebx, ecx, edx);
    if (ebx == UINT_MAX)
        return 0;
    tsc_hz = eax | (((uint64_t) ebx) << 32);
    do_div (tsc_hz, 1000);
    BUG_ON (tsc_hz >> 32);
    return tsc_hz;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/vmware.c.ifdefed" startline="71" endline="88">
{
    if (cpu_has_hypervisor) {
        unsigned int eax, ebx, ecx, edx;
        char hyper_vendor_id [13];
        cpuid (CPUID_VMWARE_INFO_LEAF, & eax, & ebx, & ecx, & edx);
        memcpy (hyper_vendor_id + 0, & ebx, 4);
        memcpy (hyper_vendor_id + 4, & ecx, 4);
        memcpy (hyper_vendor_id + 8, & edx, 4);
        hyper_vendor_id[12] = '\0';
        if (!strcmp (hyper_vendor_id, "VMwareVMware"))
            return 1;
    }
    else if (dmi_available && dmi_name_in_serial ("VMware") && __vmware_platform ())
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/vmware.c.ifdefed" startline="72" endline="83">
{
    unsigned int eax, ebx, ecx, edx;
    char hyper_vendor_id [13];
    cpuid (CPUID_VMWARE_INFO_LEAF, & eax, & ebx, & ecx, & edx);
    memcpy (hyper_vendor_id + 0, & ebx, 4);
    memcpy (hyper_vendor_id + 4, & ecx, 4);
    memcpy (hyper_vendor_id + 8, & edx, 4);
    hyper_vendor_id[12] = '\0';
    if (!strcmp (hyper_vendor_id, "VMwareVMware"))
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/vmware.c.ifdefed" startline="91" endline="94">
{
    BUG_ON (! vmware_platform ());
    return __vmware_get_tsc_khz ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/vmware.c.ifdefed" startline="109" endline="112">
{
    set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
    set_cpu_cap (c, X86_FEATURE_TSC_RELIABLE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="251" endline="298">
{
    u32 lo, hi;
    if (cpuid_eax (0xC0000000) >= 0xC0000001) {
        u32 tmp = cpuid_edx (0xC0000001);
        if ((tmp & (ACE_PRESENT | ACE_ENABLED)) == ACE_PRESENT) {
            rdmsr (MSR_VIA_FCR, lo, hi);
            lo |= ACE_FCR;
            wrmsr (MSR_VIA_FCR, lo, hi);
            printk (KERN_INFO "CPU: Enabled ACE h/w crypto\n");
        }
        if ((tmp & (RNG_PRESENT | RNG_ENABLED)) == RNG_PRESENT) {
            rdmsr (MSR_VIA_RNG, lo, hi);
            lo |= RNG_ENABLE;
            wrmsr (MSR_VIA_RNG, lo, hi);
            printk (KERN_INFO "CPU: Enabled h/w RNG\n");
        }
        c->x86_capability[5] = cpuid_edx (0xC0000001);
    }
    if (c->x86 == 0x6 && c->x86_model >= 0xf) {
        c->x86_cache_alignment = c->x86_clflush_size * 2;
        set_cpu_cap (c, X86_FEATURE_REP_GOOD);
    }
    display_cacheinfo (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="255" endline="278">
{
    u32 tmp = cpuid_edx (0xC0000001);
    if ((tmp & (ACE_PRESENT | ACE_ENABLED)) == ACE_PRESENT) {
        rdmsr (MSR_VIA_FCR, lo, hi);
        lo |= ACE_FCR;
        wrmsr (MSR_VIA_FCR, lo, hi);
        printk (KERN_INFO "CPU: Enabled ACE h/w crypto\n");
    }
    if ((tmp & (RNG_PRESENT | RNG_ENABLED)) == RNG_PRESENT) {
        rdmsr (MSR_VIA_RNG, lo, hi);
        lo |= RNG_ENABLE;
        wrmsr (MSR_VIA_RNG, lo, hi);
        printk (KERN_INFO "CPU: Enabled h/w RNG\n");
    }
    c->x86_capability[5] = cpuid_edx (0xC0000001);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="259" endline="264">
{
    rdmsr (MSR_VIA_FCR, lo, hi);
    lo |= ACE_FCR;
    wrmsr (MSR_VIA_FCR, lo, hi);
    printk (KERN_INFO "CPU: Enabled ACE h/w crypto\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="267" endline="272">
{
    rdmsr (MSR_VIA_RNG, lo, hi);
    lo |= RNG_ENABLE;
    wrmsr (MSR_VIA_RNG, lo, hi);
    printk (KERN_INFO "CPU: Enabled h/w RNG\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="292" endline="295">
{
    c->x86_cache_alignment = c->x86_clflush_size * 2;
    set_cpu_cap (c, X86_FEATURE_REP_GOOD);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="322" endline="338">
{
    switch (c->x86) {
    case 6 :
        if (c->x86_model >= 0xf)
            set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="323" endline="334">
{
case 6 :
    if (c->x86_model >= 0xf)
        set_cpu_cap (c, X86_FEATURE_CONSTANT_TSC);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="341" endline="469">
{
    early_init_centaur (c);
    switch (c->x86) {
    case 6 :
        init_c3 (c);
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="356" endline="465">
{
case 6 :
    init_c3 (c);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/centaur.c.ifdefed" startline="473" endline="489">
{
    return size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce.c.ifdefed" startline="50" endline="53">
{
    printk (KERN_ERR "CPU#%d: Unexpected int18 (Machine Check).\n", smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce.c.ifdefed" startline="2014" endline="2041">
{
    if (mce_disabled)
        return;
    switch (c->x86_vendor) {
    case X86_VENDOR_AMD :
        amd_mcheck_init (c);
        break;
    case X86_VENDOR_INTEL :
        if (c->x86 == 5)
            intel_p5_mcheck_init (c);
        if (c->x86 == 6)
            intel_p6_mcheck_init (c);
        if (c->x86 == 15)
            intel_p4_mcheck_init (c);
        break;
    case X86_VENDOR_CENTAUR :
        if (c->x86 == 5)
            winchip_mcheck_init (c);
        break;
    default :
        break;
    }
    printk (KERN_INFO "mce: CPU supports %d MCE banks\n", nr_mce_banks);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce.c.ifdefed" startline="2018" endline="2039">
{
case X86_VENDOR_AMD :
    amd_mcheck_init (c);
    break;
case X86_VENDOR_INTEL :
    if (c->x86 == 5)
        intel_p5_mcheck_init (c);
    if (c->x86 == 6)
        intel_p6_mcheck_init (c);
    if (c->x86 == 15)
        intel_p4_mcheck_init (c);
    break;
case X86_VENDOR_CENTAUR :
    if (c->x86 == 5)
        winchip_mcheck_init (c);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce.c.ifdefed" startline="2044" endline="2047">
{
    mce_p5_enabled = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce.c.ifdefed" startline="2056" endline="2059">
{
    mce_disabled = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="97" endline="124">
{
    struct thresh_restart *tr = _tr;
    u32 mci_misc_hi, mci_misc_lo;
    rdmsr (tr -> b -> address, mci_misc_lo, mci_misc_hi);
    if (tr->b->threshold_limit < (mci_misc_hi & THRESHOLD_MAX))
        tr->reset = 1;
    if (tr->reset) {
        mci_misc_hi = (mci_misc_hi & ~(MASK_ERR_COUNT_HI | MASK_OVERFLOW_HI)) | (THRESHOLD_MAX - tr->b->threshold_limit);
    }
    else if (tr->old_limit) {
        int new_count = (mci_misc_hi & THRESHOLD_MAX) + (tr->old_limit - tr->b->threshold_limit);
        mci_misc_hi = (mci_misc_hi & ~MASK_ERR_COUNT_HI) | (new_count & THRESHOLD_MAX);
    }
    tr->b->interrupt_enable ? (mci_misc_hi = (mci_misc_hi & ~MASK_INT_TYPE_HI) | INT_TYPE_APIC) : (mci_misc_hi &= ~MASK_INT_TYPE_HI);
    mci_misc_hi |= MASK_COUNT_EN_HI;
    wrmsr (tr -> b -> address, mci_misc_lo, mci_misc_hi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="106" endline="110">
{
    mci_misc_hi = (mci_misc_hi & ~(MASK_ERR_COUNT_HI | MASK_OVERFLOW_HI)) | (THRESHOLD_MAX - tr->b->threshold_limit);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="110" endline="116">
{
    int new_count = (mci_misc_hi & THRESHOLD_MAX) + (tr->old_limit - tr->b->threshold_limit);
    mci_misc_hi = (mci_misc_hi & ~MASK_ERR_COUNT_HI) | (new_count & THRESHOLD_MAX);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="128" endline="183">
{
    unsigned int cpu = smp_processor_id ();
    u32 low = 0, high = 0, address = 0;
    unsigned int bank, block;
    struct thresh_restart tr;
    u8 lvt_off;
    for (bank = 0; bank < NR_BANKS; ++bank) {
        for (block = 0; block < NR_BLOCKS; ++block) {
            if (block == 0)
                address = MSR_IA32_MC0_MISC + bank * 4;
            else if (block == 1) {
                address = (low & MASK_BLKPTR_LO) >> 21;
                if (!address)
                    break;
                address += MCG_XBLK_ADDR;
            }
            else
                ++address;
            if (rdmsr_safe (address, &low, &high))
                break;
            if (!(high & MASK_VALID_HI)) {
                if (block)
                    continue;
                else
                    break;
            }
            if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
                continue;
            if (!block)
                per_cpu (bank_map, cpu) |= (1 << bank);
            lvt_off = setup_APIC_eilvt_mce (THRESHOLD_APIC_VECTOR, APIC_EILVT_MSG_FIX, 0);
            high &= ~MASK_LVTOFF_HI;
            high |= lvt_off << 20;
            wrmsr (address, low, high);
            threshold_defaults.address = address;
            tr.b = &threshold_defaults;
            tr.reset = 0;
            tr.old_limit = 0;
            threshold_restart_bank (& tr);
            mce_threshold_vector = amd_threshold_interrupt;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="135" endline="182">
{
    for (block = 0; block < NR_BLOCKS; ++block) {
        if (block == 0)
            address = MSR_IA32_MC0_MISC + bank * 4;
        else if (block == 1) {
            address = (low & MASK_BLKPTR_LO) >> 21;
            if (!address)
                break;
            address += MCG_XBLK_ADDR;
        }
        else
            ++address;
        if (rdmsr_safe (address, &low, &high))
            break;
        if (!(high & MASK_VALID_HI)) {
            if (block)
                continue;
            else
                break;
        }
        if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
            continue;
        if (!block)
            per_cpu (bank_map, cpu) |= (1 << bank);
        lvt_off = setup_APIC_eilvt_mce (THRESHOLD_APIC_VECTOR, APIC_EILVT_MSG_FIX, 0);
        high &= ~MASK_LVTOFF_HI;
        high |= lvt_off << 20;
        wrmsr (address, low, high);
        threshold_defaults.address = address;
        tr.b = &threshold_defaults;
        tr.reset = 0;
        tr.old_limit = 0;
        threshold_restart_bank (& tr);
        mce_threshold_vector = amd_threshold_interrupt;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="136" endline="181">
{
    if (block == 0)
        address = MSR_IA32_MC0_MISC + bank * 4;
    else if (block == 1) {
        address = (low & MASK_BLKPTR_LO) >> 21;
        if (!address)
            break;
        address += MCG_XBLK_ADDR;
    }
    else
        ++address;
    if (rdmsr_safe (address, &low, &high))
        break;
    if (!(high & MASK_VALID_HI)) {
        if (block)
            continue;
        else
            break;
    }
    if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
        continue;
    if (!block)
        per_cpu (bank_map, cpu) |= (1 << bank);
    lvt_off = setup_APIC_eilvt_mce (THRESHOLD_APIC_VECTOR, APIC_EILVT_MSG_FIX, 0);
    high &= ~MASK_LVTOFF_HI;
    high |= lvt_off << 20;
    wrmsr (address, low, high);
    threshold_defaults.address = address;
    tr.b = &threshold_defaults;
    tr.reset = 0;
    tr.old_limit = 0;
    threshold_restart_bank (& tr);
    mce_threshold_vector = amd_threshold_interrupt;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="139" endline="144">
{
    address = (low & MASK_BLKPTR_LO) >> 21;
    if (!address)
        break;
    address += MCG_XBLK_ADDR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="150" endline="155">
{
    if (block)
        continue;
    else
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="195" endline="251">
{
    u32 low = 0, high = 0, address = 0;
    unsigned int bank, block;
    struct mce m;
    mce_setup (& m);
    for (bank = 0; bank < NR_BANKS; ++bank) {
        if (!(per_cpu (bank_map, m.cpu) & (1 << bank)))
            continue;
        for (block = 0; block < NR_BLOCKS; ++block) {
            if (block == 0) {
                address = MSR_IA32_MC0_MISC + bank * 4;
            }
            else if (block == 1) {
                address = (low & MASK_BLKPTR_LO) >> 21;
                if (!address)
                    break;
                address += MCG_XBLK_ADDR;
            }
            else {
                ++address;
            }
            if (rdmsr_safe (address, &low, &high))
                break;
            if (!(high & MASK_VALID_HI)) {
                if (block)
                    continue;
                else
                    break;
            }
            if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
                continue;
            machine_check_poll (MCP_TIMESTAMP, & __get_cpu_var (mce_poll_banks));
            if (high & MASK_OVERFLOW_HI) {
                rdmsrl (address, m.misc);
                rdmsrl (MSR_IA32_MC0_STATUS + bank * 4, m.status);
                m.bank = K8_MCE_THRESHOLD_BASE + bank * NR_BLOCKS + block;
                mce_log (& m);
                return;
            }
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="203" endline="250">
{
    if (!(per_cpu (bank_map, m.cpu) & (1 << bank)))
        continue;
    for (block = 0; block < NR_BLOCKS; ++block) {
        if (block == 0) {
            address = MSR_IA32_MC0_MISC + bank * 4;
        }
        else if (block == 1) {
            address = (low & MASK_BLKPTR_LO) >> 21;
            if (!address)
                break;
            address += MCG_XBLK_ADDR;
        }
        else {
            ++address;
        }
        if (rdmsr_safe (address, &low, &high))
            break;
        if (!(high & MASK_VALID_HI)) {
            if (block)
                continue;
            else
                break;
        }
        if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
            continue;
        machine_check_poll (MCP_TIMESTAMP, & __get_cpu_var (mce_poll_banks));
        if (high & MASK_OVERFLOW_HI) {
            rdmsrl (address, m.misc);
            rdmsrl (MSR_IA32_MC0_STATUS + bank * 4, m.status);
            m.bank = K8_MCE_THRESHOLD_BASE + bank * NR_BLOCKS + block;
            mce_log (& m);
            return;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="206" endline="249">
{
    if (block == 0) {
        address = MSR_IA32_MC0_MISC + bank * 4;
    }
    else if (block == 1) {
        address = (low & MASK_BLKPTR_LO) >> 21;
        if (!address)
            break;
        address += MCG_XBLK_ADDR;
    }
    else {
        ++address;
    }
    if (rdmsr_safe (address, &low, &high))
        break;
    if (!(high & MASK_VALID_HI)) {
        if (block)
            continue;
        else
            break;
    }
    if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
        continue;
    machine_check_poll (MCP_TIMESTAMP, & __get_cpu_var (mce_poll_banks));
    if (high & MASK_OVERFLOW_HI) {
        rdmsrl (address, m.misc);
        rdmsrl (MSR_IA32_MC0_STATUS + bank * 4, m.status);
        m.bank = K8_MCE_THRESHOLD_BASE + bank * NR_BLOCKS + block;
        mce_log (& m);
        return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="207" endline="209">
{
    address = MSR_IA32_MC0_MISC + bank * 4;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="209" endline="214">
{
    address = (low & MASK_BLKPTR_LO) >> 21;
    if (!address)
        break;
    address += MCG_XBLK_ADDR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="214" endline="216">
{
    ++address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="221" endline="226">
{
    if (block)
        continue;
    else
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="239" endline="248">
{
    rdmsrl (address, m.misc);
    rdmsrl (MSR_IA32_MC0_STATUS + bank * 4, m.status);
    m.bank = K8_MCE_THRESHOLD_BASE + bank * NR_BLOCKS + block;
    mce_log (& m);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="273" endline="289">
{
    struct thresh_restart tr;
    unsigned long new;
    if (strict_strtoul (buf, 0, &new) < 0)
        return -EINVAL;
    b->interrupt_enable = !!new;
    tr.b = b;
    tr.reset = 0;
    tr.old_limit = 0;
    smp_call_function_single (b -> cpu, threshold_restart_bank, & tr, 1);
    return size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="293" endline="313">
{
    struct thresh_restart tr;
    unsigned long new;
    if (strict_strtoul (buf, 0, &new) < 0)
        return -EINVAL;
    if (new > THRESHOLD_MAX)
        new = THRESHOLD_MAX;
    if (new < 1)
        new = 1;
    tr.old_limit = b->threshold_limit;
    b->threshold_limit = new;
    tr.b = b;
    tr.reset = 0;
    smp_call_function_single (b -> cpu, threshold_restart_bank, & tr, 1);
    return size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="321" endline="328">
{
    struct threshold_block_cross_cpu *tbcc = _tbcc;
    struct threshold_block *b = tbcc->tb;
    u32 low, high;
    rdmsr (b -> address, low, high);
    tbcc->retval = (high & 0xFFF) - (THRESHOLD_MAX - b->threshold_limit);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="331" endline="336">
{
    struct threshold_block_cross_cpu tbcc = {
        .tb = b,
    };
    smp_call_function_single (b -> cpu, local_error_count_handler, & tbcc, 1);
    return sprintf (buf, "%lx\n", tbcc.retval);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="340" endline="345">
{
    struct thresh_restart tr = {
        .b = b,
        .reset = 1,
        .old_limit = 0
    };
    smp_call_function_single (b -> cpu, threshold_restart_bank, & tr, 1);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="369" endline="377">
{
    struct threshold_block *b = to_block (kobj);
    struct threshold_attr *a = to_attr (attr);
    ssize_t ret;
    ret = a->show ? a->show (b, buf) : -EIO;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="381" endline="389">
{
    struct threshold_block *b = to_block (kobj);
    struct threshold_attr *a = to_attr (attr);
    ssize_t ret;
    ret = a->store ? a->store (b, buf, count) : -EIO;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="405" endline="477">
{
    struct threshold_block *b = NULL;
    u32 low, high;
    int err;
    if ((bank >= NR_BANKS) || (block >= NR_BLOCKS))
        return 0;
    if (rdmsr_safe_on_cpu (cpu, address, &low, &high))
        return 0;
    if (!(high & MASK_VALID_HI)) {
        if (block)
            goto recurse;
        else
            return 0;
    }
    if (!(high & MASK_CNTP_HI) || (high & MASK_LOCKED_HI))
        goto recurse;
    b = kzalloc (sizeof (struct threshold_block), GFP_KERNEL);
    if (!b)
        return -ENOMEM;
    b->block = block;
    b->bank = bank;
    b->cpu = cpu;
    b->address = address;
    b->interrupt_enable = 0;
    b->threshold_limit = THRESHOLD_MAX;
    INIT_LIST_HEAD (& b -> miscj);
    if (per_cpu (threshold_banks, cpu)[bank]->blocks) {
        list_add (& b -> miscj, & per_cpu (threshold_banks, cpu) [bank] -> blocks -> miscj);
    }
    else {
        per_cpu (threshold_banks, cpu)[bank]->blocks = b;
    }
    err = kobject_init_and_add (&b->kobj, &threshold_ktype, per_cpu (threshold_banks, cpu)[bank]->kobj, "misc%i", block);
    if (err)
        goto out_free;
recurse :
    if (!block) {
        address = (low & MASK_BLKPTR_LO) >> 21;
        if (!address)
            return 0;
        address += MCG_XBLK_ADDR;
    }
    else {
        ++address;
    }
    err = allocate_threshold_blocks (cpu, bank, ++block, address);
    if (err)
        goto out_free;
    if (b)
        kobject_uevent (&b->kobj, KOBJ_ADD);
    return err;
out_free :
    if (b) {
        kobject_put (& b -> kobj);
        kfree (b);
    }
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="416" endline="421">
{
    if (block)
        goto recurse;
    else
        return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="440" endline="443">
{
    list_add (& b -> miscj, & per_cpu (threshold_banks, cpu) [bank] -> blocks -> miscj);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="443" endline="445">
{
    per_cpu (threshold_banks, cpu)[bank]->blocks = b;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="453" endline="458">
{
    address = (low & MASK_BLKPTR_LO) >> 21;
    if (!address)
        return 0;
    address += MCG_XBLK_ADDR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="458" endline="460">
{
    ++address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="472" endline="475">
{
    kobject_put (& b -> kobj);
    kfree (b);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="481" endline="484">
{
    return allocate_threshold_blocks (cpu, bank, 0, MSR_IA32_MC0_MISC +bank * 4);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="488" endline="571">
{
    int i, err = 0;
    struct threshold_bank *b = NULL;
    char name [32];
    sprintf (name, "threshold_bank%i", bank);
    b = kzalloc (sizeof (struct threshold_bank), GFP_KERNEL);
    if (!b) {
        err = -ENOMEM;
        goto out;
    }
    if (!alloc_cpumask_var (&b->cpus, GFP_KERNEL)) {
        kfree (b);
        err = -ENOMEM;
        goto out;
    }
    b->kobj = kobject_create_and_add (name, &per_cpu (mce_dev, cpu).kobj);
    if (!b->kobj)
        goto out_free;
    cpumask_setall (b -> cpus);
    per_cpu (threshold_banks, cpu)[bank] = b;
    err = local_allocate_threshold_blocks (cpu, bank);
    if (err)
        goto out_free;
    for_each_cpu (i, b -> cpus)
    {
        if (i == cpu)
            continue;
        err = sysfs_create_link (&per_cpu (mce_dev, i).kobj, b->kobj, name);
        if (err)
            goto out;
        per_cpu (threshold_banks, i)[bank] = b;
    }
    goto out;
out_free :
    per_cpu (threshold_banks, cpu)[bank] = NULL;
    free_cpumask_var (b -> cpus);
    kfree (b);
out :
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="525" endline="528">
{
    err = -ENOMEM;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="529" endline="533">
{
    kfree (b);
    err = -ENOMEM;
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="551" endline="561">
{
    if (i == cpu)
        continue;
    err = sysfs_create_link (&per_cpu (mce_dev, i).kobj, b->kobj, name);
    if (err)
        goto out;
    per_cpu (threshold_banks, i)[bank] = b;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="575" endline="588">
{
    unsigned int bank;
    int err = 0;
    for (bank = 0; bank < NR_BANKS; ++bank) {
        if (!(per_cpu (bank_map, cpu) & (1 << bank)))
            continue;
        err = threshold_create_bank (cpu, bank);
        if (err)
            goto out;
    }
out :
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="579" endline="585">
{
    if (!(per_cpu (bank_map, cpu) & (1 << bank)))
        continue;
    err = threshold_create_bank (cpu, bank);
    if (err)
        goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="598" endline="614">
{
    struct threshold_block *pos = NULL;
    struct threshold_block *tmp = NULL;
    struct threshold_bank *head = per_cpu (threshold_banks, cpu)[bank];
    if (!head)
        return;
    list_for_each_entry_safe (pos, tmp, &head->blocks->miscj, miscj) {
        kobject_put (& pos -> kobj);
        list_del (& pos -> miscj);
        kfree (pos);
    }
    kfree (per_cpu (threshold_banks, cpu) [bank] -> blocks);
    per_cpu (threshold_banks, cpu)[bank]->blocks = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="606" endline="610">
{
    kobject_put (& pos -> kobj);
    list_del (& pos -> miscj);
    kfree (pos);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="617" endline="657">
{
    struct threshold_bank *b;
    char name [32];
    int i = 0;
    b = per_cpu (threshold_banks, cpu)[bank];
    if (!b)
        return;
    if (!b->blocks)
        goto free_out;
    sprintf (name, "threshold_bank%i", bank);
    for_each_cpu (i, b -> cpus)
    {
        if (i == cpu)
            continue;
        sysfs_remove_link (& per_cpu (mce_dev, i).kobj, name);
        per_cpu (threshold_banks, i)[bank] = NULL;
    }
    deallocate_threshold_block (cpu, bank);
free_out :
    kobject_del (b->kobj);
    kobject_put (b -> kobj);
    free_cpumask_var (b -> cpus);
    kfree (b);
    per_cpu (threshold_banks, cpu)[bank] = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="641" endline="647">
{
    if (i == cpu)
        continue;
    sysfs_remove_link (& per_cpu (mce_dev, i).kobj, name);
    per_cpu (threshold_banks, i)[bank] = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="660" endline="668">
{
    unsigned int bank;
    for (bank = 0; bank < NR_BANKS; ++bank) {
        if (!(per_cpu (bank_map, cpu) & (1 << bank)))
            continue;
        threshold_remove_bank (cpu, bank);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="663" endline="667">
{
    if (!(per_cpu (bank_map, cpu) & (1 << bank)))
        continue;
    threshold_remove_bank (cpu, bank);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="673" endline="686">
{
    switch (action) {
    case CPU_ONLINE :
    case CPU_ONLINE_FROZEN :
        threshold_create_device (cpu);
        break;
    case CPU_DEAD :
    case CPU_DEAD_FROZEN :
        threshold_remove_device (cpu);
        break;
    default :
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="674" endline="685">
{
case CPU_ONLINE :
case CPU_ONLINE_FROZEN :
    threshold_create_device (cpu);
    break;
case CPU_DEAD :
case CPU_DEAD_FROZEN :
    threshold_remove_device (cpu);
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="689" endline="702">
{
    unsigned lcpu = 0;

    for_each_online_cpu (lcpu) {
        int err = threshold_create_device (lcpu);
        if (err)
            return err;
    }

    threshold_cpu_callback = amd_64_threshold_cpu_callback;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_amd.c.ifdefed" startline="693" endline="698">
{
    int err = threshold_create_device (lcpu);
    if (err)
        return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/threshold.c.ifdefed" startline="13" endline="16">
{
    printk (KERN_ERR "Unexpected threshold interrupt at vector %x\n", THRESHOLD_APIC_VECTOR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/threshold.c.ifdefed" startline="21" endline="29">
{
    exit_idle ();
    irq_enter ();
    inc_irq_stat (irq_threshold_count);
    mce_threshold_vector ();
    irq_exit ();
    ack_APIC_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="97" endline="127">
{
    unsigned int cpu = smp_processor_id ();
    __u64 tmp_jiffs = get_jiffies_64 ();
    bool was_throttled = __get_cpu_var (thermal_throttle_active);
    bool is_throttled = __get_cpu_var (thermal_throttle_active) = curr;
    if (is_throttled)
        __get_cpu_var (thermal_throttle_count)++;
    if (!(was_throttled ^ is_throttled) && time_before64 (tmp_jiffs, __get_cpu_var (next_check)))
        return 0;
    __get_cpu_var (next_check) = tmp_jiffs + CHECK_INTERVAL;
    if (is_throttled) {
        printk (KERN_CRIT "CPU%d: Temperature above threshold, " "cpu clock throttled (total events = %lu)\n", cpu, __get_cpu_var (thermal_throttle_count));
        add_taint (TAINT_MACHINE_CHECK);
        return 1;
    }
    if (was_throttled) {
        printk (KERN_INFO "CPU%d: Temperature/speed normal\n", cpu);
        return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="113" endline="120">
{
    printk (KERN_CRIT "CPU%d: Temperature above threshold, " "cpu clock throttled (total events = %lu)\n", cpu, __get_cpu_var (thermal_throttle_count));
    add_taint (TAINT_MACHINE_CHECK);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="121" endline="124">
{
    printk (KERN_INFO "CPU%d: Temperature/speed normal\n", cpu);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="212" endline="218">
{
    __u64 msr_val;
    rdmsrl (MSR_IA32_THERM_STATUS, msr_val);
    if (therm_throt_process (msr_val &THERM_STATUS_PROCHOT))
        mce_log_therm_throt_event (msr_val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="221" endline="225">
{
    printk (KERN_ERR "CPU%d: Unexpected LVT TMR interrupt!\n", smp_processor_id ());
    add_taint (TAINT_MACHINE_CHECK);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="230" endline="238">
{
    exit_idle ();
    irq_enter ();
    inc_irq_stat (irq_thermal_count);
    smp_thermal_vector ();
    irq_exit ();
    ack_APIC_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="241" endline="296">
{
    unsigned int cpu = smp_processor_id ();
    int tm2 = 0;
    u32 l, h;
    if (!cpu_has (c, X86_FEATURE_ACPI) || !cpu_has (c, X86_FEATURE_ACC))
        return;
    rdmsr (MSR_IA32_MISC_ENABLE, l, h);
    h = apic_read (APIC_LVTTHMR);
    if ((l & MSR_IA32_MISC_ENABLE_TM1) && (h & APIC_DM_SMI)) {
        printk (KERN_DEBUG "CPU%d: Thermal monitoring handled by SMI\n", cpu);
        return;
    }
    if (cpu_has (c, X86_FEATURE_TM2) && (l & MSR_IA32_MISC_ENABLE_TM2))
        tm2 = 1;
    if (h & APIC_VECTOR_MASK) {
        printk (KERN_DEBUG "CPU%d: Thermal LVT vector (%#x) already installed\n", cpu, (h & APIC_VECTOR_MASK));
        return;
    }
    h = THERMAL_APIC_VECTOR | APIC_DM_FIXED | APIC_LVT_MASKED;
    apic_write (APIC_LVTTHMR, h);
    rdmsr (MSR_IA32_THERM_INTERRUPT, l, h);
    wrmsr (MSR_IA32_THERM_INTERRUPT, l | (THERM_INT_LOW_ENABLE | THERM_INT_HIGH_ENABLE), h);
    smp_thermal_vector = intel_thermal_interrupt;
    rdmsr (MSR_IA32_MISC_ENABLE, l, h);
    wrmsr (MSR_IA32_MISC_ENABLE, l | MSR_IA32_MISC_ENABLE_TM1, h);
    l = apic_read (APIC_LVTTHMR);
    apic_write (APIC_LVTTHMR, l & ~ APIC_LVT_MASKED);
    printk (KERN_INFO "CPU%d: Thermal monitoring enabled (%s)\n", cpu, tm2 ? "TM2" : "TM1");
    atomic_set (& therm_throt_en, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="257" endline="261">
{
    printk (KERN_DEBUG "CPU%d: Thermal monitoring handled by SMI\n", cpu);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/therm_throt.c.ifdefed" startline="267" endline="272">
{
    printk (KERN_DEBUG "CPU%d: Thermal LVT vector (%#x) already installed\n", cpu, (h & APIC_VECTOR_MASK));
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="108" endline="113">
{
    if (m->mcgstatus & MCG_STATUS_EIPV)
        return (m->ip && (m->cs & 3) == 3) ? IN_USER : IN_KERNEL;
    return IN_KERNEL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="116" endline="140">
{
    enum context ctx = error_context (a);
    struct severity *s;
    for (s = severities;; s++) {
        if ((a->status & s->mask) != s->result)
            continue;
        if ((a->mcgstatus & s->mcgmask) != s->mcgres)
            continue;
        if (s->ser == SER_REQUIRED && !mce_ser)
            continue;
        if (s->ser == NO_SER && mce_ser)
            continue;
        if (s->context && ctx != s->context)
            continue;
        if (msg)
            *msg = s->msg;
        s->covered = 1;
        if (s->sev >= MCE_UC_SEVERITY && ctx == IN_KERNEL) {
            if (panic_on_oops || tolerant < 1)
                return MCE_PANIC_SEVERITY;
        }
        return s->sev;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="120" endline="139">
{
    if ((a->status & s->mask) != s->result)
        continue;
    if ((a->mcgstatus & s->mcgmask) != s->mcgres)
        continue;
    if (s->ser == SER_REQUIRED && !mce_ser)
        continue;
    if (s->ser == NO_SER && mce_ser)
        continue;
    if (s->context && ctx != s->context)
        continue;
    if (msg)
        *msg = s->msg;
    s->covered = 1;
    if (s->sev >= MCE_UC_SEVERITY && ctx == IN_KERNEL) {
        if (panic_on_oops || tolerant < 1)
            return MCE_PANIC_SEVERITY;
    }
    return s->sev;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="134" endline="137">
{
    if (panic_on_oops || tolerant < 1)
        return MCE_PANIC_SEVERITY;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="143" endline="147">
{
    if (*pos >= ARRAY_SIZE (severities))
        return NULL;
    return &severities[*pos];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="150" endline="154">
{
    if (++(*pos) >= ARRAY_SIZE (severities))
        return NULL;
    return &severities[*pos];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="157" endline="158">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="161" endline="165">
{
    struct severity *ser = data;
    seq_printf (f, "%d\t%s\n", ser -> covered, ser -> msg);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="175" endline="177">
{
    return seq_open (file, &severities_seq_ops);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="182" endline="187">
{
    int i;
    for (i = 0; i < ARRAY_SIZE (severities); i++)
        severities[i].covered = 0;
    return count;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce-severity.c.ifdefed" startline="197" endline="217">
{
    struct dentry *dmce = NULL, *fseverities_coverage = NULL;
    dmce = debugfs_create_dir ("mce", NULL);
    if (dmce == NULL)
        goto err_out;
    fseverities_coverage = debugfs_create_file ("severities-coverage", 0444, dmce, NULL, &severities_coverage_fops);
    if (fseverities_coverage == NULL)
        goto err_out;
    return 0;
err_out :
    if (fseverities_coverage)
        debugfs_remove (fseverities_coverage);
    if (dmce)
        debugfs_remove (dmce);
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="34" endline="52">
{
    u64 cap;
    if (mce_cmci_disabled || mce_ignore_ce)
        return 0;
    if (boot_cpu_data.x86_vendor != X86_VENDOR_INTEL)
        return 0;
    if (!cpu_has_apic || lapic_get_maxlvt () < 6)
        return 0;
    rdmsrl (MSR_IA32_MCG_CAP, cap);
    *banks = min_t (unsigned, MAX_NR_BANKS, cap &0xff);
    return !!(cap & MCG_CMCI_P);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="61" endline="64">
{
    machine_check_poll (MCP_TIMESTAMP, & __get_cpu_var (mce_banks_owned));
    mce_notify_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="67" endline="72">
{
    if (*hdr == 0)
        printk (KERN_INFO "CPU %d MCA banks", smp_processor_id ());
    *hdr = 1;
    printk (KERN_CONT " %s:%d", type, num);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="80" endline="119">
{
    unsigned long *owned = (void *) &__get_cpu_var (mce_banks_owned);
    unsigned long flags;
    int hdr = 0;
    int i;
    spin_lock_irqsave (& cmci_discover_lock, flags);
    for (i = 0; i < banks; i++) {
        u64 val;
        if (test_bit (i, owned))
            continue;
        rdmsrl (MSR_IA32_MC0_CTL2 + i, val);
        if (val & CMCI_EN) {
            if (test_and_clear_bit (i, owned) || boot)
                print_update ("SHD", &hdr, i);
            __clear_bit (i, __get_cpu_var (mce_poll_banks));
            continue;
        }
        val |= CMCI_EN | CMCI_THRESHOLD;
        wrmsrl (MSR_IA32_MC0_CTL2 + i, val);
        rdmsrl (MSR_IA32_MC0_CTL2 + i, val);
        if (val & CMCI_EN) {
            if (!test_and_set_bit (i, owned) || boot)
                print_update ("CMCI", &hdr, i);
            __clear_bit (i, __get_cpu_var (mce_poll_banks));
        }
        else {
            WARN_ON (! test_bit (i, __get_cpu_var (mce_poll_banks)));
        }
    }
    spin_unlock_irqrestore (& cmci_discover_lock, flags);
    if (hdr)
        printk (KERN_CONT "\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="87" endline="115">
{
    u64 val;
    if (test_bit (i, owned))
        continue;
    rdmsrl (MSR_IA32_MC0_CTL2 + i, val);
    if (val & CMCI_EN) {
        if (test_and_clear_bit (i, owned) || boot)
            print_update ("SHD", &hdr, i);
        __clear_bit (i, __get_cpu_var (mce_poll_banks));
        continue;
    }
    val |= CMCI_EN | CMCI_THRESHOLD;
    wrmsrl (MSR_IA32_MC0_CTL2 + i, val);
    rdmsrl (MSR_IA32_MC0_CTL2 + i, val);
    if (val & CMCI_EN) {
        if (!test_and_set_bit (i, owned) || boot)
            print_update ("CMCI", &hdr, i);
        __clear_bit (i, __get_cpu_var (mce_poll_banks));
    }
    else {
        WARN_ON (! test_bit (i, __get_cpu_var (mce_poll_banks)));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="96" endline="101">
{
    if (test_and_clear_bit (i, owned) || boot)
        print_update ("SHD", &hdr, i);
    __clear_bit (i, __get_cpu_var (mce_poll_banks));
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="108" endline="112">
{
    if (!test_and_set_bit (i, owned) || boot)
        print_update ("CMCI", &hdr, i);
    __clear_bit (i, __get_cpu_var (mce_poll_banks));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="112" endline="114">
{
    WARN_ON (! test_bit (i, __get_cpu_var (mce_poll_banks)));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="126" endline="135">
{
    unsigned long flags;
    int banks;
    if (!mce_available (&current_cpu_data) || !cmci_supported (&banks))
        return;
    local_irq_save (flags);
    machine_check_poll (MCP_TIMESTAMP, & __get_cpu_var (mce_banks_owned));
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="142" endline="161">
{
    unsigned long flags;
    int i;
    int banks;
    u64 val;
    if (!cmci_supported (&banks))
        return;
    spin_lock_irqsave (& cmci_discover_lock, flags);
    for (i = 0; i < banks; i++) {
        if (!test_bit (i, __get_cpu_var (mce_banks_owned)))
            continue;
        rdmsrl (MSR_IA32_MC0_CTL2 + i, val);
        val &= ~(CMCI_EN | CMCI_THRESHOLD_MASK);
        wrmsrl (MSR_IA32_MC0_CTL2 + i, val);
        __clear_bit (i, __get_cpu_var (mce_banks_owned));
    }
    spin_unlock_irqrestore (& cmci_discover_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="151" endline="159">
{
    if (!test_bit (i, __get_cpu_var (mce_banks_owned)))
        continue;
    rdmsrl (MSR_IA32_MC0_CTL2 + i, val);
    val &= ~(CMCI_EN | CMCI_THRESHOLD_MASK);
    wrmsrl (MSR_IA32_MC0_CTL2 + i, val);
    __clear_bit (i, __get_cpu_var (mce_banks_owned));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="168" endline="191">
{
    int banks;
    int cpu;
    cpumask_var_t old;
    if (!cmci_supported (&banks))
        return;
    if (!alloc_cpumask_var (&old, GFP_KERNEL))
        return;
    cpumask_copy (old, & current -> cpus_allowed);

    for_each_online_cpu (cpu) {
        if (cpu == dying)
            continue;
        if (set_cpus_allowed_ptr (current, cpumask_of (cpu)))
            continue;
        if (cmci_supported (&banks))
            cmci_discover (banks, 0);
    }

    set_cpus_allowed_ptr (current, old);
    free_cpumask_var (old);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="179" endline="187">
{
    if (cpu == dying)
        continue;
    if (set_cpus_allowed_ptr (current, cpumask_of (cpu)))
        continue;
    if (cmci_supported (&banks))
        cmci_discover (banks, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="197" endline="201">
{
    int banks;
    if (cmci_supported (&banks))
        cmci_discover (banks, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="204" endline="220">
{
    int banks;
    if (!cmci_supported (&banks))
        return;
    mce_threshold_vector = intel_threshold_interrupt;
    cmci_discover (banks, 1);
    apic_write (APIC_LVTCMCI, THRESHOLD_APIC_VECTOR | APIC_DM_FIXED);
    cmci_recheck ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/mcheck/mce_intel.c.ifdefed" startline="223" endline="226">
{
    intel_init_thermal (c);
    intel_init_cmci ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="30" endline="36">
{
    if (vmware_platform ()) {
        c->x86_hyper_vendor = X86_HYPER_VENDOR_VMWARE;
    }
    else {
        c->x86_hyper_vendor = X86_HYPER_VENDOR_NONE;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="31" endline="33">
{
    c->x86_hyper_vendor = X86_HYPER_VENDOR_VMWARE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="33" endline="35">
{
    c->x86_hyper_vendor = X86_HYPER_VENDOR_NONE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="39" endline="43">
{
    if (boot_cpu_data.x86_hyper_vendor == X86_HYPER_VENDOR_VMWARE)
        return vmware_get_tsc_khz ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="47" endline="52">
{
    if (boot_cpu_data.x86_hyper_vendor == X86_HYPER_VENDOR_VMWARE) {
        vmware_set_feature_bits (c);
        return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="48" endline="51">
{
    vmware_set_feature_bits (c);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/hypervisor.c.ifdefed" startline="55" endline="58">
{
    detect_hypervisor_vendor (c);
    hypervisor_set_feature_bits (c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="12" endline="24">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="54" endline="61">
{
    seq_printf (m, "fpu\t\t: yes\n" "fpu_exception\t: yes\n" "cpuid level\t: %d\n" "wp\t\t: yes\n", c -> cpuid_level);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="65" endline="141">
{
    struct cpuinfo_x86 *c = v;
    unsigned int cpu = 0;
    int i;
    seq_printf (m, "processor\t: %u\n" "vendor_id\t: %s\n" "cpu family\t: %d\n" "model\t\t: %u\n" "model name\t: %s\n", cpu, c -> x86_vendor_id [0] ? c -> x86_vendor_id : "unknown", c -> x86, c -> x86_model, c -> x86_model_id [0] ? c -> x86_model_id : "unknown");
    if (c->x86_mask || c->cpuid_level >= 0)
        seq_printf (m, "stepping\t: %d\n", c->x86_mask);
    else
        seq_printf (m, "stepping\t: unknown\n");
    if (cpu_has (c, X86_FEATURE_TSC)) {
        unsigned int freq = cpufreq_quick_get (cpu);
        if (!freq)
            freq = cpu_khz;
        seq_printf (m, "cpu MHz\t\t: %u.%03u\n", freq / 1000, (freq % 1000));
    }
    if (c->x86_cache_size >= 0)
        seq_printf (m, "cache size\t: %d KB\n", c->x86_cache_size);
    show_cpuinfo_core (m, c, cpu);
    show_cpuinfo_misc (m, c);
    seq_printf (m, "flags\t\t:");
    for (i = 0; i < 32 * NCAPINTS; i++)
        if (cpu_has (c, i) && x86_cap_flags[i] != NULL)
            seq_printf (m, " %s", x86_cap_flags[i]);
    seq_printf (m, "\nbogomips\t: %lu.%02lu\n", c -> loops_per_jiffy / (500000 / HZ), (c -> loops_per_jiffy / (5000 / HZ)) % 100);
    seq_printf (m, "clflush size\t: %u\n", c -> x86_clflush_size);
    seq_printf (m, "power management:");
    for (i = 0; i < 32; i++) {
        if (c->x86_power & (1 << i)) {
            if (i < ARRAY_SIZE (x86_power_flags) && x86_power_flags[i])
                seq_printf (m, "%s%s", x86_power_flags[i][0] ? " " : "", x86_power_flags[i]);
            else
                seq_printf (m, " [%d]", i);
        }
    }
    seq_printf (m, "\n\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="89" endline="96">
{
    unsigned int freq = cpufreq_quick_get (cpu);
    if (!freq)
        freq = cpu_khz;
    seq_printf (m, "cpu MHz\t\t: %u.%03u\n", freq / 1000, (freq % 1000));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="126" endline="136">
{
    if (c->x86_power & (1 << i)) {
        if (i < ARRAY_SIZE (x86_power_flags) && x86_power_flags[i])
            seq_printf (m, "%s%s", x86_power_flags[i][0] ? " " : "", x86_power_flags[i]);
        else
            seq_printf (m, " [%d]", i);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="127" endline="135">
{
    if (i < ARRAY_SIZE (x86_power_flags) && x86_power_flags[i])
        seq_printf (m, "%s%s", x86_power_flags[i][0] ? " " : "", x86_power_flags[i]);
    else
        seq_printf (m, " [%d]", i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="144" endline="152">
{
    if (*pos == 0)
        *pos = cpumask_first (cpu_online_mask);
    else
        *pos = cpumask_next (*pos - 1, cpu_online_mask);
    if ((*pos) < nr_cpu_ids)
        return &cpu_data (*pos);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="155" endline="158">
{
    (*pos)++;
    return c_start (m, pos);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/cpu/proc.c.ifdefed" startline="161" endline="162">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/topology.c.ifdefed" startline="63" endline="65">
{
    return register_cpu (&per_cpu (cpu_devices, num).cpu, num);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/topology.c.ifdefed" startline="69" endline="81">
{
    int i;
    for_each_present_cpu (i)
    arch_register_cpu (i);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="31" endline="49">
{
    unsigned long pc = instruction_pointer (regs);
    if (!user_mode_vm (regs) && in_lock_functions (pc)) {
        unsigned long *sp = (unsigned long *) regs->sp;
        if (sp[0] >> 22)
            return sp[0];
        if (sp[1] >> 22)
            return sp[1];
    }
    return pc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="37" endline="47">
{
    unsigned long *sp = (unsigned long *) regs->sp;
    if (sp[0] >> 22)
        return sp[0];
    if (sp[1] >> 22)
        return sp[1];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="53" endline="66">
{
    inc_irq_stat (irq0_irqs);
    global_clock_event->event_handler (global_clock_event);
    return IRQ_HANDLED;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="72" endline="114">
{
    int tsc_start, tsc_now;
    int i, no_ctr_free;
    unsigned long evntsel3 = 0, pmc3 = 0, pmc_now = 0;
    unsigned long flags;
    for (i = 0; i < 4; i++)
        if (avail_to_resrv_perfctr_nmi_bit (i))
            break;
    no_ctr_free = (i == 4);
    if (no_ctr_free) {
        WARN (1, KERN_WARNING "Warning: AMD perfctrs busy ... " "cpu_khz value may be incorrect.\n");
        i = 3;
        rdmsrl (MSR_K7_EVNTSEL3, evntsel3);
        wrmsrl (MSR_K7_EVNTSEL3, 0);
        rdmsrl (MSR_K7_PERFCTR3, pmc3);
    }
    else {
        reserve_perfctr_nmi (MSR_K7_PERFCTR0 + i);
        reserve_evntsel_nmi (MSR_K7_EVNTSEL0 + i);
    }
    local_irq_save (flags);
    wrmsrl (MSR_K7_PERFCTR0 + i, 0);
    wrmsrl (MSR_K7_EVNTSEL0 + i, 1 << 22 | 3 << 16 | 0x76);
    rdtscl (tsc_start);
    do {
        rdmsrl (MSR_K7_PERFCTR0 + i, pmc_now);
        tsc_now = get_cycles ();
    }
    while ((tsc_now - tsc_start) < TICK_COUNT);
    local_irq_restore (flags);
    if (no_ctr_free) {
        wrmsrl (MSR_K7_EVNTSEL3, 0);
        wrmsrl (MSR_K7_PERFCTR3, pmc3);
        wrmsrl (MSR_K7_EVNTSEL3, evntsel3);
    }
    else {
        release_perfctr_nmi (MSR_K7_PERFCTR0 + i);
        release_evntsel_nmi (MSR_K7_EVNTSEL0 + i);
    }
    return pmc_now * tsc_khz / (tsc_now - tsc_start);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="82" endline="89">
{
    WARN (1, KERN_WARNING "Warning: AMD perfctrs busy ... " "cpu_khz value may be incorrect.\n");
    i = 3;
    rdmsrl (MSR_K7_EVNTSEL3, evntsel3);
    wrmsrl (MSR_K7_EVNTSEL3, 0);
    rdmsrl (MSR_K7_PERFCTR3, pmc3);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="89" endline="92">
{
    reserve_perfctr_nmi (MSR_K7_PERFCTR0 + i);
    reserve_evntsel_nmi (MSR_K7_EVNTSEL0 + i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="98" endline="101">
{
    rdmsrl (MSR_K7_PERFCTR0 + i, pmc_now);
    tsc_now = get_cycles ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="104" endline="108">
{
    wrmsrl (MSR_K7_EVNTSEL3, 0);
    wrmsrl (MSR_K7_PERFCTR3, pmc3);
    wrmsrl (MSR_K7_EVNTSEL3, evntsel3);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="108" endline="111">
{
    release_perfctr_nmi (MSR_K7_PERFCTR0 + i);
    release_evntsel_nmi (MSR_K7_EVNTSEL0 + i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="123" endline="128">
{
    if (!hpet_enable ())
        setup_pit_timer ();
    setup_irq (0, & irq0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/time_64.c.ifdefed" startline="131" endline="135">
{
    tsc_init ();
    late_time_init = choose_time_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/xsave.c.ifdefed" startline="31" endline="70">
{
    int min_xstate_size = sizeof (struct i387_fxsave_struct) + sizeof (struct xsave_hdr_struct);
    unsigned int magic2;
    int err;
    err = __copy_from_user (fx_sw_user, &buf->sw_reserved[0], sizeof (struct _fpx_sw_bytes));
    if (err)
        return err;
    if (fx_sw_user->magic1 != FP_XSTATE_MAGIC1)
        return -1;
    if (fx_sw_user->xstate_size < min_xstate_size || fx_sw_user->xstate_size > xstate_size || fx_sw_user->xstate_size > fx_sw_user->extended_size)
        return -1;
    err = __get_user (magic2, (__u32 *) (((void *) fpstate) + fx_sw_user->extended_size - FP_XSTATE_MAGIC2_SIZE));
    if (err || magic2 != FP_XSTATE_MAGIC2)
        return -1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/xsave.c.ifdefed" startline="254" endline="275">
{
    int size_extended = (xstate_size - sizeof (struct i387_fxsave_struct)) + FP_XSTATE_MAGIC2_SIZE;
    sig_xstate_size = sizeof (struct _fpstate) + size_extended;
    memset (& fx_sw_reserved, 0, sizeof (fx_sw_reserved));
    fx_sw_reserved.magic1 = FP_XSTATE_MAGIC1;
    fx_sw_reserved.extended_size = sig_xstate_size;
    fx_sw_reserved.xstate_bv = pcntxt_mask;
    fx_sw_reserved.xstate_size = xstate_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/xsave.c.ifdefed" startline="290" endline="301">
{
    if (!cpu_has_xsave)
        return;
    set_in_cr4 (X86_CR4_OSXSAVE);
    xsetbv (XCR_XFEATURE_ENABLED_MASK, pcntxt_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/xsave.c.ifdefed" startline="307" endline="310">
{
    init_xstate_buf = alloc_bootmem (xstate_size);
    init_xstate_buf->i387.mxcsr = MXCSR_DEFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/xsave.c.ifdefed" startline="316" endline="347">
{
    unsigned int eax, ebx, ecx, edx;
    cpuid_count (0xd, 0, & eax, & ebx, & ecx, & edx);
    pcntxt_mask = eax + ((u64) edx << 32);
    if ((pcntxt_mask & XSTATE_FPSSE) != XSTATE_FPSSE) {
        printk (KERN_ERR "FP/SSE not shown under xsave features 0x%llx\n", pcntxt_mask);
        BUG ();
    }
    pcntxt_mask = pcntxt_mask & XCNTXT_MASK;
    xsave_init ();
    cpuid_count (0xd, 0, & eax, & ebx, & ecx, & edx);
    xstate_size = ebx;
    prepare_fx_sw_frame ();
    setup_xstate_init ();
    printk (KERN_INFO "xsave/xrstor: enabled xstate_bv 0x%llx, " "cntxt size 0x%x\n", pcntxt_mask, xstate_size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/xsave.c.ifdefed" startline="322" endline="326">
{
    printk (KERN_ERR "FP/SSE not shown under xsave features 0x%llx\n", pcntxt_mask);
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="69" endline="85">
{
    return false;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="102" endline="124">
{
    const unsigned long goal = __pa (MAX_DMA_ADDRESS);
    return __alloc_bootmem_nopanic (size, align, goal);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="319" endline="321">
{
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="333" endline="346">
{
    size_t reserve = PERCPU_MODULE_RESERVE + PERCPU_DYNAMIC_RESERVE;
    if (!chosen && (!cpu_has_pse || pcpu_need_numa ()))
        return -EINVAL;
    return pcpu_embed_first_chunk (static_size, PERCPU_FIRST_CHUNK_RESERVE, reserve -PERCPU_FIRST_CHUNK_RESERVE, -1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="359" endline="363">
{
    if (pageno < pcpu4k_nr_static_pages)
        return pcpu4k_pages[cpu * pcpu4k_nr_static_pages + pageno];
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="366" endline="368">
{
    populate_extra_pte (addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="371" endline="417">
{
    size_t pages_size;
    unsigned int cpu;
    int i, j;
    ssize_t ret;
    pcpu4k_nr_static_pages = PFN_UP (static_size);
    pages_size = PFN_ALIGN (pcpu4k_nr_static_pages *nr_cpu_ids * sizeof (pcpu4k_pages[0]));
    pcpu4k_pages = alloc_bootmem (pages_size);
    j = 0;
    for_each_possible_cpu (cpu)
    for (i = 0; i < pcpu4k_nr_static_pages; i++) {
        void *ptr;
        ptr = pcpu_alloc_bootmem (cpu, PAGE_SIZE, PAGE_SIZE);
        if (!ptr) {
            pr_warning ("PERCPU: failed to allocate " "4k page for cpu%u\n", cpu);
            goto enomem;
        }
        memcpy (ptr, __per_cpu_load + i * PAGE_SIZE, PAGE_SIZE);
        pcpu4k_pages[j++] = virt_to_page (ptr);
    }
    pr_info ("PERCPU: Allocated %d 4k pages, static data %zu bytes\n", pcpu4k_nr_static_pages, static_size);
    ret = pcpu_setup_first_chunk (pcpu4k_get_page, static_size, PERCPU_FIRST_CHUNK_RESERVE, -1, -1, NULL, pcpu4k_populate_pte);
    goto out_free_ar;
enomem :
    while (--j >= 0)
        free_bootmem (__pa (page_address (pcpu4k_pages[j])), PAGE_SIZE);
    ret = -ENOMEM;
out_free_ar :
    free_bootmem (__pa (pcpu4k_pages), pages_size);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="387" endline="399">
{
    void *ptr;
    ptr = pcpu_alloc_bootmem (cpu, PAGE_SIZE, PAGE_SIZE);
    if (!ptr) {
        pr_warning ("PERCPU: failed to allocate " "4k page for cpu%u\n", cpu);
        goto enomem;
    }
    memcpy (ptr, __per_cpu_load + i * PAGE_SIZE, PAGE_SIZE);
    pcpu4k_pages[j++] = virt_to_page (ptr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="391" endline="395">
{
    pr_warning ("PERCPU: failed to allocate " "4k page for cpu%u\n", cpu);
    goto enomem;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="423" endline="426">
{
    strncpy (pcpu_chosen_alloc, str, sizeof (pcpu_chosen_alloc) - 1);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="430" endline="440">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="443" endline="546">
{
    size_t static_size = __per_cpu_end - __per_cpu_start;
    unsigned int cpu;
    unsigned long delta;
    size_t pcpu_unit_size;
    ssize_t ret;
    pr_info ("NR_CPUS:%d nr_cpumask_bits:%d nr_cpu_ids:%d nr_node_ids:%d\n", NR_CPUS, nr_cpumask_bits, nr_cpu_ids, nr_node_ids);
    ret = -EINVAL;
    if (strlen (pcpu_chosen_alloc)) {
        if (strcmp (pcpu_chosen_alloc, "4k")) {
            if (!strcmp (pcpu_chosen_alloc, "lpage"))
                ret = setup_pcpu_lpage (static_size, true);
            else if (!strcmp (pcpu_chosen_alloc, "embed"))
                ret = setup_pcpu_embed (static_size, true);
            else
                pr_warning ("PERCPU: unknown allocator %s " "specified\n", pcpu_chosen_alloc);
            if (ret < 0)
                pr_warning ("PERCPU: %s allocator failed (%zd), " "falling back to 4k\n", pcpu_chosen_alloc, ret);
        }
    }
    else {
        ret = setup_pcpu_lpage (static_size, false);
        if (ret < 0)
            ret = setup_pcpu_embed (static_size, false);
    }
    if (ret < 0)
        ret = setup_pcpu_4k (static_size);
    if (ret < 0)
        panic ("cannot allocate static percpu area (%zu bytes, err=%zd)", static_size, ret);
    pcpu_unit_size = ret;
    delta = (unsigned long) pcpu_base_addr - (unsigned long) __per_cpu_start;

    for_each_possible_cpu (cpu) {
        per_cpu_offset (cpu) = delta + cpu * pcpu_unit_size;
        per_cpu (this_cpu_off, cpu) = per_cpu_offset (cpu);
        per_cpu (cpu_number, cpu) = cpu;
        setup_percpu_segment (cpu);
        setup_stack_canary_segment (cpu);
        if (cpu == boot_cpu_id)
            switch_to_new_gdt (cpu);
    }

    setup_node_to_cpumask_map ();
    setup_cpu_local_masks ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="459" endline="473">
{
    if (strcmp (pcpu_chosen_alloc, "4k")) {
        if (!strcmp (pcpu_chosen_alloc, "lpage"))
            ret = setup_pcpu_lpage (static_size, true);
        else if (!strcmp (pcpu_chosen_alloc, "embed"))
            ret = setup_pcpu_embed (static_size, true);
        else
            pr_warning ("PERCPU: unknown allocator %s " "specified\n", pcpu_chosen_alloc);
        if (ret < 0)
            pr_warning ("PERCPU: %s allocator failed (%zd), " "falling back to 4k\n", pcpu_chosen_alloc, ret);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="460" endline="472">
{
    if (!strcmp (pcpu_chosen_alloc, "lpage"))
        ret = setup_pcpu_lpage (static_size, true);
    else if (!strcmp (pcpu_chosen_alloc, "embed"))
        ret = setup_pcpu_embed (static_size, true);
    else
        pr_warning ("PERCPU: unknown allocator %s " "specified\n", pcpu_chosen_alloc);
    if (ret < 0)
        pr_warning ("PERCPU: %s allocator failed (%zd), " "falling back to 4k\n", pcpu_chosen_alloc, ret);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="473" endline="477">
{
    ret = setup_pcpu_lpage (static_size, false);
    if (ret < 0)
        ret = setup_pcpu_embed (static_size, false);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/setup_percpu.c.ifdefed" startline="488" endline="522">
{
    per_cpu_offset (cpu) = delta + cpu * pcpu_unit_size;
    per_cpu (this_cpu_off, cpu) = per_cpu_offset (cpu);
    per_cpu (cpu_number, cpu) = cpu;
    setup_percpu_segment (cpu);
    setup_stack_canary_segment (cpu);
    if (cpu == boot_cpu_id)
        switch_to_new_gdt (cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="60" endline="73">
{
    int i;
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *ei = &e820.map[i];
        if (type && ei->type != type)
            continue;
        if (ei->addr >= end || ei->addr + ei->size <= start)
            continue;
        return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="63" endline="71">
{
    struct e820entry *ei = &e820.map[i];
    if (type && ei->type != type)
        continue;
    if (ei->addr >= end || ei->addr + ei->size <= start)
        continue;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="83" endline="108">
{
    int i;
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *ei = &e820.map[i];
        if (type && ei->type != type)
            continue;
        if (ei->addr >= end || ei->addr + ei->size <= start)
            continue;
        if (ei->addr <= start)
            start = ei->addr + ei->size;
        if (start >= end)
            return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="86" endline="106">
{
    struct e820entry *ei = &e820.map[i];
    if (type && ei->type != type)
        continue;
    if (ei->addr >= end || ei->addr + ei->size <= start)
        continue;
    if (ei->addr <= start)
        start = ei->addr + ei->size;
    if (start >= end)
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="115" endline="127">
{
    int x = e820x->nr_map;
    if (x == ARRAY_SIZE (e820x->map)) {
        printk (KERN_ERR "Ooops! Too many entries in the memory map!\n");
        return;
    }
    e820x->map[x].addr = start;
    e820x->map[x].size = size;
    e820x->map[x].type = type;
    e820x->nr_map++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="118" endline="121">
{
    printk (KERN_ERR "Ooops! Too many entries in the memory map!\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="130" endline="132">
{
    __e820_add_region (& e820, start, size, type);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="135" endline="157">
{
    switch (type) {
    case E820_RAM :
    case E820_RESERVED_KERN :
        printk (KERN_CONT "(usable)");
        break;
    case E820_RESERVED :
        printk (KERN_CONT "(reserved)");
        break;
    case E820_ACPI :
        printk (KERN_CONT "(ACPI data)");
        break;
    case E820_NVS :
        printk (KERN_CONT "(ACPI NVS)");
        break;
    case E820_UNUSABLE :
        printk (KERN_CONT "(unusable)");
        break;
    default :
        printk (KERN_CONT "type %u", type);
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="136" endline="156">
{
case E820_RAM :
case E820_RESERVED_KERN :
    printk (KERN_CONT "(usable)");
    break;
case E820_RESERVED :
    printk (KERN_CONT "(reserved)");
    break;
case E820_ACPI :
    printk (KERN_CONT "(ACPI data)");
    break;
case E820_NVS :
    printk (KERN_CONT "(ACPI NVS)");
    break;
case E820_UNUSABLE :
    printk (KERN_CONT "(unusable)");
    break;
default :
    printk (KERN_CONT "type %u", type);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="160" endline="171">
{
    int i;
    for (i = 0; i < e820.nr_map; i++) {
        printk (KERN_INFO " %s: %016Lx - %016Lx ", who, (unsigned long long) e820.map [i].addr, (unsigned long long) (e820.map [i].addr + e820.map [i].size));
        e820_print_type (e820.map [i].type);
        printk (KERN_CONT "\n");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="163" endline="170">
{
    printk (KERN_INFO " %s: %016Lx - %016Lx ", who, (unsigned long long) e820.map [i].addr, (unsigned long long) (e820.map [i].addr + e820.map [i].size));
    e820_print_type (e820.map [i].type);
    printk (KERN_CONT "\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="237" endline="392">
{
    struct change_member {
        struct e820entry *pbios;
        unsigned long long addr;
    };
    static struct change_member change_point_list [2 * E820_X_MAX] __initdata;
    static struct change_member *change_point [2 * E820_X_MAX] __initdata;
    static struct e820entry *overlap_list [E820_X_MAX] __initdata;
    static struct e820entry new_bios [E820_X_MAX] __initdata;
    struct change_member *change_tmp;
    unsigned long current_type, last_type;
    unsigned long long last_addr;
    int chgidx, still_changing;
    int overlap_entries;
    int new_bios_entry;
    int old_nr, new_nr, chg_nr;
    int i;
    if (*pnr_map < 2)
        return -1;
    old_nr = *pnr_map;
    BUG_ON (old_nr > max_nr_map);
    for (i = 0; i < old_nr; i++)
        if (biosmap[i].addr + biosmap[i].size < biosmap[i].addr)
            return -1;
    for (i = 0; i < 2 * old_nr; i++)
        change_point[i] = &change_point_list[i];
    chgidx = 0;
    for (i = 0; i < old_nr; i++) {
        if (biosmap[i].size != 0) {
            change_point[chgidx]->addr = biosmap[i].addr;
            change_point[chgidx++]->pbios = &biosmap[i];
            change_point[chgidx]->addr = biosmap[i].addr + biosmap[i].size;
            change_point[chgidx++]->pbios = &biosmap[i];
        }
    }
    chg_nr = chgidx;
    still_changing = 1;
    while (still_changing) {
        still_changing = 0;
        for (i = 1; i < chg_nr; i++) {
            unsigned long long curaddr, lastaddr;
            unsigned long long curpbaddr, lastpbaddr;
            curaddr = change_point[i]->addr;
            lastaddr = change_point[i - 1]->addr;
            curpbaddr = change_point[i]->pbios->addr;
            lastpbaddr = change_point[i - 1]->pbios->addr;
            if (curaddr < lastaddr || (curaddr == lastaddr && curaddr == curpbaddr && lastaddr != lastpbaddr)) {
                change_tmp = change_point[i];
                change_point[i] = change_point[i - 1];
                change_point[i - 1] = change_tmp;
                still_changing = 1;
            }
        }
    }
    overlap_entries = 0;
    new_bios_entry = 0;
    last_type = 0;
    last_addr = 0;
    for (chgidx = 0; chgidx < chg_nr; chgidx++) {
        if (change_point[chgidx]->addr == change_point[chgidx]->pbios->addr) {
            overlap_list[overlap_entries++] = change_point[chgidx]->pbios;
        }
        else {
            for (i = 0; i < overlap_entries; i++) {
                if (overlap_list[i] == change_point[chgidx]->pbios)
                    overlap_list[i] = overlap_list[overlap_entries - 1];
            }
            overlap_entries--;
        }
        current_type = 0;
        for (i = 0; i < overlap_entries; i++)
            if (overlap_list[i]->type > current_type)
                current_type = overlap_list[i]->type;
        if (current_type != last_type) {
            if (last_type != 0) {
                new_bios[new_bios_entry].size = change_point[chgidx]->addr - last_addr;
                if (new_bios[new_bios_entry].size != 0)
                    if (++new_bios_entry >= max_nr_map)
                        break;
            }
            if (current_type != 0) {
                new_bios[new_bios_entry].addr = change_point[chgidx]->addr;
                new_bios[new_bios_entry].type = current_type;
                last_addr = change_point[chgidx]->addr;
            }
            last_type = current_type;
        }
    }
    new_nr = new_bios_entry;
    memcpy (biosmap, new_bios, new_nr * sizeof (struct e820entry));
    *pnr_map = new_nr;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="274" endline="282">
{
    if (biosmap[i].size != 0) {
        change_point[chgidx]->addr = biosmap[i].addr;
        change_point[chgidx++]->pbios = &biosmap[i];
        change_point[chgidx]->addr = biosmap[i].addr + biosmap[i].size;
        change_point[chgidx++]->pbios = &biosmap[i];
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="275" endline="281">
{
    change_point[chgidx]->addr = biosmap[i].addr;
    change_point[chgidx++]->pbios = &biosmap[i];
    change_point[chgidx]->addr = biosmap[i].addr + biosmap[i].size;
    change_point[chgidx++]->pbios = &biosmap[i];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="287" endline="314">
{
    still_changing = 0;
    for (i = 1; i < chg_nr; i++) {
        unsigned long long curaddr, lastaddr;
        unsigned long long curpbaddr, lastpbaddr;
        curaddr = change_point[i]->addr;
        lastaddr = change_point[i - 1]->addr;
        curpbaddr = change_point[i]->pbios->addr;
        lastpbaddr = change_point[i - 1]->pbios->addr;
        if (curaddr < lastaddr || (curaddr == lastaddr && curaddr == curpbaddr && lastaddr != lastpbaddr)) {
            change_tmp = change_point[i];
            change_point[i] = change_point[i - 1];
            change_point[i - 1] = change_tmp;
            still_changing = 1;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="289" endline="313">
{
    unsigned long long curaddr, lastaddr;
    unsigned long long curpbaddr, lastpbaddr;
    curaddr = change_point[i]->addr;
    lastaddr = change_point[i - 1]->addr;
    curpbaddr = change_point[i]->pbios->addr;
    lastpbaddr = change_point[i - 1]->pbios->addr;
    if (curaddr < lastaddr || (curaddr == lastaddr && curaddr == curpbaddr && lastaddr != lastpbaddr)) {
        change_tmp = change_point[i];
        change_point[i] = change_point[i - 1];
        change_point[i - 1] = change_tmp;
        still_changing = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="307" endline="312">
{
    change_tmp = change_point[i];
    change_point[i] = change_point[i - 1];
    change_point[i - 1] = change_tmp;
    still_changing = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="323" endline="383">
{
    if (change_point[chgidx]->addr == change_point[chgidx]->pbios->addr) {
        overlap_list[overlap_entries++] = change_point[chgidx]->pbios;
    }
    else {
        for (i = 0; i < overlap_entries; i++) {
            if (overlap_list[i] == change_point[chgidx]->pbios)
                overlap_list[i] = overlap_list[overlap_entries - 1];
        }
        overlap_entries--;
    }
    current_type = 0;
    for (i = 0; i < overlap_entries; i++)
        if (overlap_list[i]->type > current_type)
            current_type = overlap_list[i]->type;
    if (current_type != last_type) {
        if (last_type != 0) {
            new_bios[new_bios_entry].size = change_point[chgidx]->addr - last_addr;
            if (new_bios[new_bios_entry].size != 0)
                if (++new_bios_entry >= max_nr_map)
                    break;
        }
        if (current_type != 0) {
            new_bios[new_bios_entry].addr = change_point[chgidx]->addr;
            new_bios[new_bios_entry].type = current_type;
            last_addr = change_point[chgidx]->addr;
        }
        last_type = current_type;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="326" endline="333">
{
    overlap_list[overlap_entries++] = change_point[chgidx]->pbios;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="333" endline="345">
{
    for (i = 0; i < overlap_entries; i++) {
        if (overlap_list[i] == change_point[chgidx]->pbios)
            overlap_list[i] = overlap_list[overlap_entries - 1];
    }
    overlap_entries--;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="338" endline="343">
{
    if (overlap_list[i] == change_point[chgidx]->pbios)
        overlap_list[i] = overlap_list[overlap_entries - 1];
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="359" endline="382">
{
    if (last_type != 0) {
        new_bios[new_bios_entry].size = change_point[chgidx]->addr - last_addr;
        if (new_bios[new_bios_entry].size != 0)
            if (++new_bios_entry >= max_nr_map)
                break;
    }
    if (current_type != 0) {
        new_bios[new_bios_entry].addr = change_point[chgidx]->addr;
        new_bios[new_bios_entry].type = current_type;
        last_addr = change_point[chgidx]->addr;
    }
    last_type = current_type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="360" endline="374">
{
    new_bios[new_bios_entry].size = change_point[chgidx]->addr - last_addr;
    if (new_bios[new_bios_entry].size != 0)
        if (++new_bios_entry >= max_nr_map)
            break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="375" endline="380">
{
    new_bios[new_bios_entry].addr = change_point[chgidx]->addr;
    new_bios[new_bios_entry].type = current_type;
    last_addr = change_point[chgidx]->addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="395" endline="412">
{
    while (nr_map) {
        u64 start = biosmap->addr;
        u64 size = biosmap->size;
        u64 end = start + size;
        u32 type = biosmap->type;
        if (start > end)
            return -1;
        e820_add_region (start, size, type);
        biosmap++;
        nr_map--;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="396" endline="410">
{
    u64 start = biosmap->addr;
    u64 size = biosmap->size;
    u64 end = start + size;
    u32 type = biosmap->type;
    if (start > end)
        return -1;
    e820_add_region (start, size, type);
    biosmap++;
    nr_map--;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="424" endline="430">
{
    if (nr_map < 2)
        return -1;
    return __append_e820_map (biosmap, nr_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="435" endline="500">
{
    u64 end;
    unsigned int i;
    u64 real_updated_size = 0;
    BUG_ON (old_type == new_type);
    if (size > (ULLONG_MAX - start))
        size = ULLONG_MAX - start;
    end = start + size;
    printk (KERN_DEBUG "e820 update range: %016Lx - %016Lx ", (unsigned long long) start, (unsigned long long) end);
    e820_print_type (old_type);
    printk (KERN_CONT " ==> ");
    e820_print_type (new_type);
    printk (KERN_CONT "\n");
    for (i = 0; i < e820x->nr_map; i++) {
        struct e820entry *ei = &e820x->map[i];
        u64 final_start, final_end;
        u64 ei_end;
        if (ei->type != old_type)
            continue;
        ei_end = ei->addr + ei->size;
        if (ei->addr >= start && ei_end <= end) {
            ei->type = new_type;
            real_updated_size += ei->size;
            continue;
        }
        if (ei->addr < start && ei_end > end) {
            __e820_add_region (e820x, start, size, new_type);
            __e820_add_region (e820x, end, ei_end - end, ei -> type);
            ei->size = start - ei->addr;
            real_updated_size += size;
            continue;
        }
        final_start = max (start, ei->addr);
        final_end = min (end, ei_end);
        if (final_start >= final_end)
            continue;
        __e820_add_region (e820x, final_start, final_end - final_start, new_type);
        real_updated_size += final_end - final_start;
        ei->size -= final_end - final_start;
        if (ei->addr < final_start)
            continue;
        ei->addr = final_end;
    }
    return real_updated_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="454" endline="498">
{
    struct e820entry *ei = &e820x->map[i];
    u64 final_start, final_end;
    u64 ei_end;
    if (ei->type != old_type)
        continue;
    ei_end = ei->addr + ei->size;
    if (ei->addr >= start && ei_end <= end) {
        ei->type = new_type;
        real_updated_size += ei->size;
        continue;
    }
    if (ei->addr < start && ei_end > end) {
        __e820_add_region (e820x, start, size, new_type);
        __e820_add_region (e820x, end, ei_end - end, ei -> type);
        ei->size = start - ei->addr;
        real_updated_size += size;
        continue;
    }
    final_start = max (start, ei->addr);
    final_end = min (end, ei_end);
    if (final_start >= final_end)
        continue;
    __e820_add_region (e820x, final_start, final_end - final_start, new_type);
    real_updated_size += final_end - final_start;
    ei->size -= final_end - final_start;
    if (ei->addr < final_start)
        continue;
    ei->addr = final_end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="464" endline="468">
{
    ei->type = new_type;
    real_updated_size += ei->size;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="471" endline="477">
{
    __e820_add_region (e820x, start, size, new_type);
    __e820_add_region (e820x, end, ei_end - end, ei -> type);
    ei->size = start - ei->addr;
    real_updated_size += size;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="504" endline="506">
{
    return __e820_update_range (&e820, start, size, old_type, new_type);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="510" endline="513">
{
    return __e820_update_range (&e820_saved, start, size, old_type, new_type);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="518" endline="551">
{
    int i;
    u64 real_removed_size = 0;
    if (size > (ULLONG_MAX - start))
        size = ULLONG_MAX - start;
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *ei = &e820.map[i];
        u64 final_start, final_end;
        if (checktype && ei->type != old_type)
            continue;
        if (ei->addr >= start && (ei->addr + ei->size) <= (start + size)) {
            real_removed_size += ei->size;
            memset (ei, 0, sizeof (struct e820entry));
            continue;
        }
        final_start = max (start, ei->addr);
        final_end = min (start +size, ei->addr + ei->size);
        if (final_start >= final_end)
            continue;
        real_removed_size += final_end - final_start;
        ei->size -= final_end - final_start;
        if (ei->addr < final_start)
            continue;
        ei->addr = final_end;
    }
    return real_removed_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="525" endline="549">
{
    struct e820entry *ei = &e820.map[i];
    u64 final_start, final_end;
    if (checktype && ei->type != old_type)
        continue;
    if (ei->addr >= start && (ei->addr + ei->size) <= (start + size)) {
        real_removed_size += ei->size;
        memset (ei, 0, sizeof (struct e820entry));
        continue;
    }
    final_start = max (start, ei->addr);
    final_end = min (start +size, ei->addr + ei->size);
    if (final_start >= final_end)
        continue;
    real_removed_size += final_end - final_start;
    ei->size -= final_end - final_start;
    if (ei->addr < final_start)
        continue;
    ei->addr = final_end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="533" endline="537">
{
    real_removed_size += ei->size;
    memset (ei, 0, sizeof (struct e820entry));
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="554" endline="563">
{
    u32 nr_map;
    nr_map = e820.nr_map;
    if (sanitize_e820_map (e820.map, ARRAY_SIZE (e820.map), &nr_map))
        return;
    e820.nr_map = nr_map;
    printk (KERN_INFO "modified physical RAM map:\n");
    e820_print_map ("modified");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="565" endline="572">
{
    u32 nr_map;
    nr_map = e820_saved.nr_map;
    if (sanitize_e820_map (e820_saved.map, ARRAY_SIZE (e820_saved.map), &nr_map))
        return;
    e820_saved.nr_map = nr_map;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="579" endline="610">
{
    unsigned long long last;
    int i = e820.nr_map;
    int found = 0;
    last = (end_addr && end_addr < MAX_GAP_END) ? end_addr : MAX_GAP_END;
    while (--i >= 0) {
        unsigned long long start = e820.map[i].addr;
        unsigned long long end = start + e820.map[i].size;
        if (end < start_addr)
            continue;
        if (last > end) {
            unsigned long gap = last - end;
            if (gap >= *gapsize) {
                *gapsize = gap;
                *gapstart = end;
                found = 1;
            }
        }
        if (start < last)
            last = start;
    }
    return found;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="586" endline="608">
{
    unsigned long long start = e820.map[i].addr;
    unsigned long long end = start + e820.map[i].size;
    if (end < start_addr)
        continue;
    if (last > end) {
        unsigned long gap = last - end;
        if (gap >= *gapsize) {
            *gapsize = gap;
            *gapstart = end;
            found = 1;
        }
    }
    if (start < last)
        last = start;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="597" endline="605">
{
    unsigned long gap = last - end;
    if (gap >= *gapsize) {
        *gapsize = gap;
        *gapstart = end;
        found = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="600" endline="604">
{
    *gapsize = gap;
    *gapstart = end;
    found = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="619" endline="644">
{
    unsigned long gapstart, gapsize;
    int found;
    gapstart = 0x10000000;
    gapsize = 0x400000;
    found = e820_search_gap (&gapstart, &gapsize, 0, MAX_GAP_END);
    pci_mem_start = gapstart;
    printk (KERN_INFO "Allocating PCI resources starting at %lx (gap: %lx:%lx)\n", pci_mem_start, gapstart, gapsize);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="653" endline="669">
{
    u32 map_len;
    int entries;
    struct e820entry *extmap;
    entries = sdata->len / sizeof (struct e820entry);
    map_len = sdata->len + sizeof (struct setup_data);
    if (map_len > PAGE_SIZE)
        sdata = early_ioremap (pa_data, map_len);
    extmap = (struct e820entry *) (sdata->data);
    __append_e820_map (extmap, entries);
    sanitize_e820_map (e820.map, ARRAY_SIZE (e820.map), & e820.nr_map);
    if (map_len > PAGE_SIZE)
        early_iounmap (sdata, map_len);
    printk (KERN_INFO "extended physical RAM map:\n");
    e820_print_map ("extended");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="740" endline="751">
{
    int i;
    struct early_res *r;
    for (i = 0; i < MAX_EARLY_RES && early_res[i].end; i++) {
        r = &early_res[i];
        if (end > r->start && start < r->end)
            break;
    }
    return i;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="744" endline="748">
{
    r = &early_res[i];
    if (end > r->start && start < r->end)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="759" endline="769">
{
    int j;
    for (j = i + 1; j < MAX_EARLY_RES && early_res[j].end; j++)
        ;
    memmove (& early_res [i], & early_res [i + 1], (j - 1 - i) * sizeof (struct early_res));
    early_res[j - 1].end = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="782" endline="836">
{
    int i;
    struct early_res *r;
    u64 lower_start, lower_end;
    u64 upper_start, upper_end;
    char name [16];
    for (i = 0; i < MAX_EARLY_RES && early_res[i].end; i++) {
        r = &early_res[i];
        if (end <= r->start || start >= r->end)
            continue;
        if (!r->overlap_ok)
            return;
        strncpy (name, r -> name, sizeof (name) - 1);
        lower_start = lower_end = 0;
        upper_start = upper_end = 0;
        if (r->start < start) {
            lower_start = r->start;
            lower_end = start;
        }
        if (r->end > end) {
            upper_start = end;
            upper_end = r->end;
        }
        drop_range (i);
        i--;
        if (lower_end)
            reserve_early_overlap_ok (lower_start, lower_end, name);
        if (upper_end)
            reserve_early_overlap_ok (upper_start, upper_end, name);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="789" endline="835">
{
    r = &early_res[i];
    if (end <= r->start || start >= r->end)
        continue;
    if (!r->overlap_ok)
        return;
    strncpy (name, r -> name, sizeof (name) - 1);
    lower_start = lower_end = 0;
    upper_start = upper_end = 0;
    if (r->start < start) {
        lower_start = r->start;
        lower_end = start;
    }
    if (r->end > end) {
        upper_start = end;
        upper_end = r->end;
    }
    drop_range (i);
    i--;
    if (lower_end)
        reserve_early_overlap_ok (lower_start, lower_end, name);
    if (upper_end)
        reserve_early_overlap_ok (upper_start, upper_end, name);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="816" endline="819">
{
    lower_start = r->start;
    lower_end = start;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="820" endline="823">
{
    upper_start = end;
    upper_end = r->end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="840" endline="858">
{
    int i;
    struct early_res *r;
    i = find_overlapped_early (start, end);
    if (i >= MAX_EARLY_RES)
        panic ("Too many early reservations");
    r = &early_res[i];
    if (r->end)
        panic ("Overlapping early reservations " "%llx-%llx %s to %llx-%llx %s\n", start, end -1, name ? name : "", r->start, r->end - 1, r->name);
    r->start = start;
    r->end = end;
    r->overlap_ok = overlap_ok;
    if (name)
        strncpy (r->name, name, sizeof (r->name) - 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="881" endline="884">
{
    drop_overlaps_that_are_ok (start, end);
    __reserve_early (start, end, name, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="895" endline="901">
{
    if (start >= end)
        return;
    drop_overlaps_that_are_ok (start, end);
    __reserve_early (start, end, name, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="904" endline="915">
{
    struct early_res *r;
    int i;
    i = find_overlapped_early (start, end);
    r = &early_res[i];
    if (i >= MAX_EARLY_RES || r->end != end || r->start != start)
        panic ("free_early on not reserved area: %llx-%llx!", start, end -1);
    drop_range (i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="918" endline="943">
{
    int i, count;
    u64 final_start, final_end;
    count = 0;
    for (i = 0; i < MAX_EARLY_RES && early_res[i].end; i++)
        count++;
    printk (KERN_INFO "(%d early reservations) ==> bootmem [%010llx - %010llx]\n", count, start, end);
    for (i = 0; i < count; i++) {
        struct early_res *r = &early_res[i];
        printk (KERN_INFO "  #%d [%010llx - %010llx] %16s", i, r -> start, r -> end, r -> name);
        final_start = max (start, r->start);
        final_end = min (end, r->end);
        if (final_start >= final_end) {
            printk (KERN_CONT "\n");
            continue;
        }
        printk (KERN_CONT " ==> [%010llx - %010llx]\n", final_start, final_end);
        reserve_bootmem_generic (final_start, final_end - final_start, BOOTMEM_DEFAULT);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="928" endline="942">
{
    struct early_res *r = &early_res[i];
    printk (KERN_INFO "  #%d [%010llx - %010llx] %16s", i, r -> start, r -> end, r -> name);
    final_start = max (start, r->start);
    final_end = min (end, r->end);
    if (final_start >= final_end) {
        printk (KERN_CONT "\n");
        continue;
    }
    printk (KERN_CONT " ==> [%010llx - %010llx]\n", final_start, final_end);
    reserve_bootmem_generic (final_start, final_end - final_start, BOOTMEM_DEFAULT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="934" endline="937">
{
    printk (KERN_CONT "\n");
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="947" endline="961">
{
    int i;
    u64 addr = *addrp;
    int changed = 0;
    struct early_res *r;
again :
    i = find_overlapped_early (addr, addr +size);
    r = &early_res[i];
    if (i < MAX_EARLY_RES && r->end) {
        *addrp = addr = round_up (r->end, align);
        changed = 1;
        goto again;
    }
    return changed;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="955" endline="959">
{
    *addrp = addr = round_up (r->end, align);
    changed = 1;
    goto again;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="965" endline="995">
{
    int i;
    u64 addr = *addrp, last;
    u64 size = *sizep;
    int changed = 0;
again :
    last = addr + size;
    for (i = 0; i < MAX_EARLY_RES && early_res[i].end; i++) {
        struct early_res *r = &early_res[i];
        if (last > r->start && addr < r->start) {
            size = r->start - addr;
            changed = 1;
            goto again;
        }
        if (last > r->end && addr < r->end) {
            addr = round_up (r->end, align);
            size = last - addr;
            changed = 1;
            goto again;
        }
        if (last <= r->end && addr >= r->start) {
            (*sizep)++;
            return 0;
        }
    }
    if (changed) {
        *addrp = addr;
        *sizep = size;
    }
    return changed;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="972" endline="989">
{
    struct early_res *r = &early_res[i];
    if (last > r->start && addr < r->start) {
        size = r->start - addr;
        changed = 1;
        goto again;
    }
    if (last > r->end && addr < r->end) {
        addr = round_up (r->end, align);
        size = last - addr;
        changed = 1;
        goto again;
    }
    if (last <= r->end && addr >= r->start) {
        (*sizep)++;
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="974" endline="978">
{
    size = r->start - addr;
    changed = 1;
    goto again;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="979" endline="984">
{
    addr = round_up (r->end, align);
    size = last - addr;
    changed = 1;
    goto again;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="985" endline="988">
{
    (*sizep)++;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="990" endline="993">
{
    *addrp = addr;
    *sizep = size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1001" endline="1027">
{
    int i;
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *ei = &e820.map[i];
        u64 addr, last;
        u64 ei_last;
        if (ei->type != E820_RAM)
            continue;
        addr = round_up (ei->addr, align);
        ei_last = ei->addr + ei->size;
        if (addr < start)
            addr = round_up (start, align);
        if (addr >= ei_last)
            continue;
        while (bad_addr (&addr, size, align) && addr + size <= ei_last)
            ;
        last = addr + size;
        if (last > ei_last)
            continue;
        if (last > end)
            continue;
        return addr;
    }
    return -1ULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1004" endline="1025">
{
    struct e820entry *ei = &e820.map[i];
    u64 addr, last;
    u64 ei_last;
    if (ei->type != E820_RAM)
        continue;
    addr = round_up (ei->addr, align);
    ei_last = ei->addr + ei->size;
    if (addr < start)
        addr = round_up (start, align);
    if (addr >= ei_last)
        continue;
    while (bad_addr (&addr, size, align) && addr + size <= ei_last)
        ;
    last = addr + size;
    if (last > ei_last)
        continue;
    if (last > end)
        continue;
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1033" endline="1060">
{
    int i;
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *ei = &e820.map[i];
        u64 addr, last;
        u64 ei_last;
        if (ei->type != E820_RAM)
            continue;
        addr = round_up (ei->addr, align);
        ei_last = ei->addr + ei->size;
        if (addr < start)
            addr = round_up (start, align);
        if (addr >= ei_last)
            continue;
        *sizep = ei_last - addr;
        while (bad_addr_size (&addr, sizep, align) && addr + *sizep <= ei_last)
            ;
        last = addr + *sizep;
        if (last > ei_last)
            continue;
        return addr;
    }
    return -1ULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1036" endline="1057">
{
    struct e820entry *ei = &e820.map[i];
    u64 addr, last;
    u64 ei_last;
    if (ei->type != E820_RAM)
        continue;
    addr = round_up (ei->addr, align);
    ei_last = ei->addr + ei->size;
    if (addr < start)
        addr = round_up (start, align);
    if (addr >= ei_last)
        continue;
    *sizep = ei_last - addr;
    while (bad_addr_size (&addr, sizep, align) && addr + *sizep <= ei_last)
        ;
    last = addr + *sizep;
    if (last > ei_last)
        continue;
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1066" endline="1096">
{
    u64 size = 0;
    u64 addr;
    u64 start;
    for (start = startt;; start += size) {
        start = find_e820_area_size (start, &size, align);
        if (!(start + 1))
            return 0;
        if (size >= sizet)
            break;
    }
    addr = round_down (start +size - sizet, align);
    if (addr < start)
        return 0;
    e820_update_range (addr, sizet, E820_RAM, E820_RESERVED);
    e820_update_range_saved (addr, sizet, E820_RAM, E820_RESERVED);
    printk (KERN_INFO "update e820 for early_reserve_e820\n");
    update_e820 ();
    update_e820_saved ();
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1071" endline="1077">
{
    start = find_e820_area_size (start, &size, align);
    if (!(start + 1))
        return 0;
    if (size >= sizet)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1112" endline="1144">
{
    int i;
    unsigned long last_pfn = 0;
    unsigned long max_arch_pfn = MAX_ARCH_PFN;
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *ei = &e820.map[i];
        unsigned long start_pfn;
        unsigned long end_pfn;
        if (ei->type != type)
            continue;
        start_pfn = ei->addr >> PAGE_SHIFT;
        end_pfn = (ei->addr + ei->size) >> PAGE_SHIFT;
        if (start_pfn >= limit_pfn)
            continue;
        if (end_pfn > limit_pfn) {
            last_pfn = limit_pfn;
            break;
        }
        if (end_pfn > last_pfn)
            last_pfn = end_pfn;
    }
    if (last_pfn > max_arch_pfn)
        last_pfn = max_arch_pfn;
    printk (KERN_INFO "last_pfn = %#lx max_arch_pfn = %#lx\n", last_pfn, max_arch_pfn);
    return last_pfn;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1117" endline="1136">
{
    struct e820entry *ei = &e820.map[i];
    unsigned long start_pfn;
    unsigned long end_pfn;
    if (ei->type != type)
        continue;
    start_pfn = ei->addr >> PAGE_SHIFT;
    end_pfn = (ei->addr + ei->size) >> PAGE_SHIFT;
    if (start_pfn >= limit_pfn)
        continue;
    if (end_pfn > limit_pfn) {
        last_pfn = limit_pfn;
        break;
    }
    if (end_pfn > last_pfn)
        last_pfn = end_pfn;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1130" endline="1133">
{
    last_pfn = limit_pfn;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1146" endline="1148">
{
    return e820_end_pfn (MAX_ARCH_PFN, E820_RAM);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1151" endline="1153">
{
    return e820_end_pfn (1UL << (32 - PAGE_SHIFT), E820_RAM);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1163" endline="1185">
{
    u64 align = PAGE_SIZE;
    *ei_startpfn = round_up (ei->addr, align) >> PAGE_SHIFT;
    *ei_endpfn = round_down (ei->addr + ei->size, align) >> PAGE_SHIFT;
    if (*ei_startpfn >= *ei_endpfn)
        return 0;
    if (ei->type != E820_RAM || *ei_endpfn <= start_pfn || *ei_startpfn >= last_pfn)
        return 0;
    if (*ei_startpfn < start_pfn)
        *ei_startpfn = start_pfn;
    if (*ei_endpfn > last_pfn)
        *ei_endpfn = last_pfn;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1190" endline="1200">
{
    unsigned long ei_startpfn;
    unsigned long ei_endpfn;
    int i;
    for (i = 0; i < e820.nr_map; i++)
        if (e820_find_active_region (&e820.map[i], start_pfn, last_pfn, &ei_startpfn, &ei_endpfn))
            add_active_range (nid, ei_startpfn, ei_endpfn);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1208" endline="1221">
{
    unsigned long start_pfn = start >> PAGE_SHIFT;
    unsigned long last_pfn = end >> PAGE_SHIFT;
    unsigned long ei_startpfn, ei_endpfn, ram = 0;
    int i;
    for (i = 0; i < e820.nr_map; i++) {
        if (e820_find_active_region (&e820.map[i], start_pfn, last_pfn, &ei_startpfn, &ei_endpfn))
            ram += ei_endpfn - ei_startpfn;
    }
    return end - start - ((u64) ram << PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1214" endline="1219">
{
    if (e820_find_active_region (&e820.map[i], start_pfn, last_pfn, &ei_startpfn, &ei_endpfn))
        ram += ei_endpfn - ei_startpfn;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1224" endline="1227">
{
    early_printk (msg);
    panic (msg);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1233" endline="1251">
{
    u64 mem_size;
    if (!p)
        return -EINVAL;
    userdef = 1;
    mem_size = memparse (p, &p);
    e820_remove_range (mem_size, ULLONG_MAX - mem_size, E820_RAM, 1);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1255" endline="1295">
{
    char *oldp;
    u64 start_at, mem_size;
    if (!p)
        return -EINVAL;
    if (!strncmp (p, "exactmap", 8)) {
        e820.nr_map = 0;
        userdef = 1;
        return 0;
    }
    oldp = p;
    mem_size = memparse (p, &p);
    if (p == oldp)
        return -EINVAL;
    userdef = 1;
    if (*p == '@') {
        start_at = memparse (p +1, &p);
        e820_add_region (start_at, mem_size, E820_RAM);
    }
    else if (*p == '#') {
        start_at = memparse (p +1, &p);
        e820_add_region (start_at, mem_size, E820_ACPI);
    }
    else if (*p == '$') {
        start_at = memparse (p +1, &p);
        e820_add_region (start_at, mem_size, E820_RESERVED);
    }
    else
        e820_remove_range (mem_size, ULLONG_MAX -mem_size, E820_RAM, 1);
    return *p == '\0' ? 0 : -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1262" endline="1274">
{
    e820.nr_map = 0;
    userdef = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1282" endline="1285">
{
    start_at = memparse (p +1, &p);
    e820_add_region (start_at, mem_size, E820_RAM);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1285" endline="1288">
{
    start_at = memparse (p +1, &p);
    e820_add_region (start_at, mem_size, E820_ACPI);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1288" endline="1291">
{
    start_at = memparse (p +1, &p);
    e820_add_region (start_at, mem_size, E820_RESERVED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1299" endline="1310">
{
    if (userdef) {
        u32 nr = e820.nr_map;
        if (sanitize_e820_map (e820.map, ARRAY_SIZE (e820.map), &nr) < 0)
            early_panic ("Invalid user supplied memory map");
        e820.nr_map = nr;
        printk (KERN_INFO "user-defined physical RAM map:\n");
        e820_print_map ("user");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1300" endline="1309">
{
    u32 nr = e820.nr_map;
    if (sanitize_e820_map (e820.map, ARRAY_SIZE (e820.map), &nr) < 0)
        early_panic ("Invalid user supplied memory map");
    e820.nr_map = nr;
    printk (KERN_INFO "user-defined physical RAM map:\n");
    e820_print_map ("user");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1313" endline="1322">
{
    switch (e820_type) {
    case E820_RESERVED_KERN :
    case E820_RAM :
        return "System RAM";
    case E820_ACPI :
        return "ACPI Tables";
    case E820_NVS :
        return "ACPI Non-volatile Storage";
    case E820_UNUSABLE :
        return "Unusable memory";
    default :
        return "reserved";
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1314" endline="1321">
{
case E820_RESERVED_KERN :
case E820_RAM :
    return "System RAM";
case E820_ACPI :
    return "ACPI Tables";
case E820_NVS :
    return "ACPI Non-volatile Storage";
case E820_UNUSABLE :
    return "Unusable memory";
default :
    return "reserved";
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1329" endline="1366">
{
    int i;
    struct resource *res;
    u64 end;
    res = alloc_bootmem_low (sizeof (struct resource) * e820.nr_map);
    e820_res = res;
    for (i = 0; i < e820.nr_map; i++) {
        end = e820.map[i].addr + e820.map[i].size - 1;
        if (end != (resource_size_t) end) {
            res++;
            continue;
        }
        res->name = e820_type_to_string (e820.map[i].type);
        res->start = e820.map[i].addr;
        res->end = end;
        res->flags = IORESOURCE_MEM;
        if (e820.map[i].type != E820_RESERVED || res->start < (1ULL << 20)) {
            res->flags |= IORESOURCE_BUSY;
            insert_resource (& iomem_resource, res);
        }
        res++;
    }
    for (i = 0; i < e820_saved.nr_map; i++) {
        struct e820entry *entry = &e820_saved.map[i];
        firmware_map_add_early (entry -> addr, entry -> addr + entry -> size - 1, e820_type_to_string (entry -> type));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1336" endline="1358">
{
    end = e820.map[i].addr + e820.map[i].size - 1;
    if (end != (resource_size_t) end) {
        res++;
        continue;
    }
    res->name = e820_type_to_string (e820.map[i].type);
    res->start = e820.map[i].addr;
    res->end = end;
    res->flags = IORESOURCE_MEM;
    if (e820.map[i].type != E820_RESERVED || res->start < (1ULL << 20)) {
        res->flags |= IORESOURCE_BUSY;
        insert_resource (& iomem_resource, res);
    }
    res++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1338" endline="1341">
{
    res++;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1353" endline="1356">
{
    res->flags |= IORESOURCE_BUSY;
    insert_resource (& iomem_resource, res);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1360" endline="1365">
{
    struct e820entry *entry = &e820_saved.map[i];
    firmware_map_add_early (entry -> addr, entry -> addr + entry -> size - 1, e820_type_to_string (entry -> type));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1370" endline="1383">
{
    unsigned long mb = pos >> 20;
    if (!mb)
        return 64 * 1024;
    if (mb < 16)
        return 1024 * 1024;
    return 32 * 1024 * 1024;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1388" endline="1418">
{
    int i;
    struct resource *res;
    res = e820_res;
    for (i = 0; i < e820.nr_map; i++) {
        if (!res->parent && res->end)
            insert_resource_expand_to_fit (&iomem_resource, res);
        res++;
    }
    for (i = 0; i < e820.nr_map; i++) {
        struct e820entry *entry = &e820.map[i];
        u64 start, end;
        if (entry->type != E820_RAM)
            continue;
        start = entry->addr + entry->size;
        end = round_up (start, ram_alignment (start)) - 1;
        if (end > MAX_RESOURCE_SIZE)
            end = MAX_RESOURCE_SIZE;
        if (start >= end)
            continue;
        reserve_region_with_split (& iomem_resource, start, end, "RAM buffer");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1393" endline="1397">
{
    if (!res->parent && res->end)
        insert_resource_expand_to_fit (&iomem_resource, res);
    res++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1403" endline="1417">
{
    struct e820entry *entry = &e820.map[i];
    u64 start, end;
    if (entry->type != E820_RAM)
        continue;
    start = entry->addr + entry->size;
    end = round_up (start, ram_alignment (start)) - 1;
    if (end > MAX_RESOURCE_SIZE)
        end = MAX_RESOURCE_SIZE;
    if (start >= end)
        continue;
    reserve_region_with_split (& iomem_resource, start, end, "RAM buffer");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1421" endline="1456">
{
    char *who = "BIOS-e820";
    u32 new_nr;
    new_nr = boot_params.e820_entries;
    sanitize_e820_map (boot_params.e820_map, ARRAY_SIZE (boot_params.e820_map), & new_nr);
    boot_params.e820_entries = new_nr;
    if (append_e820_map (boot_params.e820_map, boot_params.e820_entries) < 0) {
        u64 mem_size;
        if (boot_params.alt_mem_k < boot_params.screen_info.ext_mem_k) {
            mem_size = boot_params.screen_info.ext_mem_k;
            who = "BIOS-88";
        }
        else {
            mem_size = boot_params.alt_mem_k;
            who = "BIOS-e801";
        }
        e820.nr_map = 0;
        e820_add_region (0, LOWMEMSIZE (), E820_RAM);
        e820_add_region (HIGH_MEMORY, mem_size << 10, E820_RAM);
    }
    return who;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1436" endline="1452">
{
    u64 mem_size;
    if (boot_params.alt_mem_k < boot_params.screen_info.ext_mem_k) {
        mem_size = boot_params.screen_info.ext_mem_k;
        who = "BIOS-88";
    }
    else {
        mem_size = boot_params.alt_mem_k;
        who = "BIOS-e801";
    }
    e820.nr_map = 0;
    e820_add_region (0, LOWMEMSIZE (), E820_RAM);
    e820_add_region (HIGH_MEMORY, mem_size << 10, E820_RAM);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1441" endline="1444">
{
    mem_size = boot_params.screen_info.ext_mem_k;
    who = "BIOS-88";
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1444" endline="1447">
{
    mem_size = boot_params.alt_mem_k;
    who = "BIOS-e801";
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1459" endline="1467">
{
    if (x86_quirks->arch_memory_setup) {
        char *who = x86_quirks->arch_memory_setup ();
        if (who)
            return who;
    }
    return default_machine_specific_memory_setup ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1460" endline="1465">
{
    char *who = x86_quirks->arch_memory_setup ();
    if (who)
        return who;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1471" endline="1473">
{
    return machine_specific_memory_setup ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/e820.c.ifdefed" startline="1476" endline="1483">
{
    char *who;
    who = memory_setup ();
    memcpy (& e820_saved, & e820, sizeof (struct e820map));
    printk (KERN_INFO "BIOS-provided physical RAM map:\n");
    e820_print_map (who);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="213" endline="215">
{
    return GET_APIC_VERSION (apic_read (APIC_LVR));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="221" endline="227">
{
    return APIC_INTEGRATED (lapic_get_version ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="233" endline="239">
{
    if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD && boot_cpu_data.x86 >= 0xf)
        return 1;
    return lapic_get_version () >= 0x14;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="246" endline="248">
{
    WARN_ON_ONCE ((cpu_has_apic || ! disable_apic));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="251" endline="254">
{
    WARN_ON_ONCE ((cpu_has_apic && ! disable_apic));
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="261" endline="264">
{
    apic->read = native_apic_read_dummy;
    apic->write = native_apic_write_dummy;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="267" endline="270">
{
    while (apic_read (APIC_ICR) & APIC_ICR_BUSY)
        cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="273" endline="286">
{
    u32 send_status;
    int timeout;
    timeout = 0;
    do {
        send_status = apic_read (APIC_ICR) & APIC_ICR_BUSY;
        if (!send_status)
            break;
        udelay (100);
    }
    while (timeout++ < 1000);
    return send_status;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="278" endline="283">
{
    send_status = apic_read (APIC_ICR) & APIC_ICR_BUSY;
    if (!send_status)
        break;
    udelay (100);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="289" endline="292">
{
    apic_write (APIC_ICR2, SET_APIC_DEST_FIELD (id));
    apic_write (APIC_ICR, low);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="295" endline="302">
{
    u32 icr1, icr2;
    icr2 = apic_read (APIC_ICR2);
    icr1 = apic_read (APIC_ICR);
    return icr1 | ((u64) icr2 << 32);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="308" endline="319">
{
    unsigned int v;
    v = APIC_DM_NMI;
    if (!lapic_is_integrated ())
        v |= APIC_LVT_LEVEL_TRIGGER;
    apic_write (APIC_LVT0, v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="335" endline="344">
{
    unsigned int v;
    v = apic_read (APIC_LVR);
    return APIC_INTEGRATED (GET_APIC_VERSION (v)) ? GET_APIC_MAXLVT (v) : 2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="364" endline="388">
{
    unsigned int lvtt_value, tmp_value;
    lvtt_value = LOCAL_TIMER_VECTOR;
    if (!oneshot)
        lvtt_value |= APIC_LVT_TIMER_PERIODIC;
    if (!lapic_is_integrated ())
        lvtt_value |= SET_APIC_TIMER_BASE (APIC_TIMER_BASE_DIV);
    if (!irqen)
        lvtt_value |= APIC_LVT_MASKED;
    apic_write (APIC_LVTT, lvtt_value);
    tmp_value = apic_read (APIC_TDCR);
    apic_write (APIC_TDCR, (tmp_value & ~ (APIC_TDR_DIV_1 | APIC_TDR_DIV_TMBASE)) | APIC_TDR_DIV_16);
    if (!oneshot)
        apic_write (APIC_TMICT, clocks / APIC_DIVISOR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="404" endline="409">
{
    unsigned long reg = (lvt_off << 4) + APIC_EILVTn (0);
    unsigned int v = (mask << 16) | (msg_type << 8) | vector;
    apic_write (reg, v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="412" endline="415">
{
    setup_APIC_eilvt (APIC_EILVT_LVTOFF_MCE, vector, msg_type, mask);
    return APIC_EILVT_LVTOFF_MCE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="418" endline="421">
{
    setup_APIC_eilvt (APIC_EILVT_LVTOFF_IBS, vector, msg_type, mask);
    return APIC_EILVT_LVTOFF_IBS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="429" endline="432">
{
    apic_write (APIC_TMICT, delta);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="439" endline="468">
{
    unsigned long flags;
    unsigned int v;
    if (evt->features & CLOCK_EVT_FEAT_DUMMY)
        return;
    local_irq_save (flags);
    switch (mode) {
    case CLOCK_EVT_MODE_PERIODIC :
    case CLOCK_EVT_MODE_ONESHOT :
        __setup_APIC_LVTT (calibration_result, mode != CLOCK_EVT_MODE_PERIODIC, 1);
        break;
    case CLOCK_EVT_MODE_UNUSED :
    case CLOCK_EVT_MODE_SHUTDOWN :
        v = apic_read (APIC_LVTT);
        v |= (APIC_LVT_MASKED | LOCAL_TIMER_VECTOR);
        apic_write (APIC_LVTT, v);
        apic_write (APIC_TMICT, 0xffffffff);
        break;
    case CLOCK_EVT_MODE_RESUME :
        break;
    }
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="449" endline="465">
{
case CLOCK_EVT_MODE_PERIODIC :
case CLOCK_EVT_MODE_ONESHOT :
    __setup_APIC_LVTT (calibration_result, mode != CLOCK_EVT_MODE_PERIODIC, 1);
    break;
case CLOCK_EVT_MODE_UNUSED :
case CLOCK_EVT_MODE_SHUTDOWN :
    v = apic_read (APIC_LVTT);
    v |= (APIC_LVT_MASKED | LOCAL_TIMER_VECTOR);
    apic_write (APIC_LVTT, v);
    apic_write (APIC_TMICT, 0xffffffff);
    break;
case CLOCK_EVT_MODE_RESUME :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="474" endline="478">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="485" endline="498">
{
    struct clock_event_device *levt = &__get_cpu_var (lapic_events);
    if (cpu_has (&current_cpu_data, X86_FEATURE_ARAT)) {
        lapic_clockevent.features &= ~CLOCK_EVT_FEAT_C3STOP;
        lapic_clockevent.rating = 150;
    }
    memcpy (levt, & lapic_clockevent, sizeof (* levt));
    levt->cpumask = cpumask_of (smp_processor_id ());
    clockevents_register_device (levt);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="488" endline="492">
{
    lapic_clockevent.features &= ~CLOCK_EVT_FEAT_C3STOP;
    lapic_clockevent.rating = 150;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="533" endline="558">
{
    unsigned long long tsc = 0;
    long tapic = apic_read (APIC_TMCCT);
    unsigned long pm = acpi_pm_read_early ();
    if (cpu_has_tsc)
        rdtscll (tsc);
    switch (lapic_cal_loops++) {
    case 0 :
        lapic_cal_t1 = tapic;
        lapic_cal_tsc1 = tsc;
        lapic_cal_pm1 = pm;
        lapic_cal_j1 = jiffies;
        break;
    case LAPIC_CAL_LOOPS :
        lapic_cal_t2 = tapic;
        lapic_cal_tsc2 = tsc;
        if (pm < lapic_cal_pm1)
            pm += ACPI_PM_OVRRUN;
        lapic_cal_pm2 = pm;
        lapic_cal_j2 = jiffies;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="541" endline="557">
{
case 0 :
    lapic_cal_t1 = tapic;
    lapic_cal_tsc1 = tsc;
    lapic_cal_pm1 = pm;
    lapic_cal_j1 = jiffies;
    break;
case LAPIC_CAL_LOOPS :
    lapic_cal_t2 = tapic;
    lapic_cal_tsc2 = tsc;
    if (pm < lapic_cal_pm1)
        pm += ACPI_PM_OVRRUN;
    lapic_cal_pm2 = pm;
    lapic_cal_j2 = jiffies;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="562" endline="609">
{
    const long pm_100ms = PMTMR_TICKS_PER_SEC / 10;
    const long pm_thresh = pm_100ms / 100;
    unsigned long mult;
    u64 res;
    return -1;
    apic_printk (APIC_VERBOSE, "... PM-Timer delta = %ld\n", deltapm);
    if (!deltapm)
        return -1;
    mult = clocksource_hz2mult (PMTMR_TICKS_PER_SEC, 22);
    if (deltapm > (pm_100ms - pm_thresh) && deltapm < (pm_100ms + pm_thresh)) {
        apic_printk (APIC_VERBOSE, "... PM-Timer result ok\n");
        return 0;
    }
    res = (((u64) deltapm) * mult) >> 22;
    do_div (res, 1000000);
    pr_warning ("APIC calibration not consistent " "with PM-Timer: %ldms instead of 100ms\n", (long) res);
    res = (((u64) (*delta)) * pm_100ms);
    do_div (res, deltapm);
    pr_info ("APIC delta adjusted to PM-Timer: " "%lu (%ld)\n", (unsigned long) res, * delta);
    *delta = (long) res;
    if (cpu_has_tsc) {
        res = (((u64) (*deltatsc)) * pm_100ms);
        do_div (res, deltapm);
        apic_printk (APIC_VERBOSE, "TSC delta adjusted to " "PM-Timer: %lu (%ld) \n", (unsigned long) res, * deltatsc);
        *deltatsc = (long) res;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="581" endline="584">
{
    apic_printk (APIC_VERBOSE, "... PM-Timer result ok\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="599" endline="606">
{
    res = (((u64) (*deltatsc)) * pm_100ms);
    do_div (res, deltapm);
    apic_printk (APIC_VERBOSE, "TSC delta adjusted to " "PM-Timer: %lu (%ld) \n", (unsigned long) res, * deltatsc);
    *deltatsc = (long) res;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="612" endline="731">
{
    struct clock_event_device *levt = &__get_cpu_var (lapic_events);
    void (*real_handler) (struct clock_event_device *dev);
    unsigned long deltaj;
    long delta, deltatsc;
    int pm_referenced = 0;
    local_irq_disable ();
    real_handler = global_clock_event->event_handler;
    global_clock_event->event_handler = lapic_cal_handler;
    __setup_APIC_LVTT (0xffffffff, 0, 0);
    local_irq_enable ();
    while (lapic_cal_loops <= LAPIC_CAL_LOOPS)
        cpu_relax ();
    local_irq_disable ();
    global_clock_event->event_handler = real_handler;
    delta = lapic_cal_t1 - lapic_cal_t2;
    apic_printk (APIC_VERBOSE, "... lapic delta = %ld\n", delta);
    deltatsc = (long) (lapic_cal_tsc2 - lapic_cal_tsc1);
    pm_referenced = !calibrate_by_pmtimer (lapic_cal_pm2 -lapic_cal_pm1, &delta, &deltatsc);
    lapic_clockevent.mult = div_sc (delta, TICK_NSEC *LAPIC_CAL_LOOPS, lapic_clockevent.shift);
    lapic_clockevent.max_delta_ns = clockevent_delta2ns (0x7FFFFF, &lapic_clockevent);
    lapic_clockevent.min_delta_ns = clockevent_delta2ns (0xF, &lapic_clockevent);
    calibration_result = (delta * APIC_DIVISOR) / LAPIC_CAL_LOOPS;
    apic_printk (APIC_VERBOSE, "..... delta %ld\n", delta);
    apic_printk (APIC_VERBOSE, "..... mult: %ld\n", lapic_clockevent.mult);
    apic_printk (APIC_VERBOSE, "..... calibration result: %u\n", calibration_result);
    if (cpu_has_tsc) {
        apic_printk (APIC_VERBOSE, "..... CPU clock speed is " "%ld.%04ld MHz.\n", (deltatsc / LAPIC_CAL_LOOPS) / (1000000 / HZ), (deltatsc / LAPIC_CAL_LOOPS) % (1000000 / HZ));
    }
    apic_printk (APIC_VERBOSE, "..... host bus clock speed is " "%u.%04u MHz.\n", calibration_result / (1000000 / HZ), calibration_result % (1000000 / HZ));
    if (calibration_result < (1000000 / HZ)) {
        local_irq_enable ();
        pr_warning ("APIC frequency too slow, disabling apic timer\n");
        return -1;
    }
    levt->features &= ~CLOCK_EVT_FEAT_DUMMY;
    if (!pm_referenced) {
        apic_printk (APIC_VERBOSE, "... verify APIC timer\n");
        levt->event_handler = lapic_cal_handler;
        lapic_timer_setup (CLOCK_EVT_MODE_PERIODIC, levt);
        lapic_cal_loops = -1;
        local_irq_enable ();
        while (lapic_cal_loops <= LAPIC_CAL_LOOPS)
            cpu_relax ();
        lapic_timer_setup (CLOCK_EVT_MODE_SHUTDOWN, levt);
        deltaj = lapic_cal_j2 - lapic_cal_j1;
        apic_printk (APIC_VERBOSE, "... jiffies delta = %lu\n", deltaj);
        if (deltaj >= LAPIC_CAL_LOOPS - 2 && deltaj <= LAPIC_CAL_LOOPS + 2)
            apic_printk (APIC_VERBOSE, "... jiffies result ok\n");
        else
            levt->features |= CLOCK_EVT_FEAT_DUMMY;
    }
    else
        local_irq_enable ();
    if (levt->features & CLOCK_EVT_FEAT_DUMMY) {
        pr_warning ("APIC timer disabled due to verification failure\n");
        return -1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="667" endline="672">
{
    apic_printk (APIC_VERBOSE, "..... CPU clock speed is " "%ld.%04ld MHz.\n", (deltatsc / LAPIC_CAL_LOOPS) / (1000000 / HZ), (deltatsc / LAPIC_CAL_LOOPS) % (1000000 / HZ));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="682" endline="686">
{
    local_irq_enable ();
    pr_warning ("APIC frequency too slow, disabling apic timer\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="694" endline="722">
{
    apic_printk (APIC_VERBOSE, "... verify APIC timer\n");
    levt->event_handler = lapic_cal_handler;
    lapic_timer_setup (CLOCK_EVT_MODE_PERIODIC, levt);
    lapic_cal_loops = -1;
    local_irq_enable ();
    while (lapic_cal_loops <= LAPIC_CAL_LOOPS)
        cpu_relax ();
    lapic_timer_setup (CLOCK_EVT_MODE_SHUTDOWN, levt);
    deltaj = lapic_cal_j2 - lapic_cal_j1;
    apic_printk (APIC_VERBOSE, "... jiffies delta = %lu\n", deltaj);
    if (deltaj >= LAPIC_CAL_LOOPS - 2 && deltaj <= LAPIC_CAL_LOOPS + 2)
        apic_printk (APIC_VERBOSE, "... jiffies result ok\n");
    else
        levt->features |= CLOCK_EVT_FEAT_DUMMY;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="725" endline="728">
{
    pr_warning ("APIC timer disabled due to verification failure\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="739" endline="779">
{
    if (disable_apic_timer) {
        pr_info ("Disabling APIC timer\n");
        if (num_possible_cpus () > 1) {
            lapic_clockevent.mult = 1;
            setup_APIC_timer ();
        }
        return;
    }
    apic_printk (APIC_VERBOSE, "Using local APIC timer interrupts.\n" "calibrating APIC timer ...\n");
    if (calibrate_APIC_clock ()) {
        if (num_possible_cpus () > 1)
            setup_APIC_timer ();
        return;
    }
    if (nmi_watchdog != NMI_IO_APIC)
        lapic_clockevent.features &= ~CLOCK_EVT_FEAT_DUMMY;
    else
        pr_warning ("APIC timer registered as dummy," " due to nmi_watchdog=%d!\n", nmi_watchdog);
    setup_APIC_timer ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="746" endline="754">
{
    pr_info ("Disabling APIC timer\n");
    if (num_possible_cpus () > 1) {
        lapic_clockevent.mult = 1;
        setup_APIC_timer ();
    }
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="749" endline="752">
{
    lapic_clockevent.mult = 1;
    setup_APIC_timer ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="759" endline="764">
{
    if (num_possible_cpus () > 1)
        setup_APIC_timer ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="782" endline="784">
{
    setup_APIC_timer ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="790" endline="818">
{
    int cpu = smp_processor_id ();
    struct clock_event_device *evt = &per_cpu (lapic_events, cpu);
    if (!evt->event_handler) {
        pr_warning ("Spurious LAPIC timer interrupt on cpu %d\n", cpu);
        lapic_timer_setup (CLOCK_EVT_MODE_SHUTDOWN, evt);
        return;
    }
    inc_irq_stat (apic_timer_irqs);
    evt->event_handler (evt);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="805" endline="810">
{
    pr_warning ("Spurious LAPIC timer interrupt on cpu %d\n", cpu);
    lapic_timer_setup (CLOCK_EVT_MODE_SHUTDOWN, evt);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="829" endline="848">
{
    struct pt_regs *old_regs = set_irq_regs (regs);
    ack_APIC_irq ();
    exit_idle ();
    irq_enter ();
    local_apic_timer_interrupt ();
    irq_exit ();
    set_irq_regs (old_regs);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="851" endline="853">
{
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="867" endline="932">
{
    int maxlvt;
    u32 v;
    if (!x2apic_mode && !apic_phys)
        return;
    maxlvt = lapic_get_maxlvt ();
    if (maxlvt >= 3) {
        v = ERROR_APIC_VECTOR;
        apic_write (APIC_LVTERR, v | APIC_LVT_MASKED);
    }
    v = apic_read (APIC_LVTT);
    apic_write (APIC_LVTT, v | APIC_LVT_MASKED);
    v = apic_read (APIC_LVT0);
    apic_write (APIC_LVT0, v | APIC_LVT_MASKED);
    v = apic_read (APIC_LVT1);
    apic_write (APIC_LVT1, v | APIC_LVT_MASKED);
    if (maxlvt >= 4) {
        v = apic_read (APIC_LVTPC);
        apic_write (APIC_LVTPC, v | APIC_LVT_MASKED);
    }
    apic_write (APIC_LVTT, APIC_LVT_MASKED);
    apic_write (APIC_LVT0, APIC_LVT_MASKED);
    apic_write (APIC_LVT1, APIC_LVT_MASKED);
    if (maxlvt >= 3)
        apic_write (APIC_LVTERR, APIC_LVT_MASKED);
    if (maxlvt >= 4)
        apic_write (APIC_LVTPC, APIC_LVT_MASKED);
    if (lapic_is_integrated ()) {
        if (maxlvt > 3)
            apic_write (APIC_ESR, 0);
        apic_read (APIC_ESR);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="880" endline="883">
{
    v = ERROR_APIC_VECTOR;
    apic_write (APIC_LVTERR, v | APIC_LVT_MASKED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="894" endline="897">
{
    v = apic_read (APIC_LVTPC);
    apic_write (APIC_LVTPC, v | APIC_LVT_MASKED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="926" endline="931">
{
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    apic_read (APIC_ESR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="938" endline="968">
{
    unsigned int value;
    if (!apic_phys)
        return;
    clear_local_APIC ();
    value = apic_read (APIC_SPIV);
    value &= ~APIC_SPIV_APIC_ENABLED;
    apic_write (APIC_SPIV, value);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="977" endline="994">
{
    unsigned long flags;
    if (!cpu_has_apic)
        return;
    local_irq_save (flags);
    disable_local_APIC ();
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1002" endline="1055">
{
    unsigned int reg0, reg1;
    reg0 = apic_read (APIC_LVR);
    apic_printk (APIC_DEBUG, "Getting VERSION: %x\n", reg0);
    apic_write (APIC_LVR, reg0 ^ APIC_LVR_MASK);
    reg1 = apic_read (APIC_LVR);
    apic_printk (APIC_DEBUG, "Getting VERSION: %x\n", reg1);
    if (reg1 != reg0)
        return 0;
    reg1 = GET_APIC_VERSION (reg0);
    if (reg1 == 0x00 || reg1 == 0xff)
        return 0;
    reg1 = lapic_get_maxlvt ();
    if (reg1 < 0x02 || reg1 == 0xff)
        return 0;
    reg0 = apic_read (APIC_ID);
    apic_printk (APIC_DEBUG, "Getting ID: %x\n", reg0);
    apic_write (APIC_ID, reg0 ^ apic -> apic_id_mask);
    reg1 = apic_read (APIC_ID);
    apic_printk (APIC_DEBUG, "Getting ID: %x\n", reg1);
    apic_write (APIC_ID, reg0);
    if (reg1 != (reg0 ^ apic->apic_id_mask))
        return 0;
    reg0 = apic_read (APIC_LVT0);
    apic_printk (APIC_DEBUG, "Getting LVT0: %x\n", reg0);
    reg1 = apic_read (APIC_LVT1);
    apic_printk (APIC_DEBUG, "Getting LVT1: %x\n", reg1);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1061" endline="1077">
{
    if (modern_apic () || boot_cpu_data.x86_vendor == X86_VENDOR_AMD)
        return;
    apic_wait_icr_idle ();
    apic_printk (APIC_DEBUG, "Synchronizing Arb IDs.\n");
    apic_write (APIC_ICR, APIC_DEST_ALLINC | APIC_INT_LEVELTRIG | APIC_DM_INIT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1083" endline="1124">
{
    unsigned int value;
    if (smp_found_config || !cpu_has_apic)
        return;
    clear_local_APIC ();
    value = apic_read (APIC_SPIV);
    value &= ~APIC_VECTOR_MASK;
    value |= APIC_SPIV_APIC_ENABLED;
    value |= APIC_SPIV_FOCUS_DISABLED;
    value |= SPURIOUS_APIC_VECTOR;
    apic_write (APIC_SPIV, value);
    apic_write (APIC_LVT0, APIC_DM_EXTINT);
    value = APIC_DM_NMI;
    if (!lapic_is_integrated ())
        value |= APIC_LVT_LEVEL_TRIGGER;
    apic_write (APIC_LVT1, value);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1127" endline="1165">
{
    unsigned int oldvalue, value, maxlvt;
    if (!lapic_is_integrated ()) {
        pr_info ("No ESR for 82489DX.\n");
        return;
    }
    if (apic->disable_esr) {
        pr_info ("Leaving ESR disabled.\n");
        return;
    }
    maxlvt = lapic_get_maxlvt ();
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    oldvalue = apic_read (APIC_ESR);
    value = ERROR_APIC_VECTOR;
    apic_write (APIC_LVTERR, value);
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    value = apic_read (APIC_ESR);
    if (value != oldvalue)
        apic_printk (APIC_VERBOSE, "ESR value before enabling " "vector: 0x%08x  after: 0x%08x\n", oldvalue, value);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1130" endline="1133">
{
    pr_info ("No ESR for 82489DX.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1135" endline="1144">
{
    pr_info ("Leaving ESR disabled.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1172" endline="1320">
{
    unsigned int value;
    int i, j;
    if (disable_apic) {
        arch_disable_smp_support ();
        return;
    }
    perf_counters_lapic_init ();
    preempt_disable ();
    if (!apic->apic_id_registered ())
        BUG ();
    apic->init_apic_ldr ();
    value = apic_read (APIC_TASKPRI);
    value &= ~APIC_TPRI_MASK;
    apic_write (APIC_TASKPRI, value);
    for (i = APIC_ISR_NR - 1; i >= 0; i--) {
        value = apic_read (APIC_ISR +i * 0x10);
        for (j = 31; j >= 0; j--) {
            if (value & (1 << j))
                ack_APIC_irq ();
        }
    }
    value = apic_read (APIC_SPIV);
    value &= ~APIC_VECTOR_MASK;
    value |= APIC_SPIV_APIC_ENABLED;
    value |= SPURIOUS_APIC_VECTOR;
    apic_write (APIC_SPIV, value);
    value = apic_read (APIC_LVT0) & APIC_LVT_MASKED;
    if (!smp_processor_id () && (pic_mode || !value)) {
        value = APIC_DM_EXTINT;
        apic_printk (APIC_VERBOSE, "enabled ExtINT on CPU#%d\n", smp_processor_id ());
    }
    else {
        value = APIC_DM_EXTINT | APIC_LVT_MASKED;
        apic_printk (APIC_VERBOSE, "masked ExtINT on CPU#%d\n", smp_processor_id ());
    }
    apic_write (APIC_LVT0, value);
    if (!smp_processor_id ())
        value = APIC_DM_NMI;
    else
        value = APIC_DM_NMI | APIC_LVT_MASKED;
    if (!lapic_is_integrated ())
        value |= APIC_LVT_LEVEL_TRIGGER;
    apic_write (APIC_LVT1, value);
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1176" endline="1179">
{
    arch_disable_smp_support ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1227" endline="1233">
{
    value = apic_read (APIC_ISR +i * 0x10);
    for (j = 31; j >= 0; j--) {
        if (value & (1 << j))
            ack_APIC_irq ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1229" endline="1232">
{
    if (value & (1 << j))
        ack_APIC_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1291" endline="1295">
{
    value = APIC_DM_EXTINT;
    apic_printk (APIC_VERBOSE, "enabled ExtINT on CPU#%d\n", smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1295" endline="1299">
{
    value = APIC_DM_EXTINT | APIC_LVT_MASKED;
    apic_printk (APIC_VERBOSE, "masked ExtINT on CPU#%d\n", smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1323" endline="1338">
{
    lapic_setup_esr ();
    setup_apic_nmi_watchdog (NULL);
    apic_pm_activate ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1365" endline="1449">
{
    if (!cpu_has_x2apic)
        return;
    if (x2apic_preenabled)
        panic ("x2apic enabled prior OS handover," " enable CONFIG_X86_X2APIC, CONFIG_INTR_REMAP");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1474" endline="1546">
{
    u32 h, l, features;
    if (disable_apic)
        return -1;
    switch (boot_cpu_data.x86_vendor) {
    case X86_VENDOR_AMD :
        if ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model > 1) || (boot_cpu_data.x86 >= 15))
            break;
        goto no_apic;
    case X86_VENDOR_INTEL :
        if (boot_cpu_data.x86 == 6 || boot_cpu_data.x86 == 15 || (boot_cpu_data.x86 == 5 && cpu_has_apic))
            break;
        goto no_apic;
    default :
        goto no_apic;
    }
    if (!cpu_has_apic) {
        if (!force_enable_local_apic) {
            pr_info ("Local APIC disabled by BIOS -- " "you can enable it with \"lapic\"\n");
            return -1;
        }
        rdmsr (MSR_IA32_APICBASE, l, h);
        if (!(l & MSR_IA32_APICBASE_ENABLE)) {
            pr_info ("Local APIC disabled by BIOS -- reenabling.\n");
            l &= ~MSR_IA32_APICBASE_BASE;
            l |= MSR_IA32_APICBASE_ENABLE | APIC_DEFAULT_PHYS_BASE;
            wrmsr (MSR_IA32_APICBASE, l, h);
            enabled_via_apicbase = 1;
        }
    }
    features = cpuid_edx (1);
    if (!(features & (1 << X86_FEATURE_APIC))) {
        pr_warning ("Could not enable APIC!\n");
        return -1;
    }
    set_cpu_cap (& boot_cpu_data, X86_FEATURE_APIC);
    mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
    rdmsr (MSR_IA32_APICBASE, l, h);
    if (l & MSR_IA32_APICBASE_ENABLE)
        mp_lapic_addr = l & MSR_IA32_APICBASE_BASE;
    pr_info ("Found and enabled local APIC!\n");
    apic_pm_activate ();
    return 0;
no_apic :
    pr_info ("No local APIC present or hardware disabled\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1481" endline="1494">
{
case X86_VENDOR_AMD :
    if ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model > 1) || (boot_cpu_data.x86 >= 15))
        break;
    goto no_apic;
case X86_VENDOR_INTEL :
    if (boot_cpu_data.x86 == 6 || boot_cpu_data.x86 == 15 || (boot_cpu_data.x86 == 5 && cpu_has_apic))
        break;
    goto no_apic;
default :
    goto no_apic;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1496" endline="1519">
{
    if (!force_enable_local_apic) {
        pr_info ("Local APIC disabled by BIOS -- " "you can enable it with \"lapic\"\n");
        return -1;
    }
    rdmsr (MSR_IA32_APICBASE, l, h);
    if (!(l & MSR_IA32_APICBASE_ENABLE)) {
        pr_info ("Local APIC disabled by BIOS -- reenabling.\n");
        l &= ~MSR_IA32_APICBASE_BASE;
        l |= MSR_IA32_APICBASE_ENABLE | APIC_DEFAULT_PHYS_BASE;
        wrmsr (MSR_IA32_APICBASE, l, h);
        enabled_via_apicbase = 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1501" endline="1505">
{
    pr_info ("Local APIC disabled by BIOS -- " "you can enable it with \"lapic\"\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1512" endline="1518">
{
    pr_info ("Local APIC disabled by BIOS -- reenabling.\n");
    l &= ~MSR_IA32_APICBASE_BASE;
    l |= MSR_IA32_APICBASE_ENABLE | APIC_DEFAULT_PHYS_BASE;
    wrmsr (MSR_IA32_APICBASE, l, h);
    enabled_via_apicbase = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1525" endline="1528">
{
    pr_warning ("Could not enable APIC!\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1579" endline="1623">
{
    unsigned int new_apicid;
    if (x2apic_mode) {
        boot_cpu_physical_apicid = read_apic_id ();
        return;
    }
    if (!smp_found_config && detect_init_APIC ()) {
        pr_info ("APIC: disable apic facility\n");
        apic_disable ();
    }
    else {
        apic_phys = mp_lapic_addr;
        if (!acpi_lapic)
            set_fixmap_nocache (FIX_APIC_BASE, apic_phys);
        apic_printk (APIC_VERBOSE, "mapped APIC to %08lx (%08lx)\n", APIC_BASE, apic_phys);
    }
    new_apicid = read_apic_id ();
    if (boot_cpu_physical_apicid != new_apicid) {
        boot_cpu_physical_apicid = new_apicid;
        apic_version[new_apicid] = GET_APIC_VERSION (apic_read (APIC_LVR));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1582" endline="1585">
{
    boot_cpu_physical_apicid = read_apic_id ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1588" endline="1592">
{
    pr_info ("APIC: disable apic facility\n");
    apic_disable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1592" endline="1604">
{
    apic_phys = mp_lapic_addr;
    if (!acpi_lapic)
        set_fixmap_nocache (FIX_APIC_BASE, apic_phys);
    apic_printk (APIC_VERBOSE, "mapped APIC to %08lx (%08lx)\n", APIC_BASE, apic_phys);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1611" endline="1622">
{
    boot_cpu_physical_apicid = new_apicid;
    apic_version[new_apicid] = GET_APIC_VERSION (apic_read (APIC_LVR));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1632" endline="1710">
{
    if (disable_apic) {
        pr_info ("Apic disabled\n");
        return -1;
    }
    if (!smp_found_config && !cpu_has_apic)
        return -1;
    if (!cpu_has_apic && APIC_INTEGRATED (apic_version[boot_cpu_physical_apicid])) {
        pr_err ("BIOS bug, local APIC 0x%x not detected!...\n", boot_cpu_physical_apicid);
        clear_cpu_cap (& boot_cpu_data, X86_FEATURE_APIC);
        return -1;
    }
    enable_IR_x2apic ();
    verify_local_APIC ();
    connect_bsp_APIC ();
    physid_set_mask_of_physid (boot_cpu_physical_apicid, & phys_cpu_present_map);
    setup_local_APIC ();
    end_local_APIC_setup ();
    localise_nmi_watchdog ();
    setup_boot_clock ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1633" endline="1636">
{
    pr_info ("Apic disabled\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1651" endline="1656">
{
    pr_err ("BIOS bug, local APIC 0x%x not detected!...\n", boot_cpu_physical_apicid);
    clear_cpu_cap (& boot_cpu_data, X86_FEATURE_APIC);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1720" endline="1740">
{
    u32 v;
    exit_idle ();
    irq_enter ();
    v = apic_read (APIC_ISR +((SPURIOUS_APIC_VECTOR & ~0x1f) >> 1));
    if (v & (1 << (SPURIOUS_APIC_VECTOR & 0x1f)))
        ack_APIC_irq ();
    inc_irq_stat (irq_spurious_count);
    pr_info ("spurious APIC interrupt on CPU#%d, " "should never happen.\n", smp_processor_id ());
    irq_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1746" endline="1772">
{
    u32 v, v1;
    exit_idle ();
    irq_enter ();
    v = apic_read (APIC_ESR);
    apic_write (APIC_ESR, 0);
    v1 = apic_read (APIC_ESR);
    ack_APIC_irq ();
    atomic_inc (& irq_err_count);
    pr_debug ("APIC error on CPU%d: %02x(%02x)\n", smp_processor_id (), v, v1);
    irq_exit ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1778" endline="1796">
{
    if (apic->enable_apic_mode)
        apic->enable_apic_mode ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1806" endline="1861">
{
    unsigned int value;
    value = apic_read (APIC_SPIV);
    value &= ~APIC_VECTOR_MASK;
    value |= APIC_SPIV_APIC_ENABLED;
    value |= 0xf;
    apic_write (APIC_SPIV, value);
    if (!virt_wire_setup) {
        value = apic_read (APIC_LVT0);
        value &= ~(APIC_MODE_MASK | APIC_SEND_PENDING | APIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | APIC_LVT_LEVEL_TRIGGER | APIC_LVT_MASKED);
        value |= APIC_LVT_REMOTE_IRR | APIC_SEND_PENDING;
        value = SET_APIC_DELIVERY_MODE (value, APIC_MODE_EXTINT);
        apic_write (APIC_LVT0, value);
    }
    else {
        apic_write (APIC_LVT0, APIC_LVT_MASKED);
    }
    value = apic_read (APIC_LVT1);
    value &= ~(APIC_MODE_MASK | APIC_SEND_PENDING | APIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | APIC_LVT_LEVEL_TRIGGER | APIC_LVT_MASKED);
    value |= APIC_LVT_REMOTE_IRR | APIC_SEND_PENDING;
    value = SET_APIC_DELIVERY_MODE (value, APIC_MODE_NMI);
    apic_write (APIC_LVT1, value);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1833" endline="1845">
{
    value = apic_read (APIC_LVT0);
    value &= ~(APIC_MODE_MASK | APIC_SEND_PENDING | APIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | APIC_LVT_LEVEL_TRIGGER | APIC_LVT_MASKED);
    value |= APIC_LVT_REMOTE_IRR | APIC_SEND_PENDING;
    value = SET_APIC_DELIVERY_MODE (value, APIC_MODE_EXTINT);
    apic_write (APIC_LVT0, value);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1845" endline="1848">
{
    apic_write (APIC_LVT0, APIC_LVT_MASKED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1864" endline="1939">
{
    int cpu;
    if (version == 0x0) {
        pr_warning ("BIOS bug, APIC version is 0 for CPU#%d! " "fixing up to 0x10. (tell your hw vendor)\n", version);
        version = 0x10;
    }
    apic_version[apicid] = version;
    if (num_processors >= nr_cpu_ids) {
        int max = nr_cpu_ids;
        int thiscpu = max + disabled_cpus;
        pr_warning ("ACPI: NR_CPUS/possible_cpus limit of %i reached." "  Processor %d/0x%x ignored.\n", max, thiscpu, apicid);
        disabled_cpus++;
        return;
    }
    num_processors++;
    cpu = cpumask_next_zero (-1, cpu_present_mask);
    if (version != apic_version[boot_cpu_physical_apicid])
        WARN_ONCE (1, "ACPI: apic version mismatch, bootcpu: %x cpu %d: %x\n", apic_version[boot_cpu_physical_apicid], cpu, version);
    physid_set (apicid, phys_cpu_present_map);
    if (apicid == boot_cpu_physical_apicid) {
        cpu = 0;
    }
    if (apicid > max_physical_apicid)
        max_physical_apicid = apicid;
    set_cpu_possible (cpu, true);
    set_cpu_present (cpu, true);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1870" endline="1875">
{
    pr_warning ("BIOS bug, APIC version is 0 for CPU#%d! " "fixing up to 0x10. (tell your hw vendor)\n", version);
    version = 0x10;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1878" endline="1888">
{
    int max = nr_cpu_ids;
    int thiscpu = max + disabled_cpus;
    pr_warning ("ACPI: NR_CPUS/possible_cpus limit of %i reached." "  Processor %d/0x%x ignored.\n", max, thiscpu, apicid);
    disabled_cpus++;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1899" endline="1906">
{
    cpu = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1942" endline="1944">
{
    return read_apic_id ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="1947" endline="1954">
{
    unsigned long val;
    apic_write (APIC_DFR, APIC_DFR_VALUE);
    val = apic_read (APIC_LDR) & ~APIC_LDR_MASK;
    val |= SET_APIC_LOGICAL_ID (1UL << smp_processor_id ());
    apic_write (APIC_LDR, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2155" endline="2155">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2271" endline="2275">
{
    disable_apic = 1;
    setup_clear_cpu_cap (X86_FEATURE_APIC);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2280" endline="2282">
{
    return setup_disableapic (arg);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2286" endline="2289">
{
    local_apic_timer_c2_ok = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2293" endline="2296">
{
    disable_apic_timer = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2300" endline="2303">
{
    disable_apic_timer = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2307" endline="2327">
{
    if (!arg) {
        return -EINVAL;
    }
    if (strcmp ("debug", arg) == 0)
        apic_verbosity = APIC_DEBUG;
    else if (strcmp ("verbose", arg) == 0)
        apic_verbosity = APIC_VERBOSE;
    else {
        pr_warning ("APIC Verbosity level %s not recognised" " use apic=verbose or apic=debug\n", arg);
        return -EINVAL;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2308" endline="2314">
{
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2320" endline="2324">
{
    pr_warning ("APIC Verbosity level %s not recognised" " use apic=verbose or apic=debug\n", arg);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic.c.ifdefed" startline="2331" endline="2341">
{
    if (!apic_phys)
        return -1;
    lapic_resource.start = apic_phys;
    lapic_resource.end = lapic_resource.start + PAGE_SIZE - 1;
    insert_resource (& iomem_resource, & lapic_resource);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="103" endline="109">
{
    skip_ioapic_setup = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="112" endline="116">
{
    arch_disable_smp_support ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="134" endline="140">
{
    struct irq_pin_list *pin;
    pin = kzalloc_node (sizeof (*pin), GFP_ATOMIC, node);
    return pin;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="176" endline="197">
{
    struct irq_cfg *cfg;
    struct irq_desc *desc;
    int count;
    int node;
    int i;
    cfg = irq_cfgx;
    count = ARRAY_SIZE (irq_cfgx);
    node = cpu_to_node (boot_cpu_id);
    for (i = 0; i < count; i++) {
        desc = irq_to_desc (i);
        desc->chip_data = &cfg[i];
        zalloc_cpumask_var_node (& cfg [i].domain, GFP_NOWAIT, node);
        zalloc_cpumask_var_node (& cfg [i].old_domain, GFP_NOWAIT, node);
        if (i < NR_IRQS_LEGACY)
            cpumask_setall (cfg[i].domain);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="187" endline="194">
{
    desc = irq_to_desc (i);
    desc->chip_data = &cfg[i];
    zalloc_cpumask_var_node (& cfg [i].domain, GFP_NOWAIT, node);
    zalloc_cpumask_var_node (& cfg [i].old_domain, GFP_NOWAIT, node);
    if (i < NR_IRQS_LEGACY)
        cpumask_setall (cfg[i].domain);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="356" endline="358">
{
    return irq < nr_irqs ? irq_cfgx + irq : NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="371" endline="374">
{
    return (void __iomem *) __fix_to_virt (FIX_IO_APIC_BASE_0 +idx) + (mp_ioapics[idx].apicaddr & ~PAGE_MASK);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="377" endline="380">
{
    struct io_apic __iomem *io_apic = io_apic_base (apic);
    writel (vector, & io_apic -> eoi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="383" endline="387">
{
    struct io_apic __iomem *io_apic = io_apic_base (apic);
    writel (reg, & io_apic -> index);
    return readl (&io_apic->data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="390" endline="394">
{
    struct io_apic __iomem *io_apic = io_apic_base (apic);
    writel (reg, & io_apic -> index);
    writel (value, & io_apic -> data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="403" endline="409">
{
    struct io_apic __iomem *io_apic = io_apic_base (apic);
    if (sis_apic_bug)
        writel (reg, &io_apic->index);
    writel (value, & io_apic -> data);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="412" endline="438">
{
    struct irq_pin_list *entry;
    unsigned long flags;
    spin_lock_irqsave (& ioapic_lock, flags);
    entry = cfg->irq_2_pin;
    for (;;) {
        unsigned int reg;
        int pin;
        if (!entry)
            break;
        pin = entry->pin;
        reg = io_apic_read (entry->apic, 0x10 + pin * 2);
        if (reg & IO_APIC_REDIR_REMOTE_IRR) {
            spin_unlock_irqrestore (& ioapic_lock, flags);
            return true;
        }
        if (!entry->next)
            break;
        entry = entry->next;
    }
    spin_unlock_irqrestore (& ioapic_lock, flags);
    return false;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="418" endline="434">
{
    unsigned int reg;
    int pin;
    if (!entry)
        break;
    pin = entry->pin;
    reg = io_apic_read (entry->apic, 0x10 + pin * 2);
    if (reg & IO_APIC_REDIR_REMOTE_IRR) {
        spin_unlock_irqrestore (& ioapic_lock, flags);
        return true;
    }
    if (!entry->next)
        break;
    entry = entry->next;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="427" endline="430">
{
    spin_unlock_irqrestore (& ioapic_lock, flags);
    return true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="446" endline="454">
{
    union entry_union eu;
    unsigned long flags;
    spin_lock_irqsave (& ioapic_lock, flags);
    eu.w1 = io_apic_read (apic, 0x10 + 2 * pin);
    eu.w2 = io_apic_read (apic, 0x11 + 2 * pin);
    spin_unlock_irqrestore (& ioapic_lock, flags);
    return eu.entry;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="464" endline="470">
{
    union entry_union eu = {{0, 0}};
    eu.entry = e;
    io_apic_write (apic, 0x11 + 2 * pin, eu.w2);
    io_apic_write (apic, 0x10 + 2 * pin, eu.w1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="473" endline="478">
{
    unsigned long flags;
    spin_lock_irqsave (& ioapic_lock, flags);
    __ioapic_write_entry (apic, pin, e);
    spin_unlock_irqrestore (& ioapic_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="486" endline="494">
{
    unsigned long flags;
    union entry_union eu = {
        .entry.mask = 1
    };
    spin_lock_irqsave (& ioapic_lock, flags);
    io_apic_write (apic, 0x10 + 2 * pin, eu.w1);
    io_apic_write (apic, 0x11 + 2 * pin, eu.w2);
    spin_unlock_irqrestore (& ioapic_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="502" endline="531">
{
    struct irq_pin_list *entry;
    entry = cfg->irq_2_pin;
    if (!entry) {
        entry = get_one_free_irq_2_pin (node);
        if (!entry) {
            printk (KERN_ERR "can not alloc irq_2_pin to add %d - %d\n", apic, pin);
            return;
        }
        cfg->irq_2_pin = entry;
        entry->apic = apic;
        entry->pin = pin;
        return;
    }
    while (entry->next) {
        if (entry->apic == apic && entry->pin == pin)
            return;
        entry = entry->next;
    }
    entry->next = get_one_free_irq_2_pin (node);
    entry = entry->next;
    entry->apic = apic;
    entry->pin = pin;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="506" endline="517">
{
    entry = get_one_free_irq_2_pin (node);
    if (!entry) {
        printk (KERN_ERR "can not alloc irq_2_pin to add %d - %d\n", apic, pin);
        return;
    }
    cfg->irq_2_pin = entry;
    entry->apic = apic;
    entry->pin = pin;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="508" endline="512">
{
    printk (KERN_ERR "can not alloc irq_2_pin to add %d - %d\n", apic, pin);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="519" endline="525">
{
    if (entry->apic == apic && entry->pin == pin)
        return;
    entry = entry->next;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="539" endline="557">
{
    struct irq_pin_list *entry = cfg->irq_2_pin;
    int replaced = 0;
    while (entry) {
        if (entry->apic == oldapic && entry->pin == oldpin) {
            entry->apic = newapic;
            entry->pin = newpin;
            replaced = 1;
            break;
        }
        entry = entry->next;
    }
    if (!replaced)
        add_pin_to_irq_node (cfg, node, newapic, newpin);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="543" endline="552">
{
    if (entry->apic == oldapic && entry->pin == oldpin) {
        entry->apic = newapic;
        entry->pin = newpin;
        replaced = 1;
        break;
    }
    entry = entry->next;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="544" endline="550">
{
    entry->apic = newapic;
    entry->pin = newpin;
    replaced = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="562" endline="576">
{
    int pin;
    struct irq_pin_list *entry;
    for (entry = cfg->irq_2_pin; entry != NULL; entry = entry->next) {
        unsigned int reg;
        pin = entry->pin;
        reg = io_apic_read (entry->apic, 0x10 + pin * 2);
        reg &= mask_and;
        reg |= mask_or;
        io_apic_modify (entry -> apic, 0x10 + pin * 2, reg);
        if (final)
            final (entry);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="566" endline="575">
{
    unsigned int reg;
    pin = entry->pin;
    reg = io_apic_read (entry->apic, 0x10 + pin * 2);
    reg &= mask_and;
    reg |= mask_or;
    io_apic_modify (entry -> apic, 0x10 + pin * 2, reg);
    if (final)
        final (entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="579" endline="581">
{
    io_apic_modify_irq (cfg, ~ IO_APIC_REDIR_MASKED, 0, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="601" endline="603">
{
    io_apic_modify_irq (cfg, ~ 0, IO_APIC_REDIR_MASKED, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="606" endline="609">
{
    io_apic_modify_irq (cfg, ~ IO_APIC_REDIR_LEVEL_TRIGGER, IO_APIC_REDIR_MASKED, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="612" endline="615">
{
    io_apic_modify_irq (cfg, ~ IO_APIC_REDIR_MASKED, IO_APIC_REDIR_LEVEL_TRIGGER, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="619" endline="628">
{
    struct irq_cfg *cfg = desc->chip_data;
    unsigned long flags;
    BUG_ON (! cfg);
    spin_lock_irqsave (& ioapic_lock, flags);
    __mask_IO_APIC_irq (cfg);
    spin_unlock_irqrestore (& ioapic_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="631" endline="638">
{
    struct irq_cfg *cfg = desc->chip_data;
    unsigned long flags;
    spin_lock_irqsave (& ioapic_lock, flags);
    __unmask_IO_APIC_irq (cfg);
    spin_unlock_irqrestore (& ioapic_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="641" endline="645">
{
    struct irq_desc *desc = irq_to_desc (irq);
    mask_IO_APIC_irq_desc (desc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="647" endline="651">
{
    struct irq_desc *desc = irq_to_desc (irq);
    unmask_IO_APIC_irq_desc (desc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="654" endline="665">
{
    struct IO_APIC_route_entry entry;
    entry = ioapic_read_entry (apic, pin);
    if (entry.delivery_mode == dest_SMI)
        return;
    ioapic_mask_entry (apic, pin);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="668" endline="674">
{
    int apic, pin;
    for (apic = 0; apic < nr_ioapics; apic++)
        for (pin = 0; pin < nr_ioapic_registers[apic]; pin++)
            clear_IO_APIC_pin (apic, pin);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="715" endline="740">
{
    int apic;
    struct IO_APIC_route_entry **ioapic_entries;
    ioapic_entries = kzalloc (sizeof (*ioapic_entries) * nr_ioapics, GFP_ATOMIC);
    if (!ioapic_entries)
        return 0;
    for (apic = 0; apic < nr_ioapics; apic++) {
        ioapic_entries[apic] = kzalloc (sizeof (struct IO_APIC_route_entry) * nr_ioapic_registers[apic], GFP_ATOMIC);
        if (!ioapic_entries[apic])
            goto nomem;
    }
    return ioapic_entries;
nomem :
    while (--apic >= 0)
        kfree (ioapic_entries[apic]);
    kfree (ioapic_entries);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="724" endline="730">
{
    ioapic_entries[apic] = kzalloc (sizeof (struct IO_APIC_route_entry) * nr_ioapic_registers[apic], GFP_ATOMIC);
    if (!ioapic_entries[apic])
        goto nomem;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="746" endline="762">
{
    int apic, pin;
    if (!ioapic_entries)
        return -ENOMEM;
    for (apic = 0; apic < nr_ioapics; apic++) {
        if (!ioapic_entries[apic])
            return -ENOMEM;
        for (pin = 0; pin < nr_ioapic_registers[apic]; pin++)
            ioapic_entries[apic][pin] = ioapic_read_entry (apic, pin);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="752" endline="759">
{
    if (!ioapic_entries[apic])
        return -ENOMEM;
    for (pin = 0; pin < nr_ioapic_registers[apic]; pin++)
        ioapic_entries[apic][pin] = ioapic_read_entry (apic, pin);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="768" endline="788">
{
    int apic, pin;
    if (!ioapic_entries)
        return;
    for (apic = 0; apic < nr_ioapics; apic++) {
        if (!ioapic_entries[apic])
            break;
        for (pin = 0; pin < nr_ioapic_registers[apic]; pin++) {
            struct IO_APIC_route_entry entry;
            entry = ioapic_entries[apic][pin];
            if (!entry.mask) {
                entry.mask = 1;
                ioapic_write_entry (apic, pin, entry);
            }
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="774" endline="787">
{
    if (!ioapic_entries[apic])
        break;
    for (pin = 0; pin < nr_ioapic_registers[apic]; pin++) {
        struct IO_APIC_route_entry entry;
        entry = ioapic_entries[apic][pin];
        if (!entry.mask) {
            entry.mask = 1;
            ioapic_write_entry (apic, pin, entry);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="778" endline="786">
{
    struct IO_APIC_route_entry entry;
    entry = ioapic_entries[apic][pin];
    if (!entry.mask) {
        entry.mask = 1;
        ioapic_write_entry (apic, pin, entry);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="782" endline="785">
{
    entry.mask = 1;
    ioapic_write_entry (apic, pin, entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="794" endline="809">
{
    int apic, pin;
    if (!ioapic_entries)
        return -ENOMEM;
    for (apic = 0; apic < nr_ioapics; apic++) {
        if (!ioapic_entries[apic])
            return -ENOMEM;
        for (pin = 0; pin < nr_ioapic_registers[apic]; pin++)
            ioapic_write_entry (apic, pin, ioapic_entries[apic][pin]);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="800" endline="807">
{
    if (!ioapic_entries[apic])
        return -ENOMEM;
    for (pin = 0; pin < nr_ioapic_registers[apic]; pin++)
        ioapic_write_entry (apic, pin, ioapic_entries[apic][pin]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="812" endline="819">
{
    int apic;
    for (apic = 0; apic < nr_ioapics; apic++)
        kfree (ioapic_entries[apic]);
    kfree (ioapic_entries);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="825" endline="836">
{
    int i;
    for (i = 0; i < mp_irq_entries; i++)
        if (mp_irqs[i].irqtype == type && (mp_irqs[i].dstapic == mp_ioapics[apic].apicid || mp_irqs[i].dstapic == MP_APIC_ALL) && mp_irqs[i].dstirq == pin)
            return i;
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="842" endline="855">
{
    int i;
    for (i = 0; i < mp_irq_entries; i++) {
        int lbus = mp_irqs[i].srcbus;
        if (test_bit (lbus, mp_bus_not_pci) && (mp_irqs[i].irqtype == type) && (mp_irqs[i].srcbusirq == irq))
            return mp_irqs[i].dstirq;
    }
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="845" endline="853">
{
    int lbus = mp_irqs[i].srcbus;
    if (test_bit (lbus, mp_bus_not_pci) && (mp_irqs[i].irqtype == type) && (mp_irqs[i].srcbusirq == irq))
        return mp_irqs[i].dstirq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="858" endline="878">
{
    int i;
    for (i = 0; i < mp_irq_entries; i++) {
        int lbus = mp_irqs[i].srcbus;
        if (test_bit (lbus, mp_bus_not_pci) && (mp_irqs[i].irqtype == type) && (mp_irqs[i].srcbusirq == irq))
            break;
    }
    if (i < mp_irq_entries) {
        int apic;
        for (apic = 0; apic < nr_ioapics; apic++) {
            if (mp_ioapics[apic].apicid == mp_irqs[i].dstapic)
                return apic;
        }
    }
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="861" endline="868">
{
    int lbus = mp_irqs[i].srcbus;
    if (test_bit (lbus, mp_bus_not_pci) && (mp_irqs[i].irqtype == type) && (mp_irqs[i].srcbusirq == irq))
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="869" endline="875">
{
    int apic;
    for (apic = 0; apic < nr_ioapics; apic++) {
        if (mp_ioapics[apic].apicid == mp_irqs[i].dstapic)
            return apic;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="871" endline="874">
{
    if (mp_ioapics[apic].apicid == mp_irqs[i].dstapic)
        return apic;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="924" endline="963">
{
    int bus = mp_irqs[idx].srcbus;
    int polarity;
    switch (mp_irqs[idx].irqflag & 3) {
    case 0 :
        if (test_bit (bus, mp_bus_not_pci))
            polarity = default_ISA_polarity (idx);
        else
            polarity = default_PCI_polarity (idx);
        break;
    case 1 :
        {
            polarity = 0;
            break;
        }
    case 2 :
        {
            printk (KERN_WARNING "broken BIOS!!\n");
            polarity = 1;
            break;
        }
    case 3 :
        {
            polarity = 1;
            break;
        }
    default :
        {
            printk (KERN_WARNING "broken BIOS!!\n");
            polarity = 1;
            break;
        }
    }
    return polarity;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="932" endline="961">
{
case 0 :
    if (test_bit (bus, mp_bus_not_pci))
        polarity = default_ISA_polarity (idx);
    else
        polarity = default_PCI_polarity (idx);
    break;
case 1 :
    {
        polarity = 0;
        break;
    }
case 2 :
    {
        printk (KERN_WARNING "broken BIOS!!\n");
        polarity = 1;
        break;
    }
case 3 :
    {
        polarity = 1;
        break;
    }
default :
    {
        printk (KERN_WARNING "broken BIOS!!\n");
        polarity = 1;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="940" endline="943">
{
    polarity = 0;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="945" endline="949">
{
    printk (KERN_WARNING "broken BIOS!!\n");
    polarity = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="951" endline="954">
{
    polarity = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="956" endline="960">
{
    printk (KERN_WARNING "broken BIOS!!\n");
    polarity = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="966" endline="1035">
{
    int bus = mp_irqs[idx].srcbus;
    int trigger;
    switch ((mp_irqs[idx].irqflag >> 2) & 3) {
    case 0 :
        if (test_bit (bus, mp_bus_not_pci))
            trigger = default_ISA_trigger (idx);
        else
            trigger = default_PCI_trigger (idx);
        break;
    case 1 :
        {
            trigger = 0;
            break;
        }
    case 2 :
        {
            printk (KERN_WARNING "broken BIOS!!\n");
            trigger = 1;
            break;
        }
    case 3 :
        {
            trigger = 1;
            break;
        }
    default :
        {
            printk (KERN_WARNING "broken BIOS!!\n");
            trigger = 0;
            break;
        }
    }
    return trigger;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="974" endline="1033">
{
case 0 :
    if (test_bit (bus, mp_bus_not_pci))
        trigger = default_ISA_trigger (idx);
    else
        trigger = default_PCI_trigger (idx);
    break;
case 1 :
    {
        trigger = 0;
        break;
    }
case 2 :
    {
        printk (KERN_WARNING "broken BIOS!!\n");
        trigger = 1;
        break;
    }
case 3 :
    {
        trigger = 1;
        break;
    }
default :
    {
        printk (KERN_WARNING "broken BIOS!!\n");
        trigger = 0;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1012" endline="1015">
{
    trigger = 0;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1017" endline="1021">
{
    printk (KERN_WARNING "broken BIOS!!\n");
    trigger = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1023" endline="1026">
{
    trigger = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1028" endline="1032">
{
    printk (KERN_WARNING "broken BIOS!!\n");
    trigger = 0;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1038" endline="1040">
{
    return MPBIOS_polarity (idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1043" endline="1045">
{
    return MPBIOS_trigger (idx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1049" endline="1096">
{
    int irq, i;
    int bus = mp_irqs[idx].srcbus;
    if (mp_irqs[idx].dstirq != pin)
        printk (KERN_ERR "broken BIOS or MPTABLE parser, ayiee!!\n");
    if (test_bit (bus, mp_bus_not_pci)) {
        irq = mp_irqs[idx].srcbusirq;
    }
    else {
        i = irq = 0;
        while (i < apic)
            irq += nr_ioapic_registers[i++];
        irq += pin;
        if (ioapic_renumber_irq)
            irq = ioapic_renumber_irq (apic, irq);
    }
    return irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1059" endline="1061">
{
    irq = mp_irqs[idx].srcbusirq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1061" endline="1074">
{
    i = irq = 0;
    while (i < apic)
        irq += nr_ioapic_registers[i++];
    irq += pin;
    if (ioapic_renumber_irq)
        irq = ioapic_renumber_irq (apic, irq);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1104" endline="1153">
{
    int apic, i, best_guess = -1;
    apic_printk (APIC_DEBUG, "querying PCI -> IRQ mapping bus:%d, slot:%d, pin:%d.\n", bus, slot, pin);
    if (test_bit (bus, mp_bus_not_pci)) {
        apic_printk (APIC_VERBOSE, "PCI BIOS passed nonexistent PCI bus %d!\n", bus);
        return -1;
    }
    for (i = 0; i < mp_irq_entries; i++) {
        int lbus = mp_irqs[i].srcbus;
        for (apic = 0; apic < nr_ioapics; apic++)
            if (mp_ioapics[apic].apicid == mp_irqs[i].dstapic || mp_irqs[i].dstapic == MP_APIC_ALL)
                break;
        if (!test_bit (lbus, mp_bus_not_pci) && !mp_irqs[i].irqtype && (bus == lbus) && (slot == ((mp_irqs[i].srcbusirq >> 2) & 0x1f))) {
            int irq = pin_2_irq (i, apic, mp_irqs[i].dstirq);
            if (!(apic || IO_APIC_IRQ (irq)))
                continue;
            if (pin == (mp_irqs[i].srcbusirq & 3)) {
                set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
                return irq;
            }
            if (best_guess < 0) {
                set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
                best_guess = irq;
            }
        }
    }
    return best_guess;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1110" endline="1114">
{
    apic_printk (APIC_VERBOSE, "PCI BIOS passed nonexistent PCI bus %d!\n", bus);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1115" endline="1151">
{
    int lbus = mp_irqs[i].srcbus;
    for (apic = 0; apic < nr_ioapics; apic++)
        if (mp_ioapics[apic].apicid == mp_irqs[i].dstapic || mp_irqs[i].dstapic == MP_APIC_ALL)
            break;
    if (!test_bit (lbus, mp_bus_not_pci) && !mp_irqs[i].irqtype && (bus == lbus) && (slot == ((mp_irqs[i].srcbusirq >> 2) & 0x1f))) {
        int irq = pin_2_irq (i, apic, mp_irqs[i].dstirq);
        if (!(apic || IO_APIC_IRQ (irq)))
            continue;
        if (pin == (mp_irqs[i].srcbusirq & 3)) {
            set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
            return irq;
        }
        if (best_guess < 0) {
            set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
            best_guess = irq;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1126" endline="1150">
{
    int irq = pin_2_irq (i, apic, mp_irqs[i].dstirq);
    if (!(apic || IO_APIC_IRQ (irq)))
        continue;
    if (pin == (mp_irqs[i].srcbusirq & 3)) {
        set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
        return irq;
    }
    if (best_guess < 0) {
        set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
        best_guess = irq;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1132" endline="1138">
{
    set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
    return irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1143" endline="1149">
{
    set_io_apic_irq_attr (irq_attr, apic, mp_irqs [i].dstirq, irq_trigger (i), irq_polarity (i));
    best_guess = irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1157" endline="1162">
{
    spin_lock (& vector_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1165" endline="1167">
{
    spin_unlock (& vector_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1171" endline="1246">
{
    static int current_vector = FIRST_DEVICE_VECTOR, current_offset = 0;
    unsigned int old_vector;
    int cpu, err;
    cpumask_var_t tmp_mask;
    if ((cfg->move_in_progress) || cfg->move_cleanup_count)
        return -EBUSY;
    if (!alloc_cpumask_var (&tmp_mask, GFP_ATOMIC))
        return -ENOMEM;
    old_vector = cfg->vector;
    if (old_vector) {
        cpumask_and (tmp_mask, mask, cpu_online_mask);
        cpumask_and (tmp_mask, cfg -> domain, tmp_mask);
        if (!cpumask_empty (tmp_mask)) {
            free_cpumask_var (tmp_mask);
            return 0;
        }
    }
    err = -ENOSPC;

    for_each_cpu_and (cpu, mask, cpu_online_mask) {
        int new_cpu;
        int vector, offset;
        apic->vector_allocation_domain (cpu, tmp_mask);
        vector = current_vector;
        offset = current_offset;
    next :
        vector += 8;
        if (vector >= first_system_vector) {
            offset = (offset + 1) % 8;
            vector = FIRST_DEVICE_VECTOR + offset;
        }
        if (unlikely (current_vector == vector))
            continue;
        if (test_bit (vector, used_vectors))
            goto next;
        for_each_cpu_and (new_cpu, tmp_mask, cpu_online_mask)
        if (per_cpu (vector_irq, new_cpu)[vector] != -1)
            goto next;
        current_vector = vector;
        current_offset = offset;
        if (old_vector) {
            cfg->move_in_progress = 1;
            cpumask_copy (cfg -> old_domain, cfg -> domain);
        }
        for_each_cpu_and (new_cpu, tmp_mask, cpu_online_mask)
        per_cpu (vector_irq, new_cpu) [vector] = irq;
        cfg->vector = vector;
        cpumask_copy (cfg -> domain, tmp_mask);
        err = 0;
        break;
    }

    free_cpumask_var (tmp_mask);
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1195" endline="1202">
{
    cpumask_and (tmp_mask, mask, cpu_online_mask);
    cpumask_and (tmp_mask, cfg -> domain, tmp_mask);
    if (!cpumask_empty (tmp_mask)) {
        free_cpumask_var (tmp_mask);
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1198" endline="1201">
{
    free_cpumask_var (tmp_mask);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1206" endline="1243">
{
    int new_cpu;
    int vector, offset;
    apic->vector_allocation_domain (cpu, tmp_mask);
    vector = current_vector;
    offset = current_offset;
next :
    vector += 8;
    if (vector >= first_system_vector) {
        offset = (offset + 1) % 8;
        vector = FIRST_DEVICE_VECTOR + offset;
    }
    if (unlikely (current_vector == vector))
        continue;
    if (test_bit (vector, used_vectors))
        goto next;
    for_each_cpu_and (new_cpu, tmp_mask, cpu_online_mask)
    if (per_cpu (vector_irq, new_cpu)[vector] != -1)
        goto next;
    current_vector = vector;
    current_offset = offset;
    if (old_vector) {
        cfg->move_in_progress = 1;
        cpumask_copy (cfg -> old_domain, cfg -> domain);
    }
    for_each_cpu_and (new_cpu, tmp_mask, cpu_online_mask)
    per_cpu (vector_irq, new_cpu) [vector] = irq;
    cfg->vector = vector;
    cpumask_copy (cfg -> domain, tmp_mask);
    err = 0;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1216" endline="1220">
{
    offset = (offset + 1) % 8;
    vector = FIRST_DEVICE_VECTOR + offset;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1233" endline="1236">
{
    cfg->move_in_progress = 1;
    cpumask_copy (cfg -> old_domain, cfg -> domain);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1250" endline="1258">
{
    int err;
    unsigned long flags;
    spin_lock_irqsave (& vector_lock, flags);
    err = __assign_irq_vector (irq, cfg, mask);
    spin_unlock_irqrestore (& vector_lock, flags);
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1261" endline="1285">
{
    int cpu, vector;
    BUG_ON (! cfg -> vector);
    vector = cfg->vector;
    for_each_cpu_and (cpu, cfg -> domain, cpu_online_mask)
    per_cpu (vector_irq, cpu) [vector] = -1;
    cfg->vector = 0;
    cpumask_clear (cfg -> domain);
    if (likely (!cfg->move_in_progress))
        return;
    for_each_cpu_and (cpu, cfg -> old_domain, cpu_online_mask)
    {
        for (vector = FIRST_EXTERNAL_VECTOR; vector < NR_VECTORS; vector++) {
            if (per_cpu (vector_irq, cpu)[vector] != irq)
                continue;
            per_cpu (vector_irq, cpu)[vector] = -1;
            break;
        }
    }
    cfg->move_in_progress = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1275" endline="1283">
{
    for (vector = FIRST_EXTERNAL_VECTOR; vector < NR_VECTORS; vector++) {
        if (per_cpu (vector_irq, cpu)[vector] != irq)
            continue;
        per_cpu (vector_irq, cpu)[vector] = -1;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1277" endline="1282">
{
    if (per_cpu (vector_irq, cpu)[vector] != irq)
        continue;
    per_cpu (vector_irq, cpu)[vector] = -1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1288" endline="1313">
{
    int irq, vector;
    struct irq_cfg *cfg;
    struct irq_desc *desc;

    for_each_irq_desc (irq, desc) {
        cfg = desc->chip_data;
        if (!cpumask_test_cpu (cpu, cfg->domain))
            continue;
        vector = cfg->vector;
        per_cpu (vector_irq, cpu)[vector] = irq;
    }

    for (vector = 0; vector < NR_VECTORS; ++vector) {
        irq = per_cpu (vector_irq, cpu)[vector];
        if (irq < 0)
            continue;
        cfg = irq_cfg (irq);
        if (!cpumask_test_cpu (cpu, cfg->domain))
            per_cpu (vector_irq, cpu)[vector] = -1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1296" endline="1302">
{
    cfg = desc->chip_data;
    if (!cpumask_test_cpu (cpu, cfg->domain))
        continue;
    vector = cfg->vector;
    per_cpu (vector_irq, cpu)[vector] = irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1304" endline="1312">
{
    irq = per_cpu (vector_irq, cpu)[vector];
    if (irq < 0)
        continue;
    cfg = irq_cfg (irq);
    if (!cpumask_test_cpu (cpu, cfg->domain))
        per_cpu (vector_irq, cpu)[vector] = -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1341" endline="1343">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1347" endline="1375">
{
    if ((trigger == IOAPIC_AUTO && IO_APIC_irq_trigger (irq)) || trigger == IOAPIC_LEVEL)
        desc->status |= IRQ_LEVEL;
    else
        desc->status &= ~IRQ_LEVEL;
    if (irq_remapped (irq)) {
        desc->status |= IRQ_MOVE_PCNTXT;
        if (trigger)
            set_irq_chip_and_handler_name (irq, &ir_ioapic_chip, handle_fasteoi_irq, "fasteoi");
        else
            set_irq_chip_and_handler_name (irq, &ir_ioapic_chip, handle_edge_irq, "edge");
        return;
    }
    if ((trigger == IOAPIC_AUTO && IO_APIC_irq_trigger (irq)) || trigger == IOAPIC_LEVEL)
        set_irq_chip_and_handler_name (irq, &ioapic_chip, handle_fasteoi_irq, "fasteoi");
    else
        set_irq_chip_and_handler_name (irq, &ioapic_chip, handle_edge_irq, "edge");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1355" endline="1365">
{
    desc->status |= IRQ_MOVE_PCNTXT;
    if (trigger)
        set_irq_chip_and_handler_name (irq, &ir_ioapic_chip, handle_fasteoi_irq, "fasteoi");
    else
        set_irq_chip_and_handler_name (irq, &ir_ioapic_chip, handle_edge_irq, "edge");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1381" endline="1448">
{
    memset (entry, 0, sizeof (* entry));
    if (intr_remapping_enabled) {
        struct intel_iommu *iommu = map_ioapic_to_ir (apic_id);
        struct irte irte;
        struct IR_IO_APIC_route_entry *ir_entry = (struct IR_IO_APIC_route_entry *) entry;
        int index;
        if (!iommu)
            panic ("No mapping iommu for ioapic %d\n", apic_id);
        index = alloc_irte (iommu, irq, 1);
        if (index < 0)
            panic ("Failed to allocate IRTE for ioapic %d\n", apic_id);
        memset (& irte, 0, sizeof (irte));
        irte.present = 1;
        irte.dst_mode = apic->irq_dest_mode;
        irte.trigger_mode = 0;
        irte.dlvry_mode = apic->irq_delivery_mode;
        irte.vector = vector;
        irte.dest_id = IRTE_DEST (destination);
        set_ioapic_sid (& irte, apic_id);
        modify_irte (irq, & irte);
        ir_entry->index2 = (index >> 15) & 0x1;
        ir_entry->zero = 0;
        ir_entry->format = 1;
        ir_entry->index = (index & 0x7fff);
        ir_entry->vector = pin;
    }
    else {
        entry->delivery_mode = apic->irq_delivery_mode;
        entry->dest_mode = apic->irq_dest_mode;
        entry->dest = destination;
        entry->vector = vector;
    }
    entry->mask = 0;
    entry->trigger = trigger;
    entry->polarity = polarity;
    if (trigger)
        entry->mask = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1387" endline="1431">
{
    struct intel_iommu *iommu = map_ioapic_to_ir (apic_id);
    struct irte irte;
    struct IR_IO_APIC_route_entry *ir_entry = (struct IR_IO_APIC_route_entry *) entry;
    int index;
    if (!iommu)
        panic ("No mapping iommu for ioapic %d\n", apic_id);
    index = alloc_irte (iommu, irq, 1);
    if (index < 0)
        panic ("Failed to allocate IRTE for ioapic %d\n", apic_id);
    memset (& irte, 0, sizeof (irte));
    irte.present = 1;
    irte.dst_mode = apic->irq_dest_mode;
    irte.trigger_mode = 0;
    irte.dlvry_mode = apic->irq_delivery_mode;
    irte.vector = vector;
    irte.dest_id = IRTE_DEST (destination);
    set_ioapic_sid (& irte, apic_id);
    modify_irte (irq, & irte);
    ir_entry->index2 = (index >> 15) & 0x1;
    ir_entry->zero = 0;
    ir_entry->format = 1;
    ir_entry->index = (index & 0x7fff);
    ir_entry->vector = pin;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1431" endline="1436">
{
    entry->delivery_mode = apic->irq_delivery_mode;
    entry->dest_mode = apic->irq_dest_mode;
    entry->dest = destination;
    entry->vector = vector;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1452" endline="1487">
{
    struct irq_cfg *cfg;
    struct IO_APIC_route_entry entry;
    unsigned int dest;
    if (!IO_APIC_IRQ (irq))
        return;
    cfg = desc->chip_data;
    if (assign_irq_vector (irq, cfg, apic->target_cpus ()))
        return;
    dest = apic->cpu_mask_to_apicid_and (cfg->domain, apic->target_cpus ());
    apic_printk (APIC_VERBOSE, KERN_DEBUG "IOAPIC[%d]: Set routing entry (%d-%d -> 0x%x -> " "IRQ %d Mode:%i Active:%i)\n", apic_id, mp_ioapics [apic_id].apicid, pin, cfg -> vector, irq, trigger, polarity);
    if (setup_ioapic_entry (mp_ioapics[apic_id].apicid, irq, &entry, dest, trigger, polarity, cfg->vector, pin)) {
        printk ("Failed to setup ioapic entry for ioapic  %d, pin %d\n", mp_ioapics [apic_id].apicid, pin);
        __clear_irq_vector (irq, cfg);
        return;
    }
    ioapic_register_intr (irq, desc, trigger);
    if (irq < NR_IRQS_LEGACY)
        disable_8259A_irq (irq);
    ioapic_write_entry (apic_id, pin, entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1475" endline="1480">
{
    printk ("Failed to setup ioapic entry for ioapic  %d, pin %d\n", mp_ioapics [apic_id].apicid, pin);
    __clear_irq_vector (irq, cfg);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1494" endline="1558">
{
    int apic_id = 0, pin, idx, irq;
    int notcon = 0;
    struct irq_desc *desc;
    struct irq_cfg *cfg;
    int node = cpu_to_node (boot_cpu_id);
    apic_printk (APIC_VERBOSE, KERN_DEBUG "init IO_APIC IRQs\n");
    for (pin = 0; pin < nr_ioapic_registers[apic_id]; pin++) {
        idx = find_irq_entry (apic_id, pin, mp_INT);
        if (idx == -1) {
            if (!notcon) {
                notcon = 1;
                apic_printk (APIC_VERBOSE, KERN_DEBUG " %d-%d", mp_ioapics [apic_id].apicid, pin);
            }
            else
                apic_printk (APIC_VERBOSE, " %d-%d", mp_ioapics[apic_id].apicid, pin);
            continue;
        }
        if (notcon) {
            apic_printk (APIC_VERBOSE, " (apicid-pin) not connected\n");
            notcon = 0;
        }
        irq = pin_2_irq (idx, apic_id, pin);
        if (apic->multi_timer_check && apic->multi_timer_check (apic_id, irq))
            continue;
        desc = irq_to_desc_alloc_node (irq, node);
        if (!desc) {
            printk (KERN_INFO "can not get irq_desc for %d\n", irq);
            continue;
        }
        cfg = desc->chip_data;
        add_pin_to_irq_node (cfg, node, apic_id, pin);
        setup_IO_APIC_irq (apic_id, pin, irq, desc, irq_trigger (idx), irq_polarity (idx));
    }
    if (notcon)
        apic_printk (APIC_VERBOSE, " (apicid-pin) not connected\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1511" endline="1553">
{
    idx = find_irq_entry (apic_id, pin, mp_INT);
    if (idx == -1) {
        if (!notcon) {
            notcon = 1;
            apic_printk (APIC_VERBOSE, KERN_DEBUG " %d-%d", mp_ioapics [apic_id].apicid, pin);
        }
        else
            apic_printk (APIC_VERBOSE, " %d-%d", mp_ioapics[apic_id].apicid, pin);
        continue;
    }
    if (notcon) {
        apic_printk (APIC_VERBOSE, " (apicid-pin) not connected\n");
        notcon = 0;
    }
    irq = pin_2_irq (idx, apic_id, pin);
    if (apic->multi_timer_check && apic->multi_timer_check (apic_id, irq))
        continue;
    desc = irq_to_desc_alloc_node (irq, node);
    if (!desc) {
        printk (KERN_INFO "can not get irq_desc for %d\n", irq);
        continue;
    }
    cfg = desc->chip_data;
    add_pin_to_irq_node (cfg, node, apic_id, pin);
    setup_IO_APIC_irq (apic_id, pin, irq, desc, irq_trigger (idx), irq_polarity (idx));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1513" endline="1523">
{
    if (!notcon) {
        notcon = 1;
        apic_printk (APIC_VERBOSE, KERN_DEBUG " %d-%d", mp_ioapics [apic_id].apicid, pin);
    }
    else
        apic_printk (APIC_VERBOSE, " %d-%d", mp_ioapics[apic_id].apicid, pin);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1514" endline="1519">
{
    notcon = 1;
    apic_printk (APIC_VERBOSE, KERN_DEBUG " %d-%d", mp_ioapics [apic_id].apicid, pin);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1524" endline="1528">
{
    apic_printk (APIC_VERBOSE, " (apicid-pin) not connected\n");
    notcon = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1541" endline="1544">
{
    printk (KERN_INFO "can not get irq_desc for %d\n", irq);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1565" endline="1595">
{
    struct IO_APIC_route_entry entry;
    if (intr_remapping_enabled)
        return;
    memset (& entry, 0, sizeof (entry));
    entry.dest_mode = apic->irq_dest_mode;
    entry.mask = 0;
    entry.dest = apic->cpu_mask_to_apicid (apic->target_cpus ());
    entry.delivery_mode = apic->irq_delivery_mode;
    entry.polarity = 0;
    entry.trigger = 0;
    entry.vector = vector;
    set_irq_chip_and_handler_name (0, & ioapic_chip, handle_edge_irq, "edge");
    ioapic_write_entry (apic_id, pin, entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1599" endline="1717">
{
    int apic, i;
    union IO_APIC_reg_00 reg_00;
    union IO_APIC_reg_01 reg_01;
    union IO_APIC_reg_02 reg_02;
    union IO_APIC_reg_03 reg_03;
    unsigned long flags;
    struct irq_cfg *cfg;
    struct irq_desc *desc;
    unsigned int irq;
    if (apic_verbosity == APIC_QUIET)
        return;
    printk (KERN_DEBUG "number of MP IRQ sources: %d.\n", mp_irq_entries);
    for (i = 0; i < nr_ioapics; i++)
        printk (KERN_DEBUG "number of IO-APIC #%d registers: %d.\n", mp_ioapics[i].apicid, nr_ioapic_registers[i]);
    printk (KERN_INFO "testing the IO APIC.......................\n");
    for (apic = 0; apic < nr_ioapics; apic++) {
        spin_lock_irqsave (& ioapic_lock, flags);
        reg_00.raw = io_apic_read (apic, 0);
        reg_01.raw = io_apic_read (apic, 1);
        if (reg_01.bits.version >= 0x10)
            reg_02.raw = io_apic_read (apic, 2);
        if (reg_01.bits.version >= 0x20)
            reg_03.raw = io_apic_read (apic, 3);
        spin_unlock_irqrestore (& ioapic_lock, flags);
        printk ("\n");
        printk (KERN_DEBUG "IO APIC #%d......\n", mp_ioapics [apic].apicid);
        printk (KERN_DEBUG ".... register #00: %08X\n", reg_00.raw);
        printk (KERN_DEBUG ".......    : physical APIC id: %02X\n", reg_00.bits.ID);
        printk (KERN_DEBUG ".......    : Delivery Type: %X\n", reg_00.bits.delivery_type);
        printk (KERN_DEBUG ".......    : LTS          : %X\n", reg_00.bits.LTS);
        printk (KERN_DEBUG ".... register #01: %08X\n", * (int *) & reg_01);
        printk (KERN_DEBUG ".......     : max redirection entries: %04X\n", reg_01.bits.entries);
        printk (KERN_DEBUG ".......     : PRQ implemented: %X\n", reg_01.bits.PRQ);
        printk (KERN_DEBUG ".......     : IO APIC version: %04X\n", reg_01.bits.version);
        if (reg_01.bits.version >= 0x10 && reg_02.raw != reg_01.raw) {
            printk (KERN_DEBUG ".... register #02: %08X\n", reg_02.raw);
            printk (KERN_DEBUG ".......     : arbitration: %02X\n", reg_02.bits.arbitration);
        }
        if (reg_01.bits.version >= 0x20 && reg_03.raw != reg_02.raw && reg_03.raw != reg_01.raw) {
            printk (KERN_DEBUG ".... register #03: %08X\n", reg_03.raw);
            printk (KERN_DEBUG ".......     : Boot DT    : %X\n", reg_03.bits.boot_DT);
        }
        printk (KERN_DEBUG ".... IRQ redirection table:\n");
        printk (KERN_DEBUG " NR Dst Mask Trig IRR Pol" " Stat Dmod Deli Vect:   \n");
        for (i = 0; i <= reg_01.bits.entries; i++) {
            struct IO_APIC_route_entry entry;
            entry = ioapic_read_entry (apic, i);
            printk (KERN_DEBUG " %02x %03X ", i, entry.dest);
            printk ("%1d    %1d    %1d   %1d   %1d    %1d    %1d    %02X\n", entry.mask, entry.trigger, entry.irr, entry.polarity, entry.delivery_status, entry.dest_mode, entry.delivery_mode, entry.vector);
        }
    }
    printk (KERN_DEBUG "IRQ to pin mappings:\n");

    for_each_irq_desc (irq, desc) {
        struct irq_pin_list *entry;
        cfg = desc->chip_data;
        entry = cfg->irq_2_pin;
        if (!entry)
            continue;
        printk (KERN_DEBUG "IRQ%d ", irq);
        for (;;) {
            printk ("-> %d:%d", entry -> apic, entry -> pin);
            if (!entry->next)
                break;
            entry = entry->next;
        }
        printk ("\n");
    }

    printk (KERN_INFO ".................................... done.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1624" endline="1695">
{
    spin_lock_irqsave (& ioapic_lock, flags);
    reg_00.raw = io_apic_read (apic, 0);
    reg_01.raw = io_apic_read (apic, 1);
    if (reg_01.bits.version >= 0x10)
        reg_02.raw = io_apic_read (apic, 2);
    if (reg_01.bits.version >= 0x20)
        reg_03.raw = io_apic_read (apic, 3);
    spin_unlock_irqrestore (& ioapic_lock, flags);
    printk ("\n");
    printk (KERN_DEBUG "IO APIC #%d......\n", mp_ioapics [apic].apicid);
    printk (KERN_DEBUG ".... register #00: %08X\n", reg_00.raw);
    printk (KERN_DEBUG ".......    : physical APIC id: %02X\n", reg_00.bits.ID);
    printk (KERN_DEBUG ".......    : Delivery Type: %X\n", reg_00.bits.delivery_type);
    printk (KERN_DEBUG ".......    : LTS          : %X\n", reg_00.bits.LTS);
    printk (KERN_DEBUG ".... register #01: %08X\n", * (int *) & reg_01);
    printk (KERN_DEBUG ".......     : max redirection entries: %04X\n", reg_01.bits.entries);
    printk (KERN_DEBUG ".......     : PRQ implemented: %X\n", reg_01.bits.PRQ);
    printk (KERN_DEBUG ".......     : IO APIC version: %04X\n", reg_01.bits.version);
    if (reg_01.bits.version >= 0x10 && reg_02.raw != reg_01.raw) {
        printk (KERN_DEBUG ".... register #02: %08X\n", reg_02.raw);
        printk (KERN_DEBUG ".......     : arbitration: %02X\n", reg_02.bits.arbitration);
    }
    if (reg_01.bits.version >= 0x20 && reg_03.raw != reg_02.raw && reg_03.raw != reg_01.raw) {
        printk (KERN_DEBUG ".... register #03: %08X\n", reg_03.raw);
        printk (KERN_DEBUG ".......     : Boot DT    : %X\n", reg_03.bits.boot_DT);
    }
    printk (KERN_DEBUG ".... IRQ redirection table:\n");
    printk (KERN_DEBUG " NR Dst Mask Trig IRR Pol" " Stat Dmod Deli Vect:   \n");
    for (i = 0; i <= reg_01.bits.entries; i++) {
        struct IO_APIC_route_entry entry;
        entry = ioapic_read_entry (apic, i);
        printk (KERN_DEBUG " %02x %03X ", i, entry.dest);
        printk ("%1d    %1d    %1d   %1d   %1d    %1d    %1d    %02X\n", entry.mask, entry.trigger, entry.irr, entry.polarity, entry.delivery_status, entry.dest_mode, entry.delivery_mode, entry.vector);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1653" endline="1656">
{
    printk (KERN_DEBUG ".... register #02: %08X\n", reg_02.raw);
    printk (KERN_DEBUG ".......     : arbitration: %02X\n", reg_02.bits.arbitration);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1664" endline="1667">
{
    printk (KERN_DEBUG ".... register #03: %08X\n", reg_03.raw);
    printk (KERN_DEBUG ".......     : Boot DT    : %X\n", reg_03.bits.boot_DT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1674" endline="1694">
{
    struct IO_APIC_route_entry entry;
    entry = ioapic_read_entry (apic, i);
    printk (KERN_DEBUG " %02x %03X ", i, entry.dest);
    printk ("%1d    %1d    %1d   %1d   %1d    %1d    %1d    %02X\n", entry.mask, entry.trigger, entry.irr, entry.polarity, entry.delivery_status, entry.dest_mode, entry.delivery_mode, entry.vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1697" endline="1712">
{
    struct irq_pin_list *entry;
    cfg = desc->chip_data;
    entry = cfg->irq_2_pin;
    if (!entry)
        continue;
    printk (KERN_DEBUG "IRQ%d ", irq);
    for (;;) {
        printk ("-> %d:%d", entry -> apic, entry -> pin);
        if (!entry->next)
            break;
        entry = entry->next;
    }
    printk ("\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1705" endline="1710">
{
    printk ("-> %d:%d", entry -> apic, entry -> pin);
    if (!entry->next)
        break;
    entry = entry->next;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1720" endline="1732">
{
    int i;
    if (apic_verbosity == APIC_QUIET)
        return;
    printk (KERN_DEBUG);
    for (i = 0; i < 8; i++)
        printk (KERN_CONT "%08x", apic_read (base + i * 0x10));
    printk (KERN_CONT "\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1735" endline="1837">
{
    unsigned int i, v, ver, maxlvt;
    u64 icr;
    if (apic_verbosity == APIC_QUIET)
        return;
    printk (KERN_DEBUG "printing local APIC contents on CPU#%d/%d:\n", smp_processor_id (), hard_smp_processor_id ());
    v = apic_read (APIC_ID);
    printk (KERN_INFO "... APIC ID:      %08x (%01x)\n", v, read_apic_id ());
    v = apic_read (APIC_LVR);
    printk (KERN_INFO "... APIC VERSION: %08x\n", v);
    ver = GET_APIC_VERSION (v);
    maxlvt = lapic_get_maxlvt ();
    v = apic_read (APIC_TASKPRI);
    printk (KERN_DEBUG "... APIC TASKPRI: %08x (%02x)\n", v, v & APIC_TPRI_MASK);
    if (APIC_INTEGRATED (ver)) {
        if (!APIC_XAPIC (ver)) {
            v = apic_read (APIC_ARBPRI);
            printk (KERN_DEBUG "... APIC ARBPRI: %08x (%02x)\n", v, v & APIC_ARBPRI_MASK);
        }
        v = apic_read (APIC_PROCPRI);
        printk (KERN_DEBUG "... APIC PROCPRI: %08x\n", v);
    }
    if (!APIC_INTEGRATED (ver) || maxlvt == 3) {
        v = apic_read (APIC_RRR);
        printk (KERN_DEBUG "... APIC RRR: %08x\n", v);
    }
    v = apic_read (APIC_LDR);
    printk (KERN_DEBUG "... APIC LDR: %08x\n", v);
    if (!x2apic_enabled ()) {
        v = apic_read (APIC_DFR);
        printk (KERN_DEBUG "... APIC DFR: %08x\n", v);
    }
    v = apic_read (APIC_SPIV);
    printk (KERN_DEBUG "... APIC SPIV: %08x\n", v);
    printk (KERN_DEBUG "... APIC ISR field:\n");
    print_APIC_field (APIC_ISR);
    printk (KERN_DEBUG "... APIC TMR field:\n");
    print_APIC_field (APIC_TMR);
    printk (KERN_DEBUG "... APIC IRR field:\n");
    print_APIC_field (APIC_IRR);
    if (APIC_INTEGRATED (ver)) {
        if (maxlvt > 3)
            apic_write (APIC_ESR, 0);
        v = apic_read (APIC_ESR);
        printk (KERN_DEBUG "... APIC ESR: %08x\n", v);
    }
    icr = apic_icr_read ();
    printk (KERN_DEBUG "... APIC ICR: %08x\n", (u32) icr);
    printk (KERN_DEBUG "... APIC ICR2: %08x\n", (u32) (icr >> 32));
    v = apic_read (APIC_LVTT);
    printk (KERN_DEBUG "... APIC LVTT: %08x\n", v);
    if (maxlvt > 3) {
        v = apic_read (APIC_LVTPC);
        printk (KERN_DEBUG "... APIC LVTPC: %08x\n", v);
    }
    v = apic_read (APIC_LVT0);
    printk (KERN_DEBUG "... APIC LVT0: %08x\n", v);
    v = apic_read (APIC_LVT1);
    printk (KERN_DEBUG "... APIC LVT1: %08x\n", v);
    if (maxlvt > 2) {
        v = apic_read (APIC_LVTERR);
        printk (KERN_DEBUG "... APIC LVTERR: %08x\n", v);
    }
    v = apic_read (APIC_TMICT);
    printk (KERN_DEBUG "... APIC TMICT: %08x\n", v);
    v = apic_read (APIC_TMCCT);
    printk (KERN_DEBUG "... APIC TMCCT: %08x\n", v);
    v = apic_read (APIC_TDCR);
    printk (KERN_DEBUG "... APIC TDCR: %08x\n", v);
    if (boot_cpu_has (X86_FEATURE_EXTAPIC)) {
        v = apic_read (APIC_EFEAT);
        maxlvt = (v >> 16) & 0xff;
        printk (KERN_DEBUG "... APIC EFEAT: %08x\n", v);
        v = apic_read (APIC_ECTRL);
        printk (KERN_DEBUG "... APIC ECTRL: %08x\n", v);
        for (i = 0; i < maxlvt; i++) {
            v = apic_read (APIC_EILVTn (i));
            printk (KERN_DEBUG "... APIC EILVT%d: %08x\n", i, v);
        }
    }
    printk ("\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1754" endline="1762">
{
    if (!APIC_XAPIC (ver)) {
        v = apic_read (APIC_ARBPRI);
        printk (KERN_DEBUG "... APIC ARBPRI: %08x (%02x)\n", v, v & APIC_ARBPRI_MASK);
    }
    v = apic_read (APIC_PROCPRI);
    printk (KERN_DEBUG "... APIC PROCPRI: %08x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1755" endline="1759">
{
    v = apic_read (APIC_ARBPRI);
    printk (KERN_DEBUG "... APIC ARBPRI: %08x (%02x)\n", v, v & APIC_ARBPRI_MASK);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1768" endline="1771">
{
    v = apic_read (APIC_RRR);
    printk (KERN_DEBUG "... APIC RRR: %08x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1775" endline="1778">
{
    v = apic_read (APIC_DFR);
    printk (KERN_DEBUG "... APIC DFR: %08x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1789" endline="1795">
{
    if (maxlvt > 3)
        apic_write (APIC_ESR, 0);
    v = apic_read (APIC_ESR);
    printk (KERN_DEBUG "... APIC ESR: %08x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1804" endline="1807">
{
    v = apic_read (APIC_LVTPC);
    printk (KERN_DEBUG "... APIC LVTPC: %08x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1813" endline="1816">
{
    v = apic_read (APIC_LVTERR);
    printk (KERN_DEBUG "... APIC LVTERR: %08x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1825" endline="1835">
{
    v = apic_read (APIC_EFEAT);
    maxlvt = (v >> 16) & 0xff;
    printk (KERN_DEBUG "... APIC EFEAT: %08x\n", v);
    v = apic_read (APIC_ECTRL);
    printk (KERN_DEBUG "... APIC ECTRL: %08x\n", v);
    for (i = 0; i < maxlvt; i++) {
        v = apic_read (APIC_EILVTn (i));
        printk (KERN_DEBUG "... APIC EILVT%d: %08x\n", i, v);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1831" endline="1834">
{
    v = apic_read (APIC_EILVTn (i));
    printk (KERN_DEBUG "... APIC EILVT%d: %08x\n", i, v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1840" endline="1847">
{
    int cpu;
    preempt_disable ();
    for_each_online_cpu (cpu)
    smp_call_function_single (cpu, print_local_APIC, NULL, 1);
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1850" endline="1879">
{
    unsigned int v;
    unsigned long flags;
    if (apic_verbosity == APIC_QUIET)
        return;
    printk (KERN_DEBUG "\nprinting PIC contents\n");
    spin_lock_irqsave (& i8259A_lock, flags);
    v = inb (0xa1) << 8 | inb (0x21);
    printk (KERN_DEBUG "... PIC  IMR: %04x\n", v);
    v = inb (0xa0) << 8 | inb (0x20);
    printk (KERN_DEBUG "... PIC  IRR: %04x\n", v);
    outb (0x0b, 0xa0);
    outb (0x0b, 0x20);
    v = inb (0xa0) << 8 | inb (0x20);
    outb (0x0a, 0xa0);
    outb (0x0a, 0x20);
    spin_unlock_irqrestore (& i8259A_lock, flags);
    printk (KERN_DEBUG "... PIC  ISR: %04x\n", v);
    v = inb (0x4d1) << 8 | inb (0x4d0);
    printk (KERN_DEBUG "... PIC ELCR: %04x\n", v);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1882" endline="1893">
{
    print_PIC ();
    if (!cpu_has_apic || disable_apic)
        return 0;
    print_all_local_APICs ();
    print_IO_APIC ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1902" endline="1959">
{
    union IO_APIC_reg_01 reg_01;
    int i8259_apic, i8259_pin;
    int apic;
    unsigned long flags;
    for (apic = 0; apic < nr_ioapics; apic++) {
        spin_lock_irqsave (& ioapic_lock, flags);
        reg_01.raw = io_apic_read (apic, 1);
        spin_unlock_irqrestore (& ioapic_lock, flags);
        nr_ioapic_registers[apic] = reg_01.bits.entries + 1;
    }
    for (apic = 0; apic < nr_ioapics; apic++) {
        int pin;
        for (pin = 0; pin < nr_ioapic_registers[apic]; pin++) {
            struct IO_APIC_route_entry entry;
            entry = ioapic_read_entry (apic, pin);
            if ((entry.mask == 0) && (entry.delivery_mode == dest_ExtINT)) {
                ioapic_i8259.apic = apic;
                ioapic_i8259.pin = pin;
                goto found_i8259;
            }
        }
    }
found_i8259 :
    i8259_pin = find_isa_irq_pin (0, mp_ExtINT);
    i8259_apic = find_isa_irq_apic (0, mp_ExtINT);
    if ((ioapic_i8259.pin == -1) && (i8259_pin >= 0)) {
        printk (KERN_WARNING "ExtINT not setup in hardware but reported by MP table\n");
        ioapic_i8259.pin = i8259_pin;
        ioapic_i8259.apic = i8259_apic;
    }
    if (((ioapic_i8259.apic != i8259_apic) || (ioapic_i8259.pin != i8259_pin)) && (i8259_pin >= 0) && (ioapic_i8259.pin >= 0)) {
        printk (KERN_WARNING "ExtINT in hardware and MP table differ\n");
    }
    clear_IO_APIC ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1911" endline="1916">
{
    spin_lock_irqsave (& ioapic_lock, flags);
    reg_01.raw = io_apic_read (apic, 1);
    spin_unlock_irqrestore (& ioapic_lock, flags);
    nr_ioapic_registers[apic] = reg_01.bits.entries + 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1917" endline="1933">
{
    int pin;
    for (pin = 0; pin < nr_ioapic_registers[apic]; pin++) {
        struct IO_APIC_route_entry entry;
        entry = ioapic_read_entry (apic, pin);
        if ((entry.mask == 0) && (entry.delivery_mode == dest_ExtINT)) {
            ioapic_i8259.apic = apic;
            ioapic_i8259.pin = pin;
            goto found_i8259;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1920" endline="1932">
{
    struct IO_APIC_route_entry entry;
    entry = ioapic_read_entry (apic, pin);
    if ((entry.mask == 0) && (entry.delivery_mode == dest_ExtINT)) {
        ioapic_i8259.apic = apic;
        ioapic_i8259.pin = pin;
        goto found_i8259;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1927" endline="1931">
{
    ioapic_i8259.apic = apic;
    ioapic_i8259.pin = pin;
    goto found_i8259;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1943" endline="1947">
{
    printk (KERN_WARNING "ExtINT not setup in hardware but reported by MP table\n");
    ioapic_i8259.pin = i8259_pin;
    ioapic_i8259.apic = i8259_apic;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1951" endline="1953">
{
    printk (KERN_WARNING "ExtINT in hardware and MP table differ\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1965" endline="2007">
{
    clear_IO_APIC ();
    if (ioapic_i8259.pin != -1 && !intr_remapping_enabled) {
        struct IO_APIC_route_entry entry;
        memset (& entry, 0, sizeof (entry));
        entry.mask = 0;
        entry.trigger = 0;
        entry.irr = 0;
        entry.polarity = 0;
        entry.delivery_status = 0;
        entry.dest_mode = 0;
        entry.delivery_mode = dest_ExtINT;
        entry.vector = 0;
        entry.dest = read_apic_id ();
        ioapic_write_entry (ioapic_i8259.apic, ioapic_i8259.pin, entry);
    }
    if (cpu_has_apic)
        disconnect_bsp_APIC (!intr_remapping_enabled && ioapic_i8259.pin != -1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="1981" endline="1999">
{
    struct IO_APIC_route_entry entry;
    memset (& entry, 0, sizeof (entry));
    entry.mask = 0;
    entry.trigger = 0;
    entry.irr = 0;
    entry.polarity = 0;
    entry.delivery_status = 0;
    entry.dest_mode = 0;
    entry.delivery_mode = dest_ExtINT;
    entry.vector = 0;
    entry.dest = read_apic_id ();
    ioapic_write_entry (ioapic_i8259.apic, ioapic_i8259.pin, entry);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2130" endline="2133">
{
    no_timer_check = 1;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2145" endline="2170">
{
    unsigned long t1 = jiffies;
    unsigned long flags;
    if (no_timer_check)
        return 1;
    local_save_flags (flags);
    local_irq_enable ();
    mdelay ((10 * 1000) / HZ);
    local_irq_restore (flags);
    if (time_after (jiffies, t1 +4))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2196" endline="2212">
{
    int was_pending = 0;
    unsigned long flags;
    struct irq_cfg *cfg;
    spin_lock_irqsave (& ioapic_lock, flags);
    if (irq < NR_IRQS_LEGACY) {
        disable_8259A_irq (irq);
        if (i8259A_irq_pending (irq))
            was_pending = 1;
    }
    cfg = irq_cfg (irq);
    __unmask_IO_APIC_irq (cfg);
    spin_unlock_irqrestore (& ioapic_lock, flags);
    return was_pending;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2202" endline="2206">
{
    disable_8259A_irq (irq);
    if (i8259A_irq_pending (irq))
        was_pending = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2229" endline="2233">
{
    apic->send_IPI_self (irq_cfg (irq)->vector);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2501" endline="2501">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2505" endline="2511">
{
    struct irq_desc *desc = irq_to_desc (irq);
    irq_complete_move (& desc);
    move_native_irq (irq);
    ack_APIC_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2516" endline="2610">
{
    struct irq_desc *desc = irq_to_desc (irq);
    struct irq_cfg *cfg;
    int do_unmask_irq = 0;
    irq_complete_move (& desc);
    ack_APIC_irq ();
    if (unlikely (do_unmask_irq)) {
        cfg = desc->chip_data;
        if (!io_apic_level_ack_pending (cfg))
            move_masked_irq (irq);
        unmask_IO_APIC_irq_desc (desc);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2568" endline="2599">
{
    cfg = desc->chip_data;
    if (!io_apic_level_ack_pending (cfg))
        move_masked_irq (irq);
    unmask_IO_APIC_irq_desc (desc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2689" endline="2720">
{
    int irq;
    struct irq_desc *desc;
    struct irq_cfg *cfg;

    for_each_irq_desc (irq, desc) {
        cfg = desc->chip_data;
        if (IO_APIC_IRQ (irq) && cfg && !cfg->vector) {
            if (irq < NR_IRQS_LEGACY)
                make_8259A_irq (irq);
            else
                desc->chip = &no_irq_chip;
        }
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2705" endline="2719">
{
    cfg = desc->chip_data;
    if (IO_APIC_IRQ (irq) && cfg && !cfg->vector) {
        if (irq < NR_IRQS_LEGACY)
            make_8259A_irq (irq);
        else
            desc->chip = &no_irq_chip;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2707" endline="2718">
{
    if (irq < NR_IRQS_LEGACY)
        make_8259A_irq (irq);
    else
        desc->chip = &no_irq_chip;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2727" endline="2732">
{
    unsigned long v;
    v = apic_read (APIC_LVT0);
    apic_write (APIC_LVT0, v | APIC_LVT_MASKED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2735" endline="2740">
{
    unsigned long v;
    v = apic_read (APIC_LVT0);
    apic_write (APIC_LVT0, v & ~ APIC_LVT_MASKED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2743" endline="2745">
{
    ack_APIC_irq ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2755" endline="2759">
{
    desc->status &= ~IRQ_LEVEL;
    set_irq_chip_and_handler_name (irq, & lapic_chip, handle_edge_irq, "edge");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2762" endline="2777">
{
    apic_printk (APIC_VERBOSE, KERN_INFO "activating NMI Watchdog ...");
    enable_NMI_through_LVT0 ();
    apic_printk (APIC_VERBOSE, " done.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2787" endline="2836">
{
    int apic, pin, i;
    struct IO_APIC_route_entry entry0, entry1;
    unsigned char save_control, save_freq_select;
    pin = find_isa_irq_pin (8, mp_INT);
    if (pin == -1) {
        WARN_ON_ONCE (1);
        return;
    }
    apic = find_isa_irq_apic (8, mp_INT);
    if (apic == -1) {
        WARN_ON_ONCE (1);
        return;
    }
    entry0 = ioapic_read_entry (apic, pin);
    clear_IO_APIC_pin (apic, pin);
    memset (& entry1, 0, sizeof (entry1));
    entry1.dest_mode = 0;
    entry1.mask = 0;
    entry1.dest = hard_smp_processor_id ();
    entry1.delivery_mode = dest_ExtINT;
    entry1.polarity = entry0.polarity;
    entry1.trigger = 0;
    entry1.vector = 0;
    ioapic_write_entry (apic, pin, entry1);
    save_control = CMOS_READ (RTC_CONTROL);
    save_freq_select = CMOS_READ (RTC_FREQ_SELECT);
    CMOS_WRITE ((save_freq_select & ~ RTC_RATE_SELECT) | 0x6, RTC_FREQ_SELECT);
    CMOS_WRITE (save_control | RTC_PIE, RTC_CONTROL);
    i = 100;
    while (i-- > 0) {
        mdelay (10);
        if ((CMOS_READ (RTC_INTR_FLAGS) & RTC_PF) == RTC_PF)
            i -= 10;
    }
    CMOS_WRITE (save_control, RTC_CONTROL);
    CMOS_WRITE (save_freq_select, RTC_FREQ_SELECT);
    clear_IO_APIC_pin (apic, pin);
    ioapic_write_entry (apic, pin, entry0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2793" endline="2796">
{
    WARN_ON_ONCE (1);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2798" endline="2801">
{
    WARN_ON_ONCE (1);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2825" endline="2829">
{
    mdelay (10);
    if ((CMOS_READ (RTC_INTR_FLAGS) & RTC_PF) == RTC_PF)
        i -= 10;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2841" endline="2844">
{
    disable_timer_pin_1 = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2858" endline="3030">
{
    struct irq_desc *desc = irq_to_desc (0);
    struct irq_cfg *cfg = desc->chip_data;
    int node = cpu_to_node (boot_cpu_id);
    int apic1, pin1, apic2, pin2;
    unsigned long flags;
    int no_pin1 = 0;
    local_irq_save (flags);
    disable_8259A_irq (0);
    assign_irq_vector (0, cfg, apic -> target_cpus ());
    apic_write (APIC_LVT0, APIC_LVT_MASKED | APIC_DM_EXTINT);
    init_8259A (1);
    pin1 = find_isa_irq_pin (0, mp_INT);
    apic1 = find_isa_irq_apic (0, mp_INT);
    pin2 = ioapic_i8259.pin;
    apic2 = ioapic_i8259.apic;
    apic_printk (APIC_QUIET, KERN_INFO "..TIMER: vector=0x%02X " "apic1=%d pin1=%d apic2=%d pin2=%d\n", cfg -> vector, apic1, pin1, apic2, pin2);
    if (pin1 == -1) {
        if (intr_remapping_enabled)
            panic ("BIOS bug: timer not connected to IO-APIC");
        pin1 = pin2;
        apic1 = apic2;
        no_pin1 = 1;
    }
    else if (pin2 == -1) {
        pin2 = pin1;
        apic2 = apic1;
    }
    if (pin1 != -1) {
        if (no_pin1) {
            add_pin_to_irq_node (cfg, node, apic1, pin1);
            setup_timer_IRQ0_pin (apic1, pin1, cfg -> vector);
        }
        else {
            int idx;
            idx = find_irq_entry (apic1, pin1, mp_INT);
            if (idx != -1 && irq_trigger (idx))
                unmask_IO_APIC_irq_desc (desc);
        }
        if (timer_irq_works ()) {
            if (nmi_watchdog == NMI_IO_APIC) {
                setup_nmi ();
                enable_8259A_irq (0);
            }
            if (disable_timer_pin_1 > 0)
                clear_IO_APIC_pin (0, pin1);
            goto out;
        }
        if (intr_remapping_enabled)
            panic ("timer doesn't work through Interrupt-remapped IO-APIC");
        local_irq_disable ();
        clear_IO_APIC_pin (apic1, pin1);
        if (!no_pin1)
            apic_printk (APIC_QUIET, KERN_ERR "..MP-BIOS bug: " "8254 timer not connected to IO-APIC\n");
        apic_printk (APIC_QUIET, KERN_INFO "...trying to set up timer " "(IRQ0) through the 8259A ...\n");
        apic_printk (APIC_QUIET, KERN_INFO "..... (found apic %d pin %d) ...\n", apic2, pin2);
        replace_pin_at_irq_node (cfg, node, apic1, pin1, apic2, pin2);
        setup_timer_IRQ0_pin (apic2, pin2, cfg -> vector);
        enable_8259A_irq (0);
        if (timer_irq_works ()) {
            apic_printk (APIC_QUIET, KERN_INFO "....... works.\n");
            timer_through_8259 = 1;
            if (nmi_watchdog == NMI_IO_APIC) {
                disable_8259A_irq (0);
                setup_nmi ();
                enable_8259A_irq (0);
            }
            goto out;
        }
        local_irq_disable ();
        disable_8259A_irq (0);
        clear_IO_APIC_pin (apic2, pin2);
        apic_printk (APIC_QUIET, KERN_INFO "....... failed.\n");
    }
    if (nmi_watchdog == NMI_IO_APIC) {
        apic_printk (APIC_QUIET, KERN_WARNING "timer doesn't work " "through the IO-APIC - disabling NMI Watchdog!\n");
        nmi_watchdog = NMI_NONE;
    }
    apic_printk (APIC_QUIET, KERN_INFO "...trying to set up timer as Virtual Wire IRQ...\n");
    lapic_register_intr (0, desc);
    apic_write (APIC_LVT0, APIC_DM_FIXED | cfg -> vector);
    enable_8259A_irq (0);
    if (timer_irq_works ()) {
        apic_printk (APIC_QUIET, KERN_INFO "..... works.\n");
        goto out;
    }
    local_irq_disable ();
    disable_8259A_irq (0);
    apic_write (APIC_LVT0, APIC_LVT_MASKED | APIC_DM_FIXED | cfg -> vector);
    apic_printk (APIC_QUIET, KERN_INFO "..... failed.\n");
    apic_printk (APIC_QUIET, KERN_INFO "...trying to set up timer as ExtINT IRQ...\n");
    init_8259A (0);
    make_8259A_irq (0);
    apic_write (APIC_LVT0, APIC_DM_EXTINT);
    unlock_ExtINT_logic ();
    if (timer_irq_works ()) {
        apic_printk (APIC_QUIET, KERN_INFO "..... works.\n");
        goto out;
    }
    local_irq_disable ();
    apic_printk (APIC_QUIET, KERN_INFO "..... failed :(.\n");
    panic ("IO-APIC + timer doesn't work!  Boot with apic=debug and send a " "report.  Then try booting with the 'noapic' option.\n");
out :
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2911" endline="2917">
{
    if (intr_remapping_enabled)
        panic ("BIOS bug: timer not connected to IO-APIC");
    pin1 = pin2;
    apic1 = apic2;
    no_pin1 = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2917" endline="2920">
{
    pin2 = pin1;
    apic2 = apic1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2922" endline="2984">
{
    if (no_pin1) {
        add_pin_to_irq_node (cfg, node, apic1, pin1);
        setup_timer_IRQ0_pin (apic1, pin1, cfg -> vector);
    }
    else {
        int idx;
        idx = find_irq_entry (apic1, pin1, mp_INT);
        if (idx != -1 && irq_trigger (idx))
            unmask_IO_APIC_irq_desc (desc);
    }
    if (timer_irq_works ()) {
        if (nmi_watchdog == NMI_IO_APIC) {
            setup_nmi ();
            enable_8259A_irq (0);
        }
        if (disable_timer_pin_1 > 0)
            clear_IO_APIC_pin (0, pin1);
        goto out;
    }
    if (intr_remapping_enabled)
        panic ("timer doesn't work through Interrupt-remapped IO-APIC");
    local_irq_disable ();
    clear_IO_APIC_pin (apic1, pin1);
    if (!no_pin1)
        apic_printk (APIC_QUIET, KERN_ERR "..MP-BIOS bug: " "8254 timer not connected to IO-APIC\n");
    apic_printk (APIC_QUIET, KERN_INFO "...trying to set up timer " "(IRQ0) through the 8259A ...\n");
    apic_printk (APIC_QUIET, KERN_INFO "..... (found apic %d pin %d) ...\n", apic2, pin2);
    replace_pin_at_irq_node (cfg, node, apic1, pin1, apic2, pin2);
    setup_timer_IRQ0_pin (apic2, pin2, cfg -> vector);
    enable_8259A_irq (0);
    if (timer_irq_works ()) {
        apic_printk (APIC_QUIET, KERN_INFO "....... works.\n");
        timer_through_8259 = 1;
        if (nmi_watchdog == NMI_IO_APIC) {
            disable_8259A_irq (0);
            setup_nmi ();
            enable_8259A_irq (0);
        }
        goto out;
    }
    local_irq_disable ();
    disable_8259A_irq (0);
    clear_IO_APIC_pin (apic2, pin2);
    apic_printk (APIC_QUIET, KERN_INFO "....... failed.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2926" endline="2929">
{
    add_pin_to_irq_node (cfg, node, apic1, pin1);
    setup_timer_IRQ0_pin (apic1, pin1, cfg -> vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2929" endline="2939">
{
    int idx;
    idx = find_irq_entry (apic1, pin1, mp_INT);
    if (idx != -1 && irq_trigger (idx))
        unmask_IO_APIC_irq_desc (desc);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2940" endline="2948">
{
    if (nmi_watchdog == NMI_IO_APIC) {
        setup_nmi ();
        enable_8259A_irq (0);
    }
    if (disable_timer_pin_1 > 0)
        clear_IO_APIC_pin (0, pin1);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2941" endline="2944">
{
    setup_nmi ();
    enable_8259A_irq (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2967" endline="2976">
{
    apic_printk (APIC_QUIET, KERN_INFO "....... works.\n");
    timer_through_8259 = 1;
    if (nmi_watchdog == NMI_IO_APIC) {
        disable_8259A_irq (0);
        setup_nmi ();
        enable_8259A_irq (0);
    }
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2970" endline="2974">
{
    disable_8259A_irq (0);
    setup_nmi ();
    enable_8259A_irq (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="2986" endline="2990">
{
    apic_printk (APIC_QUIET, KERN_WARNING "timer doesn't work " "through the IO-APIC - disabling NMI Watchdog!\n");
    nmi_watchdog = NMI_NONE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3002" endline="3005">
{
    apic_printk (APIC_QUIET, KERN_INFO "..... works.\n");
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3020" endline="3023">
{
    apic_printk (APIC_QUIET, KERN_INFO "..... works.\n");
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3052" endline="3072">
{
    io_apic_irqs = ~PIC_IRQS;
    apic_printk (APIC_VERBOSE, "ENABLING IO-APIC IRQs\n");
    sync_Arb_IDs ();
    setup_IO_APIC_irqs ();
    init_IO_APIC_traps ();
    check_timer ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3080" endline="3084">
{
    if (sis_apic_bug == -1)
        sis_apic_bug = 0;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3095" endline="3106">
{
    struct IO_APIC_route_entry *entry;
    struct sysfs_ioapic_data *data;
    int i;
    data = container_of (dev, struct sysfs_ioapic_data, dev);
    entry = data->entry;
    for (i = 0; i < nr_ioapic_registers[dev->id]; i++, entry++)
        *entry = ioapic_read_entry (dev->id, i);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3109" endline="3130">
{
    struct IO_APIC_route_entry *entry;
    struct sysfs_ioapic_data *data;
    unsigned long flags;
    union IO_APIC_reg_00 reg_00;
    int i;
    data = container_of (dev, struct sysfs_ioapic_data, dev);
    entry = data->entry;
    spin_lock_irqsave (& ioapic_lock, flags);
    reg_00.raw = io_apic_read (dev->id, 0);
    if (reg_00.bits.ID != mp_ioapics[dev->id].apicid) {
        reg_00.bits.ID = mp_ioapics[dev->id].apicid;
        io_apic_write (dev -> id, 0, reg_00.raw);
    }
    spin_unlock_irqrestore (& ioapic_lock, flags);
    for (i = 0; i < nr_ioapic_registers[dev->id]; i++)
        ioapic_write_entry (dev->id, i, entry[i]);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3121" endline="3124">
{
    reg_00.bits.ID = mp_ioapics[dev->id].apicid;
    io_apic_write (dev -> id, 0, reg_00.raw);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3139" endline="3168">
{
    struct sys_device *dev;
    int i, size, error;
    error = sysdev_class_register (&ioapic_sysdev_class);
    if (error)
        return error;
    for (i = 0; i < nr_ioapics; i++) {
        size = sizeof (struct sys_device) + nr_ioapic_registers[i] * sizeof (struct IO_APIC_route_entry);
        mp_ioapic_data[i] = kzalloc (size, GFP_KERNEL);
        if (!mp_ioapic_data[i]) {
            printk (KERN_ERR "Can't suspend/resume IOAPIC %d\n", i);
            continue;
        }
        dev = &mp_ioapic_data[i]->dev;
        dev->id = i;
        dev->cls = &ioapic_sysdev_class;
        error = sysdev_register (dev);
        if (error) {
            kfree (mp_ioapic_data [i]);
            mp_ioapic_data[i] = NULL;
            printk (KERN_ERR "Can't suspend/resume IOAPIC %d\n", i);
            continue;
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3147" endline="3165">
{
    size = sizeof (struct sys_device) + nr_ioapic_registers[i] * sizeof (struct IO_APIC_route_entry);
    mp_ioapic_data[i] = kzalloc (size, GFP_KERNEL);
    if (!mp_ioapic_data[i]) {
        printk (KERN_ERR "Can't suspend/resume IOAPIC %d\n", i);
        continue;
    }
    dev = &mp_ioapic_data[i]->dev;
    dev->id = i;
    dev->cls = &ioapic_sysdev_class;
    error = sysdev_register (dev);
    if (error) {
        kfree (mp_ioapic_data [i]);
        mp_ioapic_data[i] = NULL;
        printk (KERN_ERR "Can't suspend/resume IOAPIC %d\n", i);
        continue;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3151" endline="3154">
{
    printk (KERN_ERR "Can't suspend/resume IOAPIC %d\n", i);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3159" endline="3164">
{
    kfree (mp_ioapic_data [i]);
    mp_ioapic_data[i] = NULL;
    printk (KERN_ERR "Can't suspend/resume IOAPIC %d\n", i);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3177" endline="3216">
{
    unsigned int irq;
    unsigned int new;
    unsigned long flags;
    struct irq_cfg *cfg_new = NULL;
    struct irq_desc *desc_new = NULL;
    irq = 0;
    if (irq_want < nr_irqs_gsi)
        irq_want = nr_irqs_gsi;
    spin_lock_irqsave (& vector_lock, flags);
    for (new = irq_want; new < nr_irqs; new++) {
        desc_new = irq_to_desc_alloc_node (new, node);
        if (!desc_new) {
            printk (KERN_INFO "can not get irq_desc for %d\n", new);
            continue;
        }
        cfg_new = desc_new->chip_data;
        if (cfg_new->vector != 0)
            continue;
        desc_new = move_irq_desc (desc_new, node);
        if (__assign_irq_vector (new, cfg_new, apic->target_cpus ()) == 0)
            irq = new;
        break;
    }
    spin_unlock_irqrestore (& vector_lock, flags);
    if (irq > 0) {
        dynamic_irq_init (irq);
        if (desc_new)
            desc_new->chip_data = cfg_new;
    }
    return irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3190" endline="3206">
{
    desc_new = irq_to_desc_alloc_node (new, node);
    if (!desc_new) {
        printk (KERN_INFO "can not get irq_desc for %d\n", new);
        continue;
    }
    cfg_new = desc_new->chip_data;
    if (cfg_new->vector != 0)
        continue;
    desc_new = move_irq_desc (desc_new, node);
    if (__assign_irq_vector (new, cfg_new, apic->target_cpus ()) == 0)
        irq = new;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3192" endline="3195">
{
    printk (KERN_INFO "can not get irq_desc for %d\n", new);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3209" endline="3214">
{
    dynamic_irq_init (irq);
    if (desc_new)
        desc_new->chip_data = cfg_new;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3219" endline="3231">
{
    int node = cpu_to_node (boot_cpu_id);
    unsigned int irq_want;
    int irq;
    irq_want = nr_irqs_gsi;
    irq = create_irq_nr (irq_want, node);
    if (irq == 0)
        irq = -1;
    return irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3234" endline="3251">
{
    unsigned long flags;
    struct irq_cfg *cfg;
    struct irq_desc *desc;
    desc = irq_to_desc (irq);
    cfg = desc->chip_data;
    dynamic_irq_cleanup (irq);
    if (desc)
        desc->chip_data = cfg;
    free_irte (irq);
    spin_lock_irqsave (& vector_lock, flags);
    __clear_irq_vector (irq, cfg);
    spin_unlock_irqrestore (& vector_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3824" endline="3833">
{
    union IO_APIC_reg_01 reg_01;
    unsigned long flags;
    spin_lock_irqsave (& ioapic_lock, flags);
    reg_01.raw = io_apic_read (ioapic, 1);
    spin_unlock_irqrestore (& ioapic_lock, flags);
    return reg_01.bits.entries;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3836" endline="3855">
{
    int nr = 0;
    nr = acpi_probe_gsi ();
    if (nr > nr_irqs_gsi) {
        nr_irqs_gsi = nr;
    }
    else {
        int idx;
        nr = 0;
        for (idx = 0; idx < nr_ioapics; idx++)
            nr += io_apic_get_redir_entries (idx) + 1;
        if (nr > nr_irqs_gsi)
            nr_irqs_gsi = nr;
    }
    printk (KERN_DEBUG "nr_irqs_gsi: %d\n", nr_irqs_gsi);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3840" endline="3842">
{
    nr_irqs_gsi = nr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3842" endline="3852">
{
    int idx;
    nr = 0;
    for (idx = 0; idx < nr_ioapics; idx++)
        nr += io_apic_get_redir_entries (idx) + 1;
    if (nr > nr_irqs_gsi)
        nr_irqs_gsi = nr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3881" endline="3921">
{
    struct irq_desc *desc;
    struct irq_cfg *cfg;
    int node;
    int ioapic, pin;
    int trigger, polarity;
    ioapic = irq_attr->ioapic;
    if (!IO_APIC_IRQ (irq)) {
        apic_printk (APIC_QUIET, KERN_ERR "IOAPIC[%d]: Invalid reference to IRQ 0\n", ioapic);
        return -EINVAL;
    }
    if (dev)
        node = dev_to_node (dev);
    else
        node = cpu_to_node (boot_cpu_id);
    desc = irq_to_desc_alloc_node (irq, node);
    if (!desc) {
        printk (KERN_INFO "can not get irq_desc %d\n", irq);
        return 0;
    }
    pin = irq_attr->ioapic_pin;
    trigger = irq_attr->trigger;
    polarity = irq_attr->polarity;
    if (irq >= NR_IRQS_LEGACY) {
        cfg = desc->chip_data;
        add_pin_to_irq_node (cfg, node, ioapic, pin);
    }
    setup_IO_APIC_irq (ioapic, pin, irq, desc, trigger, polarity);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3889" endline="3893">
{
    apic_printk (APIC_QUIET, KERN_ERR "IOAPIC[%d]: Invalid reference to IRQ 0\n", ioapic);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3901" endline="3904">
{
    printk (KERN_INFO "can not get irq_desc %d\n", irq);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3913" endline="3916">
{
    cfg = desc->chip_data;
    add_pin_to_irq_node (cfg, node, ioapic, pin);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3925" endline="3942">
{
    int ioapic, pin;
    ioapic = irq_attr->ioapic;
    pin = irq_attr->ioapic_pin;
    if (test_bit (pin, mp_ioapic_routing[ioapic].pin_programmed)) {
        pr_debug ("Pin %d-%d already programmed\n", mp_ioapics [ioapic].apicid, pin);
        return 0;
    }
    set_bit (pin, mp_ioapic_routing [ioapic].pin_programmed);
    return __io_apic_set_pci_routing (dev, irq, irq_attr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="3934" endline="3938">
{
    pr_debug ("Pin %d-%d already programmed\n", mp_ioapics [ioapic].apicid, pin);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4113" endline="4142">
{
    unsigned long n;
    struct resource *res;
    char *mem;
    int i;
    if (nr_ioapics <= 0)
        return NULL;
    n = IOAPIC_RESOURCE_NAME_SIZE + sizeof (struct resource);
    n *= nr_ioapics;
    mem = alloc_bootmem (n);
    res = (void *) mem;
    if (mem != NULL) {
        mem += sizeof (struct resource) * nr_ioapics;
        for (i = 0; i < nr_ioapics; i++) {
            res[i].name = mem;
            res[i].flags = IORESOURCE_MEM | IORESOURCE_BUSY;
            sprintf (mem, "IOAPIC %u", i);
            mem += IOAPIC_RESOURCE_NAME_SIZE;
        }
    }
    ioapic_resources = res;
    return res;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4128" endline="4137">
{
    mem += sizeof (struct resource) * nr_ioapics;
    for (i = 0; i < nr_ioapics; i++) {
        res[i].name = mem;
        res[i].flags = IORESOURCE_MEM | IORESOURCE_BUSY;
        sprintf (mem, "IOAPIC %u", i);
        mem += IOAPIC_RESOURCE_NAME_SIZE;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4131" endline="4136">
{
    res[i].name = mem;
    res[i].flags = IORESOURCE_MEM | IORESOURCE_BUSY;
    sprintf (mem, "IOAPIC %u", i);
    mem += IOAPIC_RESOURCE_NAME_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4145" endline="4185">
{
    unsigned long ioapic_phys, idx = FIX_IO_APIC_BASE_0;
    struct resource *ioapic_res;
    int i;
    ioapic_res = ioapic_setup_resources ();
    for (i = 0; i < nr_ioapics; i++) {
        if (smp_found_config) {
            ioapic_phys = mp_ioapics[i].apicaddr;
        }
        else {
            ioapic_phys = (unsigned long) alloc_bootmem_pages (PAGE_SIZE);
            ioapic_phys = __pa (ioapic_phys);
        }
        set_fixmap_nocache (idx, ioapic_phys);
        apic_printk (APIC_VERBOSE, "mapped IOAPIC to %08lx (%08lx)\n", __fix_to_virt (idx), ioapic_phys);
        idx++;
        if (ioapic_res != NULL) {
            ioapic_res->start = ioapic_phys;
            ioapic_res->end = ioapic_phys + (4 * 1024) - 1;
            ioapic_res++;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4151" endline="4184">
{
    if (smp_found_config) {
        ioapic_phys = mp_ioapics[i].apicaddr;
    }
    else {
        ioapic_phys = (unsigned long) alloc_bootmem_pages (PAGE_SIZE);
        ioapic_phys = __pa (ioapic_phys);
    }
    set_fixmap_nocache (idx, ioapic_phys);
    apic_printk (APIC_VERBOSE, "mapped IOAPIC to %08lx (%08lx)\n", __fix_to_virt (idx), ioapic_phys);
    idx++;
    if (ioapic_res != NULL) {
        ioapic_res->start = ioapic_phys;
        ioapic_res->end = ioapic_phys + (4 * 1024) - 1;
        ioapic_res++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4152" endline="4165">
{
    ioapic_phys = mp_ioapics[i].apicaddr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4165" endline="4172">
{
    ioapic_phys = (unsigned long) alloc_bootmem_pages (PAGE_SIZE);
    ioapic_phys = __pa (ioapic_phys);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4179" endline="4183">
{
    ioapic_res->start = ioapic_phys;
    ioapic_res->end = ioapic_phys + (4 * 1024) - 1;
    ioapic_res++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4188" endline="4203">
{
    int i;
    struct resource *r = ioapic_resources;
    if (!r) {
        if (nr_ioapics > 0)
            printk (KERN_ERR "IO APIC resources couldn't be allocated.\n");
        return;
    }
    for (i = 0; i < nr_ioapics; i++) {
        insert_resource (& iomem_resource, r);
        r++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4192" endline="4197">
{
    if (nr_ioapics > 0)
        printk (KERN_ERR "IO APIC resources couldn't be allocated.\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/io_apic.c.ifdefed" startline="4199" endline="4202">
{
    insert_resource (& iomem_resource, r);
    r++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="28" endline="30">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="33" endline="35">
{
    return cpu_online_mask;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="38" endline="49">
{
    cpumask_clear (retmask);
    cpumask_bits (retmask)[0] = APIC_ALL_CPUS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="59" endline="69">
{
    unsigned long val;
    unsigned long num, id;
    num = smp_processor_id ();
    id = 1UL << num;
    apic_write (APIC_DFR, APIC_DFR_FLAT);
    val = apic_read (APIC_LDR) & ~APIC_LDR_MASK;
    val |= SET_APIC_LOGICAL_ID (id);
    apic_write (APIC_LDR, val);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="72" endline="78">
{
    unsigned long flags;
    local_irq_save (flags);
    __default_send_IPI_dest_field (mask, vector, apic -> dest_logical);
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="81" endline="85">
{
    unsigned long mask = cpumask_bits (cpumask)[0];
    _flat_send_IPI_mask (mask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="89" endline="97">
{
    unsigned long mask = cpumask_bits (cpumask)[0];
    int cpu = smp_processor_id ();
    if (cpu < BITS_PER_LONG)
        clear_bit (cpu, &mask);
    _flat_send_IPI_mask (mask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="100" endline="120">
{
    int cpu = smp_processor_id ();
    int hotplug = 0;
    if (hotplug || vector == NMI_VECTOR) {
        if (!cpumask_equal (cpu_online_mask, cpumask_of (cpu))) {
            unsigned long mask = cpumask_bits (cpu_online_mask)[0];
            if (cpu < BITS_PER_LONG)
                clear_bit (cpu, &mask);
            _flat_send_IPI_mask (mask, vector);
        }
    }
    else if (num_online_cpus () > 1) {
        __default_send_IPI_shortcut (APIC_DEST_ALLBUT, vector, apic -> dest_logical);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="107" endline="116">
{
    if (!cpumask_equal (cpu_online_mask, cpumask_of (cpu))) {
        unsigned long mask = cpumask_bits (cpu_online_mask)[0];
        if (cpu < BITS_PER_LONG)
            clear_bit (cpu, &mask);
        _flat_send_IPI_mask (mask, vector);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="108" endline="115">
{
    unsigned long mask = cpumask_bits (cpu_online_mask)[0];
    if (cpu < BITS_PER_LONG)
        clear_bit (cpu, &mask);
    _flat_send_IPI_mask (mask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="116" endline="119">
{
    __default_send_IPI_shortcut (APIC_DEST_ALLBUT, vector, apic -> dest_logical);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="123" endline="130">
{
    if (vector == NMI_VECTOR) {
        flat_send_IPI_mask (cpu_online_mask, vector);
    }
    else {
        __default_send_IPI_shortcut (APIC_DEST_ALLINC, vector, apic -> dest_logical);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="124" endline="126">
{
    flat_send_IPI_mask (cpu_online_mask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="126" endline="129">
{
    __default_send_IPI_shortcut (APIC_DEST_ALLINC, vector, apic -> dest_logical);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="133" endline="139">
{
    unsigned int id;
    id = (((x) >> 24) & 0xFFu);
    return id;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="142" endline="147">
{
    unsigned long x;
    x = ((id & 0xFFu) << 24);
    return x;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="150" endline="155">
{
    unsigned int id;
    id = flat_get_apic_id (apic_read (APIC_ID));
    return id;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="158" endline="160">
{
    return physid_isset (read_xapic_id (), phys_cpu_present_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="163" endline="165">
{
    return initial_apic_id >> index_msb;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="231" endline="246">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="249" endline="251">
{
    return cpu_online_mask;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="254" endline="257">
{
    cpumask_clear (retmask);
    cpumask_set_cpu (cpu, retmask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="260" endline="262">
{
    default_send_IPI_mask_sequence_phys (cpumask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="266" endline="268">
{
    default_send_IPI_mask_allbutself_phys (cpumask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="271" endline="273">
{
    default_send_IPI_mask_allbutself_phys (cpu_online_mask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="276" endline="278">
{
    physflat_send_IPI_mask (cpu_online_mask, vector);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="281" endline="293">
{
    int cpu;
    cpu = cpumask_first (cpumask);
    if ((unsigned) cpu < nr_cpu_ids)
        return per_cpu (x86_cpu_to_apicid, cpu);
    else
        return BAD_APICID;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="298" endline="313">
{
    int cpu;

    for_each_cpu_and (cpu, cpumask, andmask) {
        if (cpumask_test_cpu (cpu, cpu_online_mask))
            break;
    }

    if (cpu < nr_cpu_ids)
        return per_cpu (x86_cpu_to_apicid, cpu);
    return BAD_APICID;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/apic_flat_64.c.ifdefed" startline="305" endline="308">
{
    if (cpumask_test_cpu (cpu, cpu_online_mask))
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="63" endline="65">
{
    return per_cpu (irq_stat, cpu).__nmi_count;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="68" endline="73">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="80" endline="83">
{
    return per_cpu (irq_stat, cpu).apic_timer_irqs + per_cpu (irq_stat, cpu).irq0_irqs;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="108" endline="122">
{
    printk (KERN_CONT "\n");
    printk (KERN_WARNING "WARNING: CPU#%d: NMI appears to be stuck (%d->%d)!\n", cpu, prev_nmi_count [cpu], get_nmi_count (cpu));
    printk (KERN_WARNING "Please report this to bugzilla.kernel.org,\n");
    printk (KERN_WARNING "and attach the output of the 'dmesg' command.\n");
    per_cpu (wd_enabled, cpu) = 0;
    atomic_dec (& nmi_active);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="125" endline="127">
{
    apic_write (APIC_LVT0, APIC_DM_NMI | APIC_LVT_MASKED);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="130" endline="188">
{
    unsigned int *prev_nmi_count;
    int cpu;
    if (!nmi_watchdog_active () || !atomic_read (&nmi_active))
        return 0;
    prev_nmi_count = kmalloc (nr_cpu_ids * sizeof (int), GFP_KERNEL);
    if (!prev_nmi_count)
        goto error;
    alloc_cpumask_var (& backtrace_mask, GFP_KERNEL | __GFP_ZERO);
    printk (KERN_INFO "Testing NMI watchdog ... ");
    for_each_possible_cpu (cpu)
    prev_nmi_count [cpu] = get_nmi_count (cpu);
    local_irq_enable ();
    mdelay ((20 * 1000) / nmi_hz);

    for_each_online_cpu (cpu) {
        if (!per_cpu (wd_enabled, cpu))
            continue;
        if (get_nmi_count (cpu) - prev_nmi_count[cpu] <= 5)
            report_broken_nmi (cpu, prev_nmi_count);
    }

    endflag = 1;
    if (!atomic_read (&nmi_active)) {
        kfree (prev_nmi_count);
        atomic_set (& nmi_active, - 1);
        goto error;
    }
    printk ("OK.\n");
    if (nmi_watchdog == NMI_LOCAL_APIC)
        nmi_hz = lapic_adjust_nmi_hz (1);
    kfree (prev_nmi_count);
    return 0;
error :
    if (nmi_watchdog == NMI_IO_APIC) {
        if (!timer_through_8259)
            disable_8259A_irq (0);
        on_each_cpu (__acpi_nmi_disable, NULL, 1);
    }
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="154" endline="159">
{
    if (!per_cpu (wd_enabled, cpu))
        continue;
    if (get_nmi_count (cpu) - prev_nmi_count[cpu] <= 5)
        report_broken_nmi (cpu, prev_nmi_count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="161" endline="165">
{
    kfree (prev_nmi_count);
    atomic_set (& nmi_active, - 1);
    goto error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="178" endline="182">
{
    if (!timer_through_8259)
        disable_8259A_irq (0);
    on_each_cpu (__acpi_nmi_disable, NULL, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="191" endline="214">
{
    unsigned int nmi;
    if (!strncmp (str, "panic", 5)) {
        panic_on_timeout = 1;
        str = strchr (str, ',');
        if (!str)
            return 1;
        ++str;
    }
    if (!strncmp (str, "lapic", 5))
        nmi_watchdog = NMI_LOCAL_APIC;
    else if (!strncmp (str, "ioapic", 6))
        nmi_watchdog = NMI_IO_APIC;
    else {
        get_option (& str, & nmi);
        if (nmi >= NMI_INVALID)
            return 0;
        nmi_watchdog = nmi;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="194" endline="200">
{
    panic_on_timeout = 1;
    str = strchr (str, ',');
    if (!str)
        return 1;
    ++str;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="206" endline="211">
{
    get_option (& str, & nmi);
    if (nmi >= NMI_INVALID)
        return 0;
    nmi_watchdog = nmi;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="280" endline="282">
{
    apic_write (APIC_LVT0, APIC_DM_NMI);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="288" endline="291">
{
    if (atomic_read (&nmi_active) && nmi_watchdog == NMI_IO_APIC)
        on_each_cpu (__acpi_nmi_enable, NULL, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="297" endline="300">
{
    if (atomic_read (&nmi_active) && nmi_watchdog == NMI_IO_APIC)
        on_each_cpu (__acpi_nmi_disable, NULL, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="307" endline="309">
{
    __get_cpu_var (wd_enabled) = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="312" endline="332">
{
    if (__get_cpu_var (wd_enabled))
        return;
    if (smp_processor_id () != 0 && atomic_read (&nmi_active) <= 0)
        return;
    switch (nmi_watchdog) {
    case NMI_LOCAL_APIC :
        if (lapic_watchdog_init (nmi_hz) < 0) {
            __get_cpu_var (wd_enabled) = 0;
            return;
        }
    case NMI_IO_APIC :
        __get_cpu_var (wd_enabled) = 1;
        atomic_inc (& nmi_active);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="321" endline="331">
{
case NMI_LOCAL_APIC :
    if (lapic_watchdog_init (nmi_hz) < 0) {
        __get_cpu_var (wd_enabled) = 0;
        return;
    }
case NMI_IO_APIC :
    __get_cpu_var (wd_enabled) = 1;
    atomic_inc (& nmi_active);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="323" endline="326">
{
    __get_cpu_var (wd_enabled) = 0;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="335" endline="347">
{
    if (!nmi_watchdog_active ())
        return;
    if (__get_cpu_var (wd_enabled) == 0)
        return;
    if (nmi_watchdog == NMI_LOCAL_APIC)
        lapic_watchdog_stop ();
    else
        __acpi_nmi_disable (NULL);
    __get_cpu_var (wd_enabled) = 0;
    atomic_dec (& nmi_active);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="368" endline="387">
{
    if (nmi_watchdog_active ()) {
        unsigned cpu;

        for_each_present_cpu (cpu) {
            if (per_cpu (nmi_touch, cpu) != 1)
                per_cpu (nmi_touch, cpu) = 1;
        }

    }
    touch_softlockup_watchdog ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="369" endline="381">
{
    unsigned cpu;

    for_each_present_cpu (cpu) {
        if (per_cpu (nmi_touch, cpu) != 1)
            per_cpu (nmi_touch, cpu) = 1;
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="377" endline="380">
{
    if (per_cpu (nmi_touch, cpu) != 1)
        per_cpu (nmi_touch, cpu) = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="392" endline="467">
{
    unsigned int sum;
    int touched = 0;
    int cpu = smp_processor_id ();
    int rc = 0;
    if (notify_die (DIE_NMI, "nmi", regs, reason, 2, SIGINT) == NOTIFY_STOP) {
        rc = 1;
        touched = 1;
    }
    sum = get_timer_irqs (cpu);
    if (__get_cpu_var (nmi_touch)) {
        __get_cpu_var (nmi_touch) = 0;
        touched = 1;
    }
    if (backtrace_mask != NULL && cpumask_test_cpu (cpu, backtrace_mask)) {
        static DEFINE_SPINLOCK (lock);
        spin_lock (& lock);
        printk (KERN_WARNING "NMI backtrace for cpu %d\n", cpu);
        dump_stack ();
        spin_unlock (& lock);
        cpumask_clear_cpu (cpu, backtrace_mask);
    }
    if (mce_in_progress ())
        touched = 1;
    if (!touched && __get_cpu_var (last_irq_sum) == sum) {
        local_inc (& __get_cpu_var (alert_counter));
        if (local_read (&__get_cpu_var (alert_counter)) == 5 * nmi_hz)
            die_nmi ("BUG: NMI Watchdog detected LOCKUP", regs, panic_on_timeout);
    }
    else {
        __get_cpu_var (last_irq_sum) = sum;
        local_set (& __get_cpu_var (alert_counter), 0);
    }
    if (!__get_cpu_var (wd_enabled))
        return rc;
    switch (nmi_watchdog) {
    case NMI_LOCAL_APIC :
        rc |= lapic_wd_event (nmi_hz);
        break;
    case NMI_IO_APIC :
        rc = 1;
        break;
    }
    return rc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="405" endline="408">
{
    rc = 1;
    touched = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="412" endline="415">
{
    __get_cpu_var (nmi_touch) = 0;
    touched = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="418" endline="426">
{
    static DEFINE_SPINLOCK (lock);
    spin_lock (& lock);
    printk (KERN_WARNING "NMI backtrace for cpu %d\n", cpu);
    dump_stack ();
    spin_unlock (& lock);
    cpumask_clear_cpu (cpu, backtrace_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="433" endline="445">
{
    local_inc (& __get_cpu_var (alert_counter));
    if (local_read (&__get_cpu_var (alert_counter)) == 5 * nmi_hz)
        die_nmi ("BUG: NMI Watchdog detected LOCKUP", regs, panic_on_timeout);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="445" endline="448">
{
    __get_cpu_var (last_irq_sum) = sum;
    local_set (& __get_cpu_var (alert_counter), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="453" endline="465">
{
case NMI_LOCAL_APIC :
    rc |= lapic_wd_event (nmi_hz);
    break;
case NMI_IO_APIC :
    rc = 1;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="547" endline="553">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="556" endline="566">
{
    int i;
    cpumask_copy (backtrace_mask, cpu_online_mask);
    for (i = 0; i < 10 * 1000; i++) {
        if (cpumask_empty (backtrace_mask))
            break;
        mdelay (1);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/nmi.c.ifdefed" startline="561" endline="565">
{
    if (cpumask_empty (backtrace_mask))
        break;
    mdelay (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="48" endline="50">
{
    return hard_smp_processor_id () >> index_msb;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="56" endline="88">
{
    if (apic == &apic_flat) {
        if (max_physical_apicid >= 8)
            apic = &apic_physflat;
        printk (KERN_INFO "Setting APIC routing to %s\n", apic -> name);
    }
    if (is_vsmp_box ()) {
        apic->phys_pkg_id = apicid_phys_pkg_id;
    }
    if (intr_remapping_enabled)
        enable_drhd_fault_handling ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="71" endline="75">
{
    if (max_physical_apicid >= 8)
        apic = &apic_physflat;
    printk (KERN_INFO "Setting APIC routing to %s\n", apic -> name);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="77" endline="80">
{
    apic->phys_pkg_id = apicid_phys_pkg_id;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="93" endline="95">
{
    __default_send_IPI_shortcut (APIC_DEST_SELF, vector, APIC_DEST_PHYSICAL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="98" endline="110">
{
    int i;
    for (i = 0; apic_probe[i]; ++i) {
        if (apic_probe[i]->acpi_madt_oem_check (oem_id, oem_table_id)) {
            apic = apic_probe[i];
            printk (KERN_INFO "Setting APIC routing to %s.\n", apic -> name);
            return 1;
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="101" endline="108">
{
    if (apic_probe[i]->acpi_madt_oem_check (oem_id, oem_table_id)) {
        apic = apic_probe[i];
        printk (KERN_INFO "Setting APIC routing to %s.\n", apic -> name);
        return 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/probe_64.c.ifdefed" startline="102" endline="107">
{
    apic = apic_probe[i];
    printk (KERN_INFO "Setting APIC routing to %s.\n", apic -> name);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="23" endline="38">
{
    unsigned long query_cpu;
    unsigned long flags;
    local_irq_save (flags);

    for_each_cpu (query_cpu, mask) {
        __default_send_IPI_dest_field (per_cpu (x86_cpu_to_apicid, query_cpu), vector, APIC_DEST_PHYSICAL);
    }

    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="33" endline="36">
{
    __default_send_IPI_dest_field (per_cpu (x86_cpu_to_apicid, query_cpu), vector, APIC_DEST_PHYSICAL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="42" endline="57">
{
    unsigned int this_cpu = smp_processor_id ();
    unsigned int query_cpu;
    unsigned long flags;
    local_irq_save (flags);

    for_each_cpu (query_cpu, mask) {
        if (query_cpu == this_cpu)
            continue;
        __default_send_IPI_dest_field (per_cpu (x86_cpu_to_apicid, query_cpu), vector, APIC_DEST_PHYSICAL);
    }

    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="50" endline="55">
{
    if (query_cpu == this_cpu)
        continue;
    __default_send_IPI_dest_field (per_cpu (x86_cpu_to_apicid, query_cpu), vector, APIC_DEST_PHYSICAL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="61" endline="77">
{
    unsigned long flags;
    unsigned int query_cpu;
    local_irq_save (flags);
    for_each_cpu (query_cpu, mask)
    __default_send_IPI_dest_field (apic -> cpu_to_logical_apicid (query_cpu), vector, apic -> dest_logical);
    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="81" endline="97">
{
    unsigned long flags;
    unsigned int query_cpu;
    unsigned int this_cpu = smp_processor_id ();
    local_irq_save (flags);

    for_each_cpu (query_cpu, mask) {
        if (query_cpu == this_cpu)
            continue;
        __default_send_IPI_dest_field (apic -> cpu_to_logical_apicid (query_cpu), vector, apic -> dest_logical);
    }

    local_irq_restore (flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/apic/ipi.c.ifdefed" startline="89" endline="95">
{
    if (query_cpu == this_cpu)
        continue;
    __default_send_IPI_dest_field (apic -> cpu_to_logical_apicid (query_cpu), vector, apic -> dest_logical);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="29" endline="36">
{
    do {
        dev = pci_get_device (PCI_ANY_ID, PCI_ANY_ID, dev);
        if (!dev)
            break;
    }
    while (!pci_match_id (&k8_nb_ids[0], dev));
    return dev;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="30" endline="34">
{
    dev = pci_get_device (PCI_ANY_ID, PCI_ANY_ID, dev);
    if (!dev)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="39" endline="74">
{
    int i;
    struct pci_dev *dev;
    if (num_k8_northbridges)
        return 0;
    dev = NULL;
    while ((dev = next_k8_northbridge (dev)) != NULL)
        num_k8_northbridges++;
    k8_northbridges = kmalloc ((num_k8_northbridges + 1) * sizeof (void *), GFP_KERNEL);
    if (!k8_northbridges)
        return -ENOMEM;
    if (!num_k8_northbridges) {
        k8_northbridges[0] = NULL;
        return 0;
    }
    flush_words = kmalloc (num_k8_northbridges * sizeof (u32), GFP_KERNEL);
    if (!flush_words) {
        kfree (k8_northbridges);
        return -ENOMEM;
    }
    dev = NULL;
    i = 0;
    while ((dev = next_k8_northbridge (dev)) != NULL) {
        k8_northbridges[i] = dev;
        pci_read_config_dword (dev, 0x9c, & flush_words [i ++]);
    }
    k8_northbridges[i] = NULL;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="55" endline="58">
{
    k8_northbridges[0] = NULL;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="61" endline="64">
{
    kfree (k8_northbridges);
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="68" endline="71">
{
    k8_northbridges[i] = dev;
    pci_read_config_dword (dev, 0x9c, & flush_words [i ++]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="80" endline="88">
{
    struct pci_device_id *id;
    u32 vendor = device & 0xffff;
    device >>= 16;
    for (id = k8_nb_ids; id->vendor; id++)
        if (vendor == id->vendor && device == id->device)
            return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="91" endline="121">
{
    int flushed, i;
    unsigned long flags;
    static DEFINE_SPINLOCK (gart_lock);
    spin_lock_irqsave (& gart_lock, flags);
    flushed = 0;
    for (i = 0; i < num_k8_northbridges; i++) {
        pci_write_config_dword (k8_northbridges [i], 0x9c, flush_words [i] | 1);
        flushed++;
    }
    for (i = 0; i < num_k8_northbridges; i++) {
        u32 w;
        for (;;) {
            pci_read_config_dword (k8_northbridges [i], 0x9c, & w);
            if (!(w & 1))
                break;
            cpu_relax ();
        }
    }
    spin_unlock_irqrestore (& gart_lock, flags);
    if (!flushed)
        printk ("nothing to flush?\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="102" endline="106">
{
    pci_write_config_dword (k8_northbridges [i], 0x9c, flush_words [i] | 1);
    flushed++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="107" endline="117">
{
    u32 w;
    for (;;) {
        pci_read_config_dword (k8_northbridges [i], 0x9c, & w);
        if (!(w & 1))
            break;
        cpu_relax ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/k8.c.ifdefed" startline="110" endline="116">
{
    pci_read_config_dword (k8_northbridges [i], 0x9c, & w);
    if (!(w & 1))
        break;
    cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="108" endline="117">
{
    int cpu;

    for_each_online_cpu (cpu) {
        if (per_cpu (vector_irq, cpu)[vector] != -1)
            return 1;
    }

    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="111" endline="114">
{
    if (per_cpu (vector_irq, cpu)[vector] != -1)
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="120" endline="141">
{
    int i;
    init_8259A (0);
    for (i = 0; i < NR_IRQS_LEGACY; i++) {
        struct irq_desc *desc = irq_to_desc (i);
        desc->status = IRQ_DISABLED;
        desc->action = NULL;
        desc->depth = 1;
        set_irq_chip_and_handler_name (i, & i8259A_chip, handle_level_irq, "XT");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="131" endline="140">
{
    struct irq_desc *desc = irq_to_desc (i);
    desc->status = IRQ_DISABLED;
    desc->action = NULL;
    desc->depth = 1;
    set_irq_chip_and_handler_name (i, & i8259A_chip, handle_level_irq, "XT");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="147" endline="181">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="184" endline="214">
{
    smp_intr_init ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="226" endline="234">
{
    init_ISA_irqs ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="237" endline="275">
{
    int i;
    x86_quirk_pre_intr_init ();
    apic_intr_init ();
    for (i = FIRST_EXTERNAL_VECTOR; i < NR_VECTORS; i++) {
        if (!test_bit (i, used_vectors))
            set_intr_gate (i, interrupt[i - FIRST_EXTERNAL_VECTOR]);
    }
    if (!acpi_ioapic)
        setup_irq (2, &irq2);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/irqinit.c.ifdefed" startline="250" endline="254">
{
    if (!test_bit (i, used_vectors))
        set_intr_gate (i, interrupt[i - FIRST_EXTERNAL_VECTOR]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="32" endline="43">
{
    *dst = *src;
    if (src->thread.xstate) {
        dst->thread.xstate = kmem_cache_alloc (task_xstate_cachep, GFP_KERNEL);
        if (!dst->thread.xstate)
            return -ENOMEM;
        WARN_ON ((unsigned long) dst -> thread.xstate & 15);
        memcpy (dst -> thread.xstate, src -> thread.xstate, xstate_size);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="34" endline="41">
{
    dst->thread.xstate = kmem_cache_alloc (task_xstate_cachep, GFP_KERNEL);
    if (!dst->thread.xstate)
        return -ENOMEM;
    WARN_ON ((unsigned long) dst -> thread.xstate & 15);
    memcpy (dst -> thread.xstate, src -> thread.xstate, xstate_size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="46" endline="53">
{
    if (tsk->thread.xstate) {
        kmem_cache_free (task_xstate_cachep, tsk -> thread.xstate);
        tsk->thread.xstate = NULL;
    }
    WARN (tsk -> thread.ds_ctx, "leaking DS context\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="47" endline="50">
{
    kmem_cache_free (task_xstate_cachep, tsk -> thread.xstate);
    tsk->thread.xstate = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="56" endline="59">
{
    free_thread_xstate (ti -> task);
    free_pages ((unsigned long) ti, get_order (THREAD_SIZE));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="62" endline="67">
{
    task_xstate_cachep = kmem_cache_create ("task_xstate", xstate_size, __alignof__ (union thread_xstate), SLAB_PANIC | SLAB_NOTRACK, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="73" endline="91">
{
    struct task_struct *me = current;
    struct thread_struct *t = &me->thread;
    unsigned long *bp = t->io_bitmap_ptr;
    if (bp) {
        struct tss_struct *tss = &per_cpu (init_tss, get_cpu ());
        t->io_bitmap_ptr = NULL;
        clear_thread_flag (TIF_IO_BITMAP);
        memset (tss -> io_bitmap, 0xff, t -> io_bitmap_max);
        t->io_bitmap_max = 0;
        put_cpu ();
        kfree (bp);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="78" endline="90">
{
    struct tss_struct *tss = &per_cpu (init_tss, get_cpu ());
    t->io_bitmap_ptr = NULL;
    clear_thread_flag (TIF_IO_BITMAP);
    memset (tss -> io_bitmap, 0xff, t -> io_bitmap_max);
    t->io_bitmap_max = 0;
    put_cpu ();
    kfree (bp);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="94" endline="124">
{
    struct task_struct *tsk = current;
    clear_tsk_thread_flag (tsk, TIF_DEBUG);
    tsk->thread.debugreg0 = 0;
    tsk->thread.debugreg1 = 0;
    tsk->thread.debugreg2 = 0;
    tsk->thread.debugreg3 = 0;
    tsk->thread.debugreg6 = 0;
    tsk->thread.debugreg7 = 0;
    memset (tsk -> thread.tls_array, 0, sizeof (tsk -> thread.tls_array));
    tsk->fpu_counter = 0;
    clear_fpu (tsk);
    clear_used_math ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="127" endline="129">
{
    write_cr4 (read_cr4 () | X86_CR4_TSD);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="132" endline="141">
{
    preempt_disable ();
    if (!test_and_set_thread_flag (TIF_NOTSC))
        hard_disable_TSC ();
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="144" endline="146">
{
    write_cr4 (read_cr4 () & ~ X86_CR4_TSD);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="149" endline="158">
{
    preempt_disable ();
    if (test_and_clear_thread_flag (TIF_NOTSC))
        hard_enable_TSC ();
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="161" endline="170">
{
    unsigned int val;
    if (test_thread_flag (TIF_NOTSC))
        val = PR_TSC_SIGSEGV;
    else
        val = PR_TSC_ENABLE;
    return put_user (val, (unsigned int __user *) adr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="173" endline="182">
{
    if (val == PR_TSC_SIGSEGV)
        disable_TSC ();
    else if (val == PR_TSC_ENABLE)
        enable_TSC ();
    else
        return -EINVAL;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="186" endline="230">
{
    struct thread_struct *prev, *next;
    prev = &prev_p->thread;
    next = &next_p->thread;
    if (test_tsk_thread_flag (next_p, TIF_DS_AREA_MSR) || test_tsk_thread_flag (prev_p, TIF_DS_AREA_MSR))
        ds_switch_to (prev_p, next_p);
    else if (next->debugctlmsr != prev->debugctlmsr)
        update_debugctlmsr (next->debugctlmsr);
    if (test_tsk_thread_flag (next_p, TIF_DEBUG)) {
        set_debugreg (next -> debugreg0, 0);
        set_debugreg (next -> debugreg1, 1);
        set_debugreg (next -> debugreg2, 2);
        set_debugreg (next -> debugreg3, 3);
        set_debugreg (next -> debugreg6, 6);
        set_debugreg (next -> debugreg7, 7);
    }
    if (test_tsk_thread_flag (prev_p, TIF_NOTSC) ^ test_tsk_thread_flag (next_p, TIF_NOTSC)) {
        if (test_tsk_thread_flag (next_p, TIF_NOTSC))
            hard_disable_TSC ();
        else
            hard_enable_TSC ();
    }
    if (test_tsk_thread_flag (next_p, TIF_IO_BITMAP)) {
        memcpy (tss -> io_bitmap, next -> io_bitmap_ptr, max (prev -> io_bitmap_max, next -> io_bitmap_max));
    }
    else if (test_tsk_thread_flag (prev_p, TIF_IO_BITMAP)) {
        memset (tss -> io_bitmap, 0xff, prev -> io_bitmap_max);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="198" endline="206">
{
    set_debugreg (next -> debugreg0, 0);
    set_debugreg (next -> debugreg1, 1);
    set_debugreg (next -> debugreg2, 2);
    set_debugreg (next -> debugreg3, 3);
    set_debugreg (next -> debugreg6, 6);
    set_debugreg (next -> debugreg7, 7);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="209" endline="215">
{
    if (test_tsk_thread_flag (next_p, TIF_NOTSC))
        hard_disable_TSC ();
    else
        hard_enable_TSC ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="217" endline="224">
{
    memcpy (tss -> io_bitmap, next -> io_bitmap_ptr, max (prev -> io_bitmap_max, next -> io_bitmap_max));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="224" endline="229">
{
    memset (tss -> io_bitmap, 0xff, prev -> io_bitmap_max);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="233" endline="235">
{
    return do_fork (SIGCHLD, regs->sp, regs, 0, NULL, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="248" endline="251">
{
    return do_fork (CLONE_VFORK | CLONE_VM | SIGCHLD, regs->sp, regs, 0, NULL, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="290" endline="292">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="300" endline="323">
{
    if (hlt_use_halt ()) {
        struct power_trace it;
        trace_power_start (& it, POWER_CSTATE, 1);
        current_thread_info ()->status &= ~TS_POLLING;
        smp_mb ();
        if (!need_resched ())
            safe_halt ();
        else
            local_irq_enable ();
        current_thread_info ()->status |= TS_POLLING;
        trace_power_end (& it);
    }
    else {
        local_irq_enable ();
        cpu_relax ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="301" endline="318">
{
    struct power_trace it;
    trace_power_start (& it, POWER_CSTATE, 1);
    current_thread_info ()->status &= ~TS_POLLING;
    smp_mb ();
    if (!need_resched ())
        safe_halt ();
    else
        local_irq_enable ();
    current_thread_info ()->status |= TS_POLLING;
    trace_power_end (& it);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="318" endline="322">
{
    local_irq_enable ();
    cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="329" endline="341">
{
    local_irq_disable ();
    set_cpu_online (smp_processor_id (), false);
    disable_local_APIC ();
    for (;;) {
        if (hlt_works (smp_processor_id ()))
            halt ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="337" endline="340">
{
    if (hlt_works (smp_processor_id ()))
        halt ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="344" endline="345">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="356" endline="360">
{
    smp_mb ();
    smp_call_function (do_nothing, NULL, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="374" endline="388">
{
    struct power_trace it;
    trace_power_start (& it, POWER_CSTATE, (ax >> 4) + 1);
    if (!need_resched ()) {
        if (cpu_has (&current_cpu_data, X86_FEATURE_CLFLUSH_MONITOR))
            clflush ((void *) &current_thread_info ()->flags);
        __monitor ((void *) & current_thread_info () -> flags, 0, 0);
        smp_mb ();
        if (!need_resched ())
            __mwait (ax, cx);
    }
    trace_power_end (& it);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="378" endline="386">
{
    if (cpu_has (&current_cpu_data, X86_FEATURE_CLFLUSH_MONITOR))
        clflush ((void *) &current_thread_info ()->flags);
    __monitor ((void *) & current_thread_info () -> flags, 0, 0);
    smp_mb ();
    if (!need_resched ())
        __mwait (ax, cx);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="392" endline="408">
{
    struct power_trace it;
    if (!need_resched ()) {
        trace_power_start (& it, POWER_CSTATE, 1);
        if (cpu_has (&current_cpu_data, X86_FEATURE_CLFLUSH_MONITOR))
            clflush ((void *) &current_thread_info ()->flags);
        __monitor ((void *) & current_thread_info () -> flags, 0, 0);
        smp_mb ();
        if (!need_resched ())
            __sti_mwait (0, 0);
        else
            local_irq_enable ();
        trace_power_end (& it);
    }
    else
        local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="394" endline="406">
{
    trace_power_start (& it, POWER_CSTATE, 1);
    if (cpu_has (&current_cpu_data, X86_FEATURE_CLFLUSH_MONITOR))
        clflush ((void *) &current_thread_info ()->flags);
    __monitor ((void *) & current_thread_info () -> flags, 0, 0);
    smp_mb ();
    if (!need_resched ())
        __sti_mwait (0, 0);
    else
        local_irq_enable ();
    trace_power_end (& it);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="416" endline="424">
{
    struct power_trace it;
    trace_power_start (& it, POWER_CSTATE, 0);
    local_irq_enable ();
    while (!need_resched ())
        cpu_relax ();
    trace_power_end (& it);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="445" endline="464">
{
    u32 eax, ebx, ecx, edx;
    if (force_mwait)
        return 1;
    if (c->cpuid_level < MWAIT_INFO)
        return 0;
    cpuid (MWAIT_INFO, & eax, & ebx, & ecx, & edx);
    if (!(ecx & MWAIT_ECX_EXTENDED_INFO))
        return 1;
    return (edx & MWAIT_EDX_C1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="470" endline="482">
{
    if (c->x86_vendor != X86_VENDOR_AMD)
        return 0;
    if (c->x86 < 0x0F)
        return 0;
    if (c->x86 == 0x0f && c->x86_model < 0x40)
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="488" endline="491">
{
    if (c1e_mask != NULL)
        cpumask_clear_cpu (cpu, c1e_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="499" endline="542">
{
    if (need_resched ())
        return;
    if (!c1e_detected) {
        u32 lo, hi;
        rdmsr (MSR_K8_INT_PENDING_MSG, lo, hi);
        if (lo & K8_INTP_C1E_ACTIVE_MASK) {
            c1e_detected = 1;
            if (!boot_cpu_has (X86_FEATURE_NONSTOP_TSC))
                mark_tsc_unstable ("TSC halt in AMD C1E");
            printk (KERN_INFO "System has AMD C1E enabled\n");
            set_cpu_cap (& boot_cpu_data, X86_FEATURE_AMDC1E);
        }
    }
    if (c1e_detected) {
        int cpu = smp_processor_id ();
        if (!cpumask_test_cpu (cpu, c1e_mask)) {
            cpumask_set_cpu (cpu, c1e_mask);
            clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_FORCE, & cpu);
            printk (KERN_INFO "Switch to broadcast mode on CPU%d\n", cpu);
        }
        clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_ENTER, & cpu);
        default_idle ();
        local_irq_disable ();
        clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_EXIT, & cpu);
        local_irq_enable ();
    }
    else
        default_idle ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="503" endline="514">
{
    u32 lo, hi;
    rdmsr (MSR_K8_INT_PENDING_MSG, lo, hi);
    if (lo & K8_INTP_C1E_ACTIVE_MASK) {
        c1e_detected = 1;
        if (!boot_cpu_has (X86_FEATURE_NONSTOP_TSC))
            mark_tsc_unstable ("TSC halt in AMD C1E");
        printk (KERN_INFO "System has AMD C1E enabled\n");
        set_cpu_cap (& boot_cpu_data, X86_FEATURE_AMDC1E);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="507" endline="513">
{
    c1e_detected = 1;
    if (!boot_cpu_has (X86_FEATURE_NONSTOP_TSC))
        mark_tsc_unstable ("TSC halt in AMD C1E");
    printk (KERN_INFO "System has AMD C1E enabled\n");
    set_cpu_cap (& boot_cpu_data, X86_FEATURE_AMDC1E);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="516" endline="540">
{
    int cpu = smp_processor_id ();
    if (!cpumask_test_cpu (cpu, c1e_mask)) {
        cpumask_set_cpu (cpu, c1e_mask);
        clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_FORCE, & cpu);
        printk (KERN_INFO "Switch to broadcast mode on CPU%d\n", cpu);
    }
    clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_ENTER, & cpu);
    default_idle ();
    local_irq_disable ();
    clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_EXIT, & cpu);
    local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="519" endline="528">
{
    cpumask_set_cpu (cpu, c1e_mask);
    clockevents_notify (CLOCK_EVT_NOTIFY_BROADCAST_FORCE, & cpu);
    printk (KERN_INFO "Switch to broadcast mode on CPU%d\n", cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="545" endline="566">
{
    if (pm_idle)
        return;
    if (cpu_has (c, X86_FEATURE_MWAIT) && mwait_usable (c)) {
        printk (KERN_INFO "using mwait in idle threads.\n");
        pm_idle = mwait_idle;
    }
    else if (check_c1e_idle (c)) {
        printk (KERN_INFO "using C1E aware idle routine\n");
        pm_idle = c1e_idle;
    }
    else
        pm_idle = default_idle;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="555" endline="561">
{
    printk (KERN_INFO "using mwait in idle threads.\n");
    pm_idle = mwait_idle;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="561" endline="564">
{
    printk (KERN_INFO "using C1E aware idle routine\n");
    pm_idle = c1e_idle;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="569" endline="575">
{
    if (pm_idle == c1e_idle) {
        alloc_cpumask_var (& c1e_mask, GFP_KERNEL);
        cpumask_clear (c1e_mask);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="571" endline="574">
{
    alloc_cpumask_var (& c1e_mask, GFP_KERNEL);
    cpumask_clear (c1e_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="578" endline="612">
{
    if (!str)
        return -EINVAL;
    if (!strcmp (str, "poll")) {
        printk ("using polling idle threads.\n");
        pm_idle = poll_idle;
    }
    else if (!strcmp (str, "mwait"))
        force_mwait = 1;
    else if (!strcmp (str, "halt")) {
        pm_idle = default_idle;
        idle_halt = 1;
        return 0;
    }
    else if (!strcmp (str, "nomwait")) {
        idle_nomwait = 1;
        return 0;
    }
    else
        return -1;
    boot_option_idle_override = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="582" endline="585">
{
    printk ("using polling idle threads.\n");
    pm_idle = poll_idle;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="587" endline="598">
{
    pm_idle = default_idle;
    idle_halt = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="598" endline="607">
{
    idle_nomwait = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="616" endline="620">
{
    if (!(current->personality & ADDR_NO_RANDOMIZE) && randomize_va_space)
        sp -= get_random_int () % 8192;
    return sp & ~0xf;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/process.c.ifdefed" startline="623" endline="626">
{
    unsigned long range_end = mm->brk + 0x02000000;
    return randomize_range (mm->brk, range_end, 0) ? : mm->brk;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kdebugfs.c.ifdefed" startline="204" endline="216">
{
    int error = 0;
    arch_debugfs_dir = debugfs_create_dir ("x86", NULL);
    if (!arch_debugfs_dir)
        return -ENOMEM;
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="164" endline="172">
{
    struct __arch_jmp_op {
        char op;
        s32 raddr;
    } __attribute__ ((packed)) *jop;
    jop = (struct __arch_jmp_op *) from;
    jop->raddr = (s32) ((long) (to) -((long) (from) +5));
    jop->op = RELATIVEJUMP_INSTRUCTION;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="179" endline="185">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="192" endline="245">
{
    kprobe_opcode_t opcode;
    kprobe_opcode_t *orig_opcodes = opcodes;
    if (search_exception_tables ((unsigned long) opcodes))
        return 0;
retry :
    if (opcodes - orig_opcodes > MAX_INSN_SIZE - 1)
        return 0;
    opcode = *(opcodes++);
    if (opcode == 0x0f) {
        if (opcodes - orig_opcodes > MAX_INSN_SIZE - 1)
            return 0;
        return test_bit (*opcodes, (unsigned long *) twobyte_is_boostable);
    }
    switch (opcode & 0xf0) {
    case 0x60 :
        if (0x63 < opcode && opcode < 0x67)
            goto retry;
        return (opcode != 0x62 && opcode != 0x67);
    case 0x70 :
        return 0;
    case 0xc0 :
        return (0xc1 < opcode && opcode < 0xcc) || opcode == 0xcf;
    case 0xd0 :
        return (opcode == 0xd4 || opcode == 0xd5 || opcode == 0xd7);
    case 0xe0 :
        return ((opcode & 0x04) || opcode == 0xea);
    case 0xf0 :
        if ((opcode & 0x0c) == 0 && opcode != 0xf1)
            goto retry;
        return (opcode == 0xf5 || (0xf7 < opcode && opcode < 0xfe));
    default :
        if (opcode == 0x26 || opcode == 0x36 || opcode == 0x3e)
            goto retry;
        return (opcode != 0x2e && opcode != 0x9a);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="205" endline="210">
{
    if (opcodes - orig_opcodes > MAX_INSN_SIZE - 1)
        return 0;
    return test_bit (*opcodes, (unsigned long *) twobyte_is_boostable);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="212" endline="244">
{
case 0x60 :
    if (0x63 < opcode && opcode < 0x67)
        goto retry;
    return (opcode != 0x62 && opcode != 0x67);
case 0x70 :
    return 0;
case 0xc0 :
    return (0xc1 < opcode && opcode < 0xcc) || opcode == 0xcf;
case 0xd0 :
    return (opcode == 0xd4 || opcode == 0xd5 || opcode == 0xd7);
case 0xe0 :
    return ((opcode & 0x04) || opcode == 0xea);
case 0xf0 :
    if ((opcode & 0x0c) == 0 && opcode != 0xf1)
        goto retry;
    return (opcode == 0xf5 || (0xf7 < opcode && opcode < 0xfe));
default :
    if (opcode == 0x26 || opcode == 0x36 || opcode == 0x3e)
        goto retry;
    return (opcode != 0x2e && opcode != 0x9a);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="251" endline="268">
{
    switch (*insn) {
    case 0xfa :
    case 0xfb :
    case 0xcf :
    case 0x9d :
        return 1;
    }
    if (is_REX_prefix (insn))
        return is_IF_modifier (++insn);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="252" endline="258">
{
case 0xfa :
case 0xfb :
case 0xcf :
case 0x9d :
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="278" endline="344">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="347" endline="358">
{
    memcpy (p -> ainsn.insn, p -> addr, MAX_INSN_SIZE * sizeof (kprobe_opcode_t));
    fix_riprel (p);
    if (can_boost (p->addr))
        p->ainsn.boostable = 0;
    else
        p->ainsn.boostable = -1;
    p->opcode = *p->addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="361" endline="368">
{
    p->ainsn.insn = get_insn_slot ();
    if (!p->ainsn.insn)
        return -ENOMEM;
    arch_copy_kprobe (p);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="371" endline="373">
{
    text_poke (p -> addr, ((unsigned char []) {BREAKPOINT_INSTRUCTION}), 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="376" endline="378">
{
    text_poke (p -> addr, & p -> opcode, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="381" endline="386">
{
    if (p->ainsn.insn) {
        free_insn_slot (p -> ainsn.insn, (p -> ainsn.boostable == 1));
        p->ainsn.insn = NULL;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="382" endline="385">
{
    free_insn_slot (p -> ainsn.insn, (p -> ainsn.boostable == 1));
    p->ainsn.insn = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="389" endline="394">
{
    kcb->prev_kprobe.kp = kprobe_running ();
    kcb->prev_kprobe.status = kcb->kprobe_status;
    kcb->prev_kprobe.old_flags = kcb->kprobe_old_flags;
    kcb->prev_kprobe.saved_flags = kcb->kprobe_saved_flags;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="397" endline="402">
{
    __get_cpu_var (current_kprobe) = kcb->prev_kprobe.kp;
    kcb->kprobe_status = kcb->prev_kprobe.status;
    kcb->kprobe_old_flags = kcb->prev_kprobe.old_flags;
    kcb->kprobe_saved_flags = kcb->prev_kprobe.saved_flags;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="406" endline="412">
{
    __get_cpu_var (current_kprobe) = p;
    kcb->kprobe_saved_flags = kcb->kprobe_old_flags = (regs->flags & (X86_EFLAGS_TF | X86_EFLAGS_IF));
    if (is_IF_modifier (p->ainsn.insn))
        kcb->kprobe_saved_flags &= ~X86_EFLAGS_IF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="415" endline="418">
{
    if (test_thread_flag (TIF_DEBUGCTLMSR))
        update_debugctlmsr (0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="421" endline="424">
{
    if (test_thread_flag (TIF_DEBUGCTLMSR))
        update_debugctlmsr (current->thread.debugctlmsr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="427" endline="436">
{
    clear_btf ();
    regs->flags |= X86_EFLAGS_TF;
    regs->flags &= ~X86_EFLAGS_IF;
    if (p->opcode == BREAKPOINT_INSTRUCTION)
        regs->ip = (unsigned long) p->addr;
    else
        regs->ip = (unsigned long) p->ainsn.insn;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="440" endline="447">
{
    unsigned long *sara = stack_addr (regs);
    ri->ret_addr = (kprobe_opcode_t *) *sara;
    *sara = (unsigned long) &kretprobe_trampoline;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="451" endline="463">
{
    prepare_singlestep (p, regs);
    kcb->kprobe_status = KPROBE_HIT_SS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="472" endline="513">
{
    switch (kcb->kprobe_status) {
    case KPROBE_HIT_SSDONE :
    case KPROBE_HIT_ACTIVE :
        save_previous_kprobe (kcb);
        set_current_kprobe (p, regs, kcb);
        kprobes_inc_nmissed_count (p);
        prepare_singlestep (p, regs);
        kcb->kprobe_status = KPROBE_REENTER;
        break;
    case KPROBE_HIT_SS :
        if (p == kprobe_running ()) {
            regs->flags &= ~X86_EFLAGS_TF;
            regs->flags |= kcb->kprobe_saved_flags;
            return 0;
        }
        else {
        }
    default :
        WARN_ON (1);
        return 0;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="473" endline="510">
{
case KPROBE_HIT_SSDONE :
case KPROBE_HIT_ACTIVE :
    save_previous_kprobe (kcb);
    set_current_kprobe (p, regs, kcb);
    kprobes_inc_nmissed_count (p);
    prepare_singlestep (p, regs);
    kcb->kprobe_status = KPROBE_REENTER;
    break;
case KPROBE_HIT_SS :
    if (p == kprobe_running ()) {
        regs->flags &= ~X86_EFLAGS_TF;
        regs->flags |= kcb->kprobe_saved_flags;
        return 0;
    }
    else {
    }
default :
    WARN_ON (1);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="494" endline="498">
{
    regs->flags &= ~X86_EFLAGS_TF;
    regs->flags |= kcb->kprobe_saved_flags;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="498" endline="505">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="520" endline="581">
{
    kprobe_opcode_t *addr;
    struct kprobe *p;
    struct kprobe_ctlblk *kcb;
    addr = (kprobe_opcode_t *) (regs->ip - sizeof (kprobe_opcode_t));
    if (*addr != BREAKPOINT_INSTRUCTION) {
        regs->ip = (unsigned long) addr;
        return 1;
    }
    preempt_disable ();
    kcb = get_kprobe_ctlblk ();
    p = get_kprobe (addr);
    if (p) {
        if (kprobe_running ()) {
            if (reenter_kprobe (p, regs, kcb))
                return 1;
        }
        else {
            set_current_kprobe (p, regs, kcb);
            kcb->kprobe_status = KPROBE_HIT_ACTIVE;
            if (!p->pre_handler || !p->pre_handler (p, regs))
                setup_singlestep (p, regs, kcb);
            return 1;
        }
    }
    else if (kprobe_running ()) {
        p = __get_cpu_var (current_kprobe);
        if (p->break_handler && p->break_handler (p, regs)) {
            setup_singlestep (p, regs, kcb);
            return 1;
        }
    }
    preempt_enable_no_resched ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="526" endline="538">
{
    regs->ip = (unsigned long) addr;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="551" endline="571">
{
    if (kprobe_running ()) {
        if (reenter_kprobe (p, regs, kcb))
            return 1;
    }
    else {
        set_current_kprobe (p, regs, kcb);
        kcb->kprobe_status = KPROBE_HIT_ACTIVE;
        if (!p->pre_handler || !p->pre_handler (p, regs))
            setup_singlestep (p, regs, kcb);
        return 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="552" endline="555">
{
    if (reenter_kprobe (p, regs, kcb))
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="555" endline="570">
{
    set_current_kprobe (p, regs, kcb);
    kcb->kprobe_status = KPROBE_HIT_ACTIVE;
    if (!p->pre_handler || !p->pre_handler (p, regs))
        setup_singlestep (p, regs, kcb);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="571" endline="577">
{
    p = __get_cpu_var (current_kprobe);
    if (p->break_handler && p->break_handler (p, regs)) {
        setup_singlestep (p, regs, kcb);
        return 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="573" endline="576">
{
    setup_singlestep (p, regs, kcb);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="588" endline="674">
{
    asm volatile (".global kretprobe_trampoline\n"
        "kretprobe_trampoline: \n"
        "	pushf\n"
        "	subl $16, %esp\n"
        "	pushl %fs\n"
        "	pushl %es\n"
        "	pushl %ds\n"
        "	pushl %eax\n"
        "	pushl %ebp\n"
        "	pushl %edi\n"
        "	pushl %esi\n"
        "	pushl %edx\n"
        "	pushl %ecx\n"
        "	pushl %ebx\n"
        "	movl %esp, %eax\n"
        "	call trampoline_handler\n"
        "	movl 56(%esp), %edx\n"
        "	movl %edx, 52(%esp)\n"
        "	movl %eax, 56(%esp)\n"
        "	popl %ebx\n"
        "	popl %ecx\n"
        "	popl %edx\n"
        "	popl %esi\n"
        "	popl %edi\n"
        "	popl %ebp\n"
        "	popl %eax\n"
        "	addl $24, %esp\n"
        "	popf\n"
        "	ret\n"
    )}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="680" endline="745">
{
    struct kretprobe_instance *ri = NULL;
    struct hlist_head *head, empty_rp;
    struct hlist_node *node, *tmp;
    unsigned long flags, orig_ret_address = 0;
    unsigned long trampoline_address = (unsigned long) &kretprobe_trampoline;
    INIT_HLIST_HEAD (& empty_rp);
    kretprobe_hash_lock (current, & head, & flags);
    regs->cs = __KERNEL_CS | get_kernel_rpl ();
    regs->gs = 0;
    regs->ip = trampoline_address;
    regs->orig_ax = ~0UL;
    hlist_for_each_entry_safe (ri, node, tmp, head, hlist) {
        if (ri->task != current)
            continue;
        if (ri->rp && ri->rp->handler) {
            __get_cpu_var (current_kprobe) = &ri->rp->kp;
            get_kprobe_ctlblk ()->kprobe_status = KPROBE_HIT_ACTIVE;
            ri->rp->handler (ri, regs);
            __get_cpu_var (current_kprobe) = NULL;
        }
        orig_ret_address = (unsigned long) ri->ret_addr;
        recycle_rp_inst (ri, & empty_rp);
        if (orig_ret_address != trampoline_address)
            break;
    }
    kretprobe_assert (ri, orig_ret_address, trampoline_address);
    kretprobe_hash_unlock (current, & flags);
    hlist_for_each_entry_safe (ri, node, tmp, &empty_rp, hlist) {
        hlist_del (& ri -> hlist);
        kfree (ri);
    }
    return (void *) orig_ret_address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="712" endline="734">
{
    if (ri->task != current)
        continue;
    if (ri->rp && ri->rp->handler) {
        __get_cpu_var (current_kprobe) = &ri->rp->kp;
        get_kprobe_ctlblk ()->kprobe_status = KPROBE_HIT_ACTIVE;
        ri->rp->handler (ri, regs);
        __get_cpu_var (current_kprobe) = NULL;
    }
    orig_ret_address = (unsigned long) ri->ret_addr;
    recycle_rp_inst (ri, & empty_rp);
    if (orig_ret_address != trampoline_address)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="717" endline="722">
{
    __get_cpu_var (current_kprobe) = &ri->rp->kp;
    get_kprobe_ctlblk ()->kprobe_status = KPROBE_HIT_ACTIVE;
    ri->rp->handler (ri, regs);
    __get_cpu_var (current_kprobe) = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="740" endline="743">
{
    hlist_del (& ri -> hlist);
    kfree (ri);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="776" endline="850">
{
    unsigned long *tos = stack_addr (regs);
    unsigned long copy_ip = (unsigned long) p->ainsn.insn;
    unsigned long orig_ip = (unsigned long) p->addr;
    kprobe_opcode_t *insn = p->ainsn.insn;
    if (is_REX_prefix (insn))
        insn++;
    regs->flags &= ~X86_EFLAGS_TF;
    switch (*insn) {
    case 0x9c :
        *tos &= ~(X86_EFLAGS_TF | X86_EFLAGS_IF);
        *tos |= kcb->kprobe_old_flags;
        break;
    case 0xc2 :
    case 0xc3 :
    case 0xca :
    case 0xcb :
    case 0xcf :
    case 0xea :
        p->ainsn.boostable = 1;
        goto no_change;
    case 0xe8 :
        *tos = orig_ip + (*tos - copy_ip);
        break;
    case 0xff :
        if ((insn[1] & 0x30) == 0x10) {
            *tos = orig_ip + (*tos - copy_ip);
            goto no_change;
        }
        else if (((insn[1] & 0x31) == 0x20) || ((insn[1] & 0x31) == 0x21)) {
            p->ainsn.boostable = 1;
            goto no_change;
        }
    default :
        break;
    }
    if (p->ainsn.boostable == 0) {
        if ((regs->ip > copy_ip) && (regs->ip - copy_ip) + 5 < MAX_INSN_SIZE) {
            set_jmp_op ((void *) regs -> ip, (void *) orig_ip + (regs -> ip - copy_ip));
            p->ainsn.boostable = 1;
        }
        else {
            p->ainsn.boostable = -1;
        }
    }
    regs->ip += orig_ip - copy_ip;
no_change :
    restore_btf ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="787" endline="829">
{
case 0x9c :
    *tos &= ~(X86_EFLAGS_TF | X86_EFLAGS_IF);
    *tos |= kcb->kprobe_old_flags;
    break;
case 0xc2 :
case 0xc3 :
case 0xca :
case 0xcb :
case 0xcf :
case 0xea :
    p->ainsn.boostable = 1;
    goto no_change;
case 0xe8 :
    *tos = orig_ip + (*tos - copy_ip);
    break;
case 0xff :
    if ((insn[1] & 0x30) == 0x10) {
        *tos = orig_ip + (*tos - copy_ip);
        goto no_change;
    }
    else if (((insn[1] & 0x31) == 0x20) || ((insn[1] & 0x31) == 0x21)) {
        p->ainsn.boostable = 1;
        goto no_change;
    }
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="810" endline="818">
{
    *tos = orig_ip + (*tos - copy_ip);
    goto no_change;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="819" endline="826">
{
    p->ainsn.boostable = 1;
    goto no_change;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="831" endline="844">
{
    if ((regs->ip > copy_ip) && (regs->ip - copy_ip) + 5 < MAX_INSN_SIZE) {
        set_jmp_op ((void *) regs -> ip, (void *) orig_ip + (regs -> ip - copy_ip));
        p->ainsn.boostable = 1;
    }
    else {
        p->ainsn.boostable = -1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="833" endline="841">
{
    set_jmp_op ((void *) regs -> ip, (void *) orig_ip + (regs -> ip - copy_ip));
    p->ainsn.boostable = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="841" endline="843">
{
    p->ainsn.boostable = -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="857" endline="890">
{
    struct kprobe *cur = kprobe_running ();
    struct kprobe_ctlblk *kcb = get_kprobe_ctlblk ();
    if (!cur)
        return 0;
    resume_execution (cur, regs, kcb);
    regs->flags |= kcb->kprobe_saved_flags;
    if ((kcb->kprobe_status != KPROBE_REENTER) && cur->post_handler) {
        kcb->kprobe_status = KPROBE_HIT_SSDONE;
        cur->post_handler (cur, regs, 0);
    }
    if (kcb->kprobe_status == KPROBE_REENTER) {
        restore_previous_kprobe (kcb);
        goto out;
    }
    reset_current_kprobe ();
out :
    preempt_enable_no_resched ();
    if (regs->flags & X86_EFLAGS_TF)
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="867" endline="870">
{
    kcb->kprobe_status = KPROBE_HIT_SSDONE;
    cur->post_handler (cur, regs, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="873" endline="876">
{
    restore_previous_kprobe (kcb);
    goto out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="893" endline="950">
{
    struct kprobe *cur = kprobe_running ();
    struct kprobe_ctlblk *kcb = get_kprobe_ctlblk ();
    switch (kcb->kprobe_status) {
    case KPROBE_HIT_SS :
    case KPROBE_REENTER :
        regs->ip = (unsigned long) cur->addr;
        regs->flags |= kcb->kprobe_old_flags;
        if (kcb->kprobe_status == KPROBE_REENTER)
            restore_previous_kprobe (kcb);
        else
            reset_current_kprobe ();
        preempt_enable_no_resched ();
        break;
    case KPROBE_HIT_ACTIVE :
    case KPROBE_HIT_SSDONE :
        kprobes_inc_nmissed_count (cur);
        if (cur->fault_handler && cur->fault_handler (cur, regs, trapnr))
            return 1;
        if (fixup_exception (regs))
            return 1;
        break;
    default :
        break;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="897" endline="948">
{
case KPROBE_HIT_SS :
case KPROBE_REENTER :
    regs->ip = (unsigned long) cur->addr;
    regs->flags |= kcb->kprobe_old_flags;
    if (kcb->kprobe_status == KPROBE_REENTER)
        restore_previous_kprobe (kcb);
    else
        reset_current_kprobe ();
    preempt_enable_no_resched ();
    break;
case KPROBE_HIT_ACTIVE :
case KPROBE_HIT_SSDONE :
    kprobes_inc_nmissed_count (cur);
    if (cur->fault_handler && cur->fault_handler (cur, regs, trapnr))
        return 1;
    if (fixup_exception (regs))
        return 1;
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="957" endline="987">
{
    struct die_args *args = data;
    int ret = NOTIFY_DONE;
    if (args->regs && user_mode_vm (args->regs))
        return ret;
    switch (val) {
    case DIE_INT3 :
        if (kprobe_handler (args->regs))
            ret = NOTIFY_STOP;
        break;
    case DIE_DEBUG :
        if (post_kprobe_handler (args->regs))
            ret = NOTIFY_STOP;
        break;
    case DIE_GPF :
        if (!preemptible () && kprobe_running () && kprobe_fault_handler (args->regs, args->trapnr))
            ret = NOTIFY_STOP;
        break;
    default :
        break;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="964" endline="985">
{
case DIE_INT3 :
    if (kprobe_handler (args->regs))
        ret = NOTIFY_STOP;
    break;
case DIE_DEBUG :
    if (post_kprobe_handler (args->regs))
        ret = NOTIFY_STOP;
    break;
case DIE_GPF :
    if (!preemptible () && kprobe_running () && kprobe_fault_handler (args->regs, args->trapnr))
        ret = NOTIFY_STOP;
    break;
default :
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="990" endline="1012">
{
    struct jprobe *jp = container_of (p, struct jprobe, kp);
    unsigned long addr;
    struct kprobe_ctlblk *kcb = get_kprobe_ctlblk ();
    kcb->jprobe_saved_regs = *regs;
    kcb->jprobe_saved_sp = stack_addr (regs);
    addr = (unsigned long) (kcb->jprobe_saved_sp);
    memcpy (kcb -> jprobes_stack, (kprobe_opcode_t *) addr, MIN_STACK_SIZE (addr));
    regs->flags &= ~X86_EFLAGS_IF;
    trace_hardirqs_off ();
    regs->ip = (unsigned long) (jp->entry);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="1015" endline="1029">
{
    struct kprobe_ctlblk *kcb = get_kprobe_ctlblk ();
    asm volatile ("       xchgl   %%ebx,%%esp	\n"
        "       int3			\n"
        "       .globl jprobe_return_end\n"
        "       jprobe_return_end:	\n"
        "       nop			\n"
        :
        : "b" (kcb->jprobe_saved_sp)
        : "memory"
    )}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="1032" endline="1058">
{
    struct kprobe_ctlblk *kcb = get_kprobe_ctlblk ();
    u8 *addr = (u8 *) (regs->ip - 1);
    struct jprobe *jp = container_of (p, struct jprobe, kp);
    if ((addr > (u8 *) jprobe_return) && (addr < (u8 *) jprobe_return_end)) {
        if (stack_addr (regs) != kcb->jprobe_saved_sp) {
            struct pt_regs *saved_regs = &kcb->jprobe_saved_regs;
            printk (KERN_ERR "current sp %p does not match saved sp %p\n", stack_addr (regs), kcb -> jprobe_saved_sp);
            printk (KERN_ERR "Saved registers for jprobe %p\n", jp);
            show_registers (saved_regs);
            printk (KERN_ERR "Current registers\n");
            show_registers (regs);
            BUG ();
        }
        *regs = kcb->jprobe_saved_regs;
        memcpy ((kprobe_opcode_t *) (kcb -> jprobe_saved_sp), kcb -> jprobes_stack, MIN_STACK_SIZE (kcb -> jprobe_saved_sp));
        preempt_enable_no_resched ();
        return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="1038" endline="1056">
{
    if (stack_addr (regs) != kcb->jprobe_saved_sp) {
        struct pt_regs *saved_regs = &kcb->jprobe_saved_regs;
        printk (KERN_ERR "current sp %p does not match saved sp %p\n", stack_addr (regs), kcb -> jprobe_saved_sp);
        printk (KERN_ERR "Saved registers for jprobe %p\n", jp);
        show_registers (saved_regs);
        printk (KERN_ERR "Current registers\n");
        show_registers (regs);
        BUG ();
    }
    *regs = kcb->jprobe_saved_regs;
    memcpy ((kprobe_opcode_t *) (kcb -> jprobe_saved_sp), kcb -> jprobes_stack, MIN_STACK_SIZE (kcb -> jprobe_saved_sp));
    preempt_enable_no_resched ();
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="1039" endline="1049">
{
    struct pt_regs *saved_regs = &kcb->jprobe_saved_regs;
    printk (KERN_ERR "current sp %p does not match saved sp %p\n", stack_addr (regs), kcb -> jprobe_saved_sp);
    printk (KERN_ERR "Saved registers for jprobe %p\n", jp);
    show_registers (saved_regs);
    printk (KERN_ERR "Current registers\n");
    show_registers (regs);
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="1061" endline="1063">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/kprobes.c.ifdefed" startline="1066" endline="1068">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pcspeaker.c.ifdefed" startline="6" endline="12">
{
    struct platform_device *pd;
    pd = platform_device_register_simple ("pcspkr", -1, NULL, 0);
    return IS_ERR (pd) ? PTR_ERR (pd) : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="36" endline="38">
{
    return x86_stack_ids[id - 1] == name;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="42" endline="103">
{
    unsigned k;
    for (k = 0; k < N_EXCEPTION_STACKS; k++) {
        unsigned long end = per_cpu (orig_ist, cpu).ist[k];
        if (stack >= end)
            continue;
        if (stack >= end - EXCEPTION_STKSZ) {
            if (*usedp & (1U << k))
                break;
            *usedp |= 1U << k;
            *idp = x86_stack_ids[k];
            return (unsigned long *) end;
        }
    }
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="49" endline="101">
{
    unsigned long end = per_cpu (orig_ist, cpu).ist[k];
    if (stack >= end)
        continue;
    if (stack >= end - EXCEPTION_STKSZ) {
        if (*usedp & (1U << k))
            break;
        *usedp |= 1U << k;
        *idp = x86_stack_ids[k];
        return (unsigned long *) end;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="61" endline="73">
{
    if (*usedp & (1U << k))
        break;
    *usedp |= 1U << k;
    *idp = x86_stack_ids[k];
    return (unsigned long *) end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="115" endline="201">
{
    const unsigned cpu = get_cpu ();
    unsigned long *irq_stack_end = (unsigned long *) per_cpu (irq_stack_ptr, cpu);
    unsigned used = 0;
    struct thread_info *tinfo;
    int graph = 0;
    if (!task)
        task = current;
    if (!stack) {
        unsigned long dummy;
        stack = &dummy;
        if (task && task != current)
            stack = (unsigned long *) task->thread.sp;
    }
    tinfo = task_thread_info (task);
    for (;;) {
        char *id;
        unsigned long *estack_end;
        estack_end = in_exception_stack (cpu, (unsigned long) stack, &used, &id);
        if (estack_end) {
            if (ops->stack (data, id) < 0)
                break;
            bp = print_context_stack (tinfo, stack, bp, ops, data, estack_end, &graph);
            ops->stack (data, "<EOE>");
            stack = (unsigned long *) estack_end[-2];
            continue;
        }
        if (irq_stack_end) {
            unsigned long *irq_stack;
            irq_stack = irq_stack_end - (IRQ_STACK_SIZE - 64) / sizeof (*irq_stack);
            if (stack >= irq_stack && stack < irq_stack_end) {
                if (ops->stack (data, "IRQ") < 0)
                    break;
                bp = print_context_stack (tinfo, stack, bp, ops, data, irq_stack_end, &graph);
                stack = (unsigned long *) (irq_stack_end[-1]);
                irq_stack_end = NULL;
                ops->stack (data, "EOI");
                continue;
            }
        }
        break;
    }
    bp = print_context_stack (tinfo, stack, bp, ops, data, NULL, &graph);
    put_cpu ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="126" endline="131">
{
    unsigned long dummy;
    stack = &dummy;
    if (task && task != current)
        stack = (unsigned long *) task->thread.sp;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="151" endline="194">
{
    char *id;
    unsigned long *estack_end;
    estack_end = in_exception_stack (cpu, (unsigned long) stack, &used, &id);
    if (estack_end) {
        if (ops->stack (data, id) < 0)
            break;
        bp = print_context_stack (tinfo, stack, bp, ops, data, estack_end, &graph);
        ops->stack (data, "<EOE>");
        stack = (unsigned long *) estack_end[-2];
        continue;
    }
    if (irq_stack_end) {
        unsigned long *irq_stack;
        irq_stack = irq_stack_end - (IRQ_STACK_SIZE - 64) / sizeof (*irq_stack);
        if (stack >= irq_stack && stack < irq_stack_end) {
            if (ops->stack (data, "IRQ") < 0)
                break;
            bp = print_context_stack (tinfo, stack, bp, ops, data, irq_stack_end, &graph);
            stack = (unsigned long *) (irq_stack_end[-1]);
            irq_stack_end = NULL;
            ops->stack (data, "EOI");
            continue;
        }
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="157" endline="171">
{
    if (ops->stack (data, id) < 0)
        break;
    bp = print_context_stack (tinfo, stack, bp, ops, data, estack_end, &graph);
    ops->stack (data, "<EOE>");
    stack = (unsigned long *) estack_end[-2];
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="172" endline="192">
{
    unsigned long *irq_stack;
    irq_stack = irq_stack_end - (IRQ_STACK_SIZE - 64) / sizeof (*irq_stack);
    if (stack >= irq_stack && stack < irq_stack_end) {
        if (ops->stack (data, "IRQ") < 0)
            break;
        bp = print_context_stack (tinfo, stack, bp, ops, data, irq_stack_end, &graph);
        stack = (unsigned long *) (irq_stack_end[-1]);
        irq_stack_end = NULL;
        ops->stack (data, "EOI");
        continue;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="177" endline="191">
{
    if (ops->stack (data, "IRQ") < 0)
        break;
    bp = print_context_stack (tinfo, stack, bp, ops, data, irq_stack_end, &graph);
    stack = (unsigned long *) (irq_stack_end[-1]);
    irq_stack_end = NULL;
    ops->stack (data, "EOI");
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="207" endline="246">
{
    unsigned long *stack;
    int i;
    const int cpu = smp_processor_id ();
    unsigned long *irq_stack_end = (unsigned long *) (per_cpu (irq_stack_ptr, cpu));
    unsigned long *irq_stack = (unsigned long *) (per_cpu (irq_stack_ptr, cpu) - IRQ_STACK_SIZE);
    if (sp == NULL) {
        if (task)
            sp = (unsigned long *) task->thread.sp;
        else
            sp = (unsigned long *) &sp;
    }
    stack = sp;
    for (i = 0; i < kstack_depth_to_print; i++) {
        if (stack >= irq_stack && stack <= irq_stack_end) {
            if (stack == irq_stack_end) {
                stack = (unsigned long *) (irq_stack_end[-1]);
                printk (" <EOI> ");
            }
        }
        else {
            if (((long) stack & (THREAD_SIZE - 1)) == 0)
                break;
        }
        if (i && ((i % STACKSLOTS_PER_LINE) == 0))
            printk ("\n%s", log_lvl);
        printk (" %016lx", * stack ++);
        touch_nmi_watchdog ();
    }
    printk ("\n");
    show_trace_log_lvl (task, regs, sp, bp, log_lvl);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="221" endline="226">
{
    if (task)
        sp = (unsigned long *) task->thread.sp;
    else
        sp = (unsigned long *) &sp;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="229" endline="243">
{
    if (stack >= irq_stack && stack <= irq_stack_end) {
        if (stack == irq_stack_end) {
            stack = (unsigned long *) (irq_stack_end[-1]);
            printk (" <EOI> ");
        }
    }
    else {
        if (((long) stack & (THREAD_SIZE - 1)) == 0)
            break;
    }
    if (i && ((i % STACKSLOTS_PER_LINE) == 0))
        printk ("\n%s", log_lvl);
    printk (" %016lx", * stack ++);
    touch_nmi_watchdog ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="230" endline="235">
{
    if (stack == irq_stack_end) {
        stack = (unsigned long *) (irq_stack_end[-1]);
        printk (" <EOI> ");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="231" endline="234">
{
    stack = (unsigned long *) (irq_stack_end[-1]);
    printk (" <EOI> ");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="235" endline="238">
{
    if (((long) stack & (THREAD_SIZE - 1)) == 0)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="249" endline="296">
{
    int i;
    unsigned long sp;
    const int cpu = smp_processor_id ();
    struct task_struct *cur = current;
    sp = regs->sp;
    printk ("CPU %d ", cpu);
    __show_regs (regs, 1);
    printk ("Process %s (pid: %d, threadinfo %p, task %p)\n", cur -> comm, cur -> pid, task_thread_info (cur), cur);
    if (!user_mode (regs)) {
        unsigned int code_prologue = code_bytes * 43 / 64;
        unsigned int code_len = code_bytes;
        unsigned char c;
        u8 *ip;
        printk (KERN_EMERG "Stack:\n");
        show_stack_log_lvl (NULL, regs, (unsigned long *) sp, regs -> bp, KERN_EMERG);
        printk (KERN_EMERG "Code: ");
        ip = (u8 *) regs->ip - code_prologue;
        if (ip < (u8 *) PAGE_OFFSET || probe_kernel_address (ip, c)) {
            ip = (u8 *) regs->ip;
            code_len = code_len - code_prologue + 1;
        }
        for (i = 0; i < code_len; i++, ip++) {
            if (ip < (u8 *) PAGE_OFFSET || probe_kernel_address (ip, c)) {
                printk (" Bad RIP value.");
                break;
            }
            if (ip == (u8 *) regs->ip)
                printk ("<%02x> ", c);
            else
                printk ("%02x ", c);
        }
    }
    printk ("\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="265" endline="294">
{
    unsigned int code_prologue = code_bytes * 43 / 64;
    unsigned int code_len = code_bytes;
    unsigned char c;
    u8 *ip;
    printk (KERN_EMERG "Stack:\n");
    show_stack_log_lvl (NULL, regs, (unsigned long *) sp, regs -> bp, KERN_EMERG);
    printk (KERN_EMERG "Code: ");
    ip = (u8 *) regs->ip - code_prologue;
    if (ip < (u8 *) PAGE_OFFSET || probe_kernel_address (ip, c)) {
        ip = (u8 *) regs->ip;
        code_len = code_len - code_prologue + 1;
    }
    for (i = 0; i < code_len; i++, ip++) {
        if (ip < (u8 *) PAGE_OFFSET || probe_kernel_address (ip, c)) {
            printk (" Bad RIP value.");
            break;
        }
        if (ip == (u8 *) regs->ip)
            printk ("<%02x> ", c);
        else
            printk ("%02x ", c);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="278" endline="282">
{
    ip = (u8 *) regs->ip;
    code_len = code_len - code_prologue + 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="283" endline="293">
{
    if (ip < (u8 *) PAGE_OFFSET || probe_kernel_address (ip, c)) {
        printk (" Bad RIP value.");
        break;
    }
    if (ip == (u8 *) regs->ip)
        printk ("<%02x> ", c);
    else
        printk ("%02x ", c);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="285" endline="288">
{
    printk (" Bad RIP value.");
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/dumpstack_64.c.ifdefed" startline="299" endline="306">
{
    unsigned short ud2;
    if (__copy_from_user (&ud2, (const void __user *) ip, sizeof (ud2)))
        return 0;
    return ud2 == 0x0b0f;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="26" endline="32">
{
    char *end;
    memory_corruption_check = simple_strtol (arg, &end, 10);
    return (*end == 0) ? 0 : -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="36" endline="42">
{
    char *end;
    corruption_check_period = simple_strtoul (arg, &end, 10);
    return (*end == 0) ? 0 : -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="46" endline="56">
{
    char *end;
    unsigned size;
    size = memparse (arg, &end);
    if (*end == '\0')
        corruption_check_size = size;
    return (size == corruption_check_size) ? 0 : -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="61" endline="109">
{
    u64 addr = PAGE_SIZE;
    if (memory_corruption_check == -1) {
        memory_corruption_check = 0;
    }
    if (corruption_check_size == 0)
        memory_corruption_check = 0;
    if (!memory_corruption_check)
        return;
    corruption_check_size = round_up (corruption_check_size, PAGE_SIZE);
    while (addr < corruption_check_size && num_scan_areas < MAX_SCAN_AREAS) {
        u64 size;
        addr = find_e820_area_size (addr, &size, PAGE_SIZE);
        if (!(addr + 1))
            break;
        if (addr >= corruption_check_size)
            break;
        if ((addr + size) > corruption_check_size)
            size = corruption_check_size - addr;
        e820_update_range (addr, size, E820_RAM, E820_RESERVED);
        scan_areas[num_scan_areas].addr = addr;
        scan_areas[num_scan_areas].size = size;
        num_scan_areas++;
        memset (__va (addr), 0, size);
        addr += size;
    }
    printk (KERN_INFO "Scanning %d areas for low memory corruption\n", num_scan_areas);
    update_e820 ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="64" endline="72">
{
    memory_corruption_check = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="82" endline="104">
{
    u64 size;
    addr = find_e820_area_size (addr, &size, PAGE_SIZE);
    if (!(addr + 1))
        break;
    if (addr >= corruption_check_size)
        break;
    if ((addr + size) > corruption_check_size)
        size = corruption_check_size - addr;
    e820_update_range (addr, size, E820_RAM, E820_RESERVED);
    scan_areas[num_scan_areas].addr = addr;
    scan_areas[num_scan_areas].size = size;
    num_scan_areas++;
    memset (__va (addr), 0, size);
    addr += size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="113" endline="135">
{
    int i;
    int corruption = 0;
    if (!memory_corruption_check)
        return;
    for (i = 0; i < num_scan_areas; i++) {
        unsigned long *addr = __va (scan_areas[i].addr);
        unsigned long size = scan_areas[i].size;
        for (; size; addr++, size -= sizeof (unsigned long)) {
            if (!*addr)
                continue;
            printk (KERN_ERR "Corrupted low memory at %p (%lx phys) = %08lx\n", addr, __pa (addr), * addr);
            corruption = 1;
            *addr = 0;
        }
    }
    WARN_ONCE (corruption, KERN_ERR "Memory corruption detected in low memory\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="120" endline="132">
{
    unsigned long *addr = __va (scan_areas[i].addr);
    unsigned long size = scan_areas[i].size;
    for (; size; addr++, size -= sizeof (unsigned long)) {
        if (!*addr)
            continue;
        printk (KERN_ERR "Corrupted low memory at %p (%lx phys) = %08lx\n", addr, __pa (addr), * addr);
        corruption = 1;
        *addr = 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="124" endline="131">
{
    if (!*addr)
        continue;
    printk (KERN_ERR "Corrupted low memory at %p (%lx phys) = %08lx\n", addr, __pa (addr), * addr);
    corruption = 1;
    *addr = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="141" endline="145">
{
    check_for_bios_corruption ();
    schedule_delayed_work (& bios_check_work, round_jiffies_relative (corruption_check_period * HZ));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/check.c.ifdefed" startline="148" endline="158">
{
    if (!memory_corruption_check || corruption_check_period == 0)
        return 0;
    printk (KERN_INFO "Scanning for low memory corruption every %d seconds\n", corruption_check_period);
    schedule_delayed_work (& bios_check_work, 0);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="21" endline="29">
{
    struct thread_struct *t = &current->thread;
    int idx;
    for (idx = 0; idx < GDT_ENTRY_TLS_ENTRIES; idx++)
        if (desc_empty (&t->tls_array[idx]))
            return idx + GDT_ENTRY_TLS_MIN;
    return -ESRCH;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="33" endline="56">
{
    struct thread_struct *t = &p->thread;
    struct desc_struct *desc = &t->tls_array[idx - GDT_ENTRY_TLS_MIN];
    int cpu;
    cpu = get_cpu ();
    while (n-- > 0) {
        if (LDT_empty (info))
            desc->a = desc->b = 0;
        else
            fill_ldt (desc, info);
        ++info;
        ++desc;
    }
    if (t == &current->thread)
        load_TLS (t, cpu);
    put_cpu ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="43" endline="50">
{
    if (LDT_empty (info))
        desc->a = desc->b = 0;
    else
        fill_ldt (desc, info);
    ++info;
    ++desc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="64" endline="91">
{
    struct user_desc info;
    if (copy_from_user (&info, u_info, sizeof (info)))
        return -EFAULT;
    if (idx == -1)
        idx = info.entry_number;
    if (idx == -1 && can_allocate) {
        idx = get_free_idx ();
        if (idx < 0)
            return idx;
        if (put_user (idx, &u_info->entry_number))
            return -EFAULT;
    }
    if (idx < GDT_ENTRY_TLS_MIN || idx > GDT_ENTRY_TLS_MAX)
        return -EINVAL;
    set_tls_desc (p, idx, & info, 1);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="77" endline="83">
{
    idx = get_free_idx ();
    if (idx < 0)
        return idx;
    if (put_user (idx, &u_info->entry_number))
        return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="94" endline="98">
{
    int ret = do_set_thread_area (current, -1, u_info, 1);
    asmlinkage_protect (1, ret, u_info);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="108" endline="122">
{
    memset (info, 0, sizeof (* info));
    info->entry_number = idx;
    info->base_addr = get_desc_base (desc);
    info->limit = get_desc_limit (desc);
    info->seg_32bit = desc->d;
    info->contents = desc->type >> 2;
    info->read_exec_only = !(desc->type & 2);
    info->limit_in_pages = desc->g;
    info->seg_not_present = !desc->p;
    info->useable = desc->avl;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="126" endline="141">
{
    struct user_desc info;
    if (idx == -1 && get_user (idx, &u_info->entry_number))
        return -EFAULT;
    if (idx < GDT_ENTRY_TLS_MIN || idx > GDT_ENTRY_TLS_MAX)
        return -EINVAL;
    fill_user_desc (& info, idx, & p -> thread.tls_array [idx - GDT_ENTRY_TLS_MIN]);
    if (copy_to_user (u_info, &info, sizeof (info)))
        return -EFAULT;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="144" endline="148">
{
    int ret = do_get_thread_area (current, -1, u_info);
    asmlinkage_protect (1, ret, u_info);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="152" endline="158">
{
    struct thread_struct *t = &target->thread;
    int n = GDT_ENTRY_TLS_ENTRIES;
    while (n > 0 && desc_empty (&t->tls_array[n - 1]))
        --n;
    return n;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="163" endline="192">
{
    const struct desc_struct *tls;
    if (pos > GDT_ENTRY_TLS_ENTRIES * sizeof (struct user_desc) || (pos % sizeof (struct user_desc)) != 0 || (count % sizeof (struct user_desc)) != 0)
        return -EINVAL;
    pos /= sizeof (struct user_desc);
    count /= sizeof (struct user_desc);
    tls = &target->thread.tls_array[pos];
    if (kbuf) {
        struct user_desc *info = kbuf;
        while (count-- > 0)
            fill_user_desc (info++, GDT_ENTRY_TLS_MIN +pos++, tls++);
    }
    else {
        struct user_desc __user *u_info = ubuf;
        while (count-- > 0) {
            struct user_desc info;
            fill_user_desc (& info, GDT_ENTRY_TLS_MIN + pos ++, tls ++);
            if (__copy_to_user (u_info++, &info, sizeof (info)))
                return -EFAULT;
        }
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="176" endline="181">
{
    struct user_desc *info = kbuf;
    while (count-- > 0)
        fill_user_desc (info++, GDT_ENTRY_TLS_MIN +pos++, tls++);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="181" endline="189">
{
    struct user_desc __user *u_info = ubuf;
    while (count-- > 0) {
        struct user_desc info;
        fill_user_desc (& info, GDT_ENTRY_TLS_MIN + pos ++, tls ++);
        if (__copy_to_user (u_info++, &info, sizeof (info)))
            return -EFAULT;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="183" endline="188">
{
    struct user_desc info;
    fill_user_desc (& info, GDT_ENTRY_TLS_MIN + pos ++, tls ++);
    if (__copy_to_user (u_info++, &info, sizeof (info)))
        return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/tls.c.ifdefed" startline="197" endline="218">
{
    struct user_desc infobuf [GDT_ENTRY_TLS_ENTRIES];
    const struct user_desc *info;
    if (pos > GDT_ENTRY_TLS_ENTRIES * sizeof (struct user_desc) || (pos % sizeof (struct user_desc)) != 0 || (count % sizeof (struct user_desc)) != 0)
        return -EINVAL;
    if (kbuf)
        info = kbuf;
    else if (__copy_from_user (infobuf, ubuf, count))
        return -EFAULT;
    else
        info = infobuf;
    set_tls_desc (target, GDT_ENTRY_TLS_MIN + (pos / sizeof (struct user_desc)), info, count / sizeof (struct user_desc));
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8237.c.ifdefed" startline="25" endline="46">
{
    unsigned long flags;
    int i;
    flags = claim_dma_lock ();
    dma_outb (0, DMA1_RESET_REG);
    dma_outb (0, DMA2_RESET_REG);
    for (i = 0; i < 8; i++) {
        set_dma_addr (i, 0x000000);
        set_dma_count (i, 1);
    }
    enable_dma (4);
    release_dma_lock (flags);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8237.c.ifdefed" startline="34" endline="38">
{
    set_dma_addr (i, 0x000000);
    set_dma_count (i, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8237.c.ifdefed" startline="49" endline="51">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8237.c.ifdefed" startline="65" endline="70">
{
    int error = sysdev_class_register (&i8237_sysdev_class);
    if (!error)
        error = sysdev_register (&device_i8237A);
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="87" endline="118">
{
    unsigned long offset, flags;
    unsigned long boundary_size;
    unsigned long base_index;
    base_index = ALIGN (iommu_bus_base &dma_get_seg_boundary (dev), PAGE_SIZE) >> PAGE_SHIFT;
    boundary_size = ALIGN ((unsigned long long) dma_get_seg_boundary (dev) + 1, PAGE_SIZE) >> PAGE_SHIFT;
    spin_lock_irqsave (& iommu_bitmap_lock, flags);
    offset = iommu_area_alloc (iommu_gart_bitmap, iommu_pages, next_bit, size, base_index, boundary_size, align_mask);
    if (offset == -1) {
        need_flush = true;
        offset = iommu_area_alloc (iommu_gart_bitmap, iommu_pages, 0, size, base_index, boundary_size, align_mask);
    }
    if (offset != -1) {
        next_bit = offset + size;
        if (next_bit >= iommu_pages) {
            next_bit = 0;
            need_flush = true;
        }
    }
    if (iommu_fullflush)
        need_flush = true;
    spin_unlock_irqrestore (& iommu_bitmap_lock, flags);
    return offset;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="100" endline="105">
{
    need_flush = true;
    offset = iommu_area_alloc (iommu_gart_bitmap, iommu_pages, 0, size, base_index, boundary_size, align_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="106" endline="112">
{
    next_bit = offset + size;
    if (next_bit >= iommu_pages) {
        next_bit = 0;
        need_flush = true;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="108" endline="111">
{
    next_bit = 0;
    need_flush = true;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="121" endline="129">
{
    unsigned long flags;
    spin_lock_irqsave (& iommu_bitmap_lock, flags);
    iommu_area_free (iommu_gart_bitmap, offset, size);
    if (offset >= next_bit)
        next_bit = offset + size;
    spin_unlock_irqrestore (& iommu_bitmap_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="135" endline="144">
{
    unsigned long flags;
    spin_lock_irqsave (& iommu_bitmap_lock, flags);
    if (need_flush) {
        k8_flush_garts ();
        need_flush = false;
    }
    spin_unlock_irqrestore (& iommu_bitmap_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="139" endline="142">
{
    k8_flush_garts ();
    need_flush = false;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="165" endline="188">
{
    dev_err (dev, "PCI-DMA: Out of IOMMU space for %lu bytes\n", size);
    if (size > PAGE_SIZE * EMERGENCY_PAGES) {
        if (dir == PCI_DMA_FROMDEVICE || dir == PCI_DMA_BIDIRECTIONAL)
            panic ("PCI-DMA: Memory would be corrupted\n");
        if (dir == PCI_DMA_TODEVICE || dir == PCI_DMA_BIDIRECTIONAL)
            panic (KERN_ERR "PCI-DMA: Random memory would be DMAed\n");
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="178" endline="184">
{
    if (dir == PCI_DMA_FROMDEVICE || dir == PCI_DMA_BIDIRECTIONAL)
        panic ("PCI-DMA: Memory would be corrupted\n");
    if (dir == PCI_DMA_TODEVICE || dir == PCI_DMA_BIDIRECTIONAL)
        panic (KERN_ERR "PCI-DMA: Random memory would be DMAed\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="192" endline="195">
{
    return force_iommu || !is_buffer_dma_capable (*dev->dma_mask, addr, size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="199" endline="201">
{
    return !is_buffer_dma_capable (*dev->dma_mask, addr, size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="208" endline="227">
{
    unsigned long npages = iommu_num_pages (phys_mem, size, PAGE_SIZE);
    unsigned long iommu_page = alloc_iommu (dev, npages, align_mask);
    int i;
    if (iommu_page == -1) {
        if (!nonforced_iommu (dev, phys_mem, size))
            return phys_mem;
        if (panic_on_overflow)
            panic ("dma_map_area overflow %lu bytes\n", size);
        iommu_full (dev, size, dir);
        return bad_dma_address;
    }
    for (i = 0; i < npages; i++) {
        iommu_gatt_base[iommu_page + i] = GPTE_ENCODE (phys_mem);
        phys_mem += PAGE_SIZE;
    }
    return iommu_bus_base + iommu_page * PAGE_SIZE + (phys_mem & ~PAGE_MASK);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="213" endline="220">
{
    if (!nonforced_iommu (dev, phys_mem, size))
        return phys_mem;
    if (panic_on_overflow)
        panic ("dma_map_area overflow %lu bytes\n", size);
    iommu_full (dev, size, dir);
    return bad_dma_address;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="222" endline="225">
{
    iommu_gatt_base[iommu_page + i] = GPTE_ENCODE (phys_mem);
    phys_mem += PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="234" endline="248">
{
    unsigned long bus;
    phys_addr_t paddr = page_to_phys (page) + offset;
    if (!dev)
        dev = &x86_dma_fallback_dev;
    if (!need_iommu (dev, paddr, size))
        return paddr;
    bus = dma_map_area (dev, paddr, size, dir, 0);
    flush_gart ();
    return bus;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="256" endline="271">
{
    unsigned long iommu_page;
    int npages;
    int i;
    if (dma_addr < iommu_bus_base + EMERGENCY_PAGES * PAGE_SIZE || dma_addr >= iommu_bus_base + iommu_size)
        return;
    iommu_page = (dma_addr - iommu_bus_base) >> PAGE_SHIFT;
    npages = iommu_num_pages (dma_addr, size, PAGE_SIZE);
    for (i = 0; i < npages; i++) {
        iommu_gatt_base[iommu_page + i] = gart_unmapped_entry;
    }
    free_iommu (iommu_page, npages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="267" endline="269">
{
    iommu_gatt_base[iommu_page + i] = gart_unmapped_entry;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="278" endline="287">
{
    struct scatterlist *s;
    int i;

    for_each_sg (sg, s, nents, i) {
        if (!s->dma_length || !s->length)
            break;
        gart_unmap_page (dev, s -> dma_address, s -> dma_length, dir, NULL);
    }

}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="282" endline="286">
{
    if (!s->dma_length || !s->length)
        break;
    gart_unmap_page (dev, s -> dma_address, s -> dma_length, dir, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="292" endline="319">
{
    struct scatterlist *s;
    int i;

    for_each_sg (sg, s, nents, i) {
        unsigned long addr = sg_phys (s);
        if (nonforced_iommu (dev, addr, s->length)) {
            addr = dma_map_area (dev, addr, s->length, dir, 0);
            if (addr == bad_dma_address) {
                if (i > 0)
                    gart_unmap_sg (dev, sg, i, dir, NULL);
                nents = 0;
                sg[0].dma_length = 0;
                break;
            }
        }
        s->dma_address = addr;
        s->dma_length = s->length;
    }

    flush_gart ();
    return nents;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="300" endline="315">
{
    unsigned long addr = sg_phys (s);
    if (nonforced_iommu (dev, addr, s->length)) {
        addr = dma_map_area (dev, addr, s->length, dir, 0);
        if (addr == bad_dma_address) {
            if (i > 0)
                gart_unmap_sg (dev, sg, i, dir, NULL);
            nents = 0;
            sg[0].dma_length = 0;
            break;
        }
    }
    s->dma_address = addr;
    s->dma_length = s->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="303" endline="312">
{
    addr = dma_map_area (dev, addr, s->length, dir, 0);
    if (addr == bad_dma_address) {
        if (i > 0)
            gart_unmap_sg (dev, sg, i, dir, NULL);
        nents = 0;
        sg[0].dma_length = 0;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="305" endline="311">
{
    if (i > 0)
        gart_unmap_sg (dev, sg, i, dir, NULL);
    nents = 0;
    sg[0].dma_length = 0;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="325" endline="358">
{
    unsigned long iommu_start = alloc_iommu (dev, pages, 0);
    unsigned long iommu_page = iommu_start;
    struct scatterlist *s;
    int i;
    if (iommu_start == -1)
        return -1;

    for_each_sg (start, s, nelems, i) {
        unsigned long pages, addr;
        unsigned long phys_addr = s->dma_address;
        BUG_ON (s != start && s -> offset);
        if (s == start) {
            sout->dma_address = iommu_bus_base;
            sout->dma_address += iommu_page * PAGE_SIZE + s->offset;
            sout->dma_length = s->length;
        }
        else {
            sout->dma_length += s->length;
        }
        addr = phys_addr;
        pages = iommu_num_pages (s->offset, s->length, PAGE_SIZE);
        while (pages--) {
            iommu_gatt_base[iommu_page] = GPTE_ENCODE (addr);
            addr += PAGE_SIZE;
            iommu_page++;
        }
    }

    BUG_ON (iommu_page - iommu_start != pages);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="334" endline="354">
{
    unsigned long pages, addr;
    unsigned long phys_addr = s->dma_address;
    BUG_ON (s != start && s -> offset);
    if (s == start) {
        sout->dma_address = iommu_bus_base;
        sout->dma_address += iommu_page * PAGE_SIZE + s->offset;
        sout->dma_length = s->length;
    }
    else {
        sout->dma_length += s->length;
    }
    addr = phys_addr;
    pages = iommu_num_pages (s->offset, s->length, PAGE_SIZE);
    while (pages--) {
        iommu_gatt_base[iommu_page] = GPTE_ENCODE (addr);
        addr += PAGE_SIZE;
        iommu_page++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="339" endline="343">
{
    sout->dma_address = iommu_bus_base;
    sout->dma_address += iommu_page * PAGE_SIZE + s->offset;
    sout->dma_length = s->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="343" endline="345">
{
    sout->dma_length += s->length;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="349" endline="353">
{
    iommu_gatt_base[iommu_page] = GPTE_ENCODE (addr);
    addr += PAGE_SIZE;
    iommu_page++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="363" endline="371">
{
    if (!need) {
        BUG_ON (nelems != 1);
        sout->dma_address = start->dma_address;
        sout->dma_length = start->length;
        return 0;
    }
    return __dma_map_cont (dev, start, nelems, sout, pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="364" endline="369">
{
    BUG_ON (nelems != 1);
    sout->dma_address = start->dma_address;
    sout->dma_length = start->length;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="379" endline="460">
{
    struct scatterlist *s, *ps, *start_sg, *sgmap;
    int need = 0, nextneed, i, out, start;
    unsigned long pages = 0;
    unsigned int seg_size;
    unsigned int max_seg_size;
    if (nents == 0)
        return 0;
    if (!dev)
        dev = &x86_dma_fallback_dev;
    out = 0;
    start = 0;
    start_sg = sgmap = sg;
    seg_size = 0;
    max_seg_size = dma_get_max_seg_size (dev);
    ps = NULL;

    for_each_sg (sg, s, nents, i) {
        dma_addr_t addr = sg_phys (s);
        s->dma_address = addr;
        BUG_ON (s -> length == 0);
        nextneed = need_iommu (dev, addr, s->length);
        if (i > start) {
            if (!iommu_merge || !nextneed || !need || s->offset || (s->length + seg_size > max_seg_size) || (ps->offset + ps->length) % PAGE_SIZE) {
                if (dma_map_cont (dev, start_sg, i -start, sgmap, pages, need) < 0)
                    goto error;
                out++;
                seg_size = 0;
                sgmap = sg_next (sgmap);
                pages = 0;
                start = i;
                start_sg = s;
            }
        }
        seg_size += s->length;
        need = nextneed;
        pages += iommu_num_pages (s->offset, s->length, PAGE_SIZE);
        ps = s;
    }

    if (dma_map_cont (dev, start_sg, i -start, sgmap, pages, need) < 0)
        goto error;
    out++;
    flush_gart ();
    if (out < nents) {
        sgmap = sg_next (sgmap);
        sgmap->dma_length = 0;
    }
    return out;
error :
    flush_gart ();
    gart_unmap_sg (dev, sg, out, dir, NULL);
    if (force_iommu || iommu_merge) {
        out = dma_map_sg_nonforce (dev, sg, nents, dir);
        if (out > 0)
            return out;
    }
    if (panic_on_overflow)
        panic ("dma_map_sg: overflow on %lu pages\n", pages);
    iommu_full (dev, pages << PAGE_SHIFT, dir);
    for_each_sg (sg, s, nents, i)
    s->dma_address = bad_dma_address;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="398" endline="432">
{
    dma_addr_t addr = sg_phys (s);
    s->dma_address = addr;
    BUG_ON (s -> length == 0);
    nextneed = need_iommu (dev, addr, s->length);
    if (i > start) {
        if (!iommu_merge || !nextneed || !need || s->offset || (s->length + seg_size > max_seg_size) || (ps->offset + ps->length) % PAGE_SIZE) {
            if (dma_map_cont (dev, start_sg, i -start, sgmap, pages, need) < 0)
                goto error;
            out++;
            seg_size = 0;
            sgmap = sg_next (sgmap);
            pages = 0;
            start = i;
            start_sg = s;
        }
    }
    seg_size += s->length;
    need = nextneed;
    pages += iommu_num_pages (s->offset, s->length, PAGE_SIZE);
    ps = s;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="407" endline="426">
{
    if (!iommu_merge || !nextneed || !need || s->offset || (s->length + seg_size > max_seg_size) || (ps->offset + ps->length) % PAGE_SIZE) {
        if (dma_map_cont (dev, start_sg, i -start, sgmap, pages, need) < 0)
            goto error;
        out++;
        seg_size = 0;
        sgmap = sg_next (sgmap);
        pages = 0;
        start = i;
        start_sg = s;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="415" endline="425">
{
    if (dma_map_cont (dev, start_sg, i -start, sgmap, pages, need) < 0)
        goto error;
    out++;
    seg_size = 0;
    sgmap = sg_next (sgmap);
    pages = 0;
    start = i;
    start_sg = s;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="437" endline="440">
{
    sgmap = sg_next (sgmap);
    sgmap->dma_length = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="448" endline="452">
{
    out = dma_map_sg_nonforce (dev, sg, nents, dir);
    if (out > 0)
        return out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="466" endline="491">
{
    dma_addr_t paddr;
    unsigned long align_mask;
    struct page *page;
    if (force_iommu && !(flag & GFP_DMA)) {
        flag &= ~(__GFP_DMA | __GFP_HIGHMEM | __GFP_DMA32);
        page = alloc_pages (flag | __GFP_ZERO, get_order (size));
        if (!page)
            return NULL;
        align_mask = (1UL << get_order (size)) - 1;
        paddr = dma_map_area (dev, page_to_phys (page), size, DMA_BIDIRECTIONAL, align_mask);
        flush_gart ();
        if (paddr != bad_dma_address) {
            *dma_addr = paddr;
            return page_address (page);
        }
        __free_pages (page, get_order (size));
    }
    else
        return dma_generic_alloc_coherent (dev, size, dma_addr, flag);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="471" endline="487">
{
    flag &= ~(__GFP_DMA | __GFP_HIGHMEM | __GFP_DMA32);
    page = alloc_pages (flag | __GFP_ZERO, get_order (size));
    if (!page)
        return NULL;
    align_mask = (1UL << get_order (size)) - 1;
    paddr = dma_map_area (dev, page_to_phys (page), size, DMA_BIDIRECTIONAL, align_mask);
    flush_gart ();
    if (paddr != bad_dma_address) {
        *dma_addr = paddr;
        return page_address (page);
    }
    __free_pages (page, get_order (size));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="482" endline="485">
{
    *dma_addr = paddr;
    return page_address (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="497" endline="500">
{
    gart_unmap_page (dev, dma_addr, size, DMA_BIDIRECTIONAL, NULL);
    free_pages ((unsigned long) vaddr, get_order (size));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="505" endline="525">
{
    unsigned long a;
    if (!iommu_size) {
        iommu_size = aper_size;
        if (!no_agp)
            iommu_size /= 2;
    }
    a = aper + iommu_size;
    iommu_size -= round_up (a, PMD_PAGE_SIZE) - a;
    if (iommu_size < 64 * 1024 * 1024) {
        printk (KERN_WARNING "PCI-DMA: Warning: Small IOMMU %luMB." " Consider increasing the AGP aperture in BIOS\n", iommu_size >> 20);
    }
    return iommu_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="508" endline="512">
{
    iommu_size = aper_size;
    if (!no_agp)
        iommu_size /= 2;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="517" endline="522">
{
    printk (KERN_WARNING "PCI-DMA: Warning: Small IOMMU %luMB." " Consider increasing the AGP aperture in BIOS\n", iommu_size >> 20);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="528" endline="545">
{
    unsigned aper_size = 0, aper_base_32, aper_order;
    u64 aper_base;
    pci_read_config_dword (dev, AMD64_GARTAPERTUREBASE, & aper_base_32);
    pci_read_config_dword (dev, AMD64_GARTAPERTURECTL, & aper_order);
    aper_order = (aper_order >> 1) & 7;
    aper_base = aper_base_32 & 0x7fff;
    aper_base <<= 25;
    aper_size = (32 * 1024 * 1024) << aper_order;
    if (aper_base + aper_size > 0x100000000UL || !aper_size)
        aper_base = 0;
    *size = aper_size;
    return aper_base;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="548" endline="556">
{
    int i;
    for (i = 0; i < num_k8_northbridges; i++) {
        struct pci_dev *dev = k8_northbridges[i];
        enable_gart_translation (dev, __pa (agp_gatt_table));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="551" endline="555">
{
    struct pci_dev *dev = k8_northbridges[i];
    enable_gart_translation (dev, __pa (agp_gatt_table));
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="567" endline="571">
{
    fix_up_north_bridges = true;
    aperture_order = aper_order;
    aperture_alloc = aper_alloc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="574" endline="599">
{
    printk (KERN_INFO "PCI-DMA: Resuming GART IOMMU\n");
    if (fix_up_north_bridges) {
        int i;
        printk (KERN_INFO "PCI-DMA: Restoring GART aperture settings\n");
        for (i = 0; i < num_k8_northbridges; i++) {
            struct pci_dev *dev = k8_northbridges[i];
            pci_write_config_dword (dev, AMD64_GARTAPERTURECTL, aperture_order << 1);
            pci_write_config_dword (dev, AMD64_GARTAPERTUREBASE, aperture_alloc >> 25);
        }
    }
    enable_gart_translations ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="577" endline="594">
{
    int i;
    printk (KERN_INFO "PCI-DMA: Restoring GART aperture settings\n");
    for (i = 0; i < num_k8_northbridges; i++) {
        struct pci_dev *dev = k8_northbridges[i];
        pci_write_config_dword (dev, AMD64_GARTAPERTURECTL, aperture_order << 1);
        pci_write_config_dword (dev, AMD64_GARTAPERTUREBASE, aperture_alloc >> 25);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="582" endline="593">
{
    struct pci_dev *dev = k8_northbridges[i];
    pci_write_config_dword (dev, AMD64_GARTAPERTURECTL, aperture_order << 1);
    pci_write_config_dword (dev, AMD64_GARTAPERTUREBASE, aperture_alloc >> 25);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="602" endline="604">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="623" endline="680">
{
    unsigned aper_size, gatt_size, new_aper_size;
    unsigned aper_base, new_aper_base;
    struct pci_dev *dev;
    void *gatt;
    int i, error;
    printk (KERN_INFO "PCI-DMA: Disabling AGP.\n");
    aper_size = aper_base = info->aper_size = 0;
    dev = NULL;
    for (i = 0; i < num_k8_northbridges; i++) {
        dev = k8_northbridges[i];
        new_aper_base = read_aperture (dev, &new_aper_size);
        if (!new_aper_base)
            goto nommu;
        if (!aper_base) {
            aper_size = new_aper_size;
            aper_base = new_aper_base;
        }
        if (aper_size != new_aper_size || aper_base != new_aper_base)
            goto nommu;
    }
    if (!aper_base)
        goto nommu;
    info->aper_base = aper_base;
    info->aper_size = aper_size >> 20;
    gatt_size = (aper_size >> PAGE_SHIFT) * sizeof (u32);
    gatt = (void *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (gatt_size));
    if (!gatt)
        panic ("Cannot allocate GATT table");
    if (set_memory_uc ((unsigned long) gatt, gatt_size >> PAGE_SHIFT))
        panic ("Could not set GART PTEs to uncacheable pages");
    agp_gatt_table = gatt;
    error = sysdev_class_register (&gart_sysdev_class);
    if (!error)
        error = sysdev_register (&device_gart);
    if (error)
        panic ("Could not register gart_sysdev -- " "would corrupt data on next suspend");
    flush_gart ();
    printk (KERN_INFO "PCI-DMA: aperture base @ %x size %u KB\n", aper_base, aper_size >> 10);
    return 0;
nommu :
    printk (KERN_WARNING "PCI-DMA: More than 4GB of RAM and no IOMMU\n" "falling back to iommu=soft.\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="633" endline="645">
{
    dev = k8_northbridges[i];
    new_aper_base = read_aperture (dev, &new_aper_size);
    if (!new_aper_base)
        goto nommu;
    if (!aper_base) {
        aper_size = new_aper_size;
        aper_base = new_aper_base;
    }
    if (aper_size != new_aper_size || aper_base != new_aper_base)
        goto nommu;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="639" endline="642">
{
    aper_size = new_aper_size;
    aper_base = new_aper_base;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="692" endline="709">
{
    struct pci_dev *dev;
    int i;
    if (no_agp && (dma_ops != &gart_dma_ops))
        return;
    for (i = 0; i < num_k8_northbridges; i++) {
        u32 ctl;
        dev = k8_northbridges[i];
        pci_read_config_dword (dev, AMD64_GARTAPERTURECTL, & ctl);
        ctl &= ~GARTEN;
        pci_write_config_dword (dev, AMD64_GARTAPERTURECTL, ctl);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="699" endline="708">
{
    u32 ctl;
    dev = k8_northbridges[i];
    pci_read_config_dword (dev, AMD64_GARTAPERTURECTL, & ctl);
    ctl &= ~GARTEN;
    pci_write_config_dword (dev, AMD64_GARTAPERTURECTL, ctl);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="712" endline="841">
{
    struct agp_kern_info info;
    unsigned long iommu_start;
    unsigned long aper_base, aper_size;
    unsigned long start_pfn, end_pfn;
    unsigned long scratch;
    long i;
    if (cache_k8_northbridges () < 0 || num_k8_northbridges == 0)
        return;
    no_agp = 1;
    if (swiotlb)
        return;
    if (iommu_detected && !gart_iommu_aperture)
        return;
    if (no_iommu || (!force_iommu && max_pfn <= MAX_DMA32_PFN) || !gart_iommu_aperture || (no_agp && init_k8_gatt (&info) < 0)) {
        if (max_pfn > MAX_DMA32_PFN) {
            printk (KERN_WARNING "More than 4GB of memory " "but GART IOMMU not available.\n");
            printk (KERN_WARNING "falling back to iommu=soft.\n");
        }
        return;
    }
    aper_size = info.aper_size << 20;
    aper_base = info.aper_base;
    end_pfn = (aper_base >> PAGE_SHIFT) + (aper_size >> PAGE_SHIFT);
    if (end_pfn > max_low_pfn_mapped) {
        start_pfn = (aper_base >> PAGE_SHIFT);
        init_memory_mapping (start_pfn << PAGE_SHIFT, end_pfn << PAGE_SHIFT);
    }
    printk (KERN_INFO "PCI-DMA: using GART IOMMU.\n");
    iommu_size = check_iommu_size (info.aper_base, aper_size);
    iommu_pages = iommu_size >> PAGE_SHIFT;
    iommu_gart_bitmap = (void *) __get_free_pages (GFP_KERNEL | __GFP_ZERO, get_order (iommu_pages / 8));
    if (!iommu_gart_bitmap)
        panic ("Cannot allocate iommu bitmap\n");
    iommu_area_reserve (iommu_gart_bitmap, 0, EMERGENCY_PAGES);
    agp_memory_reserved = iommu_size;
    printk (KERN_INFO "PCI-DMA: Reserving %luMB of IOMMU area in the AGP aperture\n", iommu_size >> 20);
    iommu_start = aper_size - iommu_size;
    iommu_bus_base = info.aper_base + iommu_start;
    bad_dma_address = iommu_bus_base;
    iommu_gatt_base = agp_gatt_table + (iommu_start >> PAGE_SHIFT);
    set_memory_np ((unsigned long) __va (iommu_bus_base), iommu_size >> PAGE_SHIFT);
    wbinvd ();
    enable_gart_translations ();
    scratch = get_zeroed_page (GFP_KERNEL);
    if (!scratch)
        panic ("Cannot allocate iommu scratch page");
    gart_unmapped_entry = GPTE_ENCODE (__pa (scratch));
    for (i = EMERGENCY_PAGES; i < iommu_pages; i++)
        iommu_gatt_base[i] = gart_unmapped_entry;
    flush_gart ();
    dma_ops = &gart_dma_ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="743" endline="750">
{
    if (max_pfn > MAX_DMA32_PFN) {
        printk (KERN_WARNING "More than 4GB of memory " "but GART IOMMU not available.\n");
        printk (KERN_WARNING "falling back to iommu=soft.\n");
    }
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="744" endline="748">
{
    printk (KERN_WARNING "More than 4GB of memory " "but GART IOMMU not available.\n");
    printk (KERN_WARNING "falling back to iommu=soft.\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="756" endline="759">
{
    start_pfn = (aper_base >> PAGE_SHIFT);
    init_memory_mapping (start_pfn << PAGE_SHIFT, end_pfn << PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="844" endline="881">
{
    int arg;
    if (isdigit (*p) && get_option (&p, &arg))
        iommu_size = arg;
    if (!strncmp (p, "fullflush", 8))
        iommu_fullflush = 1;
    if (!strncmp (p, "nofullflush", 11))
        iommu_fullflush = 0;
    if (!strncmp (p, "noagp", 5))
        no_agp = 1;
    if (!strncmp (p, "noaperture", 10))
        fix_aperture = 0;
    if (!strncmp (p, "force", 5))
        gart_iommu_aperture_allowed = 1;
    if (!strncmp (p, "allowed", 7))
        gart_iommu_aperture_allowed = 1;
    if (!strncmp (p, "memaper", 7)) {
        fallback_aper_force = 1;
        p += 7;
        if (*p == '=') {
            ++p;
            if (get_option (&p, &arg))
                fallback_aper_order = arg;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="872" endline="880">
{
    fallback_aper_force = 1;
    p += 7;
    if (*p == '=') {
        ++p;
        if (get_option (&p, &arg))
            fallback_aper_order = arg;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/pci-gart_64.c.ifdefed" startline="875" endline="879">
{
    ++p;
    if (get_option (&p, &arg))
        fallback_aper_order = arg;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="67" endline="78">
{
    unsigned int mask = 1 << irq;
    unsigned long flags;
    spin_lock_irqsave (& i8259A_lock, flags);
    cached_irq_mask |= mask;
    if (irq & 8)
        outb (cached_slave_mask, PIC_SLAVE_IMR);
    else
        outb (cached_master_mask, PIC_MASTER_IMR);
    spin_unlock_irqrestore (& i8259A_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="81" endline="92">
{
    unsigned int mask = ~(1 << irq);
    unsigned long flags;
    spin_lock_irqsave (& i8259A_lock, flags);
    cached_irq_mask &= mask;
    if (irq & 8)
        outb (cached_slave_mask, PIC_SLAVE_IMR);
    else
        outb (cached_master_mask, PIC_MASTER_IMR);
    spin_unlock_irqrestore (& i8259A_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="95" endline="108">
{
    unsigned int mask = 1 << irq;
    unsigned long flags;
    int ret;
    spin_lock_irqsave (& i8259A_lock, flags);
    if (irq < 8)
        ret = inb (PIC_MASTER_CMD) & mask;
    else
        ret = inb (PIC_SLAVE_CMD) & (mask >> 8);
    spin_unlock_irqrestore (& i8259A_lock, flags);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="111" endline="117">
{
    disable_irq_nosync (irq);
    io_apic_irqs &= ~(1 << irq);
    set_irq_chip_and_handler_name (irq, & i8259A_chip, handle_level_irq, "XT");
    enable_irq (irq);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="126" endline="140">
{
    int value;
    int irqmask = 1 << irq;
    if (irq < 8) {
        outb (0x0B, PIC_MASTER_CMD);
        value = inb (PIC_MASTER_CMD) & irqmask;
        outb (0x0A, PIC_MASTER_CMD);
        return value;
    }
    outb (0x0B, PIC_SLAVE_CMD);
    value = inb (PIC_SLAVE_CMD) & (irqmask >> 8);
    outb (0x0A, PIC_SLAVE_CMD);
    return value;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="130" endline="135">
{
    outb (0x0B, PIC_MASTER_CMD);
    value = inb (PIC_MASTER_CMD) & irqmask;
    outb (0x0A, PIC_MASTER_CMD);
    return value;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="149" endline="219">
{
    unsigned int irqmask = 1 << irq;
    unsigned long flags;
    spin_lock_irqsave (& i8259A_lock, flags);
    if (cached_irq_mask & irqmask)
        goto spurious_8259A_irq;
    cached_irq_mask |= irqmask;
handle_real_irq :
    if (irq & 8) {
        inb (PIC_SLAVE_IMR);
        outb (cached_slave_mask, PIC_SLAVE_IMR);
        outb (0x60 + (irq & 7), PIC_SLAVE_CMD);
        outb (0x60 + PIC_CASCADE_IR, PIC_MASTER_CMD);
    }
    else {
        inb (PIC_MASTER_IMR);
        outb (cached_master_mask, PIC_MASTER_IMR);
        outb (0x60 + irq, PIC_MASTER_CMD);
    }
    spin_unlock_irqrestore (& i8259A_lock, flags);
    return;
spurious_8259A_irq :
    if (i8259A_irq_real (irq))
        goto handle_real_irq;
    {
        static int spurious_irq_mask;
        if (!(spurious_irq_mask & irqmask)) {
            printk (KERN_DEBUG "spurious 8259A interrupt: IRQ%d.\n", irq);
            spurious_irq_mask |= irqmask;
        }
        atomic_inc (& irq_err_count);
        goto handle_real_irq;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="174" endline="181">
{
    inb (PIC_SLAVE_IMR);
    outb (cached_slave_mask, PIC_SLAVE_IMR);
    outb (0x60 + (irq & 7), PIC_SLAVE_CMD);
    outb (0x60 + PIC_CASCADE_IR, PIC_MASTER_CMD);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="181" endline="185">
{
    inb (PIC_MASTER_IMR);
    outb (cached_master_mask, PIC_MASTER_IMR);
    outb (0x60 + irq, PIC_MASTER_CMD);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="200" endline="218">
{
    static int spurious_irq_mask;
    if (!(spurious_irq_mask & irqmask)) {
        printk (KERN_DEBUG "spurious 8259A interrupt: IRQ%d.\n", irq);
        spurious_irq_mask |= irqmask;
    }
    atomic_inc (& irq_err_count);
    goto handle_real_irq;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="206" endline="210">
{
    printk (KERN_DEBUG "spurious 8259A interrupt: IRQ%d.\n", irq);
    spurious_irq_mask |= irqmask;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="226" endline="229">
{
    outb (trigger [0], 0x4d0);
    outb (trigger [1], 0x4d1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="232" endline="236">
{
    trigger[0] = inb (0x4d0) & 0xF8;
    trigger[1] = inb (0x4d1) & 0xDE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="239" endline="243">
{
    init_8259A (i8259A_auto_eoi);
    restore_ELCR (irq_trigger);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="246" endline="249">
{
    save_ELCR (irq_trigger);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="252" endline="260">
{
    outb (0xff, PIC_MASTER_IMR);
    outb (0xff, PIC_SLAVE_IMR);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="275" endline="280">
{
    int error = sysdev_class_register (&i8259_sysdev_class);
    if (!error)
        error = sysdev_register (&device_i8259A);
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="285" endline="294">
{
    unsigned long flags;
    spin_lock_irqsave (& i8259A_lock, flags);
    outb (0xff, PIC_MASTER_IMR);
    outb (0xff, PIC_SLAVE_IMR);
    spin_unlock_irqrestore (& i8259A_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="297" endline="306">
{
    unsigned long flags;
    spin_lock_irqsave (& i8259A_lock, flags);
    outb (cached_master_mask, PIC_MASTER_IMR);
    outb (cached_slave_mask, PIC_SLAVE_IMR);
    spin_unlock_irqrestore (& i8259A_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i8259.c.ifdefed" startline="309" endline="360">
{
    unsigned long flags;
    i8259A_auto_eoi = auto_eoi;
    spin_lock_irqsave (& i8259A_lock, flags);
    outb (0xff, PIC_MASTER_IMR);
    outb (0xff, PIC_SLAVE_IMR);
    outb_pic (0x11, PIC_MASTER_CMD);
    outb_pic (IRQ0_VECTOR, PIC_MASTER_IMR);
    outb_pic (1U << PIC_CASCADE_IR, PIC_MASTER_IMR);
    if (auto_eoi)
        outb_pic (MASTER_ICW4_DEFAULT | PIC_ICW4_AEOI, PIC_MASTER_IMR);
    else
        outb_pic (MASTER_ICW4_DEFAULT, PIC_MASTER_IMR);
    outb_pic (0x11, PIC_SLAVE_CMD);
    outb_pic (IRQ8_VECTOR, PIC_SLAVE_IMR);
    outb_pic (PIC_CASCADE_IR, PIC_SLAVE_IMR);
    outb_pic (SLAVE_ICW4_DEFAULT, PIC_SLAVE_IMR);
    if (auto_eoi)
        i8259A_chip.mask_ack = disable_8259A_irq;
    else
        i8259A_chip.mask_ack = mask_and_ack_8259A;
    udelay (100);
    outb (cached_master_mask, PIC_MASTER_IMR);
    outb (cached_slave_mask, PIC_SLAVE_IMR);
    spin_unlock_irqrestore (& i8259A_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="46" endline="59">
{
    unsigned long mask = 0;
    clts ();
    if (cpu_has_fxsr) {
        memset (& fx_scratch, 0, sizeof (struct i387_fxsave_struct));
        asm volatile ("fxsave %0"
            :
            : "m" (fx_scratch)
        ) mask = fx_scratch.mxcsr_mask;
        if (mask == 0)
            mask = 0x0000ffbf;
    }
    mxcsr_feature_mask &= mask;
    stts ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="50" endline="56">
{
    memset (& fx_scratch, 0, sizeof (struct i387_fxsave_struct));
    asm volatile ("fxsave %0"
        :
        : "m" (fx_scratch)
    ) mask = fx_scratch.mxcsr_mask;
    if (mask == 0)
        mask = 0x0000ffbf;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="62" endline="79">
{
    if (!HAVE_HWFP) {
        xstate_size = sizeof (struct i387_soft_struct);
        return;
    }
    if (cpu_has_xsave) {
        xsave_cntxt_init ();
        return;
    }
    if (cpu_has_fxsr)
        xstate_size = sizeof (struct i387_fxsave_struct);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="63" endline="66">
{
    xstate_size = sizeof (struct i387_soft_struct);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="68" endline="71">
{
    xsave_cntxt_init ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="119" endline="165">
{
    if (tsk_used_math (tsk)) {
        if (HAVE_HWFP && tsk == current)
            unlazy_fpu (tsk);
        return 0;
    }
    if (!tsk->thread.xstate) {
        tsk->thread.xstate = kmem_cache_alloc (task_xstate_cachep, GFP_KERNEL);
        if (!tsk->thread.xstate)
            return -ENOMEM;
    }
    if (cpu_has_fxsr) {
        struct i387_fxsave_struct *fx = &tsk->thread.xstate->fxsave;
        memset (fx, 0, xstate_size);
        fx->cwd = 0x37f;
        if (cpu_has_xmm)
            fx->mxcsr = MXCSR_DEFAULT;
    }
    else {
        struct i387_fsave_struct *fp = &tsk->thread.xstate->fsave;
        memset (fp, 0, xstate_size);
        fp->cwd = 0xffff037fu;
        fp->swd = 0xffff0000u;
        fp->twd = 0xffffffffu;
        fp->fos = 0xffff0000u;
    }
    set_stopped_child_used_math (tsk);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="120" endline="124">
{
    if (HAVE_HWFP && tsk == current)
        unlazy_fpu (tsk);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="129" endline="134">
{
    tsk->thread.xstate = kmem_cache_alloc (task_xstate_cachep, GFP_KERNEL);
    if (!tsk->thread.xstate)
        return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="145" endline="152">
{
    struct i387_fxsave_struct *fx = &tsk->thread.xstate->fxsave;
    memset (fx, 0, xstate_size);
    fx->cwd = 0x37f;
    if (cpu_has_xmm)
        fx->mxcsr = MXCSR_DEFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="152" endline="159">
{
    struct i387_fsave_struct *fp = &tsk->thread.xstate->fsave;
    memset (fp, 0, xstate_size);
    fp->cwd = 0xffff037fu;
    fp->swd = 0xffff0000u;
    fp->twd = 0xffffffffu;
    fp->fos = 0xffff0000u;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="168" endline="170">
{
    return tsk_used_math (target) ? regset->n : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="173" endline="175">
{
    return (cpu_has_fxsr && tsk_used_math (target)) ? regset->n : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="180" endline="192">
{
    int ret;
    if (!cpu_has_fxsr)
        return -ENODEV;
    ret = init_fpu (target);
    if (ret)
        return ret;
    return user_regset_copyout (&pos, &count, &kbuf, &ubuf, &target->thread.xstate->fxsave, 0, -1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/i387.c.ifdefed" startline="197" endline="225">
{
    int ret;
    if (!cpu_has_fxsr)
        return -ENODEV;
    ret = init_fpu (target);
    if (ret)
        return ret;
    set_stopped_child_used_math (target);
    ret = user_regset_copyin (&pos, &count, &kbuf, &ubuf, &target->thread.xstate->fxsave, 0, -1);
    target->thread.xstate->fxsave.mxcsr &= mxcsr_feature_mask;
    if (cpu_has_xsave)
        target->thread.xstate->xsave.xsave_hdr.xstate_bv |= XSTATE_FPSSE;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="73" endline="86">
{
    struct cpuinfo_x86 *c = &cpu_data (cpu);
    u32 dummy;
    memset (csig, 0, sizeof (* csig));
    if (c->x86_vendor != X86_VENDOR_AMD || c->x86 < 0x10) {
        printk (KERN_WARNING "microcode: CPU%d: AMD CPU family 0x%x not " "supported\n", cpu, c -> x86);
        return -1;
    }
    rdmsr (MSR_AMD64_PATCH_LEVEL, csig -> rev, dummy);
    printk (KERN_INFO "microcode: CPU%d: patch_level=0x%x\n", cpu, csig -> rev);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="78" endline="82">
{
    printk (KERN_WARNING "microcode: CPU%d: AMD CPU family 0x%x not " "supported\n", cpu, c -> x86);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="89" endline="130">
{
    struct microcode_header_amd *mc_header = mc;
    unsigned int current_cpu_id;
    u16 equiv_cpu_id = 0;
    unsigned int i = 0;
    BUG_ON (equiv_cpu_table == NULL);
    current_cpu_id = cpuid_eax (0x00000001);
    while (equiv_cpu_table[i].installed_cpu != 0) {
        if (current_cpu_id == equiv_cpu_table[i].installed_cpu) {
            equiv_cpu_id = equiv_cpu_table[i].equiv_cpu;
            break;
        }
        i++;
    }
    if (!equiv_cpu_id) {
        printk (KERN_WARNING "microcode: CPU%d: cpu revision " "not listed in equivalent cpu table\n", cpu);
        return 0;
    }
    if (mc_header->processor_rev_id != equiv_cpu_id) {
        printk (KERN_ERR "microcode: CPU%d: patch mismatch " "(processor_rev_id: %x, equiv_cpu_id: %x)\n", cpu, mc_header -> processor_rev_id, equiv_cpu_id);
        return 0;
    }
    if (mc_header->nb_dev_id || mc_header->sb_dev_id) {
        printk (KERN_ERR "microcode: CPU%d: loading of chipset " "specific code not yet supported\n", cpu);
        return 0;
    }
    if (mc_header->patch_id <= rev)
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="98" endline="104">
{
    if (current_cpu_id == equiv_cpu_table[i].installed_cpu) {
        equiv_cpu_id = equiv_cpu_table[i].equiv_cpu;
        break;
    }
    i++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="99" endline="102">
{
    equiv_cpu_id = equiv_cpu_table[i].equiv_cpu;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="106" endline="110">
{
    printk (KERN_WARNING "microcode: CPU%d: cpu revision " "not listed in equivalent cpu table\n", cpu);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="112" endline="117">
{
    printk (KERN_ERR "microcode: CPU%d: patch mismatch " "(processor_rev_id: %x, equiv_cpu_id: %x)\n", cpu, mc_header -> processor_rev_id, equiv_cpu_id);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="120" endline="124">
{
    printk (KERN_ERR "microcode: CPU%d: loading of chipset " "specific code not yet supported\n", cpu);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="133" endline="162">
{
    u32 rev, dummy;
    int cpu_num = raw_smp_processor_id ();
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu_num;
    struct microcode_amd *mc_amd = uci->mc;
    BUG_ON (cpu_num != cpu);
    if (mc_amd == NULL)
        return 0;
    wrmsrl (MSR_AMD64_PATCH_LOADER, (u64) (long) & mc_amd -> hdr.data_code);
    rdmsr (MSR_AMD64_PATCH_LEVEL, rev, dummy);
    if (rev != mc_amd->hdr.patch_id) {
        printk (KERN_ERR "microcode: CPU%d: update failed " "(for patch_level=0x%x)\n", cpu, mc_amd -> hdr.patch_id);
        return -1;
    }
    printk (KERN_INFO "microcode: CPU%d: updated (new patch_level=0x%x)\n", cpu, rev);
    uci->cpu_sig.rev = rev;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="150" endline="154">
{
    printk (KERN_ERR "microcode: CPU%d: update failed " "(for patch_level=0x%x)\n", cpu, mc_amd -> hdr.patch_id);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="165" endline="168">
{
    memcpy (to, from, n);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="172" endline="207">
{
    unsigned int total_size;
    u8 section_hdr [UCODE_CONTAINER_SECTION_HDR];
    void *mc;
    if (get_ucode_data (section_hdr, buf, UCODE_CONTAINER_SECTION_HDR))
        return NULL;
    if (section_hdr[0] != UCODE_UCODE_TYPE) {
        printk (KERN_ERR "microcode: error: invalid type field in " "container file section header\n");
        return NULL;
    }
    total_size = (unsigned long) (section_hdr[4] + (section_hdr[5] << 8));
    printk (KERN_DEBUG "microcode: size %u, total_size %u\n", size, total_size);
    if (total_size > size || total_size > UCODE_MAX_SIZE) {
        printk (KERN_ERR "microcode: error: size mismatch\n");
        return NULL;
    }
    mc = vmalloc (UCODE_MAX_SIZE);
    if (mc) {
        memset (mc, 0, UCODE_MAX_SIZE);
        if (get_ucode_data (mc, buf +UCODE_CONTAINER_SECTION_HDR, total_size)) {
            vfree (mc);
            mc = NULL;
        }
        else
            *mc_size = total_size + UCODE_CONTAINER_SECTION_HDR;
    }
    return mc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="180" endline="184">
{
    printk (KERN_ERR "microcode: error: invalid type field in " "container file section header\n");
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="191" endline="194">
{
    printk (KERN_ERR "microcode: error: size mismatch\n");
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="197" endline="205">
{
    memset (mc, 0, UCODE_MAX_SIZE);
    if (get_ucode_data (mc, buf +UCODE_CONTAINER_SECTION_HDR, total_size)) {
        vfree (mc);
        mc = NULL;
    }
    else
        *mc_size = total_size + UCODE_CONTAINER_SECTION_HDR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="200" endline="203">
{
    vfree (mc);
    mc = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="210" endline="240">
{
    u8 *container_hdr [UCODE_CONTAINER_HEADER_SIZE];
    unsigned int *buf_pos = (unsigned int *) container_hdr;
    unsigned long size;
    if (get_ucode_data (&container_hdr, buf, UCODE_CONTAINER_HEADER_SIZE))
        return 0;
    size = buf_pos[2];
    if (buf_pos[1] != UCODE_EQUIV_CPU_TABLE_TYPE || !size) {
        printk (KERN_ERR "microcode: error: invalid type field in " "container file section header\n");
        return 0;
    }
    equiv_cpu_table = (struct equiv_cpu_entry *) vmalloc (size);
    if (!equiv_cpu_table) {
        printk (KERN_ERR "microcode: failed to allocate " "equivalent CPU table\n");
        return 0;
    }
    buf += UCODE_CONTAINER_HEADER_SIZE;
    if (get_ucode_data (equiv_cpu_table, buf, size)) {
        vfree (equiv_cpu_table);
        return 0;
    }
    return size + UCODE_CONTAINER_HEADER_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="220" endline="224">
{
    printk (KERN_ERR "microcode: error: invalid type field in " "container file section header\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="227" endline="231">
{
    printk (KERN_ERR "microcode: failed to allocate " "equivalent CPU table\n");
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="234" endline="237">
{
    vfree (equiv_cpu_table);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="243" endline="246">
{
    vfree (equiv_cpu_table);
    equiv_cpu_table = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="250" endline="307">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    const u8 *ucode_ptr = data;
    void *new_mc = NULL;
    void *mc;
    int new_rev = uci->cpu_sig.rev;
    unsigned int leftover;
    unsigned long offset;
    enum ucode_state state = UCODE_OK;
    offset = install_equiv_cpu_table (ucode_ptr);
    if (!offset) {
        printk (KERN_ERR "microcode: failed to create " "equivalent cpu table\n");
        return UCODE_ERROR;
    }
    ucode_ptr += offset;
    leftover = size - offset;
    while (leftover) {
        unsigned int uninitialized_var (mc_size);
        struct microcode_header_amd *mc_header;
        mc = get_next_ucode (ucode_ptr, leftover, &mc_size);
        if (!mc)
            break;
        mc_header = (struct microcode_header_amd *) mc;
        if (get_matching_microcode (cpu, mc, new_rev)) {
            vfree (new_mc);
            new_rev = mc_header->patch_id;
            new_mc = mc;
        }
        else
            vfree (mc);
        ucode_ptr += mc_size;
        leftover -= mc_size;
    }
    if (new_mc) {
        if (!leftover) {
            vfree (uci -> mc);
            uci->mc = new_mc;
            pr_debug ("microcode: CPU%d found a matching microcode " "update with version 0x%x (current=0x%x)\n", cpu, new_rev, uci -> cpu_sig.rev);
        }
        else {
            vfree (new_mc);
            state = UCODE_ERROR;
        }
    }
    else
        state = UCODE_NFOUND;
    free_equiv_cpu_table ();
    return state;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="261" endline="265">
{
    printk (KERN_ERR "microcode: failed to create " "equivalent cpu table\n");
    return UCODE_ERROR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="270" endline="288">
{
    unsigned int uninitialized_var (mc_size);
    struct microcode_header_amd *mc_header;
    mc = get_next_ucode (ucode_ptr, leftover, &mc_size);
    if (!mc)
        break;
    mc_header = (struct microcode_header_amd *) mc;
    if (get_matching_microcode (cpu, mc, new_rev)) {
        vfree (new_mc);
        new_rev = mc_header->patch_id;
        new_mc = mc;
    }
    else
        vfree (mc);
    ucode_ptr += mc_size;
    leftover -= mc_size;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="279" endline="283">
{
    vfree (new_mc);
    new_rev = mc_header->patch_id;
    new_mc = mc;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="290" endline="301">
{
    if (!leftover) {
        vfree (uci -> mc);
        uci->mc = new_mc;
        pr_debug ("microcode: CPU%d found a matching microcode " "update with version 0x%x (current=0x%x)\n", cpu, new_rev, uci -> cpu_sig.rev);
    }
    else {
        vfree (new_mc);
        state = UCODE_ERROR;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="291" endline="297">
{
    vfree (uci -> mc);
    uci->mc = new_mc;
    pr_debug ("microcode: CPU%d found a matching microcode " "update with version 0x%x (current=0x%x)\n", cpu, new_rev, uci -> cpu_sig.rev);
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="297" endline="300">
{
    vfree (new_mc);
    state = UCODE_ERROR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="310" endline="325">
{
    const char *fw_name = "amd-ucode/microcode_amd.bin";
    const struct firmware *firmware;
    enum ucode_state ret;
    if (request_firmware (&firmware, fw_name, device)) {
        printk (KERN_ERR "microcode: failed to load file %s\n", fw_name);
        return UCODE_NFOUND;
    }
    ret = generic_load_microcode (cpu, firmware->data, firmware->size);
    release_firmware (firmware);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="315" endline="318">
{
    printk (KERN_ERR "microcode: failed to load file %s\n", fw_name);
    return UCODE_NFOUND;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="329" endline="333">
{
    printk (KERN_INFO "microcode: AMD microcode update via " "/dev/cpu/microcode not supported\n");
    return UCODE_ERROR;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="336" endline="341">
{
    struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
    vfree (uci -> mc);
    uci->mc = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/microcode_amd.c.ifdefed" startline="352" endline="354">
{
    return &microcode_amd_ops;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsmp_64.c.ifdefed" startline="113" endline="114">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsmp_64.c.ifdefed" startline="145" endline="146">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsmp_64.c.ifdefed" startline="148" endline="150">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/kernel/vsmp_64.c.ifdefed" startline="153" endline="160">
{
    detect_vsmp_box ();
    if (!is_vsmp_box ())
        return;
    set_vsmp_pv_ops ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="15" endline="63">
{
    return ACCESS_ONCE (*ptep);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="72" endline="99">
{
    unsigned long mask;
    pte_t *ptep;
    mask = _PAGE_PRESENT | _PAGE_USER;
    if (write)
        mask |= _PAGE_RW;
    ptep = pte_offset_map (&pmd, addr);
    do {
        pte_t pte = gup_get_pte (ptep);
        struct page *page;
        if ((pte_flags (pte) & (mask | _PAGE_SPECIAL)) != mask) {
            pte_unmap (ptep);
            return 0;
        }
        VM_BUG_ON (! pfn_valid (pte_pfn (pte)));
        page = pte_page (pte);
        get_page (page);
        pages[*nr] = page;
        (*nr)++;
    }
    while (ptep++, addr += PAGE_SIZE, addr != end);
    pte_unmap (ptep - 1);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="81" endline="95">
{
    pte_t pte = gup_get_pte (ptep);
    struct page *page;
    if ((pte_flags (pte) & (mask | _PAGE_SPECIAL)) != mask) {
        pte_unmap (ptep);
        return 0;
    }
    VM_BUG_ON (! pfn_valid (pte_pfn (pte)));
    page = pte_page (pte);
    get_page (page);
    pages[*nr] = page;
    (*nr)++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="85" endline="88">
{
    pte_unmap (ptep);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="102" endline="106">
{
    VM_BUG_ON (page != compound_head (page));
    VM_BUG_ON (page_count (page) == 0);
    atomic_add (nr, & page -> _count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="110" endline="138">
{
    unsigned long mask;
    pte_t pte = *(pte_t*) &pmd;
    struct page *head, *page;
    int refs;
    mask = _PAGE_PRESENT | _PAGE_USER;
    if (write)
        mask |= _PAGE_RW;
    if ((pte_flags (pte) & mask) != mask)
        return 0;
    VM_BUG_ON (pte_flags (pte) & _PAGE_SPECIAL);
    VM_BUG_ON (! pfn_valid (pte_pfn (pte)));
    refs = 0;
    head = pte_page (pte);
    page = head + ((addr & ~PMD_MASK) >> PAGE_SHIFT);
    do {
        VM_BUG_ON (compound_head (page) != head);
        pages[*nr] = page;
        (*nr)++;
        page++;
        refs++;
    }
    while (addr += PAGE_SIZE, addr != end);
    get_head_page_multiple (head, refs);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="128" endline="134">
{
    VM_BUG_ON (compound_head (page) != head);
    pages[*nr] = page;
    (*nr)++;
    page++;
    refs++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="142" endline="163">
{
    unsigned long next;
    pmd_t *pmdp;
    pmdp = pmd_offset (&pud, addr);
    do {
        pmd_t pmd = *pmdp;
        next = pmd_addr_end (addr, end);
        if (pmd_none (pmd))
            return 0;
        if (unlikely (pmd_large (pmd))) {
            if (!gup_huge_pmd (pmd, addr, next, write, pages, nr))
                return 0;
        }
        else {
            if (!gup_pte_range (pmd, addr, next, write, pages, nr))
                return 0;
        }
    }
    while (pmdp++, addr = next, addr != end);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="147" endline="160">
{
    pmd_t pmd = *pmdp;
    next = pmd_addr_end (addr, end);
    if (pmd_none (pmd))
        return 0;
    if (unlikely (pmd_large (pmd))) {
        if (!gup_huge_pmd (pmd, addr, next, write, pages, nr))
            return 0;
    }
    else {
        if (!gup_pte_range (pmd, addr, next, write, pages, nr))
            return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="153" endline="156">
{
    if (!gup_huge_pmd (pmd, addr, next, write, pages, nr))
        return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="156" endline="159">
{
    if (!gup_pte_range (pmd, addr, next, write, pages, nr))
        return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="167" endline="195">
{
    unsigned long mask;
    pte_t pte = *(pte_t*) &pud;
    struct page *head, *page;
    int refs;
    mask = _PAGE_PRESENT | _PAGE_USER;
    if (write)
        mask |= _PAGE_RW;
    if ((pte_flags (pte) & mask) != mask)
        return 0;
    VM_BUG_ON (pte_flags (pte) & _PAGE_SPECIAL);
    VM_BUG_ON (! pfn_valid (pte_pfn (pte)));
    refs = 0;
    head = pte_page (pte);
    page = head + ((addr & ~PUD_MASK) >> PAGE_SHIFT);
    do {
        VM_BUG_ON (compound_head (page) != head);
        pages[*nr] = page;
        (*nr)++;
        page++;
        refs++;
    }
    while (addr += PAGE_SIZE, addr != end);
    get_head_page_multiple (head, refs);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="185" endline="191">
{
    VM_BUG_ON (compound_head (page) != head);
    pages[*nr] = page;
    (*nr)++;
    page++;
    refs++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="199" endline="220">
{
    unsigned long next;
    pud_t *pudp;
    pudp = pud_offset (&pgd, addr);
    do {
        pud_t pud = *pudp;
        next = pud_addr_end (addr, end);
        if (pud_none (pud))
            return 0;
        if (unlikely (pud_large (pud))) {
            if (!gup_huge_pud (pud, addr, next, write, pages, nr))
                return 0;
        }
        else {
            if (!gup_pmd_range (pud, addr, next, write, pages, nr))
                return 0;
        }
    }
    while (pudp++, addr = next, addr != end);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="204" endline="217">
{
    pud_t pud = *pudp;
    next = pud_addr_end (addr, end);
    if (pud_none (pud))
        return 0;
    if (unlikely (pud_large (pud))) {
        if (!gup_huge_pud (pud, addr, next, write, pages, nr))
            return 0;
    }
    else {
        if (!gup_pmd_range (pud, addr, next, write, pages, nr))
            return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="210" endline="213">
{
    if (!gup_huge_pud (pud, addr, next, write, pages, nr))
        return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="213" endline="216">
{
    if (!gup_pmd_range (pud, addr, next, write, pages, nr))
        return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="228" endline="276">
{
    struct mm_struct *mm = current->mm;
    unsigned long addr, len, end;
    unsigned long next;
    unsigned long flags;
    pgd_t *pgdp;
    int nr = 0;
    start &= PAGE_MASK;
    addr = start;
    len = (unsigned long) nr_pages << PAGE_SHIFT;
    end = start + len;
    if (unlikely (!access_ok (write ? VERIFY_WRITE : VERIFY_READ, (void __user *) start, len)))
        return 0;
    local_irq_save (flags);
    pgdp = pgd_offset (mm, addr);
    do {
        pgd_t pgd = *pgdp;
        next = pgd_addr_end (addr, end);
        if (pgd_none (pgd))
            break;
        if (!gup_pud_range (pgd, addr, next, write, pages, &nr))
            break;
    }
    while (pgdp++, addr = next, addr != end);
    local_irq_restore (flags);
    return nr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="264" endline="272">
{
    pgd_t pgd = *pgdp;
    next = pgd_addr_end (addr, end);
    if (pgd_none (pgd))
        break;
    if (!gup_pud_range (pgd, addr, next, write, pages, &nr))
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="296" endline="375">
{
    struct mm_struct *mm = current->mm;
    unsigned long addr, len, end;
    unsigned long next;
    pgd_t *pgdp;
    int nr = 0;
    start &= PAGE_MASK;
    addr = start;
    len = (unsigned long) nr_pages << PAGE_SHIFT;
    end = start + len;
    if (end < start)
        goto slow_irqon;
    local_irq_disable ();
    pgdp = pgd_offset (mm, addr);
    do {
        pgd_t pgd = *pgdp;
        next = pgd_addr_end (addr, end);
        if (pgd_none (pgd))
            goto slow;
        if (!gup_pud_range (pgd, addr, next, write, pages, &nr))
            goto slow;
    }
    while (pgdp++, addr = next, addr != end);
    local_irq_enable ();
    VM_BUG_ON (nr != (end - start) >> PAGE_SHIFT);
    return nr;
    {
        int ret;
    slow :
        local_irq_enable ();
    slow_irqon :
        start += nr << PAGE_SHIFT;
        pages += nr;
        down_read (& mm -> mmap_sem);
        ret = get_user_pages (current, mm, start, (end - start) >> PAGE_SHIFT, write, 0, pages, NULL);
        up_read (& mm -> mmap_sem);
        if (nr > 0) {
            if (ret < 0)
                ret = nr;
            else
                ret += nr;
        }
        return ret;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="336" endline="344">
{
    pgd_t pgd = *pgdp;
    next = pgd_addr_end (addr, end);
    if (pgd_none (pgd))
        goto slow;
    if (!gup_pud_range (pgd, addr, next, write, pages, &nr))
        goto slow;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="350" endline="374">
{
    int ret;
slow :
    local_irq_enable ();
slow_irqon :
    start += nr << PAGE_SHIFT;
    pages += nr;
    down_read (& mm -> mmap_sem);
    ret = get_user_pages (current, mm, start, (end - start) >> PAGE_SHIFT, write, 0, pages, NULL);
    up_read (& mm -> mmap_sem);
    if (nr > 0) {
        if (ret < 0)
            ret = nr;
        else
            ret += nr;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/gup.c.ifdefed" startline="366" endline="371">
{
    if (ret < 0)
        ret = nr;
    else
        ret += nr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="59" endline="64">
{
    if (percpu_read (cpu_tlbstate.state) == TLBSTATE_OK)
        BUG ();
    cpu_clear (cpu, percpu_read (cpu_tlbstate.active_mm) -> cpu_vm_mask);
    load_cr3 (swapper_pg_dir);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="126" endline="165">
{
    unsigned int cpu;
    unsigned int sender;
    union smp_flush_state *f;
    cpu = smp_processor_id ();
    sender = ~regs->orig_ax - INVALIDATE_TLB_VECTOR_START;
    f = &flush_state[sender];
    if (!cpumask_test_cpu (cpu, to_cpumask (f->flush_cpumask)))
        goto out;
    if (f->flush_mm == percpu_read (cpu_tlbstate.active_mm)) {
        if (percpu_read (cpu_tlbstate.state) == TLBSTATE_OK) {
            if (f->flush_va == TLB_FLUSH_ALL)
                local_flush_tlb ();
            else
                __flush_tlb_one (f->flush_va);
        }
        else
            leave_mm (cpu);
    }
out :
    ack_APIC_irq ();
    smp_mb__before_clear_bit ();
    cpumask_clear_cpu (cpu, to_cpumask (f -> flush_cpumask));
    smp_mb__after_clear_bit ();
    inc_irq_stat (irq_tlb_count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="150" endline="158">
{
    if (percpu_read (cpu_tlbstate.state) == TLBSTATE_OK) {
        if (f->flush_va == TLB_FLUSH_ALL)
            local_flush_tlb ();
        else
            __flush_tlb_one (f->flush_va);
    }
    else
        leave_mm (cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="151" endline="156">
{
    if (f->flush_va == TLB_FLUSH_ALL)
        local_flush_tlb ();
    else
        __flush_tlb_one (f->flush_va);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="169" endline="201">
{
    unsigned int sender;
    union smp_flush_state *f;
    sender = smp_processor_id () % NUM_INVALIDATE_TLB_VECTORS;
    f = &flush_state[sender];
    spin_lock (& f -> tlbstate_lock);
    f->flush_mm = mm;
    f->flush_va = va;
    if (cpumask_andnot (to_cpumask (f->flush_cpumask), cpumask, cpumask_of (smp_processor_id ()))) {
        apic->send_IPI_mask (to_cpumask (f->flush_cpumask), INVALIDATE_TLB_VECTOR_START +sender);
        while (!cpumask_empty (to_cpumask (f->flush_cpumask)))
            cpu_relax ();
    }
    f->flush_mm = NULL;
    f->flush_va = 0;
    spin_unlock (& f -> tlbstate_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="186" endline="196">
{
    apic->send_IPI_mask (to_cpumask (f->flush_cpumask), INVALIDATE_TLB_VECTOR_START +sender);
    while (!cpumask_empty (to_cpumask (f->flush_cpumask)))
        cpu_relax ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="205" endline="217">
{
    if (is_uv_system ()) {
        unsigned int cpu;
        cpu = get_cpu ();
        cpumask = uv_flush_tlb_others (cpumask, mm, va, cpu);
        if (cpumask)
            flush_tlb_others_ipi (cpumask, mm, va);
        put_cpu ();
        return;
    }
    flush_tlb_others_ipi (cpumask, mm, va);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="206" endline="215">
{
    unsigned int cpu;
    cpu = get_cpu ();
    cpumask = uv_flush_tlb_others (cpumask, mm, va, cpu);
    if (cpumask)
        flush_tlb_others_ipi (cpumask, mm, va);
    put_cpu ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="220" endline="227">
{
    int i;
    for (i = 0; i < ARRAY_SIZE (flush_state); i++)
        spin_lock_init (&flush_state[i].tlbstate_lock);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="231" endline="240">
{
    struct mm_struct *mm = current->mm;
    preempt_disable ();
    local_flush_tlb ();
    if (cpumask_any_but (&mm->cpu_vm_mask, smp_processor_id ()) < nr_cpu_ids)
        flush_tlb_others (&mm->cpu_vm_mask, mm, TLB_FLUSH_ALL);
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="243" endline="256">
{
    preempt_disable ();
    if (current->active_mm == mm) {
        if (current->mm)
            local_flush_tlb ();
        else
            leave_mm (smp_processor_id ());
    }
    if (cpumask_any_but (&mm->cpu_vm_mask, smp_processor_id ()) < nr_cpu_ids)
        flush_tlb_others (&mm->cpu_vm_mask, mm, TLB_FLUSH_ALL);
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="246" endline="251">
{
    if (current->mm)
        local_flush_tlb ();
    else
        leave_mm (smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="259" endline="275">
{
    struct mm_struct *mm = vma->vm_mm;
    preempt_disable ();
    if (current->active_mm == mm) {
        if (current->mm)
            __flush_tlb_one (va);
        else
            leave_mm (smp_processor_id ());
    }
    if (cpumask_any_but (&mm->cpu_vm_mask, smp_processor_id ()) < nr_cpu_ids)
        flush_tlb_others (&mm->cpu_vm_mask, mm, va);
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="264" endline="269">
{
    if (current->mm)
        __flush_tlb_one (va);
    else
        leave_mm (smp_processor_id ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="278" endline="284">
{
    unsigned long cpu = smp_processor_id ();
    __flush_tlb_all ();
    if (percpu_read (cpu_tlbstate.state) == TLBSTATE_LAZY)
        leave_mm (cpu);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/tlb.c.ifdefed" startline="287" endline="289">
{
    on_each_cpu (do_flush_tlb_all, NULL, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/extable.c.ifdefed" startline="7" endline="37">
{
    const struct exception_table_entry *fixup;
    fixup = search_exception_tables (regs->ip);
    if (fixup) {
        if (fixup->fixup < 16) {
            current_thread_info ()->uaccess_err = -EFAULT;
            regs->ip += fixup->fixup;
            return 1;
        }
        regs->ip = fixup->fixup;
        return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/extable.c.ifdefed" startline="25" endline="34">
{
    if (fixup->fixup < 16) {
        current_thread_info ()->uaccess_err = -EFAULT;
        regs->ip += fixup->fixup;
        return 1;
    }
    regs->ip = fixup->fixup;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/extable.c.ifdefed" startline="27" endline="31">
{
    current_thread_info ()->uaccess_err = -EFAULT;
    regs->ip += fixup->fixup;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="40" endline="42">
{
    return acpi_map_pxm_to_node (pxm);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="45" endline="57">
{
    int i;
    for (i = 0; i < num_node_memblks; i++) {
        struct bootnode *nd = &node_memblk_range[i];
        if (nd->start == nd->end)
            continue;
        if (nd->end > start && nd->start < end)
            return memblk_nodeid[i];
        if (nd->end == end && nd->start == start)
            return memblk_nodeid[i];
    }
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="47" endline="55">
{
    struct bootnode *nd = &node_memblk_range[i];
    if (nd->start == nd->end)
        continue;
    if (nd->end > start && nd->start < end)
        return memblk_nodeid[i];
    if (nd->end == end && nd->start == start)
        return memblk_nodeid[i];
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="60" endline="73">
{
    struct bootnode *nd = &nodes[i];
    if (nd->start < start) {
        nd->start = start;
        if (nd->end < nd->start)
            nd->start = nd->end;
    }
    if (nd->end > end) {
        nd->end = end;
        if (nd->start > nd->end)
            nd->start = nd->end;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="63" endline="67">
{
    nd->start = start;
    if (nd->end < nd->start)
        nd->start = nd->end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="68" endline="72">
{
    nd->end = end;
    if (nd->start > nd->end)
        nd->start = nd->end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="76" endline="87">
{
    int i;
    printk (KERN_ERR "SRAT: SRAT not used.\n");
    acpi_numa = -1;
    for (i = 0; i < MAX_LOCAL_APIC; i++)
        apicid_to_node[i] = NUMA_NO_NODE;
    for (i = 0; i < MAX_NUMNODES; i++) {
        nodes[i].start = nodes[i].end = 0;
        nodes_add[i].start = nodes_add[i].end = 0;
    }
    remove_all_active_ranges ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="82" endline="85">
{
    nodes[i].start = nodes[i].end = 0;
    nodes_add[i].start = nodes_add[i].end = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="90" endline="92">
{
    return numa_off || acpi_numa < 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="96" endline="110">
{
    unsigned length;
    unsigned long phys;
    length = slit->header.length;
    phys = find_e820_area (0, max_pfn_mapped << PAGE_SHIFT, length, PAGE_SIZE);
    if (phys == -1L)
        panic (" Can not save slit!\n");
    acpi_slit = __va (phys);
    memcpy (acpi_slit, slit, length);
    reserve_early (phys, phys + length, "ACPI SLIT");
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="115" endline="141">
{
    int pxm, node;
    int apic_id;
    if (srat_disabled ())
        return;
    if (pa->header.length < sizeof (struct acpi_srat_x2apic_cpu_affinity)) {
        bad_srat ();
        return;
    }
    if ((pa->flags & ACPI_SRAT_CPU_ENABLED) == 0)
        return;
    pxm = pa->proximity_domain;
    node = setup_node (pxm);
    if (node < 0) {
        printk (KERN_ERR "SRAT: Too many proximity domains %x\n", pxm);
        bad_srat ();
        return;
    }
    apic_id = pa->apic_id;
    apicid_to_node[apic_id] = node;
    node_set (node, cpu_nodes_parsed);
    acpi_numa = 1;
    printk (KERN_INFO "SRAT: PXM %u -> APIC %u -> Node %u\n", pxm, apic_id, node);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="121" endline="124">
{
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="129" endline="133">
{
    printk (KERN_ERR "SRAT: Too many proximity domains %x\n", pxm);
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="146" endline="175">
{
    int pxm, node;
    int apic_id;
    if (srat_disabled ())
        return;
    if (pa->header.length != sizeof (struct acpi_srat_cpu_affinity)) {
        bad_srat ();
        return;
    }
    if ((pa->flags & ACPI_SRAT_CPU_ENABLED) == 0)
        return;
    pxm = pa->proximity_domain_lo;
    node = setup_node (pxm);
    if (node < 0) {
        printk (KERN_ERR "SRAT: Too many proximity domains %x\n", pxm);
        bad_srat ();
        return;
    }
    if (get_uv_system_type () >= UV_X2APIC)
        apic_id = (pa->apic_id << 8) | pa->local_sapic_eid;
    else
        apic_id = pa->apic_id;
    apicid_to_node[apic_id] = node;
    node_set (node, cpu_nodes_parsed);
    acpi_numa = 1;
    printk (KERN_INFO "SRAT: PXM %u -> APIC %u -> Node %u\n", pxm, apic_id, node);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="152" endline="155">
{
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="160" endline="164">
{
    printk (KERN_ERR "SRAT: Too many proximity domains %x\n", pxm);
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="180" endline="180">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="188" endline="235">
{
    unsigned long s_pfn = start >> PAGE_SHIFT;
    unsigned long e_pfn = end >> PAGE_SHIFT;
    int changed = 0;
    struct bootnode *nd = &nodes_add[node];
    if ((signed long) (end - start) < NODE_MIN_SIZE) {
        printk (KERN_ERR "SRAT: Hotplug area too small\n");
        return;
    }
    if (absent_pages_in_range (s_pfn, e_pfn) != e_pfn - s_pfn) {
        printk (KERN_ERR "SRAT: Hotplug area %lu -> %lu has existing memory\n", s_pfn, e_pfn);
        return;
    }
    if (nd->start == nd->end) {
        nd->start = start;
        nd->end = end;
        changed = 1;
    }
    else {
        if (nd->start == end) {
            nd->start = start;
            changed = 1;
        }
        if (nd->end == start) {
            nd->end = end;
            changed = 1;
        }
        if (!changed)
            printk (KERN_ERR "SRAT: Hotplug zone not continuous. Partly ignored\n");
    }
    if (changed)
        printk (KERN_INFO "SRAT: hot plug zone found %Lx - %Lx\n", nd->start, nd->end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="200" endline="203">
{
    printk (KERN_ERR "SRAT: Hotplug area too small\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="206" endline="211">
{
    printk (KERN_ERR "SRAT: Hotplug area %lu -> %lu has existing memory\n", s_pfn, e_pfn);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="215" endline="219">
{
    nd->start = start;
    nd->end = end;
    changed = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="219" endline="230">
{
    if (nd->start == end) {
        nd->start = start;
        changed = 1;
    }
    if (nd->end == start) {
        nd->end = end;
        changed = 1;
    }
    if (!changed)
        printk (KERN_ERR "SRAT: Hotplug zone not continuous. Partly ignored\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="220" endline="223">
{
    nd->start = start;
    changed = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="224" endline="227">
{
    nd->end = end;
    changed = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="240" endline="308">
{
    struct bootnode *nd, oldnode;
    unsigned long start, end;
    int node, pxm;
    int i;
    if (srat_disabled ())
        return;
    if (ma->header.length != sizeof (struct acpi_srat_mem_affinity)) {
        bad_srat ();
        return;
    }
    if ((ma->flags & ACPI_SRAT_MEM_ENABLED) == 0)
        return;
    if ((ma->flags & ACPI_SRAT_MEM_HOT_PLUGGABLE) && !save_add_info ())
        return;
    start = ma->base_address;
    end = start + ma->length;
    pxm = ma->proximity_domain;
    node = setup_node (pxm);
    if (node < 0) {
        printk (KERN_ERR "SRAT: Too many proximity domains.\n");
        bad_srat ();
        return;
    }
    i = conflicting_memblks (start, end);
    if (i == node) {
        printk (KERN_WARNING "SRAT: Warning: PXM %d (%lx-%lx) overlaps with itself (%Lx-%Lx)\n", pxm, start, end, nodes [i].start, nodes [i].end);
    }
    else if (i >= 0) {
        printk (KERN_ERR "SRAT: PXM %d (%lx-%lx) overlaps with PXM %d (%Lx-%Lx)\n", pxm, start, end, node_to_pxm (i), nodes [i].start, nodes [i].end);
        bad_srat ();
        return;
    }
    nd = &nodes[node];
    oldnode = *nd;
    if (!node_test_and_set (node, nodes_parsed)) {
        nd->start = start;
        nd->end = end;
    }
    else {
        if (start < nd->start)
            nd->start = start;
        if (nd->end < end)
            nd->end = end;
    }
    printk (KERN_INFO "SRAT: Node %u PXM %u %lx-%lx\n", node, pxm, start, end);
    e820_register_active_regions (node, start >> PAGE_SHIFT, end >> PAGE_SHIFT);
    if (ma->flags & ACPI_SRAT_MEM_HOT_PLUGGABLE) {
        update_nodes_add (node, start, end);
        *nd = oldnode;
        if ((nd->start | nd->end) == 0)
            node_clear (node, nodes_parsed);
    }
    node_memblk_range[num_node_memblks].start = start;
    node_memblk_range[num_node_memblks].end = end;
    memblk_nodeid[num_node_memblks] = node;
    num_node_memblks++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="248" endline="251">
{
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="261" endline="265">
{
    printk (KERN_ERR "SRAT: Too many proximity domains.\n");
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="267" endline="271">
{
    printk (KERN_WARNING "SRAT: Warning: PXM %d (%lx-%lx) overlaps with itself (%Lx-%Lx)\n", pxm, start, end, nodes [i].start, nodes [i].end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="271" endline="278">
{
    printk (KERN_ERR "SRAT: PXM %d (%lx-%lx) overlaps with PXM %d (%Lx-%Lx)\n", pxm, start, end, node_to_pxm (i), nodes [i].start, nodes [i].end);
    bad_srat ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="281" endline="284">
{
    nd->start = start;
    nd->end = end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="284" endline="289">
{
    if (start < nd->start)
        nd->start = start;
    if (nd->end < end)
        nd->end = end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="296" endline="302">
{
    update_nodes_add (node, start, end);
    *nd = oldnode;
    if ((nd->start | nd->end) == 0)
        node_clear (node, nodes_parsed);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="313" endline="337">
{
    int i;
    unsigned long pxmram, e820ram;
    pxmram = 0;

    for_each_node_mask (i, nodes_parsed) {
        unsigned long s = nodes[i].start >> PAGE_SHIFT;
        unsigned long e = nodes[i].end >> PAGE_SHIFT;
        pxmram += e - s;
        pxmram -= absent_pages_in_range (s, e);
        if ((long) pxmram < 0)
            pxmram = 0;
    }

    e820ram = max_pfn - (e820_hole_size (0, max_pfn << PAGE_SHIFT) >> PAGE_SHIFT);
    if ((long) (e820ram - pxmram) >= (1 << (20 - PAGE_SHIFT))) {
        printk (KERN_ERR "SRAT: PXMs only cover %luMB of your %luMB e820 RAM. Not used.\n", (pxmram << PAGE_SHIFT) >> 20, (e820ram << PAGE_SHIFT) >> 20);
        return 0;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="318" endline="325">
{
    unsigned long s = nodes[i].start >> PAGE_SHIFT;
    unsigned long e = nodes[i].end >> PAGE_SHIFT;
    pxmram += e - s;
    pxmram -= absent_pages_in_range (s, e);
    if ((long) pxmram < 0)
        pxmram = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="329" endline="335">
{
    printk (KERN_ERR "SRAT: PXMs only cover %luMB of your %luMB e820 RAM. Not used.\n", (pxmram << PAGE_SHIFT) >> 20, (e820ram << PAGE_SHIFT) >> 20);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="339" endline="339">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="343" endline="389">
{
    int i;
    if (acpi_numa <= 0)
        return -1;
    for (i = 0; i < MAX_NUMNODES; i++)
        cutoff_node (i, start, end);
    if (!nodes_cover_memory (nodes)) {
        bad_srat ();
        return -1;
    }
    memnode_shift = compute_hash_shift (node_memblk_range, num_node_memblks, memblk_nodeid);
    if (memnode_shift < 0) {
        printk (KERN_ERR "SRAT: No NUMA node hash function found. Contact maintainer\n");
        bad_srat ();
        return -1;
    }
    nodes_or (node_possible_map, nodes_parsed, cpu_nodes_parsed);
    for_each_node_mask (i, node_possible_map)
    setup_node_bootmem (i, nodes [i].start, nodes [i].end);
    for_each_node_mask (i, node_possible_map)
    if (!node_online (i))
        setup_node_bootmem (i, nodes[i].start, nodes[i].end);
    for (i = 0; i < nr_cpu_ids; i++) {
        int node = early_cpu_to_node (i);
        if (node == NUMA_NO_NODE)
            continue;
        if (!node_online (node))
            numa_clear_node (i);
    }
    numa_init_array ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="353" endline="356">
{
    bad_srat ();
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="360" endline="365">
{
    printk (KERN_ERR "SRAT: No NUMA node hash function found. Contact maintainer\n");
    bad_srat ();
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="379" endline="386">
{
    int node = early_cpu_to_node (i);
    if (node == NUMA_NO_NODE)
        continue;
    if (!node_online (node))
        numa_clear_node (i);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="466" endline="468">
{
    return a == b;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/srat_64.c.ifdefed" startline="472" endline="480">
{
    int index;
    if (!acpi_slit)
        return null_slit_node_compare (a, b) ? LOCAL_DISTANCE : REMOTE_DISTANCE;
    index = acpi_slit->locality_count * node_to_pxm (a);
    return acpi_slit->entry[index + node_to_pxm (b)];
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="48" endline="50">
{
    (void) reason;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="57" endline="60">
{
    debug_enable = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="81" endline="126">
{
    u64 pat;
    if (!pat_enabled)
        return;
    if (!cpu_has_pat) {
        if (!boot_pat_state) {
            pat_disable ("PAT not supported by CPU.");
            return;
        }
        else {
            printk (KERN_ERR "PAT enabled, " "but not supported by secondary CPU\n");
            BUG ();
        }
    }
    pat = PAT (0, WB) | PAT (1, WC) | PAT (2, UC_MINUS) | PAT (3, UC) | PAT (4, WB) | PAT (5, WC) | PAT (6, UC_MINUS) | PAT (7, UC);
    if (!boot_pat_state)
        rdmsrl (MSR_IA32_CR_PAT, boot_pat_state);
    wrmsrl (MSR_IA32_CR_PAT, pat);
    printk (KERN_INFO "x86 PAT enabled: cpu %d, old 0x%Lx, new 0x%Lx\n", smp_processor_id (), boot_pat_state, pat);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="87" endline="101">
{
    if (!boot_pat_state) {
        pat_disable ("PAT not supported by CPU.");
        return;
    }
    else {
        printk (KERN_ERR "PAT enabled, " "but not supported by secondary CPU\n");
        BUG ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="88" endline="91">
{
    pat_disable ("PAT not supported by CPU.");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="91" endline="100">
{
    printk (KERN_ERR "PAT enabled, " "but not supported by secondary CPU\n");
    BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="131" endline="139">
{
    switch (flags & _PAGE_CACHE_MASK) {
    case _PAGE_CACHE_UC :
        return "uncached";
    case _PAGE_CACHE_UC_MINUS :
        return "uncached-minus";
    case _PAGE_CACHE_WB :
        return "write-back";
    case _PAGE_CACHE_WC :
        return "write-combining";
    default :
        return "broken";
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="132" endline="138">
{
case _PAGE_CACHE_UC :
    return "uncached";
case _PAGE_CACHE_UC_MINUS :
    return "uncached-minus";
case _PAGE_CACHE_WB :
    return "write-back";
case _PAGE_CACHE_WC :
    return "write-combining";
default :
    return "broken";
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="176" endline="192">
{
    if (req_type == _PAGE_CACHE_WB) {
        u8 mtrr_type;
        mtrr_type = mtrr_type_lookup (start, end);
        if (mtrr_type != MTRR_TYPE_WRBACK)
            return _PAGE_CACHE_UC_MINUS;
        return _PAGE_CACHE_WB;
    }
    return req_type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="181" endline="189">
{
    u8 mtrr_type;
    mtrr_type = mtrr_type_lookup (start, end);
    if (mtrr_type != MTRR_TYPE_WRBACK)
        return _PAGE_CACHE_UC_MINUS;
    return _PAGE_CACHE_WB;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="196" endline="219">
{
    if (new->type != entry->type) {
        if (type) {
            new->type = entry->type;
            *type = entry->type;
        }
        else
            goto conflict;
    }
    list_for_each_entry_continue (entry, &memtype_list, nd) {
        if (new->end <= entry->start)
            break;
        else if (new->type != entry->type)
            goto conflict;
    }
    return 0;
conflict :
    printk (KERN_INFO "%s:%d conflicting memory types " "%Lx-%Lx %s<->%s\n", current->comm, current->pid, new->start, new->end, cattr_name (new->type), cattr_name (entry->type));
    return -EBUSY;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="197" endline="203">
{
    if (type) {
        new->type = entry->type;
        *type = entry->type;
    }
    else
        goto conflict;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="198" endline="201">
{
    new->type = entry->type;
    *type = entry->type;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="206" endline="211">
{
    if (new->end <= entry->start)
        break;
    else if (new->type != entry->type)
        goto conflict;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="225" endline="249">
{
    int ram_page = 0, not_rampage = 0;
    unsigned long page_nr;
    for (page_nr = (start >> PAGE_SHIFT); page_nr < (end >> PAGE_SHIFT); ++page_nr) {
        if (page_nr >= (ISA_END_ADDRESS >> PAGE_SHIFT) && page_is_ram (page_nr))
            ram_page = 1;
        else
            not_rampage = 1;
        if (ram_page == not_rampage)
            return -1;
    }
    return ram_page;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="230" endline="246">
{
    if (page_nr >= (ISA_END_ADDRESS >> PAGE_SHIFT) && page_is_ram (page_nr))
        ram_page = 1;
    else
        not_rampage = 1;
    if (ram_page == not_rampage)
        return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="265" endline="286">
{
    struct page *page;
    u64 pfn, end_pfn;
    for (pfn = (start >> PAGE_SHIFT); pfn < (end >> PAGE_SHIFT); ++pfn) {
        page = pfn_to_page (pfn);
        if (page_mapped (page) || PageNonWB (page))
            goto out;
        SetPageNonWB (page);
    }
    return 0;
out :
    end_pfn = pfn;
    for (pfn = (start >> PAGE_SHIFT); pfn < end_pfn; ++pfn) {
        page = pfn_to_page (pfn);
        ClearPageNonWB (page);
    }
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="269" endline="275">
{
    page = pfn_to_page (pfn);
    if (page_mapped (page) || PageNonWB (page))
        goto out;
    SetPageNonWB (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="280" endline="283">
{
    page = pfn_to_page (pfn);
    ClearPageNonWB (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="289" endline="309">
{
    struct page *page;
    u64 pfn, end_pfn;
    for (pfn = (start >> PAGE_SHIFT); pfn < (end >> PAGE_SHIFT); ++pfn) {
        page = pfn_to_page (pfn);
        if (page_mapped (page) || !PageNonWB (page))
            goto out;
        ClearPageNonWB (page);
    }
    return 0;
out :
    end_pfn = pfn;
    for (pfn = (start >> PAGE_SHIFT); pfn < end_pfn; ++pfn) {
        page = pfn_to_page (pfn);
        SetPageNonWB (page);
    }
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="293" endline="299">
{
    page = pfn_to_page (pfn);
    if (page_mapped (page) || !PageNonWB (page))
        goto out;
    ClearPageNonWB (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="304" endline="307">
{
    page = pfn_to_page (pfn);
    SetPageNonWB (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="328" endline="453">
{
    struct memtype *new, *entry;
    unsigned long actual_type;
    struct list_head *where;
    int is_range_ram;
    int err = 0;
    BUG_ON (start >= end);
    if (!pat_enabled) {
        if (new_type) {
            if (req_type == -1)
                *new_type = _PAGE_CACHE_WB;
            else
                *new_type = req_type & _PAGE_CACHE_MASK;
        }
        return 0;
    }
    if (is_ISA_range (start, end -1)) {
        if (new_type)
            *new_type = _PAGE_CACHE_WB;
        return 0;
    }
    actual_type = pat_x_mtrr_type (start, end, req_type &_PAGE_CACHE_MASK);
    if (new_type)
        *new_type = actual_type;
    is_range_ram = pat_pagerange_is_ram (start, end);
    if (is_range_ram == 1)
        return reserve_ram_pages_type (start, end, req_type, new_type);
    else if (is_range_ram < 0)
        return -EINVAL;
    new = kmalloc (sizeof (struct memtype), GFP_KERNEL);
    if (!new)
        return -ENOMEM;
    new->start = start;
    new->end = end;
    new->type = actual_type;
    spin_lock (& memtype_lock);
    if (cached_entry && start >= cached_start)
        entry = cached_entry;
    else
        entry = list_entry (&memtype_list, struct memtype, nd);
    where = NULL;
    list_for_each_entry_continue (entry, &memtype_list, nd) {
        if (end <= entry->start) {
            where = entry->nd.prev;
            cached_entry = list_entry (where, struct memtype, nd);
            break;
        }
        else if (start <= entry->start) {
            err = chk_conflict (new, entry, new_type);
            if (!err) {
                dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
                where = entry->nd.prev;
                cached_entry = list_entry (where, struct memtype, nd);
            }
            break;
        }
        else if (start < entry->end) {
            err = chk_conflict (new, entry, new_type);
            if (!err) {
                dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
                cached_entry = list_entry (entry->nd.prev, struct memtype, nd);
                list_for_each_entry_continue (entry, &memtype_list, nd) {
                    if (start <= entry->start) {
                        where = entry->nd.prev;
                        break;
                    }
                }
            }
            break;
        }
    }
    if (err) {
        printk (KERN_INFO "reserve_memtype failed 0x%Lx-0x%Lx, " "track %s, req %s\n", start, end, cattr_name (new -> type), cattr_name (req_type));
        kfree (new);
        spin_unlock (& memtype_lock);
        return err;
    }
    cached_start = start;
    if (where)
        list_add (&new->nd, where);
    else
        list_add_tail (&new->nd, &memtype_list);
    spin_unlock (& memtype_lock);
    dprintk ("reserve_memtype added 0x%Lx-0x%Lx, track %s, req %s, ret %s\n", start, end, cattr_name (new -> type), cattr_name (req_type), new_type ? cattr_name (* new_type) : "-");
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="337" endline="346">
{
    if (new_type) {
        if (req_type == -1)
            *new_type = _PAGE_CACHE_WB;
        else
            *new_type = req_type & _PAGE_CACHE_MASK;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="339" endline="344">
{
    if (req_type == -1)
        *new_type = _PAGE_CACHE_WB;
    else
        *new_type = req_type & _PAGE_CACHE_MASK;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="349" endline="353">
{
    if (new_type)
        *new_type = _PAGE_CACHE_WB;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="390" endline="427">
{
    if (end <= entry->start) {
        where = entry->nd.prev;
        cached_entry = list_entry (where, struct memtype, nd);
        break;
    }
    else if (start <= entry->start) {
        err = chk_conflict (new, entry, new_type);
        if (!err) {
            dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
            where = entry->nd.prev;
            cached_entry = list_entry (where, struct memtype, nd);
        }
        break;
    }
    else if (start < entry->end) {
        err = chk_conflict (new, entry, new_type);
        if (!err) {
            dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
            cached_entry = list_entry (entry->nd.prev, struct memtype, nd);
            list_for_each_entry_continue (entry, &memtype_list, nd) {
                if (start <= entry->start) {
                    where = entry->nd.prev;
                    break;
                }
            }
        }
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="391" endline="395">
{
    where = entry->nd.prev;
    cached_entry = list_entry (where, struct memtype, nd);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="395" endline="405">
{
    err = chk_conflict (new, entry, new_type);
    if (!err) {
        dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
        where = entry->nd.prev;
        cached_entry = list_entry (where, struct memtype, nd);
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="397" endline="403">
{
    dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
    where = entry->nd.prev;
    cached_entry = list_entry (where, struct memtype, nd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="405" endline="426">
{
    err = chk_conflict (new, entry, new_type);
    if (!err) {
        dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
        cached_entry = list_entry (entry->nd.prev, struct memtype, nd);
        list_for_each_entry_continue (entry, &memtype_list, nd) {
            if (start <= entry->start) {
                where = entry->nd.prev;
                break;
            }
        }
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="407" endline="424">
{
    dprintk ("Overlap at 0x%Lx-0x%Lx\n", entry -> start, entry -> end);
    cached_entry = list_entry (entry->nd.prev, struct memtype, nd);
    list_for_each_entry_continue (entry, &memtype_list, nd) {
        if (start <= entry->start) {
            where = entry->nd.prev;
            break;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="418" endline="423">
{
    if (start <= entry->start) {
        where = entry->nd.prev;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="419" endline="422">
{
    where = entry->nd.prev;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="429" endline="437">
{
    printk (KERN_INFO "reserve_memtype failed 0x%Lx-0x%Lx, " "track %s, req %s\n", start, end, cattr_name (new -> type), cattr_name (req_type));
    kfree (new);
    spin_unlock (& memtype_lock);
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="456" endline="496">
{
    struct memtype *entry;
    int err = -EINVAL;
    int is_range_ram;
    if (!pat_enabled)
        return 0;
    if (is_ISA_range (start, end -1))
        return 0;
    is_range_ram = pat_pagerange_is_ram (start, end);
    if (is_range_ram == 1)
        return free_ram_pages_type (start, end);
    else if (is_range_ram < 0)
        return -EINVAL;
    spin_lock (& memtype_lock);
    list_for_each_entry (entry, &memtype_list, nd) {
        if (entry->start == start && entry->end == end) {
            if (cached_entry == entry || cached_start == start)
                cached_entry = NULL;
            list_del (& entry -> nd);
            kfree (entry);
            err = 0;
            break;
        }
    }
    spin_unlock (& memtype_lock);
    if (err) {
        printk (KERN_INFO "%s:%d freeing invalid memtype %Lx-%Lx\n", current -> comm, current -> pid, start, end);
    }
    dprintk ("free_memtype request 0x%Lx-0x%Lx\n", start, end);
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="475" endline="485">
{
    if (entry->start == start && entry->end == end) {
        if (cached_entry == entry || cached_start == start)
            cached_entry = NULL;
        list_del (& entry -> nd);
        kfree (entry);
        err = 0;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="476" endline="484">
{
    if (cached_entry == entry || cached_start == start)
        cached_entry = NULL;
    list_del (& entry -> nd);
    kfree (entry);
    err = 0;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="488" endline="491">
{
    printk (KERN_INFO "%s:%d freeing invalid memtype %Lx-%Lx\n", current -> comm, current -> pid, start, end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="501" endline="503">
{
    return vma_prot;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="514" endline="533">
{
    u64 from = ((u64) pfn) << PAGE_SHIFT;
    u64 to = from + size;
    u64 cursor = from;
    if (!pat_enabled)
        return 1;
    while (cursor < to) {
        if (!devmem_is_allowed (pfn)) {
            printk (KERN_INFO "Program %s tried to access /dev/mem between %Lx->%Lx.\n", current -> comm, from, to);
            return 0;
        }
        cursor += PAGE_SIZE;
        pfn++;
    }
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="522" endline="531">
{
    if (!devmem_is_allowed (pfn)) {
        printk (KERN_INFO "Program %s tried to access /dev/mem between %Lx->%Lx.\n", current -> comm, from, to);
        return 0;
    }
    cursor += PAGE_SIZE;
    pfn++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="523" endline="528">
{
    printk (KERN_INFO "Program %s tried to access /dev/mem between %Lx->%Lx.\n", current -> comm, from, to);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="538" endline="570">
{
    unsigned long flags = _PAGE_CACHE_WB;
    if (!range_is_allowed (pfn, size))
        return 0;
    if (file->f_flags & O_SYNC) {
        flags = _PAGE_CACHE_UC_MINUS;
    }
    *vma_prot = __pgprot ((pgprot_val (*vma_prot) & ~_PAGE_CACHE_MASK) | flags);
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="544" endline="546">
{
    flags = _PAGE_CACHE_UC_MINUS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="577" endline="597">
{
    unsigned long id_sz;
    if (!pat_enabled || base >= __pa (high_memory))
        return 0;
    id_sz = (__pa (high_memory) < base + size) ? __pa (high_memory) - base : size;
    if (ioremap_change_attr ((unsigned long) __va (base), id_sz, flags) < 0) {
        printk (KERN_INFO "%s:%d ioremap_change_attr failed %s " "for %Lx-%Lx\n", current -> comm, current -> pid, cattr_name (flags), base, (unsigned long long) (base + size));
        return -EINVAL;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="587" endline="595">
{
    printk (KERN_INFO "%s:%d ioremap_change_attr failed %s " "for %Lx-%Lx\n", current -> comm, current -> pid, cattr_name (flags), base, (unsigned long long) (base + size));
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="606" endline="652">
{
    int is_ram = 0;
    int ret;
    unsigned long want_flags = (pgprot_val (*vma_prot) & _PAGE_CACHE_MASK);
    unsigned long flags = want_flags;
    is_ram = pat_pagerange_is_ram (paddr, paddr +size);
    if (is_ram != 0)
        return 0;
    ret = reserve_memtype (paddr, paddr +size, want_flags, &flags);
    if (ret)
        return ret;
    if (flags != want_flags) {
        if (strict_prot || !is_new_memtype_allowed (paddr, size, want_flags, flags)) {
            free_memtype (paddr, paddr + size);
            printk (KERN_ERR "%s:%d map pfn expected mapping type %s" " for %Lx-%Lx, got %s\n", current -> comm, current -> pid, cattr_name (want_flags), (unsigned long long) paddr, (unsigned long long) (paddr + size), cattr_name (flags));
            return -EINVAL;
        }
        *vma_prot = __pgprot ((pgprot_val (*vma_prot) & (~_PAGE_CACHE_MASK)) | flags);
    }
    if (kernel_map_sync_memtype (paddr, size, flags) < 0) {
        free_memtype (paddr, paddr + size);
        return -EINVAL;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="625" endline="645">
{
    if (strict_prot || !is_new_memtype_allowed (paddr, size, want_flags, flags)) {
        free_memtype (paddr, paddr + size);
        printk (KERN_ERR "%s:%d map pfn expected mapping type %s" " for %Lx-%Lx, got %s\n", current -> comm, current -> pid, cattr_name (want_flags), (unsigned long long) paddr, (unsigned long long) (paddr + size), cattr_name (flags));
        return -EINVAL;
    }
    *vma_prot = __pgprot ((pgprot_val (*vma_prot) & (~_PAGE_CACHE_MASK)) | flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="627" endline="637">
{
    free_memtype (paddr, paddr + size);
    printk (KERN_ERR "%s:%d map pfn expected mapping type %s" " for %Lx-%Lx, got %s\n", current -> comm, current -> pid, cattr_name (want_flags), (unsigned long long) paddr, (unsigned long long) (paddr + size), cattr_name (flags));
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="647" endline="650">
{
    free_memtype (paddr, paddr + size);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="659" endline="665">
{
    int is_ram;
    is_ram = pat_pagerange_is_ram (paddr, paddr +size);
    if (is_ram == 0)
        free_memtype (paddr, paddr +size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="675" endline="703">
{
    resource_size_t paddr;
    unsigned long prot;
    unsigned long vma_size = vma->vm_end - vma->vm_start;
    pgprot_t pgprot;
    if (!pat_enabled)
        return 0;
    if (is_linear_pfn_mapping (vma)) {
        if (follow_phys (vma, vma->vm_start, 0, &prot, &paddr)) {
            WARN_ON_ONCE (1);
            return -EINVAL;
        }
        pgprot = __pgprot (prot);
        return reserve_pfn_range (paddr, vma_size, &pgprot, 1);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="689" endline="700">
{
    if (follow_phys (vma, vma->vm_start, 0, &prot, &paddr)) {
        WARN_ON_ONCE (1);
        return -EINVAL;
    }
    pgprot = __pgprot (prot);
    return reserve_pfn_range (paddr, vma_size, &pgprot, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="694" endline="697">
{
    WARN_ON_ONCE (1);
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="715" endline="734">
{
    resource_size_t paddr;
    unsigned long vma_size = vma->vm_end - vma->vm_start;
    if (!pat_enabled)
        return 0;
    if (is_linear_pfn_mapping (vma)) {
        paddr = (resource_size_t) vma->vm_pgoff << PAGE_SHIFT;
        return reserve_pfn_range (paddr, vma_size, prot, 0);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="727" endline="731">
{
    paddr = (resource_size_t) vma->vm_pgoff << PAGE_SHIFT;
    return reserve_pfn_range (paddr, vma_size, prot, 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="743" endline="761">
{
    resource_size_t paddr;
    unsigned long vma_size = vma->vm_end - vma->vm_start;
    if (!pat_enabled)
        return;
    if (is_linear_pfn_mapping (vma)) {
        paddr = (resource_size_t) vma->vm_pgoff << PAGE_SHIFT;
        free_pfn_range (paddr, vma_size);
        return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="755" endline="760">
{
    paddr = (resource_size_t) vma->vm_pgoff << PAGE_SHIFT;
    free_pfn_range (paddr, vma_size);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pat.c.ifdefed" startline="764" endline="769">
{
    if (pat_enabled)
        return __pgprot (pgprot_val (prot) | _PAGE_CACHE_WC);
    else
        return pgprot_noncached (prot);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa.c.ifdefed" startline="26" endline="42">
{
    unsigned int node, num = 0;
    if (nr_node_ids == MAX_NUMNODES) {
        for_each_node_mask (node, node_possible_map)
        num = node;
        nr_node_ids = num + 1;
    }
    for (node = 0; node < nr_node_ids; node++)
        alloc_bootmem_cpumask_var (&node_to_cpumask_map[node]);
    pr_debug ("Node to cpumask map for %d nodes\n", nr_node_ids);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa.c.ifdefed" startline="30" endline="34">
{
    for_each_node_mask (node, node_possible_map)
    num = node;
    nr_node_ids = num + 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="54" endline="80">
{
    unsigned long addr, end;
    int i, res = -1;
    memset (memnodemap, 0xff, sizeof (s16) * memnodemapsize);
    for (i = 0; i < numnodes; i++) {
        addr = nodes[i].start;
        end = nodes[i].end;
        if (addr >= end)
            continue;
        if ((end >> shift) >= memnodemapsize)
            return 0;
        do {
            if (memnodemap[addr >> shift] != NUMA_NO_NODE)
                return -1;
            if (!nodeids)
                memnodemap[addr >> shift] = i;
            else
                memnodemap[addr >> shift] = nodeids[i];
            addr += (1UL << shift);
        }
        while (addr < end);
        res = 1;
    }
    return res;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="59" endline="78">
{
    addr = nodes[i].start;
    end = nodes[i].end;
    if (addr >= end)
        continue;
    if ((end >> shift) >= memnodemapsize)
        return 0;
    do {
        if (memnodemap[addr >> shift] != NUMA_NO_NODE)
            return -1;
        if (!nodeids)
            memnodemap[addr >> shift] = i;
        else
            memnodemap[addr >> shift] = nodeids[i];
        addr += (1UL << shift);
    }
    while (addr < end);
    res = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="66" endline="76">
{
    if (memnodemap[addr >> shift] != NUMA_NO_NODE)
        return -1;
    if (!nodeids)
        memnodemap[addr >> shift] = i;
    else
        memnodemap[addr >> shift] = nodeids[i];
    addr += (1UL << shift);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="83" endline="106">
{
    unsigned long addr;
    memnodemap = memnode.embedded_map;
    if (memnodemapsize <= ARRAY_SIZE (memnode.embedded_map))
        return 0;
    addr = 0x8000;
    nodemap_size = roundup (sizeof (s16) * memnodemapsize, L1_CACHE_BYTES);
    nodemap_addr = find_e820_area (addr, max_pfn << PAGE_SHIFT, nodemap_size, L1_CACHE_BYTES);
    if (nodemap_addr == -1UL) {
        printk (KERN_ERR "NUMA: Unable to allocate Memory to Node hash map\n");
        nodemap_addr = nodemap_size = 0;
        return -1;
    }
    memnodemap = phys_to_virt (nodemap_addr);
    reserve_early (nodemap_addr, nodemap_addr + nodemap_size, "MEMNODEMAP");
    printk (KERN_DEBUG "NUMA: Allocated memnodemap from %lx - %lx\n", nodemap_addr, nodemap_addr + nodemap_size);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="94" endline="99">
{
    printk (KERN_ERR "NUMA: Unable to allocate Memory to Node hash map\n");
    nodemap_addr = nodemap_size = 0;
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="114" endline="135">
{
    int i, nodes_used = 0;
    unsigned long start, end;
    unsigned long bitfield = 0, memtop = 0;
    for (i = 0; i < numnodes; i++) {
        start = nodes[i].start;
        end = nodes[i].end;
        if (start >= end)
            continue;
        bitfield |= start;
        nodes_used++;
        if (end > memtop)
            memtop = end;
    }
    if (nodes_used <= 1)
        i = 63;
    else
        i = find_first_bit (&bitfield, sizeof (unsigned long) * 8);
    memnodemapsize = (memtop >> i) + 1;
    return i;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="119" endline="128">
{
    start = nodes[i].start;
    end = nodes[i].end;
    if (start >= end)
        continue;
    bitfield |= start;
    nodes_used++;
    if (end > memtop)
        memtop = end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="139" endline="155">
{
    int shift;
    shift = extract_lsb_from_nodes (nodes, numnodes);
    if (allocate_cachealigned_memnodemap ())
        return -1;
    printk (KERN_DEBUG "NUMA: Using %d for the hash shift.\n", shift);
    if (populate_memnodemap (nodes, numnodes, shift, nodeids) != 1) {
        printk (KERN_INFO "Your memory is not aligned you need to " "rebuild your kernel with a bigger NODEMAPSIZE " "shift=%d\n", shift);
        return -1;
    }
    return shift;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="148" endline="153">
{
    printk (KERN_INFO "Your memory is not aligned you need to " "rebuild your kernel with a bigger NODEMAPSIZE " "shift=%d\n", shift);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="158" endline="160">
{
    return phys_to_nid (pfn << PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="165" endline="179">
{
    unsigned long mem = find_e820_area (start, end, size, align);
    void *ptr;
    if (mem != -1L)
        return __va (mem);
    ptr = __alloc_bootmem_nopanic (size, align, __pa (MAX_DMA_ADDRESS));
    if (ptr == NULL) {
        printk (KERN_ERR "Cannot find %lu bytes in node %d\n", size, nodeid);
        return NULL;
    }
    return ptr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="173" endline="177">
{
    printk (KERN_ERR "Cannot find %lu bytes in node %d\n", size, nodeid);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="184" endline="283">
{
    unsigned long start_pfn, last_pfn, bootmap_pages, bootmap_size;
    const int pgdat_size = roundup (sizeof (pg_data_t), PAGE_SIZE);
    unsigned long bootmap_start, nodedata_phys;
    void *bootmap;
    int nid;
    if (!end)
        return;
    if (end && (end - start) < NODE_MIN_SIZE)
        return;
    start = roundup (start, ZONE_ALIGN);
    printk (KERN_INFO "Bootmem setup node %d %016lx-%016lx\n", nodeid, start, end);
    start_pfn = start >> PAGE_SHIFT;
    last_pfn = end >> PAGE_SHIFT;
    node_data[nodeid] = early_node_mem (nodeid, start, end, pgdat_size, SMP_CACHE_BYTES);
    if (node_data[nodeid] == NULL)
        return;
    nodedata_phys = __pa (node_data[nodeid]);
    printk (KERN_INFO "  NODE_DATA [%016lx - %016lx]\n", nodedata_phys, nodedata_phys + pgdat_size - 1);
    memset (NODE_DATA (nodeid), 0, sizeof (pg_data_t));
    NODE_DATA (nodeid)->bdata = &bootmem_node_data[nodeid];
    NODE_DATA (nodeid)->node_start_pfn = start_pfn;
    NODE_DATA (nodeid)->node_spanned_pages = last_pfn - start_pfn;
    bootmap_pages = bootmem_bootmap_pages (last_pfn -start_pfn);
    nid = phys_to_nid (nodedata_phys);
    if (nid == nodeid)
        bootmap_start = roundup (nodedata_phys +pgdat_size, PAGE_SIZE);
    else
        bootmap_start = roundup (start, PAGE_SIZE);
    bootmap = early_node_mem (nodeid, bootmap_start, end, bootmap_pages << PAGE_SHIFT, PAGE_SIZE);
    if (bootmap == NULL) {
        if (nodedata_phys < start || nodedata_phys >= end)
            free_bootmem (nodedata_phys, pgdat_size);
        node_data[nodeid] = NULL;
        return;
    }
    bootmap_start = __pa (bootmap);
    bootmap_size = init_bootmem_node (NODE_DATA (nodeid), bootmap_start >> PAGE_SHIFT, start_pfn, last_pfn);
    printk (KERN_INFO "  bootmap [%016lx -  %016lx] pages %lx\n", bootmap_start, bootmap_start + bootmap_size - 1, bootmap_pages);
    free_bootmem_with_active_regions (nodeid, end);
    early_res_to_bootmem (start, end);
    if (nid != nodeid)
        printk (KERN_INFO "    NODE_DATA(%d) on node %d\n", nodeid, nid);
    else
        reserve_bootmem_node (NODE_DATA (nodeid), nodedata_phys, pgdat_size, BOOTMEM_DEFAULT);
    nid = phys_to_nid (bootmap_start);
    if (nid != nodeid)
        printk (KERN_INFO "    bootmap(%d) on node %d\n", nodeid, nid);
    else
        reserve_bootmem_node (NODE_DATA (nodeid), bootmap_start, bootmap_pages << PAGE_SHIFT, BOOTMEM_DEFAULT);
    node_set_online (nodeid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="241" endline="246">
{
    if (nodedata_phys < start || nodedata_phys >= end)
        free_bootmem (nodedata_phys, pgdat_size);
    node_data[nodeid] = NULL;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="293" endline="305">
{
    int rr, i;
    rr = first_node (node_online_map);
    for (i = 0; i < nr_cpu_ids; i++) {
        if (early_cpu_to_node (i) != NUMA_NO_NODE)
            continue;
        numa_set_node (i, rr);
        rr = next_node (rr, node_online_map);
        if (rr == MAX_NUMNODES)
            rr = first_node (node_online_map);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="297" endline="304">
{
    if (early_cpu_to_node (i) != NUMA_NO_NODE)
        continue;
    numa_set_node (i, rr);
    rr = next_node (rr, node_online_map);
    if (rr == MAX_NUMNODES)
        rr = first_node (node_online_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="528" endline="572">
{
    int i;
    nodes_clear (node_possible_map);
    nodes_clear (node_online_map);
    printk (KERN_INFO "%s\n", numa_off ? "NUMA turned off" : "No NUMA configuration found");
    printk (KERN_INFO "Faking a node at %016lx-%016lx\n", start_pfn << PAGE_SHIFT, last_pfn << PAGE_SHIFT);
    memnode_shift = 63;
    memnodemap = memnode.embedded_map;
    memnodemap[0] = 0;
    node_set_online (0);
    node_set (0, node_possible_map);
    for (i = 0; i < nr_cpu_ids; i++)
        numa_set_node (i, 0);
    e820_register_active_regions (0, start_pfn, last_pfn);
    setup_node_bootmem (0, start_pfn << PAGE_SHIFT, last_pfn << PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="575" endline="583">
{
    unsigned long pages = 0;
    int i;
    for_each_online_node (i)
    pages += free_all_bootmem_node (NODE_DATA (i));
    return pages;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="586" endline="600">
{
    if (!opt)
        return -EINVAL;
    if (!strncmp (opt, "off", 3))
        numa_off = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="643" endline="663">
{
    int *cpu_to_node_map = early_per_cpu_ptr (x86_cpu_to_node_map);
    if (cpu_to_node_map) {
        cpu_to_node_map[cpu] = node;
        return;
    }
    per_cpu (x86_cpu_to_node_map, cpu) = node;
    if (node != NUMA_NO_NODE)
        per_cpu (node_number, cpu) = node;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="647" endline="650">
{
    cpu_to_node_map[cpu] = node;
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="666" endline="668">
{
    numa_set_node (cpu, NUMA_NO_NODE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="673" endline="675">
{
    cpumask_set_cpu (cpu, node_to_cpumask_map [early_cpu_to_node (cpu)]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/numa_64.c.ifdefed" startline="678" endline="680">
{
    cpumask_clear_cpu (cpu, node_to_cpumask_map [early_cpu_to_node (cpu)]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="28" endline="49">
{
    int num;
    for (num = 0; num < 32; num++) {
        u32 header;
        header = read_pci_config (0, num, 0, 0x00);
        if (header != (PCI_VENDOR_ID_AMD | (0x1100 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1200 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1300 << 16)))
            continue;
        header = read_pci_config (0, num, 1, 0x00);
        if (header != (PCI_VENDOR_ID_AMD | (0x1101 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1201 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1301 << 16)))
            continue;
        return num;
    }
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="31" endline="46">
{
    u32 header;
    header = read_pci_config (0, num, 0, 0x00);
    if (header != (PCI_VENDOR_ID_AMD | (0x1100 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1200 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1300 << 16)))
        continue;
    header = read_pci_config (0, num, 1, 0x00);
    if (header != (PCI_VENDOR_ID_AMD | (0x1101 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1201 << 16)) && header != (PCI_VENDOR_ID_AMD | (0x1301 << 16)))
        continue;
    return num;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="52" endline="77">
{
    early_init_lapic_mapping ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="80" endline="222">
{
    unsigned numnodes, cores, bits, apicid_base;
    unsigned long prevbase;
    struct bootnode nodes [8];
    int i, j, nb, found = 0;
    u32 nodeid, reg;
    if (!early_pci_allowed ())
        return -1;
    nb = find_northbridge ();
    if (nb < 0)
        return nb;
    printk (KERN_INFO "Scanning NUMA topology in Northbridge %d\n", nb);
    reg = read_pci_config (0, nb, 0, 0x60);
    numnodes = ((reg >> 4) & 0xF) + 1;
    if (numnodes <= 1)
        return -1;
    printk (KERN_INFO "Number of nodes %d\n", numnodes);
    memset (& nodes, 0, sizeof (nodes));
    prevbase = 0;
    for (i = 0; i < 8; i++) {
        unsigned long base, limit;
        base = read_pci_config (0, nb, 1, 0x40 + i * 8);
        limit = read_pci_config (0, nb, 1, 0x44 + i * 8);
        nodeid = limit & 7;
        if ((base & 3) == 0) {
            if (i < numnodes)
                printk ("Skipping disabled node %d\n", i);
            continue;
        }
        if (nodeid >= numnodes) {
            printk ("Ignoring excess node %d (%lx:%lx)\n", nodeid, base, limit);
            continue;
        }
        if (!limit) {
            printk (KERN_INFO "Skipping node entry %d (base %lx)\n", i, base);
            continue;
        }
        if ((base >> 8) & 3 || (limit >> 8) & 3) {
            printk (KERN_ERR "Node %d using interleaving mode %lx/%lx\n", nodeid, (base >> 8) & 3, (limit >> 8) & 3);
            return -1;
        }
        if (node_isset (nodeid, node_possible_map)) {
            printk (KERN_INFO "Node %d already present. Skipping\n", nodeid);
            continue;
        }
        limit >>= 16;
        limit <<= 24;
        limit |= (1 << 24) - 1;
        limit++;
        if (limit > max_pfn << PAGE_SHIFT)
            limit = max_pfn << PAGE_SHIFT;
        if (limit <= base)
            continue;
        base >>= 16;
        base <<= 24;
        if (base < start)
            base = start;
        if (limit > end)
            limit = end;
        if (limit == base) {
            printk (KERN_ERR "Empty node %d\n", nodeid);
            continue;
        }
        if (limit < base) {
            printk (KERN_ERR "Node %d bogus settings %lx-%lx.\n", nodeid, base, limit);
            continue;
        }
        if (prevbase > base) {
            printk (KERN_ERR "Node map not sorted %lx,%lx\n", prevbase, base);
            return -1;
        }
        printk (KERN_INFO "Node %d MemBase %016lx Limit %016lx\n", nodeid, base, limit);
        found++;
        nodes[nodeid].start = base;
        nodes[nodeid].end = limit;
        prevbase = base;
        node_set (nodeid, node_possible_map);
    }
    if (!found)
        return -1;
    memnode_shift = compute_hash_shift (nodes, 8, NULL);
    if (memnode_shift < 0) {
        printk (KERN_ERR "No NUMA node hash function found. Contact maintainer\n");
        return -1;
    }
    printk (KERN_INFO "Using node hash shift of %d\n", memnode_shift);
    bits = boot_cpu_data.x86_coreid_bits;
    cores = (1 << bits);
    apicid_base = 0;
    early_get_boot_cpu_id ();
    if (boot_cpu_physical_apicid > 0) {
        printk (KERN_INFO "BSP APIC ID: %02x\n", boot_cpu_physical_apicid);
        apicid_base = boot_cpu_physical_apicid;
    }
    for (i = 0; i < 8; i++) {
        if (nodes[i].start == nodes[i].end)
            continue;
        e820_register_active_regions (i, nodes [i].start >> PAGE_SHIFT, nodes [i].end >> PAGE_SHIFT);
        for (j = apicid_base; j < cores + apicid_base; j++)
            apicid_to_node[(i << bits) + j] = i;
        setup_node_bootmem (i, nodes [i].start, nodes [i].end);
    }
    numa_init_array ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="105" endline="184">
{
    unsigned long base, limit;
    base = read_pci_config (0, nb, 1, 0x40 + i * 8);
    limit = read_pci_config (0, nb, 1, 0x44 + i * 8);
    nodeid = limit & 7;
    if ((base & 3) == 0) {
        if (i < numnodes)
            printk ("Skipping disabled node %d\n", i);
        continue;
    }
    if (nodeid >= numnodes) {
        printk ("Ignoring excess node %d (%lx:%lx)\n", nodeid, base, limit);
        continue;
    }
    if (!limit) {
        printk (KERN_INFO "Skipping node entry %d (base %lx)\n", i, base);
        continue;
    }
    if ((base >> 8) & 3 || (limit >> 8) & 3) {
        printk (KERN_ERR "Node %d using interleaving mode %lx/%lx\n", nodeid, (base >> 8) & 3, (limit >> 8) & 3);
        return -1;
    }
    if (node_isset (nodeid, node_possible_map)) {
        printk (KERN_INFO "Node %d already present. Skipping\n", nodeid);
        continue;
    }
    limit >>= 16;
    limit <<= 24;
    limit |= (1 << 24) - 1;
    limit++;
    if (limit > max_pfn << PAGE_SHIFT)
        limit = max_pfn << PAGE_SHIFT;
    if (limit <= base)
        continue;
    base >>= 16;
    base <<= 24;
    if (base < start)
        base = start;
    if (limit > end)
        limit = end;
    if (limit == base) {
        printk (KERN_ERR "Empty node %d\n", nodeid);
        continue;
    }
    if (limit < base) {
        printk (KERN_ERR "Node %d bogus settings %lx-%lx.\n", nodeid, base, limit);
        continue;
    }
    if (prevbase > base) {
        printk (KERN_ERR "Node map not sorted %lx,%lx\n", prevbase, base);
        return -1;
    }
    printk (KERN_INFO "Node %d MemBase %016lx Limit %016lx\n", nodeid, base, limit);
    found++;
    nodes[nodeid].start = base;
    nodes[nodeid].end = limit;
    prevbase = base;
    node_set (nodeid, node_possible_map);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="112" endline="116">
{
    if (i < numnodes)
        printk ("Skipping disabled node %d\n", i);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="117" endline="121">
{
    printk ("Ignoring excess node %d (%lx:%lx)\n", nodeid, base, limit);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="123" endline="127">
{
    printk (KERN_INFO "Skipping node entry %d (base %lx)\n", i, base);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="128" endline="132">
{
    printk (KERN_ERR "Node %d using interleaving mode %lx/%lx\n", nodeid, (base >> 8) & 3, (limit >> 8) & 3);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="133" endline="137">
{
    printk (KERN_INFO "Node %d already present. Skipping\n", nodeid);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="156" endline="159">
{
    printk (KERN_ERR "Empty node %d\n", nodeid);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="160" endline="164">
{
    printk (KERN_ERR "Node %d bogus settings %lx-%lx.\n", nodeid, base, limit);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="167" endline="171">
{
    printk (KERN_ERR "Node map not sorted %lx,%lx\n", prevbase, base);
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="190" endline="193">
{
    printk (KERN_ERR "No NUMA node hash function found. Contact maintainer\n");
    return -1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="202" endline="206">
{
    printk (KERN_INFO "BSP APIC ID: %02x\n", boot_cpu_physical_apicid);
    apicid_base = boot_cpu_physical_apicid;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/k8topology_64.c.ifdefed" startline="208" endline="218">
{
    if (nodes[i].start == nodes[i].end)
        continue;
    e820_register_active_regions (i, nodes [i].start >> PAGE_SHIFT, nodes [i].end >> PAGE_SHIFT);
    for (j = apicid_base; j < cores + apicid_base; j++)
        apicid_to_node[(i << bits) + j] = i;
    setup_node_bootmem (i, nodes [i].start, nodes [i].end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="56" endline="59">
{
    direct_gbpages = 0;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="63" endline="66">
{
    direct_gbpages = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="89" endline="95">
{
    if (!strcmp (str, "on"))
        force_personality32 &= ~READ_IMPLIES_EXEC;
    else if (!strcmp (str, "off"))
        force_personality32 |= READ_IMPLIES_EXEC;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="103" endline="119">
{
    void *ptr;
    if (after_bootmem)
        ptr = (void *) get_zeroed_page (GFP_ATOMIC | __GFP_NOTRACK);
    else
        ptr = alloc_bootmem_pages (PAGE_SIZE);
    if (!ptr || ((unsigned long) ptr & ~PAGE_MASK)) {
        panic ("set_pte_phys: cannot allocate page data %s\n", after_bootmem ? "after bootmem" : "");
    }
    pr_debug ("spp_getpage %p\n", ptr);
    return ptr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="111" endline="114">
{
    panic ("set_pte_phys: cannot allocate page data %s\n", after_bootmem ? "after bootmem" : "");
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="122" endline="131">
{
    if (pgd_none (*pgd)) {
        pud_t *pud = (pud_t *) spp_getpage ();
        pgd_populate (& init_mm, pgd, pud);
        if (pud != pud_offset (pgd, 0))
            printk (KERN_ERR "PAGETABLE BUG #00! %p <-> %p\n", pud, pud_offset (pgd, 0));
    }
    return pud_offset (pgd, vaddr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="123" endline="129">
{
    pud_t *pud = (pud_t *) spp_getpage ();
    pgd_populate (& init_mm, pgd, pud);
    if (pud != pud_offset (pgd, 0))
        printk (KERN_ERR "PAGETABLE BUG #00! %p <-> %p\n", pud, pud_offset (pgd, 0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="134" endline="143">
{
    if (pud_none (*pud)) {
        pmd_t *pmd = (pmd_t *) spp_getpage ();
        pud_populate (& init_mm, pud, pmd);
        if (pmd != pmd_offset (pud, 0))
            printk (KERN_ERR "PAGETABLE BUG #01! %p <-> %p\n", pmd, pmd_offset (pud, 0));
    }
    return pmd_offset (pud, vaddr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="135" endline="141">
{
    pmd_t *pmd = (pmd_t *) spp_getpage ();
    pud_populate (& init_mm, pud, pmd);
    if (pmd != pmd_offset (pud, 0))
        printk (KERN_ERR "PAGETABLE BUG #01! %p <-> %p\n", pmd, pmd_offset (pud, 0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="146" endline="154">
{
    if (pmd_none (*pmd)) {
        pte_t *pte = (pte_t *) spp_getpage ();
        pmd_populate_kernel (& init_mm, pmd, pte);
        if (pte != pte_offset_kernel (pmd, 0))
            printk (KERN_ERR "PAGETABLE BUG #02!\n");
    }
    return pte_offset_kernel (pmd, vaddr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="147" endline="152">
{
    pte_t *pte = (pte_t *) spp_getpage ();
    pmd_populate_kernel (& init_mm, pmd, pte);
    if (pte != pte_offset_kernel (pmd, 0))
        printk (KERN_ERR "PAGETABLE BUG #02!\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="157" endline="173">
{
    pud_t *pud;
    pmd_t *pmd;
    pte_t *pte;
    pud = pud_page + pud_index (vaddr);
    pmd = fill_pmd (pud, vaddr);
    pte = fill_pte (pmd, vaddr);
    set_pte (pte, new_pte);
    __flush_tlb_one (vaddr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="176" endline="190">
{
    pgd_t *pgd;
    pud_t *pud_page;
    pr_debug ("set_pte_vaddr %lx to %lx\n", vaddr, native_pte_val (pteval));
    pgd = pgd_offset_k (vaddr);
    if (pgd_none (*pgd)) {
        printk (KERN_ERR "PGD FIXMAP MISSING, it should be setup in head.S!\n");
        return;
    }
    pud_page = (pud_t *) pgd_page_vaddr (*pgd);
    set_pte_vaddr_pud (pud_page, vaddr, pteval);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="183" endline="187">
{
    printk (KERN_ERR "PGD FIXMAP MISSING, it should be setup in head.S!\n");
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="193" endline="200">
{
    pgd_t *pgd;
    pud_t *pud;
    pgd = pgd_offset_k (vaddr);
    pud = fill_pud (pgd, vaddr);
    return fill_pmd (pud, vaddr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="203" endline="208">
{
    pmd_t *pmd;
    pmd = populate_extra_pmd (vaddr);
    return fill_pte (pmd, vaddr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="215" endline="238">
{
    pgd_t *pgd;
    pud_t *pud;
    pmd_t *pmd;
    BUG_ON ((phys & ~ PMD_MASK) || (size & ~ PMD_MASK));
    for (; size; phys += PMD_SIZE, size -= PMD_SIZE) {
        pgd = pgd_offset_k ((unsigned long) __va (phys));
        if (pgd_none (*pgd)) {
            pud = (pud_t *) spp_getpage ();
            set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE | _PAGE_USER));
        }
        pud = pud_offset (pgd, (unsigned long) __va (phys));
        if (pud_none (*pud)) {
            pmd = (pmd_t *) spp_getpage ();
            set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE | _PAGE_USER));
        }
        pmd = pmd_offset (pud, phys);
        BUG_ON (! pmd_none (* pmd));
        set_pmd (pmd, __pmd (phys | pgprot_val (prot)));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="221" endline="237">
{
    pgd = pgd_offset_k ((unsigned long) __va (phys));
    if (pgd_none (*pgd)) {
        pud = (pud_t *) spp_getpage ();
        set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE | _PAGE_USER));
    }
    pud = pud_offset (pgd, (unsigned long) __va (phys));
    if (pud_none (*pud)) {
        pmd = (pmd_t *) spp_getpage ();
        set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE | _PAGE_USER));
    }
    pmd = pmd_offset (pud, phys);
    BUG_ON (! pmd_none (* pmd));
    set_pmd (pmd, __pmd (phys | pgprot_val (prot)));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="223" endline="227">
{
    pud = (pud_t *) spp_getpage ();
    set_pgd (pgd, __pgd (__pa (pud) | _KERNPG_TABLE | _PAGE_USER));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="229" endline="233">
{
    pmd = (pmd_t *) spp_getpage ();
    set_pud (pud, __pud (__pa (pmd) | _KERNPG_TABLE | _PAGE_USER));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="241" endline="243">
{
    __init_extra_mapping (phys, size, PAGE_KERNEL_LARGE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="246" endline="248">
{
    __init_extra_mapping (phys, size, PAGE_KERNEL_LARGE_NOCACHE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="264" endline="276">
{
    unsigned long vaddr = __START_KERNEL_map;
    unsigned long end = roundup ((unsigned long) _end, PMD_SIZE) - 1;
    pmd_t *pmd = level2_kernel_pgt;
    pmd_t *last_pmd = pmd + PTRS_PER_PMD;
    for (; pmd < last_pmd; pmd++, vaddr += PMD_SIZE) {
        if (pmd_none (*pmd))
            continue;
        if (vaddr < (unsigned long) _text || vaddr > end)
            set_pmd (pmd, __pmd (0));
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="270" endline="275">
{
    if (pmd_none (*pmd))
        continue;
    if (vaddr < (unsigned long) _text || vaddr > end)
        set_pmd (pmd, __pmd (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="279" endline="297">
{
    unsigned long pfn = e820_table_end++;
    void *adr;
    if (after_bootmem) {
        adr = (void *) get_zeroed_page (GFP_ATOMIC | __GFP_NOTRACK);
        *phys = __pa (adr);
        return adr;
    }
    if (pfn >= e820_table_top)
        panic ("alloc_low_page: ran out of memory");
    adr = early_memremap (pfn *PAGE_SIZE, PAGE_SIZE);
    memset (adr, 0, PAGE_SIZE);
    *phys = pfn * PAGE_SIZE;
    return adr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="283" endline="288">
{
    adr = (void *) get_zeroed_page (GFP_ATOMIC | __GFP_NOTRACK);
    *phys = __pa (adr);
    return adr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="300" endline="305">
{
    if (after_bootmem)
        return;
    early_iounmap (adr, PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="310" endline="349">
{
    unsigned pages = 0;
    unsigned long last_map_addr = end;
    int i;
    pte_t *pte = pte_page + pte_index (addr);
    for (i = pte_index (addr); i < PTRS_PER_PTE; i++, addr += PAGE_SIZE, pte++) {
        if (addr >= end) {
            if (!after_bootmem) {
                for (; i < PTRS_PER_PTE; i++, pte++)
                    set_pte (pte, __pte (0));
            }
            break;
        }
        if (pte_val (*pte)) {
            pages++;
            continue;
        }
        if (0)
            printk ("   pte=%p addr=%lx pte=%016lx\n", pte, addr, pfn_pte (addr >> PAGE_SHIFT, PAGE_KERNEL).pte);
        pages++;
        set_pte (pte, pfn_pte (addr >> PAGE_SHIFT, prot));
        last_map_addr = (addr & PAGE_MASK) + PAGE_SIZE;
    }
    update_page_count (PG_LEVEL_4K, pages);
    return last_map_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="317" endline="344">
{
    if (addr >= end) {
        if (!after_bootmem) {
            for (; i < PTRS_PER_PTE; i++, pte++)
                set_pte (pte, __pte (0));
        }
        break;
    }
    if (pte_val (*pte)) {
        pages++;
        continue;
    }
    if (0)
        printk ("   pte=%p addr=%lx pte=%016lx\n", pte, addr, pfn_pte (addr >> PAGE_SHIFT, PAGE_KERNEL).pte);
    pages++;
    set_pte (pte, pfn_pte (addr >> PAGE_SHIFT, prot));
    last_map_addr = (addr & PAGE_MASK) + PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="319" endline="325">
{
    if (!after_bootmem) {
        for (; i < PTRS_PER_PTE; i++, pte++)
            set_pte (pte, __pte (0));
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="320" endline="323">
{
    for (; i < PTRS_PER_PTE; i++, pte++)
        set_pte (pte, __pte (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="333" endline="336">
{
    pages++;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="354" endline="358">
{
    pte_t *pte = (pte_t *) pmd_page_vaddr (*pmd);
    return phys_pte_init (pte, address, end, prot);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="363" endline="431">
{
    unsigned long pages = 0;
    unsigned long last_map_addr = end;
    int i = pmd_index (address);
    for (; i < PTRS_PER_PMD; i++, address += PMD_SIZE) {
        unsigned long pte_phys;
        pmd_t *pmd = pmd_page + pmd_index (address);
        pte_t *pte;
        pgprot_t new_prot = prot;
        if (address >= end) {
            if (!after_bootmem) {
                for (; i < PTRS_PER_PMD; i++, pmd++)
                    set_pmd (pmd, __pmd (0));
            }
            break;
        }
        if (pmd_val (*pmd)) {
            if (!pmd_large (*pmd)) {
                spin_lock (& init_mm.page_table_lock);
                last_map_addr = phys_pte_update (pmd, address, end, prot);
                spin_unlock (& init_mm.page_table_lock);
                continue;
            }
            if (page_size_mask & (1 << PG_LEVEL_2M)) {
                pages++;
                continue;
            }
            new_prot = pte_pgprot (pte_clrhuge (*(pte_t*) pmd));
        }
        if (page_size_mask & (1 << PG_LEVEL_2M)) {
            pages++;
            spin_lock (& init_mm.page_table_lock);
            set_pte ((pte_t *) pmd, pfn_pte (address >> PAGE_SHIFT, __pgprot (pgprot_val (prot) | _PAGE_PSE)));
            spin_unlock (& init_mm.page_table_lock);
            last_map_addr = (address & PMD_MASK) + PMD_SIZE;
            continue;
        }
        pte = alloc_low_page (&pte_phys);
        last_map_addr = phys_pte_init (pte, address, end, new_prot);
        unmap_low_page (pte);
        spin_lock (& init_mm.page_table_lock);
        pmd_populate_kernel (& init_mm, pmd, __va (pte_phys));
        spin_unlock (& init_mm.page_table_lock);
    }
    update_page_count (PG_LEVEL_2M, pages);
    return last_map_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="369" endline="428">
{
    unsigned long pte_phys;
    pmd_t *pmd = pmd_page + pmd_index (address);
    pte_t *pte;
    pgprot_t new_prot = prot;
    if (address >= end) {
        if (!after_bootmem) {
            for (; i < PTRS_PER_PMD; i++, pmd++)
                set_pmd (pmd, __pmd (0));
        }
        break;
    }
    if (pmd_val (*pmd)) {
        if (!pmd_large (*pmd)) {
            spin_lock (& init_mm.page_table_lock);
            last_map_addr = phys_pte_update (pmd, address, end, prot);
            spin_unlock (& init_mm.page_table_lock);
            continue;
        }
        if (page_size_mask & (1 << PG_LEVEL_2M)) {
            pages++;
            continue;
        }
        new_prot = pte_pgprot (pte_clrhuge (*(pte_t*) pmd));
    }
    if (page_size_mask & (1 << PG_LEVEL_2M)) {
        pages++;
        spin_lock (& init_mm.page_table_lock);
        set_pte ((pte_t *) pmd, pfn_pte (address >> PAGE_SHIFT, __pgprot (pgprot_val (prot) | _PAGE_PSE)));
        spin_unlock (& init_mm.page_table_lock);
        last_map_addr = (address & PMD_MASK) + PMD_SIZE;
        continue;
    }
    pte = alloc_low_page (&pte_phys);
    last_map_addr = phys_pte_init (pte, address, end, new_prot);
    unmap_low_page (pte);
    spin_lock (& init_mm.page_table_lock);
    pmd_populate_kernel (& init_mm, pmd, __va (pte_phys));
    spin_unlock (& init_mm.page_table_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="375" endline="381">
{
    if (!after_bootmem) {
        for (; i < PTRS_PER_PMD; i++, pmd++)
            set_pmd (pmd, __pmd (0));
    }
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="376" endline="379">
{
    for (; i < PTRS_PER_PMD; i++, pmd++)
        set_pmd (pmd, __pmd (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="383" endline="408">
{
    if (!pmd_large (*pmd)) {
        spin_lock (& init_mm.page_table_lock);
        last_map_addr = phys_pte_update (pmd, address, end, prot);
        spin_unlock (& init_mm.page_table_lock);
        continue;
    }
    if (page_size_mask & (1 << PG_LEVEL_2M)) {
        pages++;
        continue;
    }
    new_prot = pte_pgprot (pte_clrhuge (*(pte_t*) pmd));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="384" endline="390">
{
    spin_lock (& init_mm.page_table_lock);
    last_map_addr = phys_pte_update (pmd, address, end, prot);
    spin_unlock (& init_mm.page_table_lock);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="403" endline="406">
{
    pages++;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="410" endline="419">
{
    pages++;
    spin_lock (& init_mm.page_table_lock);
    set_pte ((pte_t *) pmd, pfn_pte (address >> PAGE_SHIFT, __pgprot (pgprot_val (prot) | _PAGE_PSE)));
    spin_unlock (& init_mm.page_table_lock);
    last_map_addr = (address & PMD_MASK) + PMD_SIZE;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="436" endline="443">
{
    pmd_t *pmd = pmd_offset (pud, 0);
    unsigned long last_map_addr;
    last_map_addr = phys_pmd_init (pmd, address, end, page_size_mask, prot);
    __flush_tlb_all ();
    return last_map_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="448" endline="517">
{
    unsigned long pages = 0;
    unsigned long last_map_addr = end;
    int i = pud_index (addr);
    for (; i < PTRS_PER_PUD; i++, addr = (addr & PUD_MASK) + PUD_SIZE) {
        unsigned long pmd_phys;
        pud_t *pud = pud_page + pud_index (addr);
        pmd_t *pmd;
        pgprot_t prot = PAGE_KERNEL;
        if (addr >= end)
            break;
        if (!after_bootmem && !e820_any_mapped (addr, addr +PUD_SIZE, 0)) {
            set_pud (pud, __pud (0));
            continue;
        }
        if (pud_val (*pud)) {
            if (!pud_large (*pud)) {
                last_map_addr = phys_pmd_update (pud, addr, end, page_size_mask, prot);
                continue;
            }
            if (page_size_mask & (1 << PG_LEVEL_1G)) {
                pages++;
                continue;
            }
            prot = pte_pgprot (pte_clrhuge (*(pte_t*) pud));
        }
        if (page_size_mask & (1 << PG_LEVEL_1G)) {
            pages++;
            spin_lock (& init_mm.page_table_lock);
            set_pte ((pte_t *) pud, pfn_pte (addr >> PAGE_SHIFT, PAGE_KERNEL_LARGE));
            spin_unlock (& init_mm.page_table_lock);
            last_map_addr = (addr & PUD_MASK) + PUD_SIZE;
            continue;
        }
        pmd = alloc_low_page (&pmd_phys);
        last_map_addr = phys_pmd_init (pmd, addr, end, page_size_mask, prot);
        unmap_low_page (pmd);
        spin_lock (& init_mm.page_table_lock);
        pud_populate (& init_mm, pud, __va (pmd_phys));
        spin_unlock (& init_mm.page_table_lock);
    }
    __flush_tlb_all ();
    update_page_count (PG_LEVEL_1G, pages);
    return last_map_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="453" endline="511">
{
    unsigned long pmd_phys;
    pud_t *pud = pud_page + pud_index (addr);
    pmd_t *pmd;
    pgprot_t prot = PAGE_KERNEL;
    if (addr >= end)
        break;
    if (!after_bootmem && !e820_any_mapped (addr, addr +PUD_SIZE, 0)) {
        set_pud (pud, __pud (0));
        continue;
    }
    if (pud_val (*pud)) {
        if (!pud_large (*pud)) {
            last_map_addr = phys_pmd_update (pud, addr, end, page_size_mask, prot);
            continue;
        }
        if (page_size_mask & (1 << PG_LEVEL_1G)) {
            pages++;
            continue;
        }
        prot = pte_pgprot (pte_clrhuge (*(pte_t*) pud));
    }
    if (page_size_mask & (1 << PG_LEVEL_1G)) {
        pages++;
        spin_lock (& init_mm.page_table_lock);
        set_pte ((pte_t *) pud, pfn_pte (addr >> PAGE_SHIFT, PAGE_KERNEL_LARGE));
        spin_unlock (& init_mm.page_table_lock);
        last_map_addr = (addr & PUD_MASK) + PUD_SIZE;
        continue;
    }
    pmd = alloc_low_page (&pmd_phys);
    last_map_addr = phys_pmd_init (pmd, addr, end, page_size_mask, prot);
    unmap_low_page (pmd);
    spin_lock (& init_mm.page_table_lock);
    pud_populate (& init_mm, pud, __va (pmd_phys));
    spin_unlock (& init_mm.page_table_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="463" endline="466">
{
    set_pud (pud, __pud (0));
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="468" endline="491">
{
    if (!pud_large (*pud)) {
        last_map_addr = phys_pmd_update (pud, addr, end, page_size_mask, prot);
        continue;
    }
    if (page_size_mask & (1 << PG_LEVEL_1G)) {
        pages++;
        continue;
    }
    prot = pte_pgprot (pte_clrhuge (*(pte_t*) pud));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="469" endline="473">
{
    last_map_addr = phys_pmd_update (pud, addr, end, page_size_mask, prot);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="486" endline="489">
{
    pages++;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="493" endline="501">
{
    pages++;
    spin_lock (& init_mm.page_table_lock);
    set_pte ((pte_t *) pud, pfn_pte (addr >> PAGE_SHIFT, PAGE_KERNEL_LARGE));
    spin_unlock (& init_mm.page_table_lock);
    last_map_addr = (addr & PUD_MASK) + PUD_SIZE;
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="522" endline="528">
{
    pud_t *pud;
    pud = (pud_t *) pgd_page_vaddr (*pgd);
    return phys_pud_init (pud, addr, end, page_size_mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="534" endline="568">
{
    unsigned long next, last_map_addr = end;
    start = (unsigned long) __va (start);
    end = (unsigned long) __va (end);
    for (; start < end; start = next) {
        pgd_t *pgd = pgd_offset_k (start);
        unsigned long pud_phys;
        pud_t *pud;
        next = (start + PGDIR_SIZE) & PGDIR_MASK;
        if (next > end)
            next = end;
        if (pgd_val (*pgd)) {
            last_map_addr = phys_pud_update (pgd, __pa (start), __pa (end), page_size_mask);
            continue;
        }
        pud = alloc_low_page (&pud_phys);
        last_map_addr = phys_pud_init (pud, __pa (start), __pa (next), page_size_mask);
        unmap_low_page (pud);
        spin_lock (& init_mm.page_table_lock);
        pgd_populate (& init_mm, pgd, __va (pud_phys));
        spin_unlock (& init_mm.page_table_lock);
    }
    __flush_tlb_all ();
    return last_map_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="541" endline="564">
{
    pgd_t *pgd = pgd_offset_k (start);
    unsigned long pud_phys;
    pud_t *pud;
    next = (start + PGDIR_SIZE) & PGDIR_MASK;
    if (next > end)
        next = end;
    if (pgd_val (*pgd)) {
        last_map_addr = phys_pud_update (pgd, __pa (start), __pa (end), page_size_mask);
        continue;
    }
    pud = alloc_low_page (&pud_phys);
    last_map_addr = phys_pud_init (pud, __pa (start), __pa (next), page_size_mask);
    unmap_low_page (pud);
    spin_lock (& init_mm.page_table_lock);
    pgd_populate (& init_mm, pgd, __va (pud_phys));
    spin_unlock (& init_mm.page_table_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="550" endline="554">
{
    last_map_addr = phys_pud_update (pgd, __pa (start), __pa (end), page_size_mask);
    continue;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="572" endline="587">
{
    unsigned long bootmap_size, bootmap;
    bootmap_size = bootmem_bootmap_pages (end_pfn) << PAGE_SHIFT;
    bootmap = find_e820_area (0, end_pfn << PAGE_SHIFT, bootmap_size, PAGE_SIZE);
    if (bootmap == -1L)
        panic ("Cannot find bootmem map of size %ld\n", bootmap_size);
    bootmap_size = init_bootmem_node (NODE_DATA (0), bootmap >> PAGE_SHIFT, 0, end_pfn);
    e820_register_active_regions (0, start_pfn, end_pfn);
    free_bootmem_with_active_regions (0, end_pfn);
    early_res_to_bootmem (0, end_pfn << PAGE_SHIFT);
    reserve_bootmem (bootmap, bootmap_size, BOOTMEM_DEFAULT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="591" endline="611">
{
    unsigned long max_zone_pfns [MAX_NR_ZONES];
    memset (max_zone_pfns, 0, sizeof (max_zone_pfns));
    max_zone_pfns[ZONE_DMA] = MAX_DMA_PFN;
    max_zone_pfns[ZONE_DMA32] = MAX_DMA32_PFN;
    max_zone_pfns[ZONE_NORMAL] = max_pfn;
    sparse_memory_present_with_active_regions (MAX_NUMNODES);
    sparse_init ();
    node_clear_state (0, N_NORMAL_MEMORY);
    free_area_init_nodes (max_zone_pfns);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="654" endline="697">
{
    long codesize, reservedpages, datasize, initsize;
    unsigned long absent_pages;
    pci_iommu_alloc ();
    reservedpages = 0;
    totalram_pages = free_all_bootmem ();
    absent_pages = absent_pages_in_range (0, max_pfn);
    reservedpages = max_pfn - totalram_pages - absent_pages;
    after_bootmem = 1;
    codesize = (unsigned long) &_etext - (unsigned long) &_text;
    datasize = (unsigned long) &_edata - (unsigned long) &_etext;
    initsize = (unsigned long) &__init_end - (unsigned long) &__init_begin;
    kclist_add (& kcore_mem, __va (0), max_low_pfn << PAGE_SHIFT);
    kclist_add (& kcore_vmalloc, (void *) VMALLOC_START, VMALLOC_END - VMALLOC_START);
    kclist_add (& kcore_kernel, & _stext, _end - _stext);
    kclist_add (& kcore_modules, (void *) MODULES_VADDR, MODULES_LEN);
    kclist_add (& kcore_vsyscall, (void *) VSYSCALL_START, VSYSCALL_END - VSYSCALL_START);
    printk (KERN_INFO "Memory: %luk/%luk available (%ldk kernel code, " "%ldk absent, %ldk reserved, %ldk data, %ldk init)\n", (unsigned long) nr_free_pages () << (PAGE_SHIFT - 10), max_pfn << (PAGE_SHIFT - 10), codesize >> 10, absent_pages << (PAGE_SHIFT - 10), reservedpages << (PAGE_SHIFT - 10), datasize >> 10, initsize >> 10);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="766" endline="808">
{
    unsigned long pfn = phys >> PAGE_SHIFT;
    if (pfn >= max_pfn) {
        if (pfn < max_pfn_mapped)
            return -EFAULT;
        printk (KERN_ERR "reserve_bootmem: illegal reserve %lx %lu\n", phys, len);
        return -EFAULT;
    }
    reserve_bootmem (phys, len, flags);
    if (phys + len <= MAX_DMA_PFN * PAGE_SIZE) {
        dma_reserve += len / PAGE_SIZE;
        set_dma_reserve (dma_reserve);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="773" endline="784">
{
    if (pfn < max_pfn_mapped)
        return -EFAULT;
    printk (KERN_ERR "reserve_bootmem: illegal reserve %lx %lu\n", phys, len);
    return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="802" endline="805">
{
    dma_reserve += len / PAGE_SIZE;
    set_dma_reserve (dma_reserve);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="811" endline="841">
{
    unsigned long above = ((long) addr) >> __VIRTUAL_MASK_SHIFT;
    pgd_t *pgd;
    pud_t *pud;
    pmd_t *pmd;
    pte_t *pte;
    if (above != 0 && above != -1UL)
        return 0;
    pgd = pgd_offset_k (addr);
    if (pgd_none (*pgd))
        return 0;
    pud = pud_offset (pgd, addr);
    if (pud_none (*pud))
        return 0;
    pmd = pmd_offset (pud, addr);
    if (pmd_none (*pmd))
        return 0;
    if (pmd_large (*pmd))
        return pfn_valid (pmd_pfn (*pmd));
    pte = pte_offset_kernel (pmd, addr);
    if (pte_none (*pte))
        return 0;
    return pfn_valid (pte_pfn (*pte));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="856" endline="862">
{
    return &gate_vma;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="865" endline="872">
{
    struct vm_area_struct *vma = get_gate_vma (task);
    if (!vma)
        return 0;
    return (addr >= vma->vm_start) && (addr < vma->vm_end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="880" endline="882">
{
    return (addr >= VSYSCALL_START) && (addr < VSYSCALL_END);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init_64.c.ifdefed" startline="885" endline="891">
{
    if (vma->vm_mm && vma->vm_start == (long) vma->vm_mm->context.vdso)
        return "[vdso]";
    if (vma == &gate_vma)
        return "[vsyscall]";
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="26" endline="32">
{
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="84" endline="92">
{
    if (x < PAGE_OFFSET)
        return false;
    if (__vmalloc_start_set && is_vmalloc_addr ((void *) x))
        return false;
    if (x >= FIXADDR_START)
        return false;
    return pfn_valid ((x - PAGE_OFFSET) >> PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="98" endline="132">
{
    resource_size_t addr, end;
    int i;
    if (pagenr == 0)
        return 0;
    if (pagenr >= (BIOS_BEGIN >> PAGE_SHIFT) && pagenr < (BIOS_END >> PAGE_SHIFT))
        return 0;
    for (i = 0; i < e820.nr_map; i++) {
        if (e820.map[i].type != E820_RAM)
            continue;
        addr = (e820.map[i].addr + PAGE_SIZE - 1) >> PAGE_SHIFT;
        end = (e820.map[i].addr + e820.map[i].size) >> PAGE_SHIFT;
        if ((pagenr >= addr) && (pagenr < end))
            return 1;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="118" endline="130">
{
    if (e820.map[i].type != E820_RAM)
        continue;
    addr = (e820.map[i].addr + PAGE_SIZE - 1) >> PAGE_SHIFT;
    end = (e820.map[i].addr + e820.map[i].size) >> PAGE_SHIFT;
    if ((pagenr >= addr) && (pagenr < end))
        return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="140" endline="158">
{
    unsigned long nrpages = size >> PAGE_SHIFT;
    int err;
    switch (prot_val) {
    case _PAGE_CACHE_UC :
    default :
        err = _set_memory_uc (vaddr, nrpages);
        break;
    case _PAGE_CACHE_WC :
        err = _set_memory_wc (vaddr, nrpages);
        break;
    case _PAGE_CACHE_WB :
        err = _set_memory_wb (vaddr, nrpages);
        break;
    }
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="144" endline="155">
{
case _PAGE_CACHE_UC :
default :
    err = _set_memory_uc (vaddr, nrpages);
    break;
case _PAGE_CACHE_WC :
    err = _set_memory_wc (vaddr, nrpages);
    break;
case _PAGE_CACHE_WB :
    err = _set_memory_wb (vaddr, nrpages);
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="171" endline="300">
{
    unsigned long pfn, offset, vaddr;
    resource_size_t last_addr;
    const resource_size_t unaligned_phys_addr = phys_addr;
    const unsigned long unaligned_size = size;
    struct vm_struct *area;
    unsigned long new_prot_val;
    pgprot_t prot;
    int retval;
    void __iomem *ret_addr;
    last_addr = phys_addr + size - 1;
    if (!size || last_addr < phys_addr)
        return NULL;
    if (!phys_addr_valid (phys_addr)) {
        printk (KERN_WARNING "ioremap: invalid physical address %llx\n", (unsigned long long) phys_addr);
        WARN_ON_ONCE (1);
        return NULL;
    }
    if (is_ISA_range (phys_addr, last_addr))
        return (__force void __iomem *) phys_to_virt (phys_addr);
    WARN_ONCE (iomem_map_sanity_check (phys_addr, size), KERN_INFO "Info: mapping multiple BARs. Your kernel is fine.");
    for (pfn = phys_addr >> PAGE_SHIFT; (pfn << PAGE_SHIFT) < (last_addr & PAGE_MASK); pfn++) {
        int is_ram = page_is_ram (pfn);
        if (is_ram && pfn_valid (pfn) && !PageReserved (pfn_to_page (pfn)))
            return NULL;
        WARN_ON_ONCE (is_ram);
    }
    offset = phys_addr & ~PAGE_MASK;
    phys_addr &= PAGE_MASK;
    size = PAGE_ALIGN (last_addr +1) - phys_addr;
    retval = reserve_memtype (phys_addr, (u64) phys_addr + size, prot_val, &new_prot_val);
    if (retval) {
        pr_debug ("Warning: reserve_memtype returned %d\n", retval);
        return NULL;
    }
    if (prot_val != new_prot_val) {
        if ((prot_val == _PAGE_CACHE_UC_MINUS && (new_prot_val == _PAGE_CACHE_WB || new_prot_val == _PAGE_CACHE_WC)) || (prot_val == _PAGE_CACHE_WC && new_prot_val == _PAGE_CACHE_WB)) {
            pr_debug ("ioremap error for 0x%llx-0x%llx, requested 0x%lx, got 0x%lx\n", (unsigned long long) phys_addr, (unsigned long long) (phys_addr + size), prot_val, new_prot_val);
            free_memtype (phys_addr, phys_addr + size);
            return NULL;
        }
        prot_val = new_prot_val;
    }
    switch (prot_val) {
    case _PAGE_CACHE_UC :
    default :
        prot = PAGE_KERNEL_IO_NOCACHE;
        break;
    case _PAGE_CACHE_UC_MINUS :
        prot = PAGE_KERNEL_IO_UC_MINUS;
        break;
    case _PAGE_CACHE_WC :
        prot = PAGE_KERNEL_IO_WC;
        break;
    case _PAGE_CACHE_WB :
        prot = PAGE_KERNEL_IO;
        break;
    }
    area = get_vm_area_caller (size, VM_IOREMAP, caller);
    if (!area)
        return NULL;
    area->phys_addr = phys_addr;
    vaddr = (unsigned long) area->addr;
    if (kernel_map_sync_memtype (phys_addr, size, prot_val)) {
        free_memtype (phys_addr, phys_addr + size);
        free_vm_area (area);
        return NULL;
    }
    if (ioremap_page_range (vaddr, vaddr +size, phys_addr, prot)) {
        free_memtype (phys_addr, phys_addr + size);
        free_vm_area (area);
        return NULL;
    }
    ret_addr = (void __iomem *) (vaddr + offset);
    mmiotrace_ioremap (unaligned_phys_addr, unaligned_size, ret_addr);
    return ret_addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="187" endline="192">
{
    printk (KERN_WARNING "ioremap: invalid physical address %llx\n", (unsigned long long) phys_addr);
    WARN_ON_ONCE (1);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="212" endline="219">
{
    int is_ram = page_is_ram (pfn);
    if (is_ram && pfn_valid (pfn) && !PageReserved (pfn_to_page (pfn)))
        return NULL;
    WARN_ON_ONCE (is_ram);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="230" endline="233">
{
    pr_debug ("Warning: reserve_memtype returned %d\n", retval);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="235" endline="257">
{
    if ((prot_val == _PAGE_CACHE_UC_MINUS && (new_prot_val == _PAGE_CACHE_WB || new_prot_val == _PAGE_CACHE_WC)) || (prot_val == _PAGE_CACHE_WC && new_prot_val == _PAGE_CACHE_WB)) {
        pr_debug ("ioremap error for 0x%llx-0x%llx, requested 0x%lx, got 0x%lx\n", (unsigned long long) phys_addr, (unsigned long long) (phys_addr + size), prot_val, new_prot_val);
        free_memtype (phys_addr, phys_addr + size);
        return NULL;
    }
    prot_val = new_prot_val;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="247" endline="255">
{
    pr_debug ("ioremap error for 0x%llx-0x%llx, requested 0x%lx, got 0x%lx\n", (unsigned long long) phys_addr, (unsigned long long) (phys_addr + size), prot_val, new_prot_val);
    free_memtype (phys_addr, phys_addr + size);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="259" endline="273">
{
case _PAGE_CACHE_UC :
default :
    prot = PAGE_KERNEL_IO_NOCACHE;
    break;
case _PAGE_CACHE_UC_MINUS :
    prot = PAGE_KERNEL_IO_UC_MINUS;
    break;
case _PAGE_CACHE_WC :
    prot = PAGE_KERNEL_IO_WC;
    break;
case _PAGE_CACHE_WB :
    prot = PAGE_KERNEL_IO;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="284" endline="288">
{
    free_memtype (phys_addr, phys_addr + size);
    free_vm_area (area);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="290" endline="294">
{
    free_memtype (phys_addr, phys_addr + size);
    free_vm_area (area);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="324" endline="336">
{
    unsigned long val = _PAGE_CACHE_UC_MINUS;
    return __ioremap_caller (phys_addr, size, val, __builtin_return_address (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="350" endline="356">
{
    if (pat_enabled)
        return __ioremap_caller (phys_addr, size, _PAGE_CACHE_WC, __builtin_return_address (0));
    else
        return ioremap_nocache (phys_addr, size);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="360" endline="363">
{
    return __ioremap_caller (phys_addr, size, _PAGE_CACHE_WB, __builtin_return_address (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="368" endline="388">
{
    unsigned long flags;
    void __iomem *ret;
    int err;
    err = reserve_memtype (phys_addr, phys_addr +size, _PAGE_CACHE_WB, &flags);
    if (err < 0)
        return NULL;
    ret = __ioremap_caller (phys_addr, size, flags, __builtin_return_address (0));
    free_memtype (phys_addr, phys_addr + size);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="392" endline="395">
{
    return __ioremap_caller (phys_addr, size, (prot_val & _PAGE_CACHE_MASK), __builtin_return_address (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="405" endline="449">
{
    struct vm_struct *p, *o;
    if ((void __force *) addr <= high_memory)
        return;
    if ((void __force *) addr >= phys_to_virt (ISA_START_ADDRESS) && (void __force *) addr < phys_to_virt (ISA_END_ADDRESS))
        return;
    addr = (volatile void __iomem *) (PAGE_MASK & (unsigned long __force) addr);
    mmiotrace_iounmap (addr);
    read_lock (& vmlist_lock);
    for (p = vmlist; p; p = p->next) {
        if (p->addr == (void __force *) addr)
            break;
    }
    read_unlock (& vmlist_lock);
    if (!p) {
        printk (KERN_ERR "iounmap: bad address %p\n", addr);
        dump_stack ();
        return;
    }
    free_memtype (p -> phys_addr, p -> phys_addr + get_vm_area_size (p));
    o = remove_vm_area ((void __force *) addr);
    BUG_ON (p != o || o == NULL);
    kfree (p);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="431" endline="434">
{
    if (p->addr == (void __force *) addr)
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="437" endline="441">
{
    printk (KERN_ERR "iounmap: bad address %p\n", addr);
    dump_stack ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="457" endline="470">
{
    void *addr;
    unsigned long start = phys & PAGE_MASK;
    if (page_is_ram (start >> PAGE_SHIFT))
        return __va (phys);
    addr = (void __force *) ioremap_default (start, PAGE_SIZE);
    if (addr)
        addr = (void *) ((unsigned long) addr | (phys & ~PAGE_MASK));
    return addr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="473" endline="479">
{
    if (page_is_ram (phys >> PAGE_SHIFT))
        return;
    iounmap ((void __iomem *) ((unsigned long) addr & PAGE_MASK));
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="484" endline="488">
{
    early_ioremap_debug = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="495" endline="503">
{
    pgd_t *base = __va (read_cr3 ());
    pgd_t *pgd = &base[pgd_index (addr)];
    pud_t *pud = pud_offset (pgd, addr);
    pmd_t *pmd = pmd_offset (pud, addr);
    return pmd;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="506" endline="508">
{
    return &bm_pte[pte_index (addr)];
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="513" endline="544">
{
    pmd_t *pmd;
    int i;
    if (early_ioremap_debug)
        printk (KERN_INFO "early_ioremap_init()\n");
    for (i = 0; i < FIX_BTMAPS_SLOTS; i++)
        slot_virt[i] = __fix_to_virt (FIX_BTMAP_BEGIN -NR_FIX_BTMAPS * i);
    pmd = early_ioremap_pmd (fix_to_virt (FIX_BTMAP_BEGIN));
    memset (bm_pte, 0, sizeof (bm_pte));
    pmd_populate_kernel (& init_mm, pmd, bm_pte);
    if (pmd != early_ioremap_pmd (fix_to_virt (FIX_BTMAP_END))) {
        WARN_ON (1);
        printk (KERN_WARNING "pmd %p != %p\n", pmd, early_ioremap_pmd (fix_to_virt (FIX_BTMAP_END)));
        printk (KERN_WARNING "fix_to_virt(FIX_BTMAP_BEGIN): %08lx\n", fix_to_virt (FIX_BTMAP_BEGIN));
        printk (KERN_WARNING "fix_to_virt(FIX_BTMAP_END):   %08lx\n", fix_to_virt (FIX_BTMAP_END));
        printk (KERN_WARNING "FIX_BTMAP_END:       %d\n", FIX_BTMAP_END);
        printk (KERN_WARNING "FIX_BTMAP_BEGIN:     %d\n", FIX_BTMAP_BEGIN);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="531" endline="543">
{
    WARN_ON (1);
    printk (KERN_WARNING "pmd %p != %p\n", pmd, early_ioremap_pmd (fix_to_virt (FIX_BTMAP_END)));
    printk (KERN_WARNING "fix_to_virt(FIX_BTMAP_BEGIN): %08lx\n", fix_to_virt (FIX_BTMAP_BEGIN));
    printk (KERN_WARNING "fix_to_virt(FIX_BTMAP_END):   %08lx\n", fix_to_virt (FIX_BTMAP_END));
    printk (KERN_WARNING "FIX_BTMAP_END:       %d\n", FIX_BTMAP_END);
    printk (KERN_WARNING "FIX_BTMAP_BEGIN:     %d\n", FIX_BTMAP_BEGIN);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="547" endline="549">
{
    after_paging_init = 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="553" endline="568">
{
    unsigned long addr = __fix_to_virt (idx);
    pte_t *pte;
    if (idx >= __end_of_fixed_addresses) {
        BUG ();
        return;
    }
    pte = early_ioremap_pte (addr);
    if (pgprot_val (flags))
        set_pte (pte, pfn_pte (phys >> PAGE_SHIFT, flags));
    else
        pte_clear (&init_mm, addr, pte);
    __flush_tlb_one (addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="557" endline="560">
{
    BUG ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="572" endline="577">
{
    if (after_paging_init)
        __set_fixmap (idx, phys, prot);
    else
        __early_set_fixmap (idx, phys, prot);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="580" endline="585">
{
    if (after_paging_init)
        clear_fixmap (idx);
    else
        __early_set_fixmap (idx, 0, __pgprot (0));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="591" endline="608">
{
    int count = 0;
    int i;
    for (i = 0; i < FIX_BTMAPS_SLOTS; i++)
        if (prev_map[i])
            count++;
    if (!count)
        return 0;
    WARN (1, KERN_WARNING "Debug warning: early ioremap leak of %d areas detected.\n", count);
    printk (KERN_WARNING "please boot with early_ioremap_debug and report the dmesg.\n");
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="613" endline="683">
{
    unsigned long offset;
    resource_size_t last_addr;
    unsigned int nrpages;
    enum fixed_addresses idx0, idx;
    int i, slot;
    WARN_ON (system_state != SYSTEM_BOOTING);
    slot = -1;
    for (i = 0; i < FIX_BTMAPS_SLOTS; i++) {
        if (!prev_map[i]) {
            slot = i;
            break;
        }
    }
    if (slot < 0) {
        printk (KERN_INFO "early_iomap(%08llx, %08lx) not found slot\n", (u64) phys_addr, size);
        WARN_ON (1);
        return NULL;
    }
    if (early_ioremap_debug) {
        printk (KERN_INFO "early_ioremap(%08llx, %08lx) [%d] => ", (u64) phys_addr, size, slot);
        dump_stack ();
    }
    last_addr = phys_addr + size - 1;
    if (!size || last_addr < phys_addr) {
        WARN_ON (1);
        return NULL;
    }
    prev_size[slot] = size;
    offset = phys_addr & ~PAGE_MASK;
    phys_addr &= PAGE_MASK;
    size = PAGE_ALIGN (last_addr +1) - phys_addr;
    nrpages = size >> PAGE_SHIFT;
    if (nrpages > NR_FIX_BTMAPS) {
        WARN_ON (1);
        return NULL;
    }
    idx0 = FIX_BTMAP_BEGIN - NR_FIX_BTMAPS * slot;
    idx = idx0;
    while (nrpages > 0) {
        early_set_fixmap (idx, phys_addr, prot);
        phys_addr += PAGE_SIZE;
        --idx;
        --nrpages;
    }
    if (early_ioremap_debug)
        printk (KERN_CONT "%08lx + %08lx\n", offset, slot_virt[slot]);
    prev_map[slot] = (void __iomem *) (offset + slot_virt[slot]);
    return prev_map[slot];
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="623" endline="628">
{
    if (!prev_map[i]) {
        slot = i;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="624" endline="627">
{
    slot = i;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="630" endline="635">
{
    printk (KERN_INFO "early_iomap(%08llx, %08lx) not found slot\n", (u64) phys_addr, size);
    WARN_ON (1);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="637" endline="641">
{
    printk (KERN_INFO "early_ioremap(%08llx, %08lx) [%d] => ", (u64) phys_addr, size, slot);
    dump_stack ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="645" endline="648">
{
    WARN_ON (1);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="662" endline="665">
{
    WARN_ON (1);
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="672" endline="677">
{
    early_set_fixmap (idx, phys_addr, prot);
    phys_addr += PAGE_SIZE;
    --idx;
    --nrpages;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="688" endline="690">
{
    return __early_ioremap (phys_addr, size, PAGE_KERNEL_IO);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="695" endline="697">
{
    return __early_ioremap (phys_addr, size, PAGE_KERNEL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="700" endline="750">
{
    unsigned long virt_addr;
    unsigned long offset;
    unsigned int nrpages;
    enum fixed_addresses idx;
    int i, slot;
    slot = -1;
    for (i = 0; i < FIX_BTMAPS_SLOTS; i++) {
        if (prev_map[i] == addr) {
            slot = i;
            break;
        }
    }
    if (slot < 0) {
        printk (KERN_INFO "early_iounmap(%p, %08lx) not found slot\n", addr, size);
        WARN_ON (1);
        return;
    }
    if (prev_size[slot] != size) {
        printk (KERN_INFO "early_iounmap(%p, %08lx) [%d] size not consistent %08lx\n", addr, size, slot, prev_size [slot]);
        WARN_ON (1);
        return;
    }
    if (early_ioremap_debug) {
        printk (KERN_INFO "early_iounmap(%p, %08lx) [%d]\n", addr, size, slot);
        dump_stack ();
    }
    virt_addr = (unsigned long) addr;
    if (virt_addr < fix_to_virt (FIX_BTMAP_BEGIN)) {
        WARN_ON (1);
        return;
    }
    offset = virt_addr & ~PAGE_MASK;
    nrpages = PAGE_ALIGN (offset +size - 1) >> PAGE_SHIFT;
    idx = FIX_BTMAP_BEGIN - NR_FIX_BTMAPS * slot;
    while (nrpages > 0) {
        early_clear_fixmap (idx);
        --idx;
        --nrpages;
    }
    prev_map[slot] = NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="708" endline="713">
{
    if (prev_map[i] == addr) {
        slot = i;
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="709" endline="712">
{
    slot = i;
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="715" endline="720">
{
    printk (KERN_INFO "early_iounmap(%p, %08lx) not found slot\n", addr, size);
    WARN_ON (1);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="722" endline="727">
{
    printk (KERN_INFO "early_iounmap(%p, %08lx) [%d] size not consistent %08lx\n", addr, size, slot, prev_size [slot]);
    WARN_ON (1);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="729" endline="733">
{
    printk (KERN_INFO "early_iounmap(%p, %08lx) [%d]\n", addr, size, slot);
    dump_stack ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="736" endline="739">
{
    WARN_ON (1);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/ioremap.c.ifdefed" startline="744" endline="748">
{
    early_clear_fixmap (idx);
    --idx;
    --nrpages;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="42" endline="47">
{
    if (unlikely (is_kmmio_active ()))
        if (kmmio_handler (regs, addr) == 1)
            return -1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="50" endline="62">
{
    int ret = 0;
    if (kprobes_built_in () && !user_mode_vm (regs)) {
        preempt_disable ();
        if (kprobe_running () && kprobe_fault_handler (regs, 14))
            ret = 1;
        preempt_enable ();
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="54" endline="59">
{
    preempt_disable ();
    if (kprobe_running () && kprobe_fault_handler (regs, 14))
        ret = 1;
    preempt_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="82" endline="124">
{
    unsigned char instr_hi = opcode & 0xf0;
    unsigned char instr_lo = opcode & 0x0f;
    switch (instr_hi) {
    case 0x20 :
    case 0x30 :
        return ((instr_lo & 7) == 0x6);
    case 0x60 :
        return (instr_lo & 0xC) == 0x4;
    case 0xF0 :
        return !instr_lo || (instr_lo >> 1) == 1;
    case 0x00 :
        if (probe_kernel_address (instr, opcode))
            return 0;
        *prefetch = (instr_lo == 0xF) && (opcode == 0x0D || opcode == 0x18);
        return 0;
    default :
        return 0;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="86" endline="123">
{
case 0x20 :
case 0x30 :
    return ((instr_lo & 7) == 0x6);
case 0x60 :
    return (instr_lo & 0xC) == 0x4;
case 0xF0 :
    return !instr_lo || (instr_lo >> 1) == 1;
case 0x00 :
    if (probe_kernel_address (instr, opcode))
        return 0;
    *prefetch = (instr_lo == 0xF) && (opcode == 0x0D || opcode == 0x18);
    return 0;
default :
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="128" endline="158">
{
    unsigned char *max_instr;
    unsigned char *instr;
    int prefetch = 0;
    if (error_code & PF_INSTR)
        return 0;
    instr = (void *) convert_ip_to_linear (current, regs);
    max_instr = instr + 15;
    if (user_mode (regs) && instr >= (unsigned char *) TASK_SIZE)
        return 0;
    while (instr < max_instr) {
        unsigned char opcode;
        if (probe_kernel_address (instr, opcode))
            break;
        instr++;
        if (!check_prefetch_opcode (regs, instr, opcode, &prefetch))
            break;
    }
    return prefetch;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="146" endline="156">
{
    unsigned char opcode;
    if (probe_kernel_address (instr, opcode))
        break;
    instr++;
    if (!check_prefetch_opcode (regs, instr, opcode, &prefetch))
        break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="163" endline="172">
{
    siginfo_t info;
    info.si_signo = si_signo;
    info.si_errno = 0;
    info.si_code = si_code;
    info.si_addr = (void __user *) address;
    force_sig_info (si_signo, & info, tsk);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="331" endline="355">
{
    unsigned long address;
    for (address = VMALLOC_START & PGDIR_MASK; address <= VMALLOC_END; address += PGDIR_SIZE) {
        const pgd_t *pgd_ref = pgd_offset_k (address);
        unsigned long flags;
        struct page *page;
        if (pgd_none (*pgd_ref))
            continue;
        spin_lock_irqsave (& pgd_lock, flags);
        list_for_each_entry (page, &pgd_list, lru) {
            pgd_t *pgd;
            pgd = (pgd_t *) page_address (page) + pgd_index (address);
            if (pgd_none (*pgd))
                set_pgd (pgd, *pgd_ref);
            else
                BUG_ON (pgd_page_vaddr (*pgd) != pgd_page_vaddr (*pgd_ref));
        }
        spin_unlock_irqrestore (& pgd_lock, flags);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="335" endline="354">
{
    const pgd_t *pgd_ref = pgd_offset_k (address);
    unsigned long flags;
    struct page *page;
    if (pgd_none (*pgd_ref))
        continue;
    spin_lock_irqsave (& pgd_lock, flags);
    list_for_each_entry (page, &pgd_list, lru) {
        pgd_t *pgd;
        pgd = (pgd_t *) page_address (page) + pgd_index (address);
        if (pgd_none (*pgd))
            set_pgd (pgd, *pgd_ref);
        else
            BUG_ON (pgd_page_vaddr (*pgd) != pgd_page_vaddr (*pgd_ref));
    }
    spin_unlock_irqrestore (& pgd_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="345" endline="352">
{
    pgd_t *pgd;
    pgd = (pgd_t *) page_address (page) + pgd_index (address);
    if (pgd_none (*pgd))
        set_pgd (pgd, *pgd_ref);
    else
        BUG_ON (pgd_page_vaddr (*pgd) != pgd_page_vaddr (*pgd_ref));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="365" endline="426">
{
    pgd_t *pgd, *pgd_ref;
    pud_t *pud, *pud_ref;
    pmd_t *pmd, *pmd_ref;
    pte_t *pte, *pte_ref;
    if (!(address >= VMALLOC_START && address < VMALLOC_END))
        return -1;
    pgd = pgd_offset (current->active_mm, address);
    pgd_ref = pgd_offset_k (address);
    if (pgd_none (*pgd_ref))
        return -1;
    if (pgd_none (*pgd))
        set_pgd (pgd, *pgd_ref);
    else
        BUG_ON (pgd_page_vaddr (*pgd) != pgd_page_vaddr (*pgd_ref));
    pud = pud_offset (pgd, address);
    pud_ref = pud_offset (pgd_ref, address);
    if (pud_none (*pud_ref))
        return -1;
    if (pud_none (*pud) || pud_page_vaddr (*pud) != pud_page_vaddr (*pud_ref))
        BUG ();
    pmd = pmd_offset (pud, address);
    pmd_ref = pmd_offset (pud_ref, address);
    if (pmd_none (*pmd_ref))
        return -1;
    if (pmd_none (*pmd) || pmd_page (*pmd) != pmd_page (*pmd_ref))
        BUG ();
    pte_ref = pte_offset_kernel (pmd_ref, address);
    if (!pte_present (*pte_ref))
        return -1;
    pte = pte_offset_kernel (pmd, address);
    if (!pte_present (*pte) || pte_pfn (*pte) != pte_pfn (*pte_ref))
        BUG ();
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="441" endline="442">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="445" endline="449">
{
    unsigned long dummy;
    return probe_kernel_address ((unsigned long *) p, dummy);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="452" endline="497">
{
    pgd_t *pgd;
    pud_t *pud;
    pmd_t *pmd;
    pte_t *pte;
    pgd = (pgd_t *) read_cr3 ();
    pgd = __va ((unsigned long) pgd & PHYSICAL_PAGE_MASK);
    pgd += pgd_index (address);
    if (bad_address (pgd))
        goto bad;
    printk ("PGD %lx ", pgd_val (* pgd));
    if (!pgd_present (*pgd))
        goto out;
    pud = pud_offset (pgd, address);
    if (bad_address (pud))
        goto bad;
    printk ("PUD %lx ", pud_val (* pud));
    if (!pud_present (*pud) || pud_large (*pud))
        goto out;
    pmd = pmd_offset (pud, address);
    if (bad_address (pmd))
        goto bad;
    printk ("PMD %lx ", pmd_val (* pmd));
    if (!pmd_present (*pmd) || pmd_large (*pmd))
        goto out;
    pte = pte_offset_kernel (pmd, address);
    if (bad_address (pte))
        goto bad;
    printk ("PTE %lx", pte_val (* pte));
out :
    printk ("\n");
    return;
bad :
    printk ("BAD\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="516" endline="533">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="544" endline="550">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="553" endline="570">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="578" endline="602">
{
    if (!oops_may_print ())
        return;
    if (error_code & PF_INSTR) {
        unsigned int level;
        pte_t *pte = lookup_address (address, &level);
        if (pte && pte_present (*pte) && !pte_exec (*pte))
            printk (nx_warning, current_uid ());
    }
    printk (KERN_ALERT "BUG: unable to handle kernel ");
    if (address < PAGE_SIZE)
        printk (KERN_CONT "NULL pointer dereference");
    else
        printk (KERN_CONT "paging request");
    printk (KERN_CONT " at %p\n", (void *) address);
    printk (KERN_ALERT "IP:");
    printk_address (regs -> ip, 1);
    dump_pagetable (address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="582" endline="589">
{
    unsigned int level;
    pte_t *pte = lookup_address (address, &level);
    if (pte && pte_present (*pte) && !pte_exec (*pte))
        printk (nx_warning, current_uid ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="607" endline="628">
{
    struct task_struct *tsk;
    unsigned long flags;
    int sig;
    flags = oops_begin ();
    tsk = current;
    sig = SIGKILL;
    printk (KERN_ALERT "%s: Corrupted page table at address %lx\n", tsk -> comm, address);
    dump_pagetable (address);
    tsk->thread.cr2 = address;
    tsk->thread.trap_no = 14;
    tsk->thread.error_code = error_code;
    if (__die ("Bad pagetable", regs, error_code))
        sig = 0;
    oops_end (flags, regs, sig);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="633" endline="684">
{
    struct task_struct *tsk = current;
    unsigned long *stackend;
    unsigned long flags;
    int sig;
    if (fixup_exception (regs))
        return;
    if (is_prefetch (regs, error_code, address))
        return;
    if (is_errata93 (regs, address))
        return;
    flags = oops_begin ();
    show_fault_oops (regs, error_code, address);
    stackend = end_of_stack (tsk);
    if (*stackend != STACK_END_MAGIC)
        printk (KERN_ALERT "Thread overran stack, or stack corrupted\n");
    tsk->thread.cr2 = address;
    tsk->thread.trap_no = 14;
    tsk->thread.error_code = error_code;
    sig = SIGKILL;
    if (__die ("Oops", regs, error_code))
        sig = 0;
    printk (KERN_EMERG "CR2: %016lx\n", address);
    oops_end (flags, regs, sig);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="693" endline="708">
{
    if (!unhandled_signal (tsk, SIGSEGV))
        return;
    if (!printk_ratelimit ())
        return;
    printk ("%s%s[%d]: segfault at %lx ip %p sp %p error %lx", task_pid_nr (tsk) > 1 ? KERN_INFO : KERN_EMERG, tsk -> comm, task_pid_nr (tsk), address, (void *) regs -> ip, (void *) regs -> sp, error_code);
    print_vma_addr (KERN_CONT " in ", regs -> ip);
    printk (KERN_CONT "\n");
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="713" endline="750">
{
    struct task_struct *tsk = current;
    if (error_code & PF_USER) {
        local_irq_enable ();
        if (is_prefetch (regs, error_code, address))
            return;
        if (is_errata100 (regs, address))
            return;
        if (unlikely (show_unhandled_signals))
            show_signal_msg (regs, error_code, address, tsk);
        tsk->thread.cr2 = address;
        tsk->thread.error_code = error_code | (address >= TASK_SIZE);
        tsk->thread.trap_no = 14;
        force_sig_info_fault (SIGSEGV, si_code, address, tsk);
        return;
    }
    if (is_f00f_bug (regs, address))
        return;
    no_context (regs, error_code, address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="717" endline="744">
{
    local_irq_enable ();
    if (is_prefetch (regs, error_code, address))
        return;
    if (is_errata100 (regs, address))
        return;
    if (unlikely (show_unhandled_signals))
        show_signal_msg (regs, error_code, address, tsk);
    tsk->thread.cr2 = address;
    tsk->thread.error_code = error_code | (address >= TASK_SIZE);
    tsk->thread.trap_no = 14;
    force_sig_info_fault (SIGSEGV, si_code, address, tsk);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="755" endline="757">
{
    __bad_area_nosemaphore (regs, error_code, address, SEGV_MAPERR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="762" endline="772">
{
    struct mm_struct *mm = current->mm;
    up_read (& mm -> mmap_sem);
    __bad_area_nosemaphore (regs, error_code, address, si_code);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="776" endline="778">
{
    __bad_area (regs, error_code, address, SEGV_MAPERR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="783" endline="785">
{
    __bad_area (regs, error_code, address, SEGV_ACCERR);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="791" endline="799">
{
    up_read (& current -> mm -> mmap_sem);
    pagefault_out_of_memory ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="803" endline="822">
{
    struct task_struct *tsk = current;
    struct mm_struct *mm = tsk->mm;
    up_read (& mm -> mmap_sem);
    if (!(error_code & PF_USER))
        no_context (regs, error_code, address);
    if (is_prefetch (regs, error_code, address))
        return;
    tsk->thread.cr2 = address;
    tsk->thread.error_code = error_code;
    tsk->thread.trap_no = 14;
    force_sig_info_fault (SIGBUS, BUS_ADRERR, address, tsk);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="827" endline="836">
{
    if (fault & VM_FAULT_OOM) {
        out_of_memory (regs, error_code, address);
    }
    else {
        if (fault & VM_FAULT_SIGBUS)
            do_sigbus (regs, error_code, address);
        else
            BUG ();
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="828" endline="830">
{
    out_of_memory (regs, error_code, address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="830" endline="835">
{
    if (fault & VM_FAULT_SIGBUS)
        do_sigbus (regs, error_code, address);
    else
        BUG ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="839" endline="847">
{
    if ((error_code & PF_WRITE) && !pte_write (*pte))
        return 0;
    if ((error_code & PF_INSTR) && !pte_exec (*pte))
        return 0;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="863" endline="908">
{
    pgd_t *pgd;
    pud_t *pud;
    pmd_t *pmd;
    pte_t *pte;
    int ret;
    if (error_code & (PF_USER | PF_RSVD))
        return 0;
    pgd = init_mm.pgd + pgd_index (address);
    if (!pgd_present (*pgd))
        return 0;
    pud = pud_offset (pgd, address);
    if (!pud_present (*pud))
        return 0;
    if (pud_large (*pud))
        return spurious_fault_check (error_code, (pte_t *) pud);
    pmd = pmd_offset (pud, address);
    if (!pmd_present (*pmd))
        return 0;
    if (pmd_large (*pmd))
        return spurious_fault_check (error_code, (pte_t *) pmd);
    pte = pte_offset_kernel (pmd, address);
    if (!pte_present (*pte))
        return 0;
    ret = spurious_fault_check (error_code, pte);
    if (!ret)
        return 0;
    ret = spurious_fault_check (error_code, (pte_t *) pmd);
    WARN_ONCE (! ret, "PMD has incorrect permission bits\n");
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="914" endline="931">
{
    if (write) {
        if (unlikely (!(vma->vm_flags & VM_WRITE)))
            return 1;
        return 0;
    }
    if (unlikely (error_code &PF_PROT))
        return 1;
    if (unlikely (!(vma->vm_flags & (VM_READ | VM_EXEC | VM_WRITE))))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="915" endline="920">
{
    if (unlikely (!(vma->vm_flags & VM_WRITE)))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="934" endline="936">
{
    return address >= TASK_SIZE_MAX;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="945" endline="1137">
{
    struct vm_area_struct *vma;
    struct task_struct *tsk;
    unsigned long address;
    struct mm_struct *mm;
    int write;
    int fault;
    tsk = current;
    mm = tsk->mm;
    address = read_cr2 ();
    if (kmemcheck_active (regs))
        kmemcheck_hide (regs);
    prefetchw (& mm -> mmap_sem);
    if (unlikely (kmmio_fault (regs, address)))
        return;
    if (unlikely (fault_in_kernel_space (address))) {
        if (!(error_code & (PF_RSVD | PF_USER | PF_PROT))) {
            if (vmalloc_fault (address) >= 0)
                return;
            if (kmemcheck_fault (regs, address, error_code))
                return;
        }
        if (spurious_fault (error_code, address))
            return;
        if (notify_page_fault (regs))
            return;
        bad_area_nosemaphore (regs, error_code, address);
        return;
    }
    if (unlikely (notify_page_fault (regs)))
        return;
    if (user_mode_vm (regs)) {
        local_irq_enable ();
        error_code |= PF_USER;
    }
    else {
        if (regs->flags & X86_EFLAGS_IF)
            local_irq_enable ();
    }
    if (unlikely (error_code &PF_RSVD))
        pgtable_bad (regs, error_code, address);
    perf_swcounter_event (PERF_COUNT_SW_PAGE_FAULTS, 1, 0, regs, address);
    if (unlikely (in_atomic () || !mm)) {
        bad_area_nosemaphore (regs, error_code, address);
        return;
    }
    if (unlikely (!down_read_trylock (&mm->mmap_sem))) {
        if ((error_code & PF_USER) == 0 && !search_exception_tables (regs->ip)) {
            bad_area_nosemaphore (regs, error_code, address);
            return;
        }
        down_read (& mm -> mmap_sem);
    }
    else {
        might_sleep ();
    }
    vma = find_vma (mm, address);
    if (unlikely (!vma)) {
        bad_area (regs, error_code, address);
        return;
    }
    if (likely (vma->vm_start <= address))
        goto good_area;
    if (unlikely (!(vma->vm_flags & VM_GROWSDOWN))) {
        bad_area (regs, error_code, address);
        return;
    }
    if (error_code & PF_USER) {
        if (unlikely (address +65536 + 32 * sizeof (unsigned long) < regs->sp)) {
            bad_area (regs, error_code, address);
            return;
        }
    }
    if (unlikely (expand_stack (vma, address))) {
        bad_area (regs, error_code, address);
        return;
    }
good_area :
    write = error_code & PF_WRITE;
    if (unlikely (access_error (error_code, write, vma))) {
        bad_area_access_error (regs, error_code, address);
        return;
    }
    fault = handle_mm_fault (mm, vma, address, write ? FAULT_FLAG_WRITE : 0);
    if (unlikely (fault &VM_FAULT_ERROR)) {
        mm_fault_error (regs, error_code, address, fault);
        return;
    }
    if (fault & VM_FAULT_MAJOR) {
        tsk->maj_flt++;
        perf_swcounter_event (PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1, 0, regs, address);
    }
    else {
        tsk->min_flt++;
        perf_swcounter_event (PERF_COUNT_SW_PAGE_FAULTS_MIN, 1, 0, regs, address);
    }
    check_v8086_mode (regs, address, tsk);
    up_read (& mm -> mmap_sem);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="983" endline="1006">
{
    if (!(error_code & (PF_RSVD | PF_USER | PF_PROT))) {
        if (vmalloc_fault (address) >= 0)
            return;
        if (kmemcheck_fault (regs, address, error_code))
            return;
    }
    if (spurious_fault (error_code, address))
        return;
    if (notify_page_fault (regs))
        return;
    bad_area_nosemaphore (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="984" endline="990">
{
    if (vmalloc_fault (address) >= 0)
        return;
    if (kmemcheck_fault (regs, address, error_code))
        return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1018" endline="1021">
{
    local_irq_enable ();
    error_code |= PF_USER;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1021" endline="1024">
{
    if (regs->flags & X86_EFLAGS_IF)
        local_irq_enable ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1035" endline="1038">
{
    bad_area_nosemaphore (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1056" endline="1063">
{
    if ((error_code & PF_USER) == 0 && !search_exception_tables (regs->ip)) {
        bad_area_nosemaphore (regs, error_code, address);
        return;
    }
    down_read (& mm -> mmap_sem);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1058" endline="1061">
{
    bad_area_nosemaphore (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1063" endline="1070">
{
    might_sleep ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1073" endline="1076">
{
    bad_area (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1079" endline="1082">
{
    bad_area (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1083" endline="1094">
{
    if (unlikely (address +65536 + 32 * sizeof (unsigned long) < regs->sp)) {
        bad_area (regs, error_code, address);
        return;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1090" endline="1093">
{
    bad_area (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1095" endline="1098">
{
    bad_area (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1107" endline="1110">
{
    bad_area_access_error (regs, error_code, address);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1119" endline="1122">
{
    mm_fault_error (regs, error_code, address, fault);
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1124" endline="1128">
{
    tsk->maj_flt++;
    perf_swcounter_event (PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1, 0, regs, address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/fault.c.ifdefed" startline="1128" endline="1132">
{
    tsk->min_flt++;
    perf_swcounter_event (PERF_COUNT_SW_PAGE_FAULTS_MIN, 1, 0, regs, address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="79" endline="80">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="96" endline="151">
{
    unsigned long puds, pmds, ptes, tables, start;
    puds = (end + PUD_SIZE - 1) >> PUD_SHIFT;
    tables = roundup (puds * sizeof (pud_t), PAGE_SIZE);
    if (use_gbpages) {
        unsigned long extra;
        extra = end - ((end >> PUD_SHIFT) << PUD_SHIFT);
        pmds = (extra + PMD_SIZE - 1) >> PMD_SHIFT;
    }
    else
        pmds = (end + PMD_SIZE - 1) >> PMD_SHIFT;
    tables += roundup (pmds * sizeof (pmd_t), PAGE_SIZE);
    if (use_pse) {
        unsigned long extra;
        extra = end - ((end >> PMD_SHIFT) << PMD_SHIFT);
        ptes = (extra + PAGE_SIZE - 1) >> PAGE_SHIFT;
    }
    else
        ptes = (end + PAGE_SIZE - 1) >> PAGE_SHIFT;
    tables += roundup (ptes * sizeof (pte_t), PAGE_SIZE);
    start = 0x8000;
    e820_table_start = find_e820_area (start, max_pfn_mapped << PAGE_SHIFT, tables, PAGE_SIZE);
    if (e820_table_start == -1UL)
        panic ("Cannot find space for the kernel page tables");
    e820_table_start >>= PAGE_SHIFT;
    e820_table_end = e820_table_start;
    e820_table_top = e820_table_start + (tables >> PAGE_SHIFT);
    printk (KERN_DEBUG "kernel direct mapping tables up to %lx @ %lx-%lx\n", end, e820_table_start << PAGE_SHIFT, e820_table_top << PAGE_SHIFT);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="102" endline="107">
{
    unsigned long extra;
    extra = end - ((end >> PUD_SHIFT) << PUD_SHIFT);
    pmds = (extra + PMD_SIZE - 1) >> PMD_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="112" endline="120">
{
    unsigned long extra;
    extra = end - ((end >> PMD_SHIFT) << PMD_SHIFT);
    ptes = (extra + PAGE_SIZE - 1) >> PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="168" endline="179">
{
    if (start_pfn < end_pfn) {
        if (nr_range >= NR_RANGE_MR)
            panic ("run out of range for init_memory_mapping\n");
        mr[nr_range].start = start_pfn << PAGE_SHIFT;
        mr[nr_range].end = end_pfn << PAGE_SHIFT;
        mr[nr_range].page_size_mask = page_size_mask;
        nr_range++;
    }
    return nr_range;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="169" endline="176">
{
    if (nr_range >= NR_RANGE_MR)
        panic ("run out of range for init_memory_mapping\n");
    mr[nr_range].start = start_pfn << PAGE_SHIFT;
    mr[nr_range].end = end_pfn << PAGE_SHIFT;
    mr[nr_range].page_size_mask = page_size_mask;
    nr_range++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="188" endline="382">
{
    unsigned long page_size_mask = 0;
    unsigned long start_pfn, end_pfn;
    unsigned long ret = 0;
    unsigned long pos;
    struct map_range mr [NR_RANGE_MR];
    int nr_range, i;
    int use_pse, use_gbpages;
    printk (KERN_INFO "init_memory_mapping: %016lx-%016lx\n", start, end);
    use_pse = cpu_has_pse;
    use_gbpages = direct_gbpages;
    set_nx ();
    if (nx_enabled)
        printk (KERN_INFO "NX (Execute Disable) protection: active\n");
    if (cpu_has_pse)
        set_in_cr4 (X86_CR4_PSE);
    if (cpu_has_pge) {
        set_in_cr4 (X86_CR4_PGE);
        __supported_pte_mask |= _PAGE_GLOBAL;
    }
    if (use_gbpages)
        page_size_mask |= 1 << PG_LEVEL_1G;
    if (use_pse)
        page_size_mask |= 1 << PG_LEVEL_2M;
    memset (mr, 0, sizeof (mr));
    nr_range = 0;
    start_pfn = start >> PAGE_SHIFT;
    pos = start_pfn << PAGE_SHIFT;
    end_pfn = ((pos + (PMD_SIZE - 1)) >> PMD_SHIFT) << (PMD_SHIFT - PAGE_SHIFT);
    if (end_pfn > (end >> PAGE_SHIFT))
        end_pfn = end >> PAGE_SHIFT;
    if (start_pfn < end_pfn) {
        nr_range = save_mr (mr, nr_range, start_pfn, end_pfn, 0);
        pos = end_pfn << PAGE_SHIFT;
    }
    start_pfn = ((pos + (PMD_SIZE - 1)) >> PMD_SHIFT) << (PMD_SHIFT - PAGE_SHIFT);
    end_pfn = ((pos + (PUD_SIZE - 1)) >> PUD_SHIFT) << (PUD_SHIFT - PAGE_SHIFT);
    if (end_pfn > ((end >> PMD_SHIFT) << (PMD_SHIFT - PAGE_SHIFT)))
        end_pfn = ((end >> PMD_SHIFT) << (PMD_SHIFT - PAGE_SHIFT));
    if (start_pfn < end_pfn) {
        nr_range = save_mr (mr, nr_range, start_pfn, end_pfn, page_size_mask &(1 << PG_LEVEL_2M));
        pos = end_pfn << PAGE_SHIFT;
    }
    start_pfn = pos >> PAGE_SHIFT;
    end_pfn = end >> PAGE_SHIFT;
    nr_range = save_mr (mr, nr_range, start_pfn, end_pfn, 0);
    for (i = 0; nr_range > 1 && i < nr_range - 1; i++) {
        unsigned long old_start;
        if (mr[i].end != mr[i + 1].start || mr[i].page_size_mask != mr[i + 1].page_size_mask)
            continue;
        old_start = mr[i].start;
        memmove (& mr [i], & mr [i + 1], (nr_range - 1 - i) * sizeof (struct map_range));
        mr[i--].start = old_start;
        nr_range--;
    }
    for (i = 0; i < nr_range; i++)
        printk (KERN_DEBUG " %010lx - %010lx page %s\n", mr[i].start, mr[i].end, (mr[i].page_size_mask & (1 << PG_LEVEL_1G)) ? "1G" : ((mr[i].page_size_mask & (1 << PG_LEVEL_2M)) ? "2M" : "4k"));
    if (!after_bootmem)
        find_early_table_space (end, use_pse, use_gbpages);
    for (i = 0; i < nr_range; i++)
        ret = kernel_physical_mapping_init (mr[i].start, mr[i].end, mr[i].page_size_mask);
    __flush_tlb_all ();
    if (!after_bootmem && e820_table_end > e820_table_start)
        reserve_early (e820_table_start << PAGE_SHIFT, e820_table_end << PAGE_SHIFT, "PGTABLE");
    if (!after_bootmem)
        early_memtest (start, end);
    return ret >> PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="221" endline="224">
{
    set_in_cr4 (X86_CR4_PGE);
    __supported_pte_mask |= _PAGE_GLOBAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="255" endline="258">
{
    nr_range = save_mr (mr, nr_range, start_pfn, end_pfn, 0);
    pos = end_pfn << PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="272" endline="276">
{
    nr_range = save_mr (mr, nr_range, start_pfn, end_pfn, page_size_mask &(1 << PG_LEVEL_2M));
    pos = end_pfn << PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="307" endline="318">
{
    unsigned long old_start;
    if (mr[i].end != mr[i + 1].start || mr[i].page_size_mask != mr[i + 1].page_size_mask)
        continue;
    old_start = mr[i].start;
    memmove (& mr [i], & mr [i + 1], (nr_range - 1 - i) * sizeof (struct map_range));
    mr[i--].start = old_start;
    nr_range--;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="396" endline="404">
{
    if (pagenr <= 256)
        return 1;
    if (iomem_is_exclusive (pagenr << PAGE_SHIFT))
        return 0;
    if (!page_is_ram (pagenr))
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="407" endline="441">
{
    unsigned long addr = begin;
    if (addr >= end)
        return;
    set_memory_rw (begin, (end - begin) >> PAGE_SHIFT);
    printk (KERN_INFO "Freeing %s: %luk freed\n", what, (end - begin) >> 10);
    for (; addr < end; addr += PAGE_SIZE) {
        ClearPageReserved (virt_to_page (addr));
        init_page_count (virt_to_page (addr));
        memset ((void *) (addr & ~ (PAGE_SIZE - 1)), POISON_FREE_INITMEM, PAGE_SIZE);
        free_page (addr);
        totalram_pages++;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="432" endline="439">
{
    ClearPageReserved (virt_to_page (addr));
    init_page_count (virt_to_page (addr));
    memset ((void *) (addr & ~ (PAGE_SIZE - 1)), POISON_FREE_INITMEM, PAGE_SIZE);
    free_page (addr);
    totalram_pages++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/init.c.ifdefed" startline="444" endline="448">
{
    free_init_pages ("unused kernel memory", (unsigned long) (& __init_begin), (unsigned long) (& __init_end));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="10" endline="12">
{
    return (pte_t *) __get_free_page (PGALLOC_GFP);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="15" endline="26">
{
    struct page *pte;
    pte = alloc_pages (PGALLOC_GFP, 0);
    if (pte)
        pgtable_page_ctor (pte);
    return pte;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="29" endline="33">
{
    pgtable_page_dtor (pte);
    paravirt_release_pte (page_to_pfn (pte));
    tlb_remove_page (tlb, pte);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="52" endline="56">
{
    struct page *page = virt_to_page (pgd);
    list_add (& page -> lru, & pgd_list);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="59" endline="63">
{
    struct page *page = virt_to_page (pgd);
    list_del (& page -> lru);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="69" endline="88">
{
    if (PAGETABLE_LEVELS == 2 || (PAGETABLE_LEVELS == 3 && SHARED_KERNEL_PMD) || PAGETABLE_LEVELS == 4) {
        clone_pgd_range (pgd + KERNEL_PGD_BOUNDARY, swapper_pg_dir + KERNEL_PGD_BOUNDARY, KERNEL_PGD_PTRS);
        paravirt_alloc_pmd_clone (__pa (pgd) >> PAGE_SHIFT, __pa (swapper_pg_dir) >> PAGE_SHIFT, KERNEL_PGD_BOUNDARY, KERNEL_PGD_PTRS);
    }
    if (!SHARED_KERNEL_PMD)
        pgd_list_add (pgd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="75" endline="83">
{
    clone_pgd_range (pgd + KERNEL_PGD_BOUNDARY, swapper_pg_dir + KERNEL_PGD_BOUNDARY, KERNEL_PGD_PTRS);
    paravirt_alloc_pmd_clone (__pa (pgd) >> PAGE_SHIFT, __pa (swapper_pg_dir) >> PAGE_SHIFT, KERNEL_PGD_BOUNDARY, KERNEL_PGD_PTRS);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="91" endline="100">
{
    unsigned long flags;
    if (SHARED_KERNEL_PMD)
        return;
    spin_lock_irqsave (& pgd_lock, flags);
    pgd_list_del (pgd);
    spin_unlock_irqrestore (& pgd_lock, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="152" endline="158">
{
    int i;
    for (i = 0; i < PREALLOCATED_PMDS; i++)
        if (pmds[i])
            free_page ((unsigned long) pmds[i]);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="161" endline="178">
{
    int i;
    bool failed = false;
    for (i = 0; i < PREALLOCATED_PMDS; i++) {
        pmd_t *pmd = (pmd_t *) __get_free_page (PGALLOC_GFP);
        if (pmd == NULL)
            failed = true;
        pmds[i] = pmd;
    }
    if (failed) {
        free_pmds (pmds);
        return -ENOMEM;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="165" endline="170">
{
    pmd_t *pmd = (pmd_t *) __get_free_page (PGALLOC_GFP);
    if (pmd == NULL)
        failed = true;
    pmds[i] = pmd;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="172" endline="175">
{
    free_pmds (pmds);
    return -ENOMEM;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="187" endline="202">
{
    int i;
    for (i = 0; i < PREALLOCATED_PMDS; i++) {
        pgd_t pgd = pgdp[i];
        if (pgd_val (pgd) != 0) {
            pmd_t *pmd = (pmd_t *) pgd_page_vaddr (pgd);
            pgdp[i] = native_make_pgd (0);
            paravirt_release_pmd (pgd_val (pgd) >> PAGE_SHIFT);
            pmd_free (mm, pmd);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="190" endline="201">
{
    pgd_t pgd = pgdp[i];
    if (pgd_val (pgd) != 0) {
        pmd_t *pmd = (pmd_t *) pgd_page_vaddr (pgd);
        pgdp[i] = native_make_pgd (0);
        paravirt_release_pmd (pgd_val (pgd) >> PAGE_SHIFT);
        pmd_free (mm, pmd);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="193" endline="200">
{
    pmd_t *pmd = (pmd_t *) pgd_page_vaddr (pgd);
    pgdp[i] = native_make_pgd (0);
    paravirt_release_pmd (pgd_val (pgd) >> PAGE_SHIFT);
    pmd_free (mm, pmd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="205" endline="225">
{
    pud_t *pud;
    unsigned long addr;
    int i;
    if (PREALLOCATED_PMDS == 0)
        return;
    pud = pud_offset (pgd, 0);
    for (addr = i = 0; i < PREALLOCATED_PMDS; i++, pud++, addr += PUD_SIZE) {
        pmd_t *pmd = pmds[i];
        if (i >= KERNEL_PGD_BOUNDARY)
            memcpy (pmd, (pmd_t *) pgd_page_vaddr (swapper_pg_dir[i]), sizeof (pmd_t) * PTRS_PER_PMD);
        pud_populate (mm, pud, pmd);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="216" endline="224">
{
    pmd_t *pmd = pmds[i];
    if (i >= KERNEL_PGD_BOUNDARY)
        memcpy (pmd, (pmd_t *) pgd_page_vaddr (swapper_pg_dir[i]), sizeof (pmd_t) * PTRS_PER_PMD);
    pud_populate (mm, pud, pmd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="228" endline="266">
{
    pgd_t *pgd;
    pmd_t *pmds [PREALLOCATED_PMDS];
    unsigned long flags;
    pgd = (pgd_t *) __get_free_page (PGALLOC_GFP);
    if (pgd == NULL)
        goto out;
    mm->pgd = pgd;
    if (preallocate_pmds (pmds) != 0)
        goto out_free_pgd;
    if (paravirt_pgd_alloc (mm) != 0)
        goto out_free_pmds;
    spin_lock_irqsave (& pgd_lock, flags);
    pgd_ctor (pgd);
    pgd_prepopulate_pmd (mm, pgd, pmds);
    spin_unlock_irqrestore (& pgd_lock, flags);
    return pgd;
out_free_pmds :
    free_pmds (pmds);
out_free_pgd :
    free_page ((unsigned long) pgd);
out :
    return NULL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="269" endline="274">
{
    pgd_mop_up_pmds (mm, pgd);
    pgd_dtor (pgd);
    paravirt_pgd_free (mm, pgd);
    free_page ((unsigned long) pgd);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="279" endline="289">
{
    int changed = !pte_same (*ptep, entry);
    if (changed && dirty) {
        *ptep = entry;
        pte_update_defer (vma -> vm_mm, address, ptep);
        flush_tlb_page (vma, address);
    }
    return changed;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="282" endline="286">
{
    *ptep = entry;
    pte_update_defer (vma -> vm_mm, address, ptep);
    flush_tlb_page (vma, address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="293" endline="304">
{
    int ret = 0;
    if (pte_young (*ptep))
        ret = test_and_clear_bit (_PAGE_BIT_ACCESSED, (unsigned long *) &ptep->pte);
    if (ret)
        pte_update (vma->vm_mm, addr, ptep);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="308" endline="316">
{
    int young;
    young = ptep_test_and_clear_young (vma, address, ptep);
    if (young)
        flush_tlb_page (vma, address);
    return young;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="326" endline="333">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="338" endline="347">
{
    unsigned long address = __fix_to_virt (idx);
    if (idx >= __end_of_fixed_addresses) {
        BUG ();
        return;
    }
    set_pte_vaddr (address, pte);
    fixmaps_set++;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="341" endline="344">
{
    BUG ();
    return;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pgtable.c.ifdefed" startline="351" endline="353">
{
    __native_set_fixmap (idx, pfn_pte (phys >> PAGE_SHIFT, flags));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="90" endline="90">
{
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="115" endline="117">
{
    return addr >= start && addr < end;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="132" endline="145">
{
    void *vend = vaddr + size - 1;
    mb ();
    for (; vaddr < vend; vaddr += boot_cpu_data.x86_clflush_size)
        clflush (vaddr);
    clflush (vend);
    mb ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="148" endline="159">
{
    unsigned long cache = (unsigned long) arg;
    __flush_tlb_all ();
    if (cache && boot_cpu_data.x86 >= 4)
        wbinvd ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="162" endline="166">
{
    BUG_ON (irqs_disabled ());
    on_each_cpu (__cpa_flush_all, (void *) cache, 1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="169" endline="176">
{
    __flush_tlb_all ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="179" endline="206">
{
    unsigned int i, level;
    unsigned long addr;
    BUG_ON (irqs_disabled ());
    WARN_ON (PAGE_ALIGN (start) != start);
    on_each_cpu (__cpa_flush_range, NULL, 1);
    if (!cache)
        return;
    for (i = 0, addr = start; i < numpages; i++, addr += PAGE_SIZE) {
        pte_t *pte = lookup_address (addr, &level);
        if (pte && (pte_val (*pte) & _PAGE_PRESENT))
            clflush_cache_range ((void *) addr, PAGE_SIZE);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="197" endline="205">
{
    pte_t *pte = lookup_address (addr, &level);
    if (pte && (pte_val (*pte) & _PAGE_PRESENT))
        clflush_cache_range ((void *) addr, PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="210" endline="244">
{
    unsigned int i, level;
    unsigned long do_wbinvd = cache && numpages >= 1024;
    BUG_ON (irqs_disabled ());
    on_each_cpu (__cpa_flush_all, (void *) do_wbinvd, 1);
    if (!cache || do_wbinvd)
        return;
    for (i = 0; i < numpages; i++) {
        unsigned long addr;
        pte_t *pte;
        if (in_flags & CPA_PAGES_ARRAY)
            addr = (unsigned long) page_address (pages[i]);
        else
            addr = start[i];
        pte = lookup_address (addr, &level);
        if (pte && (pte_val (*pte) & _PAGE_PRESENT))
            clflush_cache_range ((void *) addr, PAGE_SIZE);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="227" endline="243">
{
    unsigned long addr;
    pte_t *pte;
    if (in_flags & CPA_PAGES_ARRAY)
        addr = (unsigned long) page_address (pages[i]);
    else
        addr = start[i];
    pte = lookup_address (addr, &level);
    if (pte && (pte_val (*pte) & _PAGE_PRESENT))
        clflush_cache_range ((void *) addr, PAGE_SIZE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="254" endline="283">
{
    pgprot_t forbidden = __pgprot (0);
    if (within (pfn, BIOS_BEGIN >> PAGE_SHIFT, BIOS_END >> PAGE_SHIFT))
        pgprot_val (forbidden) |= _PAGE_NX;
    if (within (address, (unsigned long) _text, (unsigned long) _etext))
        pgprot_val (forbidden) |= _PAGE_NX;
    if (within (pfn, __pa ((unsigned long) __start_rodata) >> PAGE_SHIFT, __pa ((unsigned long) __end_rodata) >> PAGE_SHIFT))
        pgprot_val (forbidden) |= _PAGE_RW;
    prot = __pgprot (pgprot_val (prot) &~pgprot_val (forbidden));
    return prot;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="294" endline="323">
{
    pgd_t *pgd = pgd_offset_k (address);
    pud_t *pud;
    pmd_t *pmd;
    *level = PG_LEVEL_NONE;
    if (pgd_none (*pgd))
        return NULL;
    pud = pud_offset (pgd, address);
    if (pud_none (*pud))
        return NULL;
    *level = PG_LEVEL_1G;
    if (pud_large (*pud) || !pud_present (*pud))
        return (pte_t *) pud;
    pmd = pmd_offset (pud, address);
    if (pmd_none (*pmd))
        return NULL;
    *level = PG_LEVEL_2M;
    if (pmd_large (*pmd) || !pmd_present (*pmd))
        return (pte_t *) pmd;
    *level = PG_LEVEL_4K;
    return pte_offset_kernel (pmd, address);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="330" endline="349">
{
    set_pte_atomic (kpte, pte);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="354" endline="462">
{
    unsigned long nextpage_addr, numpages, pmask, psize, flags, addr, pfn;
    pte_t new_pte, old_pte, *tmp;
    pgprot_t old_prot, new_prot;
    int i, do_split = 1;
    unsigned int level;
    if (cpa->force_split)
        return 1;
    spin_lock_irqsave (& pgd_lock, flags);
    tmp = lookup_address (address, &level);
    if (tmp != kpte)
        goto out_unlock;
    switch (level) {
    case PG_LEVEL_2M :
        psize = PMD_PAGE_SIZE;
        pmask = PMD_PAGE_MASK;
        break;
    default :
        do_split = -EINVAL;
        goto out_unlock;
    }
    nextpage_addr = (address + psize) & pmask;
    numpages = (nextpage_addr - address) >> PAGE_SHIFT;
    if (numpages < cpa->numpages)
        cpa->numpages = numpages;
    old_pte = *kpte;
    old_prot = new_prot = pte_pgprot (old_pte);
    pgprot_val (new_prot) &= ~pgprot_val (cpa->mask_clr);
    pgprot_val (new_prot) |= pgprot_val (cpa->mask_set);
    pfn = pte_pfn (old_pte) + ((address & (psize - 1)) >> PAGE_SHIFT);
    cpa->pfn = pfn;
    new_prot = static_protections (new_prot, address, pfn);
    addr = address + PAGE_SIZE;
    pfn++;
    for (i = 1; i < cpa->numpages; i++, addr += PAGE_SIZE, pfn++) {
        pgprot_t chk_prot = static_protections (new_prot, addr, pfn);
        if (pgprot_val (chk_prot) != pgprot_val (new_prot))
            goto out_unlock;
    }
    if (pgprot_val (new_prot) == pgprot_val (old_prot)) {
        do_split = 0;
        goto out_unlock;
    }
    if (address == (nextpage_addr - psize) && cpa->numpages == numpages) {
        new_pte = pfn_pte (pte_pfn (old_pte), canon_pgprot (new_prot));
        __set_pmd_pte (kpte, address, new_pte);
        cpa->flags |= CPA_FLUSHTLB;
        do_split = 0;
    }
out_unlock :
    spin_unlock_irqrestore (&pgd_lock, flags);
    return do_split;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="373" endline="387">
{
case PG_LEVEL_2M :
    psize = PMD_PAGE_SIZE;
    pmask = PMD_PAGE_MASK;
    break;
default :
    do_split = -EINVAL;
    goto out_unlock;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="423" endline="428">
{
    pgprot_t chk_prot = static_protections (new_prot, addr, pfn);
    if (pgprot_val (chk_prot) != pgprot_val (new_prot))
        goto out_unlock;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="434" endline="437">
{
    do_split = 0;
    goto out_unlock;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="447" endline="456">
{
    new_pte = pfn_pte (pte_pfn (old_pte), canon_pgprot (new_prot));
    __set_pmd_pte (kpte, address, new_pte);
    cpa->flags |= CPA_FLUSHTLB;
    do_split = 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="465" endline="555">
{
    unsigned long flags, pfn, pfninc = 1;
    unsigned int i, level;
    pte_t *pbase, *tmp;
    pgprot_t ref_prot;
    struct page *base;
    if (!debug_pagealloc)
        spin_unlock (&cpa_lock);
    base = alloc_pages (GFP_KERNEL | __GFP_NOTRACK, 0);
    if (!debug_pagealloc)
        spin_lock (&cpa_lock);
    if (!base)
        return -ENOMEM;
    spin_lock_irqsave (& pgd_lock, flags);
    tmp = lookup_address (address, &level);
    if (tmp != kpte)
        goto out_unlock;
    pbase = (pte_t *) page_address (base);
    paravirt_alloc_pte (& init_mm, page_to_pfn (base));
    ref_prot = pte_pgprot (pte_clrhuge (*kpte));
    WARN_ON_ONCE (pgprot_val (ref_prot) & _PAGE_PAT_LARGE);
    pfn = pte_pfn (*kpte);
    for (i = 0; i < PTRS_PER_PTE; i++, pfn += pfninc)
        set_pte (&pbase[i], pfn_pte (pfn, ref_prot));
    if (address >= (unsigned long) __va (0) && address < (unsigned long) __va (max_low_pfn_mapped << PAGE_SHIFT))
        split_page_count (level);
    __set_pmd_pte (kpte, address, mk_pte (base, __pgprot (_KERNPG_TABLE)));
    __flush_tlb_all ();
    base = NULL;
out_unlock :
    if (base)
        __free_page (base);
    spin_unlock_irqrestore (& pgd_lock, flags);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="559" endline="585">
{
    if (!primary)
        return 0;
    if (within (vaddr, PAGE_OFFSET, PAGE_OFFSET +(max_pfn_mapped << PAGE_SHIFT))) {
        cpa->numpages = 1;
        cpa->pfn = __pa (vaddr) >> PAGE_SHIFT;
        return 0;
    }
    else {
        WARN (1, KERN_WARNING "CPA: called for zero pte. " "vaddr = %lx cpa->vaddr = %lx\n", vaddr, * cpa -> vaddr);
        return -EFAULT;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="574" endline="578">
{
    cpa->numpages = 1;
    cpa->pfn = __pa (vaddr) >> PAGE_SHIFT;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="578" endline="584">
{
    WARN (1, KERN_WARNING "CPA: called for zero pte. " "vaddr = %lx cpa->vaddr = %lx\n", vaddr, * cpa -> vaddr);
    return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="588" endline="681">
{
    unsigned long address;
    int do_split, err;
    unsigned int level;
    pte_t *kpte, old_pte;
    if (cpa->flags & CPA_PAGES_ARRAY) {
        struct page *page = cpa->pages[cpa->curpage];
        if (unlikely (PageHighMem (page)))
            return 0;
        address = (unsigned long) page_address (page);
    }
    else if (cpa->flags & CPA_ARRAY)
        address = cpa->vaddr[cpa->curpage];
    else
        address = *cpa->vaddr;
repeat :
    kpte = lookup_address (address, &level);
    if (!kpte)
        return __cpa_process_fault (cpa, address, primary);
    old_pte = *kpte;
    if (!pte_val (old_pte))
        return __cpa_process_fault (cpa, address, primary);
    if (level == PG_LEVEL_4K) {
        pte_t new_pte;
        pgprot_t new_prot = pte_pgprot (old_pte);
        unsigned long pfn = pte_pfn (old_pte);
        pgprot_val (new_prot) &= ~pgprot_val (cpa->mask_clr);
        pgprot_val (new_prot) |= pgprot_val (cpa->mask_set);
        new_prot = static_protections (new_prot, address, pfn);
        new_pte = pfn_pte (pfn, canon_pgprot (new_prot));
        cpa->pfn = pfn;
        if (pte_val (old_pte) != pte_val (new_pte)) {
            set_pte_atomic (kpte, new_pte);
            cpa->flags |= CPA_FLUSHTLB;
        }
        cpa->numpages = 1;
        return 0;
    }
    do_split = try_preserve_large_page (kpte, address, cpa);
    if (do_split <= 0)
        return do_split;
    err = split_large_page (kpte, address);
    if (!err) {
        flush_tlb_all ();
        goto repeat;
    }
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="594" endline="599">
{
    struct page *page = cpa->pages[cpa->curpage];
    if (unlikely (PageHighMem (page)))
        return 0;
    address = (unsigned long) page_address (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="612" endline="638">
{
    pte_t new_pte;
    pgprot_t new_prot = pte_pgprot (old_pte);
    unsigned long pfn = pte_pfn (old_pte);
    pgprot_val (new_prot) &= ~pgprot_val (cpa->mask_clr);
    pgprot_val (new_prot) |= pgprot_val (cpa->mask_set);
    new_prot = static_protections (new_prot, address, pfn);
    new_pte = pfn_pte (pfn, canon_pgprot (new_prot));
    cpa->pfn = pfn;
    if (pte_val (old_pte) != pte_val (new_pte)) {
        set_pte_atomic (kpte, new_pte);
        cpa->flags |= CPA_FLUSHTLB;
    }
    cpa->numpages = 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="632" endline="635">
{
    set_pte_atomic (kpte, new_pte);
    cpa->flags |= CPA_FLUSHTLB;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="657" endline="678">
{
    flush_tlb_all ();
    goto repeat;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="686" endline="766">
{
    struct cpa_data alias_cpa;
    unsigned long laddr = (unsigned long) __va (cpa->pfn << PAGE_SHIFT);
    unsigned long vaddr, remapped;
    int ret;
    if (cpa->pfn >= max_pfn_mapped)
        return 0;
    if (cpa->flags & CPA_PAGES_ARRAY) {
        struct page *page = cpa->pages[cpa->curpage];
        if (unlikely (PageHighMem (page)))
            return 0;
        vaddr = (unsigned long) page_address (page);
    }
    else if (cpa->flags & CPA_ARRAY)
        vaddr = cpa->vaddr[cpa->curpage];
    else
        vaddr = *cpa->vaddr;
    if (!(within (vaddr, PAGE_OFFSET, PAGE_OFFSET +(max_pfn_mapped << PAGE_SHIFT)))) {
        alias_cpa = *cpa;
        alias_cpa.vaddr = &laddr;
        alias_cpa.flags &= ~(CPA_PAGES_ARRAY | CPA_ARRAY);
        ret = __change_page_attr_set_clr (&alias_cpa, 0);
        if (ret)
            return ret;
    }
    remapped = (unsigned long) pcpu_lpage_remapped ((void *) laddr);
    if (remapped) {
        WARN_ON (cpa -> numpages > 1);
        alias_cpa = *cpa;
        alias_cpa.vaddr = &remapped;
        alias_cpa.flags &= ~(CPA_PAGES_ARRAY | CPA_ARRAY);
        ret = __change_page_attr_set_clr (&alias_cpa, 0);
        if (ret)
            return ret;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="703" endline="708">
{
    struct page *page = cpa->pages[cpa->curpage];
    if (unlikely (PageHighMem (page)))
        return 0;
    vaddr = (unsigned long) page_address (page);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="714" endline="723">
{
    alias_cpa = *cpa;
    alias_cpa.vaddr = &laddr;
    alias_cpa.flags &= ~(CPA_PAGES_ARRAY | CPA_ARRAY);
    ret = __change_page_attr_set_clr (&alias_cpa, 0);
    if (ret)
        return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="755" endline="763">
{
    WARN_ON (cpa -> numpages > 1);
    alias_cpa = *cpa;
    alias_cpa.vaddr = &remapped;
    alias_cpa.flags &= ~(CPA_PAGES_ARRAY | CPA_ARRAY);
    ret = __change_page_attr_set_clr (&alias_cpa, 0);
    if (ret)
        return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="769" endline="810">
{
    int ret, numpages = cpa->numpages;
    while (numpages) {
        cpa->numpages = numpages;
        if (cpa->flags & (CPA_ARRAY | CPA_PAGES_ARRAY))
            cpa->numpages = 1;
        if (!debug_pagealloc)
            spin_lock (&cpa_lock);
        ret = __change_page_attr (cpa, checkalias);
        if (!debug_pagealloc)
            spin_unlock (&cpa_lock);
        if (ret)
            return ret;
        if (checkalias) {
            ret = cpa_process_alias (cpa);
            if (ret)
                return ret;
        }
        BUG_ON (cpa -> numpages > numpages);
        numpages -= cpa->numpages;
        if (cpa->flags & (CPA_PAGES_ARRAY | CPA_ARRAY))
            cpa->curpage++;
        else
            *cpa->vaddr += cpa->numpages * PAGE_SIZE;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="772" endline="808">
{
    cpa->numpages = numpages;
    if (cpa->flags & (CPA_ARRAY | CPA_PAGES_ARRAY))
        cpa->numpages = 1;
    if (!debug_pagealloc)
        spin_lock (&cpa_lock);
    ret = __change_page_attr (cpa, checkalias);
    if (!debug_pagealloc)
        spin_unlock (&cpa_lock);
    if (ret)
        return ret;
    if (checkalias) {
        ret = cpa_process_alias (cpa);
        if (ret)
            return ret;
    }
    BUG_ON (cpa -> numpages > numpages);
    numpages -= cpa->numpages;
    if (cpa->flags & (CPA_PAGES_ARRAY | CPA_ARRAY))
        cpa->curpage++;
    else
        *cpa->vaddr += cpa->numpages * PAGE_SIZE;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="790" endline="794">
{
    ret = cpa_process_alias (cpa);
    if (ret)
        return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="813" endline="816">
{
    return pgprot_val (attr) & (_PAGE_PAT | _PAGE_PAT_LARGE | _PAGE_PWT | _PAGE_PCD);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="822" endline="909">
{
    struct cpa_data cpa;
    int ret, cache, checkalias;
    mask_set = canon_pgprot (mask_set);
    mask_clr = canon_pgprot (mask_clr);
    if (!pgprot_val (mask_set) && !pgprot_val (mask_clr) && !force_split)
        return 0;
    if (in_flag & CPA_ARRAY) {
        int i;
        for (i = 0; i < numpages; i++) {
            if (addr[i] & ~PAGE_MASK) {
                addr[i] &= PAGE_MASK;
                WARN_ON_ONCE (1);
            }
        }
    }
    else if (!(in_flag & CPA_PAGES_ARRAY)) {
        if (*addr & ~PAGE_MASK) {
            *addr &= PAGE_MASK;
            WARN_ON_ONCE (1);
        }
    }
    kmap_flush_unused ();
    vm_unmap_aliases ();
    cpa.vaddr = addr;
    cpa.pages = pages;
    cpa.numpages = numpages;
    cpa.mask_set = mask_set;
    cpa.mask_clr = mask_clr;
    cpa.flags = 0;
    cpa.curpage = 0;
    cpa.force_split = force_split;
    if (in_flag & (CPA_ARRAY | CPA_PAGES_ARRAY))
        cpa.flags |= in_flag;
    checkalias = (pgprot_val (mask_set) | pgprot_val (mask_clr)) != _PAGE_NX;
    ret = __change_page_attr_set_clr (&cpa, checkalias);
    if (!(cpa.flags & CPA_FLUSHTLB))
        goto out;
    cache = cache_attr (mask_set);
    if (!ret && cpu_has_clflush) {
        if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY)) {
            cpa_flush_array (addr, numpages, cache, cpa.flags, pages);
        }
        else
            cpa_flush_range (*addr, numpages, cache);
    }
    else
        cpa_flush_all (cache);
out :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="836" endline="844">
{
    int i;
    for (i = 0; i < numpages; i++) {
        if (addr[i] & ~PAGE_MASK) {
            addr[i] &= PAGE_MASK;
            WARN_ON_ONCE (1);
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="838" endline="843">
{
    if (addr[i] & ~PAGE_MASK) {
        addr[i] &= PAGE_MASK;
        WARN_ON_ONCE (1);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="839" endline="842">
{
    addr[i] &= PAGE_MASK;
    WARN_ON_ONCE (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="844" endline="856">
{
    if (*addr & ~PAGE_MASK) {
        *addr &= PAGE_MASK;
        WARN_ON_ONCE (1);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="849" endline="855">
{
    *addr &= PAGE_MASK;
    WARN_ON_ONCE (1);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="898" endline="904">
{
    if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY)) {
        cpa_flush_array (addr, numpages, cache, cpa.flags, pages);
    }
    else
        cpa_flush_range (*addr, numpages, cache);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="899" endline="902">
{
    cpa_flush_array (addr, numpages, cache, cpa.flags, pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="913" endline="916">
{
    return change_page_attr_set_clr (addr, numpages, mask, __pgprot (0), 0, (array ? CPA_ARRAY : 0), NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="920" endline="923">
{
    return change_page_attr_set_clr (addr, numpages, __pgprot (0), mask, 0, (array ? CPA_ARRAY : 0), NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="927" endline="930">
{
    return change_page_attr_set_clr (NULL, numpages, mask, __pgprot (0), 0, CPA_PAGES_ARRAY, pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="934" endline="937">
{
    return change_page_attr_set_clr (NULL, numpages, __pgprot (0), mask, 0, CPA_PAGES_ARRAY, pages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="940" endline="946">
{
    return change_page_attr_set (&addr, numpages, __pgprot (_PAGE_CACHE_UC_MINUS), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="949" endline="970">
{
    int ret;
    ret = reserve_memtype (__pa (addr), __pa (addr) +numpages * PAGE_SIZE, _PAGE_CACHE_UC_MINUS, NULL);
    if (ret)
        goto out_err;
    ret = _set_memory_uc (addr, numpages);
    if (ret)
        goto out_free;
    return 0;
out_free :
    free_memtype (__pa (addr), __pa (addr) +numpages * PAGE_SIZE);
out_err :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="974" endline="1000">
{
    int i, j;
    int ret;
    for (i = 0; i < addrinarray; i++) {
        ret = reserve_memtype (__pa (addr[i]), __pa (addr[i]) + PAGE_SIZE, _PAGE_CACHE_UC_MINUS, NULL);
        if (ret)
            goto out_free;
    }
    ret = change_page_attr_set (addr, addrinarray, __pgprot (_PAGE_CACHE_UC_MINUS), 1);
    if (ret)
        goto out_free;
    return 0;
out_free :
    for (j = 0; j < i; j++)
        free_memtype (__pa (addr[j]), __pa (addr[j]) + PAGE_SIZE);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="981" endline="986">
{
    ret = reserve_memtype (__pa (addr[i]), __pa (addr[i]) + PAGE_SIZE, _PAGE_CACHE_UC_MINUS, NULL);
    if (ret)
        goto out_free;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1004" endline="1017">
{
    int ret;
    unsigned long addr_copy = addr;
    ret = change_page_attr_set (&addr, numpages, __pgprot (_PAGE_CACHE_UC_MINUS), 0);
    if (!ret) {
        ret = change_page_attr_set_clr (&addr_copy, numpages, __pgprot (_PAGE_CACHE_WC), __pgprot (_PAGE_CACHE_MASK), 0, 0, NULL);
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1010" endline="1015">
{
    ret = change_page_attr_set_clr (&addr_copy, numpages, __pgprot (_PAGE_CACHE_WC), __pgprot (_PAGE_CACHE_MASK), 0, 0, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1020" endline="1041">
{
    int ret;
    if (!pat_enabled)
        return set_memory_uc (addr, numpages);
    ret = reserve_memtype (__pa (addr), __pa (addr) +numpages * PAGE_SIZE, _PAGE_CACHE_WC, NULL);
    if (ret)
        goto out_err;
    ret = _set_memory_wc (addr, numpages);
    if (ret)
        goto out_free;
    return 0;
out_free :
    free_memtype (__pa (addr), __pa (addr) +numpages * PAGE_SIZE);
out_err :
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1045" endline="1048">
{
    return change_page_attr_clear (&addr, numpages, __pgprot (_PAGE_CACHE_MASK), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1051" endline="1060">
{
    int ret;
    ret = _set_memory_wb (addr, numpages);
    if (ret)
        return ret;
    free_memtype (__pa (addr), __pa (addr) + numpages * PAGE_SIZE);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1064" endline="1077">
{
    int i;
    int ret;
    ret = change_page_attr_clear (addr, addrinarray, __pgprot (_PAGE_CACHE_MASK), 1);
    if (ret)
        return ret;
    for (i = 0; i < addrinarray; i++)
        free_memtype (__pa (addr[i]), __pa (addr[i]) + PAGE_SIZE);
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1081" endline="1083">
{
    return change_page_attr_clear (&addr, numpages, __pgprot (_PAGE_NX), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1087" endline="1089">
{
    return change_page_attr_set (&addr, numpages, __pgprot (_PAGE_NX), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1093" endline="1095">
{
    return change_page_attr_clear (&addr, numpages, __pgprot (_PAGE_RW), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1099" endline="1101">
{
    return change_page_attr_set (&addr, numpages, __pgprot (_PAGE_RW), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1105" endline="1107">
{
    return change_page_attr_clear (&addr, numpages, __pgprot (_PAGE_PRESENT), 0);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1110" endline="1113">
{
    return change_page_attr_set_clr (&addr, numpages, __pgprot (0), __pgprot (0), 1, 0, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1116" endline="1120">
{
    unsigned long addr = (unsigned long) page_address (page);
    return set_memory_uc (addr, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1124" endline="1153">
{
    unsigned long start;
    unsigned long end;
    int i;
    int free_idx;
    for (i = 0; i < addrinarray; i++) {
        if (PageHighMem (pages[i]))
            continue;
        start = page_to_pfn (pages[i]) << PAGE_SHIFT;
        end = start + PAGE_SIZE;
        if (reserve_memtype (start, end, _PAGE_CACHE_UC_MINUS, NULL))
            goto err_out;
    }
    if (cpa_set_pages_array (pages, addrinarray, __pgprot (_PAGE_CACHE_UC_MINUS)) == 0) {
        return 0;
    }
err_out :
    free_idx = i;
    for (i = 0; i < free_idx; i++) {
        if (PageHighMem (pages[i]))
            continue;
        start = page_to_pfn (pages[i]) << PAGE_SHIFT;
        end = start + PAGE_SIZE;
        free_memtype (start, end);
    }
    return -EINVAL;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1130" endline="1137">
{
    if (PageHighMem (pages[i]))
        continue;
    start = page_to_pfn (pages[i]) << PAGE_SHIFT;
    end = start + PAGE_SIZE;
    if (reserve_memtype (start, end, _PAGE_CACHE_UC_MINUS, NULL))
        goto err_out;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1140" endline="1142">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1145" endline="1151">
{
    if (PageHighMem (pages[i]))
        continue;
    start = page_to_pfn (pages[i]) << PAGE_SHIFT;
    end = start + PAGE_SIZE;
    free_memtype (start, end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1157" endline="1161">
{
    unsigned long addr = (unsigned long) page_address (page);
    return set_memory_wb (addr, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1165" endline="1185">
{
    int retval;
    unsigned long start;
    unsigned long end;
    int i;
    retval = cpa_clear_pages_array (pages, addrinarray, __pgprot (_PAGE_CACHE_MASK));
    if (retval)
        return retval;
    for (i = 0; i < addrinarray; i++) {
        if (PageHighMem (pages[i]))
            continue;
        start = page_to_pfn (pages[i]) << PAGE_SHIFT;
        end = start + PAGE_SIZE;
        free_memtype (start, end);
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1176" endline="1182">
{
    if (PageHighMem (pages[i]))
        continue;
    start = page_to_pfn (pages[i]) << PAGE_SHIFT;
    end = start + PAGE_SIZE;
    free_memtype (start, end);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1189" endline="1193">
{
    unsigned long addr = (unsigned long) page_address (page);
    return set_memory_x (addr, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1197" endline="1201">
{
    unsigned long addr = (unsigned long) page_address (page);
    return set_memory_nx (addr, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1205" endline="1209">
{
    unsigned long addr = (unsigned long) page_address (page);
    return set_memory_ro (addr, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/pageattr.c.ifdefed" startline="1212" endline="1216">
{
    unsigned long addr = (unsigned long) page_address (page);
    return set_memory_rw (addr, numpages);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="23" endline="43">
{
    unsigned long saddr = ((idx - svma->vm_pgoff) << PAGE_SHIFT) + svma->vm_start;
    unsigned long sbase = saddr & PUD_MASK;
    unsigned long s_end = sbase + PUD_SIZE;
    unsigned long vm_flags = vma->vm_flags & ~VM_LOCKED;
    unsigned long svm_flags = svma->vm_flags & ~VM_LOCKED;
    if (pmd_index (addr) != pmd_index (saddr) || vm_flags != svm_flags || sbase < svma->vm_start || svma->vm_end < s_end)
        return 0;
    return saddr;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="46" endline="57">
{
    unsigned long base = addr & PUD_MASK;
    unsigned long end = base + PUD_SIZE;
    if (vma->vm_flags & VM_MAYSHARE && vma->vm_start <= base && end <= vma->vm_end)
        return 1;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="63" endline="102">
{
    struct vm_area_struct *vma = find_vma (mm, addr);
    struct address_space *mapping = vma->vm_file->f_mapping;
    pgoff_t idx = ((addr - vma->vm_start) >> PAGE_SHIFT) + vma->vm_pgoff;
    struct prio_tree_iter iter;
    struct vm_area_struct *svma;
    unsigned long saddr;
    pte_t *spte = NULL;
    if (!vma_shareable (vma, addr))
        return;
    spin_lock (& mapping -> i_mmap_lock);
    vma_prio_tree_foreach (svma, & iter, & mapping -> i_mmap, idx, idx)
    {
        if (svma == vma)
            continue;
        saddr = page_table_shareable (svma, vma, addr, idx);
        if (saddr) {
            spte = huge_pte_offset (svma->vm_mm, saddr);
            if (spte) {
                get_page (virt_to_page (spte));
                break;
            }
        }
    }
    if (!spte)
        goto out;
    spin_lock (& mm -> page_table_lock);
    if (pud_none (*pud))
        pud_populate (mm, pud, (pmd_t *) ((unsigned long) spte & PAGE_MASK));
    else
        put_page (virt_to_page (spte));
    spin_unlock (& mm -> page_table_lock);
out :
    spin_unlock (&mapping->i_mmap_lock);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="77" endline="89">
{
    if (svma == vma)
        continue;
    saddr = page_table_shareable (svma, vma, addr, idx);
    if (saddr) {
        spte = huge_pte_offset (svma->vm_mm, saddr);
        if (spte) {
            get_page (virt_to_page (spte));
            break;
        }
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="82" endline="88">
{
    spte = huge_pte_offset (svma->vm_mm, saddr);
    if (spte) {
        get_page (virt_to_page (spte));
        break;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="84" endline="87">
{
    get_page (virt_to_page (spte));
    break;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="117" endline="129">
{
    pgd_t *pgd = pgd_offset (mm, *addr);
    pud_t *pud = pud_offset (pgd, *addr);
    BUG_ON (page_count (virt_to_page (ptep)) == 0);
    if (page_count (virt_to_page (ptep)) == 1)
        return 0;
    pud_clear (pud);
    put_page (virt_to_page (ptep));
    *addr = ALIGN (*addr, HPAGE_SIZE *PTRS_PER_PTE) - HPAGE_SIZE;
    return 1;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="133" endline="153">
{
    pgd_t *pgd;
    pud_t *pud;
    pte_t *pte = NULL;
    pgd = pgd_offset (mm, addr);
    pud = pud_alloc (mm, pgd, addr);
    if (pud) {
        if (sz == PUD_SIZE) {
            pte = (pte_t *) pud;
        }
        else {
            BUG_ON (sz != PMD_SIZE);
            if (pud_none (*pud))
                huge_pmd_share (mm, addr, pud);
            pte = (pte_t *) pmd_alloc (mm, pud, addr);
        }
    }
    BUG_ON (pte && ! pte_none (* pte) && ! pte_huge (* pte));
    return pte;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="140" endline="149">
{
    if (sz == PUD_SIZE) {
        pte = (pte_t *) pud;
    }
    else {
        BUG_ON (sz != PMD_SIZE);
        if (pud_none (*pud))
            huge_pmd_share (mm, addr, pud);
        pte = (pte_t *) pmd_alloc (mm, pud, addr);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="141" endline="143">
{
    pte = (pte_t *) pud;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="143" endline="148">
{
    BUG_ON (sz != PMD_SIZE);
    if (pud_none (*pud))
        huge_pmd_share (mm, addr, pud);
    pte = (pte_t *) pmd_alloc (mm, pud, addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="156" endline="171">
{
    pgd_t *pgd;
    pud_t *pud;
    pmd_t *pmd = NULL;
    pgd = pgd_offset (mm, addr);
    if (pgd_present (*pgd)) {
        pud = pud_offset (pgd, addr);
        if (pud_present (*pud)) {
            if (pud_large (*pud))
                return (pte_t *) pud;
            pmd = pmd_offset (pud, addr);
        }
    }
    return (pte_t *) pmd;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="162" endline="169">
{
    pud = pud_offset (pgd, addr);
    if (pud_present (*pud)) {
        if (pud_large (*pud))
            return (pte_t *) pud;
        pmd = pmd_offset (pud, addr);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="164" endline="168">
{
    if (pud_large (*pud))
        return (pte_t *) pud;
    pmd = pmd_offset (pud, addr);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="220" endline="222">
{
    return ERR_PTR (-EINVAL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="225" endline="227">
{
    return !!(pmd_val (pmd) & _PAGE_PSE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="230" endline="232">
{
    return !!(pud_val (pud) & _PAGE_PSE);
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="237" endline="244">
{
    struct page *page;
    page = pte_page (*(pte_t*) pmd);
    if (page)
        page += ((address & ~PMD_MASK) >> PAGE_SHIFT);
    return page;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/hugetlbpage.c.ifdefed" startline="249" endline="256">
{
    struct page *page;
    page = pte_page (*(pte_t*) pud);
    if (page)
        page += ((address & ~PUD_MASK) >> PAGE_SHIFT);
    return page;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="45" endline="54">
{
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="57" endline="65">
{
    if (current->personality & ADDR_COMPAT_LAYOUT)
        return 1;
    if (current->signal->rlim[RLIMIT_STACK].rlim_cur == RLIM_INFINITY)
        return 1;
    return sysctl_legacy_va_layout;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="68" endline="82">
{
    unsigned long rnd = 0;
    if (current->flags & PF_RANDOMIZE) {
        if (mmap_is_ia32 ())
            rnd = (long) get_random_int () % (1 << 8);
        else
            rnd = (long) (get_random_int () % (1 << 28));
    }
    return rnd << PAGE_SHIFT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="75" endline="80">
{
    if (mmap_is_ia32 ())
        rnd = (long) get_random_int () % (1 << 8);
    else
        rnd = (long) (get_random_int () % (1 << 28));
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="85" endline="94">
{
    unsigned long gap = current->signal->rlim[RLIMIT_STACK].rlim_cur;
    if (gap < MIN_GAP)
        gap = MIN_GAP;
    else if (gap > MAX_GAP)
        gap = MAX_GAP;
    return PAGE_ALIGN (TASK_SIZE -gap - mmap_rnd ());
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="101" endline="106">
{
    if (mmap_is_ia32 ())
        return TASK_UNMAPPED_BASE;
    else
        return TASK_UNMAPPED_BASE + mmap_rnd ();
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="113" endline="123">
{
    if (mmap_is_legacy ()) {
        mm->mmap_base = mmap_legacy_base ();
        mm->get_unmapped_area = arch_get_unmapped_area;
        mm->unmap_area = arch_unmap_area;
    }
    else {
        mm->mmap_base = mmap_base ();
        mm->get_unmapped_area = arch_get_unmapped_area_topdown;
        mm->unmap_area = arch_unmap_area_topdown;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="114" endline="118">
{
    mm->mmap_base = mmap_legacy_base ();
    mm->get_unmapped_area = arch_get_unmapped_area;
    mm->unmap_area = arch_unmap_area;
}
</source>
<source file="/cmpt816/tmp/arch/x86/mm/mmap.c.ifdefed" startline="118" endline="122">
{
    mm->mmap_base = mmap_base ();
    mm->get_unmapped_area = arch_get_unmapped_area_topdown;
    mm->unmap_area = arch_unmap_area_topdown;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="56" endline="58">
{
    return sys_truncate (filename, ((loff_t) offset_high << 32) | offset_low);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="62" endline="64">
{
    return sys_ftruncate (fd, ((loff_t) offset_high << 32) | offset_low);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="71" endline="96">
{
    typeof (ubuf->st_uid) uid = 0;
    typeof (ubuf->st_gid) gid = 0;
    SET_UID (uid, stat -> uid);
    SET_GID (gid, stat -> gid);
    if (!access_ok (VERIFY_WRITE, ubuf, sizeof (struct stat64)) || __put_user (huge_encode_dev (stat->dev), &ubuf->st_dev) || __put_user (stat->ino, &ubuf->__st_ino) || __put_user (stat->ino, &ubuf->st_ino) || __put_user (stat->mode, &ubuf->st_mode) || __put_user (stat->nlink, &ubuf->st_nlink) || __put_user (uid, &ubuf->st_uid) || __put_user (gid, &ubuf->st_gid) || __put_user (huge_encode_dev (stat->rdev), &ubuf->st_rdev) || __put_user (stat->size, &ubuf->st_size) || __put_user (stat->atime.tv_sec, &ubuf->st_atime) || __put_user (stat->atime.tv_nsec, &ubuf->st_atime_nsec) || __put_user (stat->mtime.tv_sec, &ubuf->st_mtime) || __put_user (stat->mtime.tv_nsec, &ubuf->st_mtime_nsec) || __put_user (stat->ctime.tv_sec, &ubuf->st_ctime) || __put_user (stat->ctime.tv_nsec, &ubuf->st_ctime_nsec) || __put_user (stat->blksize, &ubuf->st_blksize) || __put_user (stat->blocks, &ubuf->st_blocks))
        return -EFAULT;
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="100" endline="107">
{
    struct kstat stat;
    int ret = vfs_stat (filename, &stat);
    if (!ret)
        ret = cp_stat64 (statbuf, &stat);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="111" endline="117">
{
    struct kstat stat;
    int ret = vfs_lstat (filename, &stat);
    if (!ret)
        ret = cp_stat64 (statbuf, &stat);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="120" endline="126">
{
    struct kstat stat;
    int ret = vfs_fstat (fd, &stat);
    if (!ret)
        ret = cp_stat64 (statbuf, &stat);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="130" endline="138">
{
    struct kstat stat;
    int error;
    error = vfs_fstatat (dfd, filename, &stat, flag);
    if (error)
        return error;
    return cp_stat64 (statbuf, &stat);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="156" endline="184">
{
    struct mmap_arg_struct a;
    struct file *file = NULL;
    unsigned long retval;
    struct mm_struct *mm;
    if (copy_from_user (&a, arg, sizeof (a)))
        return -EFAULT;
    if (a.offset & ~PAGE_MASK)
        return -EINVAL;
    if (!(a.flags & MAP_ANONYMOUS)) {
        file = fget (a.fd);
        if (!file)
            return -EBADF;
    }
    mm = current->mm;
    down_write (& mm -> mmap_sem);
    retval = do_mmap_pgoff (file, a.addr, a.len, a.prot, a.flags, a.offset >> PAGE_SHIFT);
    if (file)
        fput (file);
    up_write (& mm -> mmap_sem);
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="168" endline="172">
{
    file = fget (a.fd);
    if (!file)
        return -EBADF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="188" endline="190">
{
    return sys_mprotect (start, len, prot);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="193" endline="204">
{
    int retval;
    int fds [2];
    retval = do_pipe_flags (fds, 0);
    if (retval)
        goto out;
    if (copy_to_user (fd, fds, sizeof (fds)))
        retval = -EFAULT;
out :
    return retval;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="209" endline="280">
{
    struct k_sigaction new_ka, old_ka;
    int ret;
    compat_sigset_t set32;
    if (sigsetsize != sizeof (compat_sigset_t))
        return -EINVAL;
    if (act) {
        compat_uptr_t handler, restorer;
        if (!access_ok (VERIFY_READ, act, sizeof (*act)) || __get_user (handler, &act->sa_handler) || __get_user (new_ka.sa.sa_flags, &act->sa_flags) || __get_user (restorer, &act->sa_restorer) || __copy_from_user (&set32, &act->sa_mask, sizeof (compat_sigset_t)))
            return -EFAULT;
        new_ka.sa.sa_handler = compat_ptr (handler);
        new_ka.sa.sa_restorer = compat_ptr (restorer);
        switch (_NSIG_WORDS) {
        case 4 :
            new_ka.sa.sa_mask.sig[3] = set32.sig[6] | (((long) set32.sig[7]) << 32);
        case 3 :
            new_ka.sa.sa_mask.sig[2] = set32.sig[4] | (((long) set32.sig[5]) << 32);
        case 2 :
            new_ka.sa.sa_mask.sig[1] = set32.sig[2] | (((long) set32.sig[3]) << 32);
        case 1 :
            new_ka.sa.sa_mask.sig[0] = set32.sig[0] | (((long) set32.sig[1]) << 32);
        }
    }
    ret = do_sigaction (sig, act ? &new_ka : NULL, oact ? &old_ka : NULL);
    if (!ret && oact) {
        switch (_NSIG_WORDS) {
        case 4 :
            set32.sig[7] = (old_ka.sa.sa_mask.sig[3] >> 32);
            set32.sig[6] = old_ka.sa.sa_mask.sig[3];
        case 3 :
            set32.sig[5] = (old_ka.sa.sa_mask.sig[2] >> 32);
            set32.sig[4] = old_ka.sa.sa_mask.sig[2];
        case 2 :
            set32.sig[3] = (old_ka.sa.sa_mask.sig[1] >> 32);
            set32.sig[2] = old_ka.sa.sa_mask.sig[1];
        case 1 :
            set32.sig[1] = (old_ka.sa.sa_mask.sig[0] >> 32);
            set32.sig[0] = old_ka.sa.sa_mask.sig[0];
        }
        if (!access_ok (VERIFY_WRITE, oact, sizeof (*oact)) || __put_user (ptr_to_compat (old_ka.sa.sa_handler), &oact->sa_handler) || __put_user (ptr_to_compat (old_ka.sa.sa_restorer), &oact->sa_restorer) || __put_user (old_ka.sa.sa_flags, &oact->sa_flags) || __copy_to_user (&oact->sa_mask, &set32, sizeof (compat_sigset_t)))
            return -EFAULT;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="218" endline="245">
{
    compat_uptr_t handler, restorer;
    if (!access_ok (VERIFY_READ, act, sizeof (*act)) || __get_user (handler, &act->sa_handler) || __get_user (new_ka.sa.sa_flags, &act->sa_flags) || __get_user (restorer, &act->sa_restorer) || __copy_from_user (&set32, &act->sa_mask, sizeof (compat_sigset_t)))
        return -EFAULT;
    new_ka.sa.sa_handler = compat_ptr (handler);
    new_ka.sa.sa_restorer = compat_ptr (restorer);
    switch (_NSIG_WORDS) {
    case 4 :
        new_ka.sa.sa_mask.sig[3] = set32.sig[6] | (((long) set32.sig[7]) << 32);
    case 3 :
        new_ka.sa.sa_mask.sig[2] = set32.sig[4] | (((long) set32.sig[5]) << 32);
    case 2 :
        new_ka.sa.sa_mask.sig[1] = set32.sig[2] | (((long) set32.sig[3]) << 32);
    case 1 :
        new_ka.sa.sa_mask.sig[0] = set32.sig[0] | (((long) set32.sig[1]) << 32);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="235" endline="244">
{
case 4 :
    new_ka.sa.sa_mask.sig[3] = set32.sig[6] | (((long) set32.sig[7]) << 32);
case 3 :
    new_ka.sa.sa_mask.sig[2] = set32.sig[4] | (((long) set32.sig[5]) << 32);
case 2 :
    new_ka.sa.sa_mask.sig[1] = set32.sig[2] | (((long) set32.sig[3]) << 32);
case 1 :
    new_ka.sa.sa_mask.sig[0] = set32.sig[0] | (((long) set32.sig[1]) << 32);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="249" endline="277">
{
    switch (_NSIG_WORDS) {
    case 4 :
        set32.sig[7] = (old_ka.sa.sa_mask.sig[3] >> 32);
        set32.sig[6] = old_ka.sa.sa_mask.sig[3];
    case 3 :
        set32.sig[5] = (old_ka.sa.sa_mask.sig[2] >> 32);
        set32.sig[4] = old_ka.sa.sa_mask.sig[2];
    case 2 :
        set32.sig[3] = (old_ka.sa.sa_mask.sig[1] >> 32);
        set32.sig[2] = old_ka.sa.sa_mask.sig[1];
    case 1 :
        set32.sig[1] = (old_ka.sa.sa_mask.sig[0] >> 32);
        set32.sig[0] = old_ka.sa.sa_mask.sig[0];
    }
    if (!access_ok (VERIFY_WRITE, oact, sizeof (*oact)) || __put_user (ptr_to_compat (old_ka.sa.sa_handler), &oact->sa_handler) || __put_user (ptr_to_compat (old_ka.sa.sa_restorer), &oact->sa_restorer) || __put_user (old_ka.sa.sa_flags, &oact->sa_flags) || __copy_to_user (&oact->sa_mask, &set32, sizeof (compat_sigset_t)))
        return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="254" endline="267">
{
case 4 :
    set32.sig[7] = (old_ka.sa.sa_mask.sig[3] >> 32);
    set32.sig[6] = old_ka.sa.sa_mask.sig[3];
case 3 :
    set32.sig[5] = (old_ka.sa.sa_mask.sig[2] >> 32);
    set32.sig[4] = old_ka.sa.sa_mask.sig[2];
case 2 :
    set32.sig[3] = (old_ka.sa.sa_mask.sig[1] >> 32);
    set32.sig[2] = old_ka.sa.sa_mask.sig[1];
case 1 :
    set32.sig[1] = (old_ka.sa.sa_mask.sig[0] >> 32);
    set32.sig[0] = old_ka.sa.sa_mask.sig[0];
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="284" endline="319">
{
    struct k_sigaction new_ka, old_ka;
    int ret;
    if (act) {
        compat_old_sigset_t mask;
        compat_uptr_t handler, restorer;
        if (!access_ok (VERIFY_READ, act, sizeof (*act)) || __get_user (handler, &act->sa_handler) || __get_user (new_ka.sa.sa_flags, &act->sa_flags) || __get_user (restorer, &act->sa_restorer) || __get_user (mask, &act->sa_mask))
            return -EFAULT;
        new_ka.sa.sa_handler = compat_ptr (handler);
        new_ka.sa.sa_restorer = compat_ptr (restorer);
        siginitset (& new_ka.sa.sa_mask, mask);
    }
    ret = do_sigaction (sig, act ? &new_ka : NULL, oact ? &old_ka : NULL);
    if (!ret && oact) {
        if (!access_ok (VERIFY_WRITE, oact, sizeof (*oact)) || __put_user (ptr_to_compat (old_ka.sa.sa_handler), &oact->sa_handler) || __put_user (ptr_to_compat (old_ka.sa.sa_restorer), &oact->sa_restorer) || __put_user (old_ka.sa.sa_flags, &oact->sa_flags) || __put_user (old_ka.sa.sa_mask.sig[0], &oact->sa_mask))
            return -EFAULT;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="288" endline="303">
{
    compat_old_sigset_t mask;
    compat_uptr_t handler, restorer;
    if (!access_ok (VERIFY_READ, act, sizeof (*act)) || __get_user (handler, &act->sa_handler) || __get_user (new_ka.sa.sa_flags, &act->sa_flags) || __get_user (restorer, &act->sa_restorer) || __get_user (mask, &act->sa_mask))
        return -EFAULT;
    new_ka.sa.sa_handler = compat_ptr (handler);
    new_ka.sa.sa_restorer = compat_ptr (restorer);
    siginitset (& new_ka.sa.sa_mask, mask);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="307" endline="316">
{
    if (!access_ok (VERIFY_WRITE, oact, sizeof (*oact)) || __put_user (ptr_to_compat (old_ka.sa.sa_handler), &oact->sa_handler) || __put_user (ptr_to_compat (old_ka.sa.sa_restorer), &oact->sa_restorer) || __put_user (old_ka.sa.sa_flags, &oact->sa_flags) || __put_user (old_ka.sa.sa_mask.sig[0], &oact->sa_mask))
        return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="324" endline="359">
{
    sigset_t s;
    compat_sigset_t s32;
    int ret;
    mm_segment_t old_fs = get_fs ();
    if (set) {
        if (copy_from_user (&s32, set, sizeof (compat_sigset_t)))
            return -EFAULT;
        switch (_NSIG_WORDS) {
        case 4 :
            s.sig[3] = s32.sig[6] | (((long) s32.sig[7]) << 32);
        case 3 :
            s.sig[2] = s32.sig[4] | (((long) s32.sig[5]) << 32);
        case 2 :
            s.sig[1] = s32.sig[2] | (((long) s32.sig[3]) << 32);
        case 1 :
            s.sig[0] = s32.sig[0] | (((long) s32.sig[1]) << 32);
        }
    }
    set_fs (KERNEL_DS);
    ret = sys_rt_sigprocmask (how, set ? (sigset_t __user *) &s : NULL, oset ? (sigset_t __user *) &s : NULL, sigsetsize);
    set_fs (old_fs);
    if (ret)
        return ret;
    if (oset) {
        switch (_NSIG_WORDS) {
        case 4 :
            s32.sig[7] = (s.sig[3] >> 32);
            s32.sig[6] = s.sig[3];
        case 3 :
            s32.sig[5] = (s.sig[2] >> 32);
            s32.sig[4] = s.sig[2];
        case 2 :
            s32.sig[3] = (s.sig[1] >> 32);
            s32.sig[2] = s.sig[1];
        case 1 :
            s32.sig[1] = (s.sig[0] >> 32);
            s32.sig[0] = s.sig[0];
        }
        if (copy_to_user (oset, &s32, sizeof (compat_sigset_t)))
            return -EFAULT;
    }
    return 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="330" endline="339">
{
    if (copy_from_user (&s32, set, sizeof (compat_sigset_t)))
        return -EFAULT;
    switch (_NSIG_WORDS) {
    case 4 :
        s.sig[3] = s32.sig[6] | (((long) s32.sig[7]) << 32);
    case 3 :
        s.sig[2] = s32.sig[4] | (((long) s32.sig[5]) << 32);
    case 2 :
        s.sig[1] = s32.sig[2] | (((long) s32.sig[3]) << 32);
    case 1 :
        s.sig[0] = s32.sig[0] | (((long) s32.sig[1]) << 32);
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="333" endline="338">
{
case 4 :
    s.sig[3] = s32.sig[6] | (((long) s32.sig[7]) << 32);
case 3 :
    s.sig[2] = s32.sig[4] | (((long) s32.sig[5]) << 32);
case 2 :
    s.sig[1] = s32.sig[2] | (((long) s32.sig[3]) << 32);
case 1 :
    s.sig[0] = s32.sig[0] | (((long) s32.sig[1]) << 32);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="348" endline="357">
{
    switch (_NSIG_WORDS) {
    case 4 :
        s32.sig[7] = (s.sig[3] >> 32);
        s32.sig[6] = s.sig[3];
    case 3 :
        s32.sig[5] = (s.sig[2] >> 32);
        s32.sig[4] = s.sig[2];
    case 2 :
        s32.sig[3] = (s.sig[1] >> 32);
        s32.sig[2] = s.sig[1];
    case 1 :
        s32.sig[1] = (s.sig[0] >> 32);
        s32.sig[0] = s.sig[0];
    }
    if (copy_to_user (oset, &s32, sizeof (compat_sigset_t)))
        return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="349" endline="354">
{
case 4 :
    s32.sig[7] = (s.sig[3] >> 32);
    s32.sig[6] = s.sig[3];
case 3 :
    s32.sig[5] = (s.sig[2] >> 32);
    s32.sig[4] = s.sig[2];
case 2 :
    s32.sig[3] = (s.sig[1] >> 32);
    s32.sig[2] = s.sig[1];
case 1 :
    s32.sig[1] = (s.sig[0] >> 32);
    s32.sig[0] = s.sig[0];
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="362" endline="364">
{
    return alarm_setitimer (seconds);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="375" endline="382">
{
    struct sel_arg_struct a;
    if (copy_from_user (&a, arg, sizeof (a)))
        return -EFAULT;
    return compat_sys_select (a.n, compat_ptr (a.inp), compat_ptr (a.outp), compat_ptr (a.exp), compat_ptr (a.tvp));
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="386" endline="388">
{
    return compat_sys_wait4 (pid, stat_addr, options, NULL);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="393" endline="395">
{
    return sys_sysfs (option, arg1, arg2);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="399" endline="410">
{
    struct timespec t;
    int ret;
    mm_segment_t old_fs = get_fs ();
    set_fs (KERNEL_DS);
    ret = sys_sched_rr_get_interval (pid, (struct timespec __user *) &t);
    set_fs (old_fs);
    if (put_compat_timespec (&t, interval))
        return -EFAULT;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="414" endline="434">
{
    sigset_t s;
    compat_sigset_t s32;
    int ret;
    mm_segment_t old_fs = get_fs ();
    set_fs (KERNEL_DS);
    ret = sys_rt_sigpending ((sigset_t __user *) &s, sigsetsize);
    set_fs (old_fs);
    if (!ret) {
        switch (_NSIG_WORDS) {
        case 4 :
            s32.sig[7] = (s.sig[3] >> 32);
            s32.sig[6] = s.sig[3];
        case 3 :
            s32.sig[5] = (s.sig[2] >> 32);
            s32.sig[4] = s.sig[2];
        case 2 :
            s32.sig[3] = (s.sig[1] >> 32);
            s32.sig[2] = s.sig[1];
        case 1 :
            s32.sig[1] = (s.sig[0] >> 32);
            s32.sig[0] = s.sig[0];
        }
        if (copy_to_user (set, &s32, sizeof (compat_sigset_t)))
            return -EFAULT;
    }
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="423" endline="432">
{
    switch (_NSIG_WORDS) {
    case 4 :
        s32.sig[7] = (s.sig[3] >> 32);
        s32.sig[6] = s.sig[3];
    case 3 :
        s32.sig[5] = (s.sig[2] >> 32);
        s32.sig[4] = s.sig[2];
    case 2 :
        s32.sig[3] = (s.sig[1] >> 32);
        s32.sig[2] = s.sig[1];
    case 1 :
        s32.sig[1] = (s.sig[0] >> 32);
        s32.sig[0] = s.sig[0];
    }
    if (copy_to_user (set, &s32, sizeof (compat_sigset_t)))
        return -EFAULT;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="424" endline="429">
{
case 4 :
    s32.sig[7] = (s.sig[3] >> 32);
    s32.sig[6] = s.sig[3];
case 3 :
    s32.sig[5] = (s.sig[2] >> 32);
    s32.sig[4] = s.sig[2];
case 2 :
    s32.sig[3] = (s.sig[1] >> 32);
    s32.sig[2] = s.sig[1];
case 1 :
    s32.sig[1] = (s.sig[0] >> 32);
    s32.sig[0] = s.sig[0];
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="438" endline="449">
{
    siginfo_t info;
    int ret;
    mm_segment_t old_fs = get_fs ();
    if (copy_siginfo_from_user32 (&info, uinfo))
        return -EFAULT;
    set_fs (KERNEL_DS);
    ret = sys_rt_sigqueueinfo (pid, sig, (siginfo_t __user *) &info);
    set_fs (old_fs);
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="510" endline="513">
{
    return sys_pread64 (fd, ubuf, count, ((loff_t) AA (poshi) << 32) | AA (poslo));
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="517" endline="520">
{
    return sys_pwrite64 (fd, ubuf, count, ((loff_t) AA (poshi) << 32) | AA (poslo));
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="524" endline="534">
{
    int ret;
    if (personality (current->personality) == PER_LINUX32 && personality == PER_LINUX)
        personality = PER_LINUX32;
    ret = sys_personality (personality);
    if (ret == PER_LINUX32)
        ret = PER_LINUX;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="538" endline="554">
{
    mm_segment_t old_fs = get_fs ();
    int ret;
    off_t of;
    if (offset && get_user (of, offset))
        return -EFAULT;
    set_fs (KERNEL_DS);
    ret = sys_sendfile (out_fd, in_fd, offset ? (off_t __user *) &of : NULL, count);
    set_fs (old_fs);
    if (offset && put_user (of, offset))
        return -EFAULT;
    return ret;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="559" endline="578">
{
    struct mm_struct *mm = current->mm;
    unsigned long error;
    struct file *file = NULL;
    flags &= ~(MAP_EXECUTABLE | MAP_DENYWRITE);
    if (!(flags & MAP_ANONYMOUS)) {
        file = fget (fd);
        if (!file)
            return -EBADF;
    }
    down_write (& mm -> mmap_sem);
    error = do_mmap_pgoff (file, addr, len, prot, flags, pgoff);
    up_write (& mm -> mmap_sem);
    if (file)
        fput (file);
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="565" endline="569">
{
    file = fget (fd);
    if (!file)
        return -EBADF;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="581" endline="615">
{
    char *arch = "x86_64";
    int err;
    if (!name)
        return -EFAULT;
    if (!access_ok (VERIFY_WRITE, name, sizeof (struct oldold_utsname)))
        return -EFAULT;
    down_read (& uts_sem);
    err = __copy_to_user (&name->sysname, &utsname ()->sysname, __OLD_UTS_LEN);
    err |= __put_user (0, name->sysname + __OLD_UTS_LEN);
    err |= __copy_to_user (&name->nodename, &utsname ()->nodename, __OLD_UTS_LEN);
    err |= __put_user (0, name->nodename + __OLD_UTS_LEN);
    err |= __copy_to_user (&name->release, &utsname ()->release, __OLD_UTS_LEN);
    err |= __put_user (0, name->release + __OLD_UTS_LEN);
    err |= __copy_to_user (&name->version, &utsname ()->version, __OLD_UTS_LEN);
    err |= __put_user (0, name->version + __OLD_UTS_LEN);
    if (personality (current->personality) == PER_LINUX32)
        arch = "i686";
    err |= __copy_to_user (&name->machine, arch, strlen (arch) +1);
    up_read (& uts_sem);
    err = err ? -EFAULT : 0;
    return err;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="618" endline="630">
{
    int err;
    if (!name)
        return -EFAULT;
    down_read (& uts_sem);
    err = copy_to_user (name, utsname (), sizeof (*name));
    up_read (& uts_sem);
    if (personality (current->personality) == PER_LINUX32)
        err |= copy_to_user (&name->machine, "i686", 5);
    return err ? -EFAULT : 0;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="634" endline="645">
{
    long error;
    char *filename;
    filename = getname (name);
    error = PTR_ERR (filename);
    if (IS_ERR (filename))
        return error;
    error = compat_do_execve (filename, argv, envp, regs);
    putname (filename);
    return error;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="649" endline="656">
{
    void __user *parent_tid = (void __user *) regs->dx;
    void __user *child_tid = (void __user *) regs->di;
    if (!newsp)
        newsp = regs->sp;
    return do_fork (clone_flags, newsp, regs, 0, parent_tid, child_tid);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="663" endline="665">
{
    return sys_lseek (fd, offset, whence);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="668" endline="670">
{
    return sys_kill (pid, sig);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="674" endline="679">
{
    return sys_fadvise64_64 (fd, (((u64) offset_high) << 32) | offset_low, (((u64) len_high) << 32) | len_low, advice);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="682" endline="693">
{
    struct task_struct *me = current;
    static char lastcomm [sizeof (me->comm)];
    if (strncmp (lastcomm, me->comm, sizeof (lastcomm))) {
        compat_printk (KERN_INFO "%s: vm86 mode not supported on 64 bit kernel\n", me -> comm);
        strncpy (lastcomm, me -> comm, sizeof (lastcomm));
    }
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="686" endline="691">
{
    compat_printk (KERN_INFO "%s: vm86 mode not supported on 64 bit kernel\n", me -> comm);
    strncpy (lastcomm, me -> comm, sizeof (lastcomm));
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="697" endline="699">
{
    return sys_lookup_dcookie (((u64) addr_high << 32) | addr_low, buf, len);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="703" endline="705">
{
    return sys_readahead (fd, ((u64) off_hi << 32) | off_lo, count);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="709" endline="713">
{
    return sys_sync_file_range (fd, ((u64) off_hi << 32) | off_low, ((u64) n_hi << 32) | n_low, flags);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="717" endline="720">
{
    return sys_fadvise64_64 (fd, ((u64) offset_hi << 32) | offset_lo, len, advice);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/sys_ia32.c.ifdefed" startline="725" endline="728">
{
    return sys_fallocate (fd, mode, ((u64) offset_hi << 32) | offset_lo, ((u64) len_hi << 32) | len_lo);
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/ipc32.c.ifdefed" startline="15" endline="54">
{
    int version;
    version = call >> 16;
    call &= 0xffff;
    switch (call) {
    case SEMOP :
        return sys_semtimedop (first, compat_ptr (ptr), second, NULL);
    case SEMTIMEDOP :
        return compat_sys_semtimedop (first, compat_ptr (ptr), second, compat_ptr (fifth));
    case SEMGET :
        return sys_semget (first, second, third);
    case SEMCTL :
        return compat_sys_semctl (first, second, third, compat_ptr (ptr));
    case MSGSND :
        return compat_sys_msgsnd (first, second, third, compat_ptr (ptr));
    case MSGRCV :
        return compat_sys_msgrcv (first, second, fifth, third, version, compat_ptr (ptr));
    case MSGGET :
        return sys_msgget ((key_t) first, second);
    case MSGCTL :
        return compat_sys_msgctl (first, second, compat_ptr (ptr));
    case SHMAT :
        return compat_sys_shmat (first, second, third, version, compat_ptr (ptr));
    case SHMDT :
        return sys_shmdt (compat_ptr (ptr));
    case SHMGET :
        return sys_shmget (first, (unsigned) second, third);
    case SHMCTL :
        return compat_sys_shmctl (first, second, compat_ptr (ptr));
    }
    return -ENOSYS;
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/ipc32.c.ifdefed" startline="21" endline="52">
{
case SEMOP :
    return sys_semtimedop (first, compat_ptr (ptr), second, NULL);
case SEMTIMEDOP :
    return compat_sys_semtimedop (first, compat_ptr (ptr), second, compat_ptr (fifth));
case SEMGET :
    return sys_semget (first, second, third);
case SEMCTL :
    return compat_sys_semctl (first, second, third, compat_ptr (ptr));
case MSGSND :
    return compat_sys_msgsnd (first, second, third, compat_ptr (ptr));
case MSGRCV :
    return compat_sys_msgrcv (first, second, fifth, third, version, compat_ptr (ptr));
case MSGGET :
    return sys_msgget ((key_t) first, second);
case MSGCTL :
    return compat_sys_msgctl (first, second, compat_ptr (ptr));
case SHMAT :
    return compat_sys_shmat (first, second, third, version, compat_ptr (ptr));
case SHMDT :
    return sys_shmdt (compat_ptr (ptr));
case SHMGET :
    return sys_shmget (first, (unsigned) second, third);
case SHMCTL :
    return compat_sys_shmctl (first, second, compat_ptr (ptr));
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/audit.c.ifdefed" startline="29" endline="42">
{
    switch (syscall) {
    case __NR_open :
        return 2;
    case __NR_openat :
        return 3;
    case __NR_socketcall :
        return 4;
    case __NR_execve :
        return 5;
    default :
        return 1;
    }
}
</source>
<source file="/cmpt816/tmp/arch/x86/ia32/audit.c.ifdefed" startline="30" endline="41">
{
case __NR_open :
    return 2;
case __NR_openat :
    return 3;
case __NR_socketcall :
    return 4;
case __NR_execve :
    return 5;
default :
    return 1;
}
</source>
